Starting at: 
07-06-23_18:01

 numpy seed:  2  


 pytorch seed:  2  

Key parameters-------
paths: 2560
iterations: 10
batchsize: 1000
remove neg:  False
w constaint activation:  yy_fix_jan29


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = Paper_FactorInv_Factor2
timeseries_basket['basket_desc'] = Factor2 portfolio for paper: Basic, size and value
timeseries_basket['basket_columns'] = 
['T30_real_ret', 'B10_real_ret', 'VWD_real_ret', 'Size_Lo30_real_ret', 'Value_Hi30_real_ret']
############# End: defined asset  basket #################
               Cash_nom_ret  Size_Lo30_nom_ret  ...  VWD_nom_ret  EWD_nom_ret
My identifier                                   ...                          
192601                  0.0                NaN  ...     0.000561     0.023174
192602                  0.0                NaN  ...    -0.033046    -0.053510
192603                  0.0                NaN  ...    -0.064002    -0.096824
192604                  0.0                NaN  ...     0.037029     0.032975
192605                  0.0                NaN  ...     0.012095     0.001035

[5 rows x 16 columns]
               Cash_nom_ret  Size_Lo30_nom_ret  ...  VWD_nom_ret  EWD_nom_ret
My identifier                                   ...                          
202208                  NaN            -0.0020  ...    -0.036240    -0.011556
202209                  NaN            -0.0955  ...    -0.091324    -0.099903
202210                  NaN             0.0883  ...     0.077403     0.049863
202211                  NaN            -0.0076  ...     0.052365     0.028123
202212                  NaN            -0.0457  ...    -0.057116    -0.047241

[5 rows x 16 columns]


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = Paper_FactorInv_Factor2
timeseries_basket['basket_desc'] = Factor2 portfolio for paper: Basic, size and value
timeseries_basket['basket_columns'] = 
['T30_nom_ret', 'B10_nom_ret', 'VWD_nom_ret', 'Size_Lo30_nom_ret', 'Value_Hi30_nom_ret']
############# End: defined asset  basket #################
               Size_Lo30_nom_ret  Value_Hi30_nom_ret  ...  B10_nom_ret  VWD_nom_ret
My identifier                                         ...                          
192607                    0.0014              0.0154  ...     0.005383     0.031411
192608                    0.0319              0.0561  ...     0.005363     0.028647
192609                   -0.0173             -0.0071  ...     0.005343     0.005787
192610                   -0.0294             -0.0355  ...     0.005323    -0.028996
192611                   -0.0038              0.0294  ...     0.005303     0.028554

[5 rows x 6 columns]
               Size_Lo30_nom_ret  Value_Hi30_nom_ret  ...  B10_nom_ret  VWD_nom_ret
My identifier                                         ...                          
202208                   -0.0020             -0.0164  ...    -0.043289    -0.036240
202209                   -0.0955             -0.0871  ...    -0.050056    -0.091324
202210                    0.0883              0.1486  ...    -0.014968     0.077403
202211                   -0.0076              0.0462  ...     0.040789     0.052365
202212                   -0.0457             -0.0499  ...    -0.018566    -0.057116

[5 rows x 6 columns]
Indices constructed with column names:
Index(['date_for_plt', 'Size_Lo30_nom_ret_ind', 'Value_Hi30_nom_ret_ind',
       'CPI_nom_ret_ind', 'T30_nom_ret_ind', 'B10_nom_ret_ind',
       'VWD_nom_ret_ind'],
      dtype='object')
############# Updated: defined asset basket #################
timeseries_basket['data_df_mean'] = 
T30_real_ret           0.000229
B10_real_ret           0.001637
VWD_real_ret           0.006759
Size_Lo30_real_ret     0.009939
Value_Hi30_real_ret    0.010052
dtype: float64


timeseries_basket['data_df_stdev'] = 
T30_real_ret           0.005227
B10_real_ret           0.019258
VWD_real_ret           0.053610
Size_Lo30_real_ret     0.082598
Value_Hi30_real_ret    0.072063
dtype: float64


timeseries_basket['data_df_corr'] = 
                     T30_real_ret  ...  Value_Hi30_real_ret
T30_real_ret             1.000000  ...             0.018239
B10_real_ret             0.351722  ...             0.031301
VWD_real_ret             0.068448  ...             0.909335
Size_Lo30_real_ret       0.014412  ...             0.908542
Value_Hi30_real_ret      0.018239  ...             1.000000

[5 rows x 5 columns]


timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names', 'data_df', 'data_df_mean', 'data_df_stdev', 'data_df_corr'])
############# End: updated: defined asset basket #################
-----------------------------------------------
Dates to be REMOVED due to missing values (should be at *start* only due to trading signals):
Int64Index([], dtype='int64')
-----------------------------------------------
Dates from available data for bootstrapping:
Start: 192607
End: 202212
-----------------------------------------------
Bootstrap block size: 6
-----------------------------------------------
Dates USED bootstrapping:
Start: 196307
End: 202212
-----------------------------------------------
0.0% of bootstrap sample done.
5.0% of bootstrap sample done.
10.0% of bootstrap sample done.
15.0% of bootstrap sample done.
20.0% of bootstrap sample done.
25.0% of bootstrap sample done.
30.0% of bootstrap sample done.
35.0% of bootstrap sample done.
40.0% of bootstrap sample done.
45.0% of bootstrap sample done.
50.0% of bootstrap sample done.
55.00000000000001% of bootstrap sample done.
60.0% of bootstrap sample done.
65.0% of bootstrap sample done.
70.0% of bootstrap sample done.
75.0% of bootstrap sample done.
80.0% of bootstrap sample done.
85.0% of bootstrap sample done.
90.0% of bootstrap sample done.
95.0% of bootstrap sample done.
Withdrawal NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/factor_decumulation/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/factor_decumulation/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/factor_decumulation/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/factor_decumulation/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       1       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/factor_decumulation/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/factor_decumulation/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/factor_decumulation/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/factor_decumulation/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      13  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      13  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       1              none   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 13)     True          13  
2     (13, 13)     True          13  
3      (13, 1)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
Allocation NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/factor_decumulation/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/factor_decumulation/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/factor_decumulation/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/factor_decumulation/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       5       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/factor_decumulation/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/factor_decumulation/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/factor_decumulation/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/factor_decumulation/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      13  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      13  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       5           softmax   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 13)     True          13  
2     (13, 13)     True          13  
3      (13, 5)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        5           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 5)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
{'methods': ['Adam'], 'output_progress': False, 'tol': 1e-06, 'itbound_scipy_algorithms': 1000, 'check_exit_criteria': False, 'nit_running_min': 1, 'itbound_SGD_algorithms': 10, 'nit_IterateAveragingStart': 9, 'batchsize': 1000, 'SGD_learningrate': 50.0, 'Adagrad_epsilon': 1e-08, 'Adagrad_eta': 1.0, 'Adadelta_ewma': 0.9, 'Adadelta_epsilon': 1e-08, 'RMSprop_ewma': 0.8, 'RMSprop_epsilon': 1e-08, 'RMSprop_eta': 0.1, 'Adam_ewma_1': 0.9, 'Adam_ewma_2': 0.998, 'Adam_eta': 0.0, 'Adam_epsilon': 1e-08, 'Adam_weight_decay': 0.0001, 'running_min_from_avg': False, 'running_min_from_sgd': True, 'lr_schedule': True}
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        5           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 5)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-14.4542,   6.3244],
        [-21.6430,   5.7563],
        [ -4.3192,  11.5413],
        [ 10.5369,  -0.7778],
        [ -1.2376,   0.2472],
        [ 10.1247,  -1.3231],
        [ -3.9736, -11.3762],
        [ -1.2364,   0.2468],
        [ -1.2372,   0.2485],
        [-20.3076,   1.1323],
        [ -1.7628,   0.4485],
        [ 10.9581,  -1.1977],
        [ -1.2380,   0.2488]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ 1.6353,  2.3077,  2.7537, -9.5389, -3.3575, -9.5667, -3.0303, -3.3574,
        -3.3527,  0.5916, -3.5792, -9.5250, -3.3529], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ 4.8416e+00,  8.3440e+00,  3.1889e+00, -6.5168e+00, -1.0448e-02,
         -5.2987e+00, -1.3131e+01, -1.0101e-02, -1.5220e-03,  7.0981e+00,
         -4.9385e-02, -6.1850e+00, -8.3122e-04],
        [-1.7364e-02, -2.1530e-02, -5.3872e-01, -1.7144e-01, -4.5278e-03,
         -9.4956e-02, -1.3985e-01, -4.5235e-03, -4.5531e-03, -9.8032e-03,
         -2.5353e-03, -2.0813e-01, -4.5509e-03],
        [-4.1474e+00, -2.8300e+00, -4.8798e+00,  6.5471e+00, -2.1112e-03,
          3.7359e+00,  1.2993e+01, -4.7161e-03,  1.3555e-02, -1.3893e+00,
         -3.5713e-01,  7.6811e+00,  1.3742e-02],
        [-3.9186e+00, -6.5791e+00,  1.8838e+00, -4.6285e+00, -2.9657e-02,
         -3.9012e+00,  7.3106e+00, -2.6545e-02, -2.6923e-02, -5.1802e+00,
          3.9985e-01, -6.0662e+00, -2.5000e-02],
        [-1.4405e-01,  4.3095e-02, -5.6602e+00,  1.0200e+01,  7.5546e-02,
          7.8346e+00,  5.3538e-01,  7.5140e-02,  8.0183e-02,  6.0962e-02,
          2.2457e-01,  1.0239e+01,  8.2183e-02],
        [-1.8629e+00, -1.8299e-01, -4.1163e+00,  3.7973e+00, -2.6630e-03,
          1.9743e+00,  7.1164e+00, -1.8633e-03, -3.8655e-03,  7.1234e-01,
         -3.4499e-02,  5.0399e+00, -4.8408e-03],
        [-1.7363e-02, -2.1531e-02, -5.3868e-01, -1.7143e-01, -4.5271e-03,
         -9.4948e-02, -1.3983e-01, -4.5227e-03, -4.5524e-03, -9.8038e-03,
         -2.5349e-03, -2.0811e-01, -4.5502e-03],
        [ 5.2233e+00,  9.4775e+00, -6.0526e+00, -1.5990e-02, -3.1497e-01,
         -1.6015e-02,  2.5455e+00, -3.1228e-01, -3.4322e-01,  8.1954e+00,
          1.2771e+00, -1.5643e-02, -3.4343e-01],
        [-1.7363e-02, -2.1530e-02, -5.3872e-01, -1.7144e-01, -4.5278e-03,
         -9.4956e-02, -1.3985e-01, -4.5235e-03, -4.5531e-03, -9.8032e-03,
         -2.5353e-03, -2.0813e-01, -4.5509e-03],
        [-1.7477e-02, -2.1599e-02, -5.4394e-01, -1.7278e-01, -4.6139e-03,
         -9.5884e-02, -1.4204e-01, -4.6095e-03, -4.6396e-03, -9.7664e-03,
         -2.5777e-03, -2.0974e-01, -4.6374e-03],
        [-4.3845e+00, -3.3116e+00, -3.6642e+00, -1.8621e+00,  2.4023e-01,
         -2.0626e+00,  1.4154e+01,  2.3393e-01,  2.4558e-01, -2.3118e+00,
         -5.2930e-01, -2.6583e+00,  2.4745e-01],
        [-1.8535e+00, -1.3782e-01, -3.8451e+00,  9.1882e-01, -2.2488e-02,
          5.1900e-01,  6.6365e+00, -2.2278e-02, -2.3446e-02,  6.5286e-01,
         -3.3087e-02,  1.4662e+00, -2.4032e-02],
        [-3.4185e+00, -2.2988e+00, -4.3975e+00,  5.4071e+00,  1.3531e-02,
          2.6422e+00,  1.1565e+01,  2.1897e-02,  1.7482e-02, -1.4883e+00,
         -3.0650e-01,  6.4334e+00,  1.5727e-02]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([  2.1748,  -1.7139,  -2.7922,  -1.2006,  -5.1024,  -3.9849,  -1.7140,
        -11.0701,  -1.7139,  -1.6977,  -1.6448,  -4.0085,  -2.6904],
       device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[18.7463, -0.0223, -7.4147, -6.8402, -7.3919, -3.7230, -0.0223, -9.4159,
         -0.0223, -0.0223, -7.2307, -3.0364, -5.2623]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -1.8584,   1.5354],
        [-12.1717,   1.3800],
        [ -1.9192,   1.5423],
        [-10.5652,   0.1222],
        [ 11.1492,  -0.6810],
        [  8.7778,   8.4348],
        [ -5.2611,   2.4817],
        [ -9.0888,   8.2833],
        [ -1.7881,   0.3896],
        [ 12.2036,   7.3683],
        [ -1.6626,   0.3282],
        [  3.4836,   4.1266],
        [-14.9405,  -5.0585]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -5.0680,  -1.1817,  -5.1620,   8.8596, -10.8796,   1.3780,  -8.1331,
          4.1703,  -4.4849,   3.3561,  -4.4471,  -3.4030,  -2.0440],
       device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 6.9390e-01, -3.0384e+00,  6.9157e-01, -3.6820e+00,  1.9689e+01,
         -4.4868e-01,  8.7773e-01, -5.7250e+00,  6.2621e-03, -6.4982e-01,
          2.3670e-03,  1.9306e+00,  8.7319e+00],
        [-8.3391e-01,  7.4143e+00, -9.1391e-01,  2.5283e+00, -1.3061e+01,
         -2.5758e+00, -1.6309e+00,  5.3868e+00,  4.5328e-01, -5.9747e-01,
          2.1378e-01, -8.2045e-01, -1.3988e+00],
        [-1.1901e+00, -1.9165e-01, -1.2270e+00, -8.4861e-01, -1.8080e-01,
         -1.6561e+00, -5.7497e-01,  1.8336e+00, -6.3104e-02, -1.5528e+00,
         -4.3668e-02,  1.1323e+00, -1.6608e+00],
        [-1.2081e+00, -2.4028e-01, -1.2439e+00, -7.6965e-01, -1.1340e-01,
         -1.7027e+00, -6.0399e-01,  1.8839e+00, -7.7582e-02, -1.4686e+00,
         -4.8199e-02,  1.1807e+00, -1.7475e+00],
        [-1.2143e+00, -2.6035e-01, -1.2496e+00, -7.4017e-01, -8.8292e-02,
         -1.7202e+00, -6.1481e-01,  1.9021e+00, -8.3457e-02, -1.4368e+00,
         -4.9839e-02,  1.1984e+00, -1.7790e+00],
        [-1.1902e+00, -1.9198e-01, -1.2271e+00, -8.4795e-01, -1.8035e-01,
         -1.6567e+00, -5.7514e-01,  1.8339e+00, -6.3188e-02, -1.5521e+00,
         -4.3694e-02,  1.1326e+00, -1.6615e+00],
        [-1.1861e+00, -1.8152e-01, -1.2232e+00, -8.6774e-01, -1.9590e-01,
         -1.6430e+00, -5.6864e-01,  1.8224e+00, -6.0171e-02, -1.5736e+00,
         -4.2682e-02,  1.1219e+00, -1.6403e+00],
        [-1.2123e+00, -2.5317e-01, -1.2477e+00, -7.5078e-01, -9.6970e-02,
         -1.7133e+00, -6.1113e-01,  1.8959e+00, -8.1423e-02, -1.4483e+00,
         -4.9296e-02,  1.1925e+00, -1.7679e+00],
        [-5.3891e-02,  5.6156e-01,  1.3262e-02, -3.0827e+00, -2.9470e+00,
         -1.6255e+00, -1.1565e+00,  1.6963e+01, -2.5347e-02, -5.1542e+00,
         -1.0665e-01, -8.6043e+00,  3.4776e+00],
        [-2.9821e-01,  2.3003e+00, -2.9367e-01,  2.2694e+00, -5.7721e+00,
         -3.6640e+00,  3.1122e-02, -6.7126e+00, -5.2613e-02, -4.5773e+00,
         -4.1336e-02, -7.9816e+00,  5.7028e+00],
        [-1.1958e+00, -2.0482e-01, -1.2323e+00, -8.2639e-01, -1.6107e-01,
         -1.6682e+00, -5.8353e-01,  1.8487e+00, -6.7162e-02, -1.5294e+00,
         -4.5029e-02,  1.1469e+00, -1.6860e+00],
        [ 2.0976e-01,  1.1155e-01,  2.6676e-01, -3.9453e+00,  1.4654e+00,
          1.9091e+00,  9.4995e-02, -5.3937e-01, -5.7011e-02,  6.3653e-01,
         -7.3564e-02, -3.4884e+00, -1.1061e+00],
        [-1.2040e+00, -2.2745e-01, -1.2400e+00, -7.8973e-01, -1.3009e-01,
         -1.6902e+00, -5.9691e-01,  1.8718e+00, -7.3869e-02, -1.4902e+00,
         -4.7122e-02,  1.1691e+00, -1.7262e+00]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ 3.8303, -2.9933, -4.4105, -4.3602, -4.3411, -4.4102, -4.4222, -4.3479,
        -5.2801, -0.3422, -4.3964, -4.6635, -4.3729], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-1.4597e+01,  2.9580e+00,  6.1799e-01,  6.8095e-01,  7.0424e-01,
          6.1835e-01,  6.0439e-01,  6.9639e-01,  3.8385e+00, -2.1068e+01,
          6.3675e-01, -8.7176e-01,  6.6572e-01],
        [ 8.8606e-01,  9.5761e-01, -1.2842e+00, -1.3684e+00, -1.3999e+00,
         -1.2852e+00, -1.2602e+00, -1.3874e+00,  7.9450e-01, -3.9719e+00,
         -1.3060e+00,  2.8190e+00, -1.3454e+00],
        [-2.7139e+01, -2.3062e+01, -8.8052e-02, -1.0815e-01, -1.1696e-01,
         -8.8179e-02, -8.4074e-02, -1.1379e-01, -8.5839e-03, -8.2218e-02,
         -9.3360e-02, -3.1511e-01, -1.0269e-01],
        [-2.5198e+01, -2.0092e+01, -9.1118e-02, -1.1418e-01, -1.2414e-01,
         -9.1264e-02, -8.6509e-02, -1.2057e-01, -3.4988e-03, -8.0575e-02,
         -9.7268e-02, -2.8181e-01, -1.0797e-01],
        [ 1.1755e+00,  1.1353e+00,  1.2961e+00,  1.3741e+00,  1.4035e+00,
          1.2963e+00,  1.2821e+00,  1.3944e+00,  2.4930e-01,  9.0823e+00,
          1.3206e+00, -1.3931e+00,  1.3566e+00]], device='cuda:0'))])
loaded xi:  737.17993
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.2 0.2 0.2 0.2 0.2]
W_T_mean: 1163.2358036155788
W_T_median: 890.978134320281
W_T_pctile_5: -188.92992637779946
W_T_CVAR_5_pct: -332.87933122550317
-----------------------------------------------
new min fval from sgd:  -1900.9712222339201
min fval:  -1900.9712222339201
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-14.4542,   6.3244],
        [-21.6430,   5.7563],
        [ -4.3192,  11.5413],
        [ 10.5369,  -0.7778],
        [ -1.2376,   0.2472],
        [ 10.1247,  -1.3231],
        [ -3.9736, -11.3762],
        [ -1.2364,   0.2468],
        [ -1.2372,   0.2485],
        [-20.3076,   1.1323],
        [ -1.7628,   0.4485],
        [ 10.9581,  -1.1977],
        [ -1.2380,   0.2488]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ 1.6353,  2.3077,  2.7537, -9.5389, -3.3575, -9.5667, -3.0303, -3.3574,
        -3.3527,  0.5916, -3.5792, -9.5250, -3.3529], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ 4.8416e+00,  8.3440e+00,  3.1889e+00, -6.5168e+00, -1.0448e-02,
         -5.2987e+00, -1.3131e+01, -1.0101e-02, -1.5220e-03,  7.0981e+00,
         -4.9385e-02, -6.1850e+00, -8.3122e-04],
        [-1.7364e-02, -2.1530e-02, -5.3872e-01, -1.7144e-01, -4.5278e-03,
         -9.4956e-02, -1.3985e-01, -4.5235e-03, -4.5531e-03, -9.8032e-03,
         -2.5353e-03, -2.0813e-01, -4.5509e-03],
        [-4.1474e+00, -2.8300e+00, -4.8798e+00,  6.5471e+00, -2.1112e-03,
          3.7359e+00,  1.2993e+01, -4.7161e-03,  1.3555e-02, -1.3893e+00,
         -3.5713e-01,  7.6811e+00,  1.3742e-02],
        [-3.9186e+00, -6.5791e+00,  1.8838e+00, -4.6285e+00, -2.9657e-02,
         -3.9012e+00,  7.3106e+00, -2.6545e-02, -2.6923e-02, -5.1802e+00,
          3.9985e-01, -6.0662e+00, -2.5000e-02],
        [-1.4405e-01,  4.3095e-02, -5.6602e+00,  1.0200e+01,  7.5546e-02,
          7.8346e+00,  5.3538e-01,  7.5140e-02,  8.0183e-02,  6.0962e-02,
          2.2457e-01,  1.0239e+01,  8.2183e-02],
        [-1.8629e+00, -1.8299e-01, -4.1163e+00,  3.7973e+00, -2.6630e-03,
          1.9743e+00,  7.1164e+00, -1.8633e-03, -3.8655e-03,  7.1234e-01,
         -3.4499e-02,  5.0399e+00, -4.8408e-03],
        [-1.7363e-02, -2.1531e-02, -5.3868e-01, -1.7143e-01, -4.5271e-03,
         -9.4948e-02, -1.3983e-01, -4.5227e-03, -4.5524e-03, -9.8038e-03,
         -2.5349e-03, -2.0811e-01, -4.5502e-03],
        [ 5.2233e+00,  9.4775e+00, -6.0526e+00, -1.5990e-02, -3.1497e-01,
         -1.6015e-02,  2.5455e+00, -3.1228e-01, -3.4322e-01,  8.1954e+00,
          1.2771e+00, -1.5643e-02, -3.4343e-01],
        [-1.7363e-02, -2.1530e-02, -5.3872e-01, -1.7144e-01, -4.5278e-03,
         -9.4956e-02, -1.3985e-01, -4.5235e-03, -4.5531e-03, -9.8032e-03,
         -2.5353e-03, -2.0813e-01, -4.5509e-03],
        [-1.7477e-02, -2.1599e-02, -5.4394e-01, -1.7278e-01, -4.6139e-03,
         -9.5884e-02, -1.4204e-01, -4.6095e-03, -4.6396e-03, -9.7664e-03,
         -2.5777e-03, -2.0974e-01, -4.6374e-03],
        [-4.3845e+00, -3.3116e+00, -3.6642e+00, -1.8621e+00,  2.4023e-01,
         -2.0626e+00,  1.4154e+01,  2.3393e-01,  2.4558e-01, -2.3118e+00,
         -5.2930e-01, -2.6583e+00,  2.4745e-01],
        [-1.8535e+00, -1.3782e-01, -3.8451e+00,  9.1882e-01, -2.2488e-02,
          5.1900e-01,  6.6365e+00, -2.2278e-02, -2.3446e-02,  6.5286e-01,
         -3.3087e-02,  1.4662e+00, -2.4032e-02],
        [-3.4185e+00, -2.2988e+00, -4.3975e+00,  5.4071e+00,  1.3531e-02,
          2.6422e+00,  1.1565e+01,  2.1897e-02,  1.7482e-02, -1.4883e+00,
         -3.0650e-01,  6.4334e+00,  1.5727e-02]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([  2.1748,  -1.7139,  -2.7922,  -1.2006,  -5.1024,  -3.9849,  -1.7140,
        -11.0701,  -1.7139,  -1.6977,  -1.6448,  -4.0085,  -2.6904],
       device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[18.7463, -0.0223, -7.4147, -6.8402, -7.3919, -3.7230, -0.0223, -9.4159,
         -0.0223, -0.0223, -7.2307, -3.0364, -5.2623]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -1.8584,   1.5354],
        [-12.1717,   1.3800],
        [ -1.9192,   1.5423],
        [-10.5652,   0.1222],
        [ 11.1492,  -0.6810],
        [  8.7778,   8.4348],
        [ -5.2611,   2.4817],
        [ -9.0888,   8.2833],
        [ -1.7881,   0.3896],
        [ 12.2036,   7.3683],
        [ -1.6626,   0.3282],
        [  3.4836,   4.1266],
        [-14.9405,  -5.0585]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -5.0680,  -1.1817,  -5.1620,   8.8596, -10.8796,   1.3780,  -8.1331,
          4.1703,  -4.4849,   3.3561,  -4.4471,  -3.4030,  -2.0440],
       device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 6.9390e-01, -3.0384e+00,  6.9157e-01, -3.6820e+00,  1.9689e+01,
         -4.4868e-01,  8.7773e-01, -5.7250e+00,  6.2621e-03, -6.4982e-01,
          2.3670e-03,  1.9306e+00,  8.7319e+00],
        [-8.3391e-01,  7.4143e+00, -9.1391e-01,  2.5283e+00, -1.3061e+01,
         -2.5758e+00, -1.6309e+00,  5.3868e+00,  4.5328e-01, -5.9747e-01,
          2.1378e-01, -8.2045e-01, -1.3988e+00],
        [-1.1901e+00, -1.9165e-01, -1.2270e+00, -8.4861e-01, -1.8080e-01,
         -1.6561e+00, -5.7497e-01,  1.8336e+00, -6.3104e-02, -1.5528e+00,
         -4.3668e-02,  1.1323e+00, -1.6608e+00],
        [-1.2081e+00, -2.4028e-01, -1.2439e+00, -7.6965e-01, -1.1340e-01,
         -1.7027e+00, -6.0399e-01,  1.8839e+00, -7.7582e-02, -1.4686e+00,
         -4.8199e-02,  1.1807e+00, -1.7475e+00],
        [-1.2143e+00, -2.6035e-01, -1.2496e+00, -7.4017e-01, -8.8292e-02,
         -1.7202e+00, -6.1481e-01,  1.9021e+00, -8.3457e-02, -1.4368e+00,
         -4.9839e-02,  1.1984e+00, -1.7790e+00],
        [-1.1902e+00, -1.9198e-01, -1.2271e+00, -8.4795e-01, -1.8035e-01,
         -1.6567e+00, -5.7514e-01,  1.8339e+00, -6.3188e-02, -1.5521e+00,
         -4.3694e-02,  1.1326e+00, -1.6615e+00],
        [-1.1861e+00, -1.8152e-01, -1.2232e+00, -8.6774e-01, -1.9590e-01,
         -1.6430e+00, -5.6864e-01,  1.8224e+00, -6.0171e-02, -1.5736e+00,
         -4.2682e-02,  1.1219e+00, -1.6403e+00],
        [-1.2123e+00, -2.5317e-01, -1.2477e+00, -7.5078e-01, -9.6970e-02,
         -1.7133e+00, -6.1113e-01,  1.8959e+00, -8.1423e-02, -1.4483e+00,
         -4.9296e-02,  1.1925e+00, -1.7679e+00],
        [-5.3891e-02,  5.6156e-01,  1.3262e-02, -3.0827e+00, -2.9470e+00,
         -1.6255e+00, -1.1565e+00,  1.6963e+01, -2.5347e-02, -5.1542e+00,
         -1.0665e-01, -8.6043e+00,  3.4776e+00],
        [-2.9821e-01,  2.3003e+00, -2.9367e-01,  2.2694e+00, -5.7721e+00,
         -3.6640e+00,  3.1122e-02, -6.7126e+00, -5.2613e-02, -4.5773e+00,
         -4.1336e-02, -7.9816e+00,  5.7028e+00],
        [-1.1958e+00, -2.0482e-01, -1.2323e+00, -8.2639e-01, -1.6107e-01,
         -1.6682e+00, -5.8353e-01,  1.8487e+00, -6.7162e-02, -1.5294e+00,
         -4.5029e-02,  1.1469e+00, -1.6860e+00],
        [ 2.0976e-01,  1.1155e-01,  2.6676e-01, -3.9453e+00,  1.4654e+00,
          1.9091e+00,  9.4995e-02, -5.3937e-01, -5.7011e-02,  6.3653e-01,
         -7.3564e-02, -3.4884e+00, -1.1061e+00],
        [-1.2040e+00, -2.2745e-01, -1.2400e+00, -7.8973e-01, -1.3009e-01,
         -1.6902e+00, -5.9691e-01,  1.8718e+00, -7.3869e-02, -1.4902e+00,
         -4.7122e-02,  1.1691e+00, -1.7262e+00]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ 3.8303, -2.9933, -4.4105, -4.3602, -4.3411, -4.4102, -4.4222, -4.3479,
        -5.2801, -0.3422, -4.3964, -4.6635, -4.3729], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-1.4597e+01,  2.9580e+00,  6.1799e-01,  6.8095e-01,  7.0424e-01,
          6.1835e-01,  6.0439e-01,  6.9639e-01,  3.8385e+00, -2.1068e+01,
          6.3675e-01, -8.7176e-01,  6.6572e-01],
        [ 8.8606e-01,  9.5761e-01, -1.2842e+00, -1.3684e+00, -1.3999e+00,
         -1.2852e+00, -1.2602e+00, -1.3874e+00,  7.9450e-01, -3.9719e+00,
         -1.3060e+00,  2.8190e+00, -1.3454e+00],
        [-2.7139e+01, -2.3062e+01, -8.8052e-02, -1.0815e-01, -1.1696e-01,
         -8.8179e-02, -8.4074e-02, -1.1379e-01, -8.5839e-03, -8.2218e-02,
         -9.3360e-02, -3.1511e-01, -1.0269e-01],
        [-2.5198e+01, -2.0092e+01, -9.1118e-02, -1.1418e-01, -1.2414e-01,
         -9.1264e-02, -8.6509e-02, -1.2057e-01, -3.4988e-03, -8.0575e-02,
         -9.7268e-02, -2.8181e-01, -1.0797e-01],
        [ 1.1755e+00,  1.1353e+00,  1.2961e+00,  1.3741e+00,  1.4035e+00,
          1.2963e+00,  1.2821e+00,  1.3944e+00,  2.4930e-01,  9.0823e+00,
          1.3206e+00, -1.3931e+00,  1.3566e+00]], device='cuda:0'))])
xi:  [737.17993]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 995.3822960205923
W_T_median: 904.020197746532
W_T_pctile_5: 707.7571767657987
W_T_CVAR_5_pct: 327.1668986021727
Average q (qsum/M+1):  50.83846947454637
Optimal xi:  [737.17993]
Expected(across Rb) median(across samples) p_equity:  0.2786677675166478
obj fun:  tensor(-1900.9712, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
/home/marcchen/Documents/factor_decumulation/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/factor_decumulation/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: Paper_FactorInv_Factor2
Objective function: mean_cvar_single_level
Tracing param: 1.0
-----------------------------------------------

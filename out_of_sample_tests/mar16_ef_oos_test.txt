Starting at: 
17-03-23_10:30

 numpy seed:  3  


 pytorch seed:  3  

Key parameters-------
paths: 256000
iterations: 10
batchsize: 1000
remove neg:  False
w constaint activation:  yy_fix_jan29


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = B10_and_VWD
timeseries_basket['basket_desc'] = CRSP data: B10 and VWD
timeseries_basket['basket_columns'] = 
['B10_real_ret', 'VWD_real_ret']
############# End: defined asset  basket #################
-----------------------------------------------
No need to read market data.
-----------------------------------------------
3.3333333333333335% of MC simulations done.
6.666666666666667% of MC simulations done.
10.0% of MC simulations done.
13.333333333333334% of MC simulations done.
16.666666666666664% of MC simulations done.
20.0% of MC simulations done.
23.333333333333332% of MC simulations done.
26.666666666666668% of MC simulations done.
30.0% of MC simulations done.
33.33333333333333% of MC simulations done.
36.666666666666664% of MC simulations done.
40.0% of MC simulations done.
43.333333333333336% of MC simulations done.
46.666666666666664% of MC simulations done.
50.0% of MC simulations done.
53.333333333333336% of MC simulations done.
56.666666666666664% of MC simulations done.
60.0% of MC simulations done.
63.33333333333333% of MC simulations done.
66.66666666666666% of MC simulations done.
70.0% of MC simulations done.
73.33333333333333% of MC simulations done.
76.66666666666667% of MC simulations done.
80.0% of MC simulations done.
83.33333333333334% of MC simulations done.
86.66666666666667% of MC simulations done.
90.0% of MC simulations done.
93.33333333333333% of MC simulations done.
96.66666666666667% of MC simulations done.
100.0% of MC simulations done.
Withdrawal NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       1       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      10  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      10  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       1              none   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 10)     True          10  
2     (10, 10)     True          10  
3      (10, 1)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
Allocation NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       2       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      10  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      10  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       2           softmax   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 10)     True          10  
2     (10, 10)     True          10  
3      (10, 2)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
{'methods': ['Adam'], 'output_progress': False, 'tol': 1e-06, 'itbound_scipy_algorithms': 1000, 'check_exit_criteria': False, 'nit_running_min': 1, 'itbound_SGD_algorithms': 10, 'nit_IterateAveragingStart': 9, 'batchsize': 1000, 'SGD_learningrate': 50.0, 'Adagrad_epsilon': 1e-08, 'Adagrad_eta': 1.0, 'Adadelta_ewma': 0.9, 'Adadelta_epsilon': 1e-08, 'RMSprop_ewma': 0.8, 'RMSprop_epsilon': 1e-08, 'RMSprop_eta': 0.1, 'Adam_ewma_1': 0.9, 'Adam_ewma_2': 0.998, 'Adam_eta': 0.05, 'Adam_epsilon': 1e-08, 'Adam_weight_decay': 0.0001, 'running_min_from_avg': False, 'running_min_from_sgd': True, 'lr_schedule': True}
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.4577,  1.2653],
        [16.0850,  2.3697],
        [-2.7263,  5.1040],
        [-4.0217,  7.8175],
        [-0.4577,  1.2653],
        [-0.4577,  1.2653],
        [-0.4578,  1.2654],
        [-0.4577,  1.2653],
        [-0.4577,  1.2653],
        [-0.4577,  1.2653]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-0.7873, -8.9837,  6.8428, 13.6857, -0.7873, -0.7873, -0.7875, -0.7873,
        -0.7873, -0.7873], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-7.4377e-03, -2.2978e-01, -3.1465e-02, -2.0806e-01, -7.4377e-03,
         -7.4377e-03, -7.4321e-03, -7.4377e-03, -7.4377e-03, -7.4377e-03],
        [-7.4377e-03, -2.2978e-01, -3.1465e-02, -2.0806e-01, -7.4377e-03,
         -7.4377e-03, -7.4321e-03, -7.4377e-03, -7.4377e-03, -7.4377e-03],
        [ 7.3508e-02,  5.0414e+00,  1.0943e+00,  6.2456e+00,  7.3508e-02,
          7.3509e-02,  7.0200e-02,  7.3508e-02,  7.3509e-02,  7.3509e-02],
        [ 5.7226e-02, -8.0734e+00, -1.8193e+00, -9.5966e+00,  5.7226e-02,
          5.7226e-02,  5.2952e-02,  5.7226e-02,  5.7226e-02,  5.7226e-02],
        [-7.4377e-03, -2.2978e-01, -3.1465e-02, -2.0806e-01, -7.4377e-03,
         -7.4377e-03, -7.4321e-03, -7.4377e-03, -7.4377e-03, -7.4377e-03],
        [-7.4377e-03, -2.2978e-01, -3.1465e-02, -2.0806e-01, -7.4377e-03,
         -7.4377e-03, -7.4321e-03, -7.4377e-03, -7.4377e-03, -7.4377e-03],
        [-7.4377e-03, -2.2978e-01, -3.1465e-02, -2.0806e-01, -7.4377e-03,
         -7.4377e-03, -7.4321e-03, -7.4377e-03, -7.4377e-03, -7.4377e-03],
        [-7.4377e-03, -2.2978e-01, -3.1465e-02, -2.0806e-01, -7.4377e-03,
         -7.4377e-03, -7.4321e-03, -7.4377e-03, -7.4377e-03, -7.4377e-03],
        [ 5.3337e-02,  5.5206e+00,  1.1622e+00,  6.7651e+00,  5.3337e-02,
          5.3337e-02,  4.9471e-02,  5.3337e-02,  5.3337e-02,  5.3337e-02],
        [-7.4377e-03, -2.2978e-01, -3.1465e-02, -2.0806e-01, -7.4377e-03,
         -7.4377e-03, -7.4321e-03, -7.4377e-03, -7.4377e-03, -7.4377e-03]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.8237, -0.8237, -3.5452,  5.2447, -0.8237, -0.8237, -0.8237, -0.8237,
        -3.7974, -0.8237], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.0208,  -0.0208,   6.9678, -12.6609,  -0.0208,  -0.0208,  -0.0208,
          -0.0208,   7.7604,  -0.0208]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[-10.7263, -13.1469],
        [-17.7377,  -5.0206],
        [-11.1023,   0.8577],
        [ 11.6619,   8.6886],
        [-10.5392,   2.6417],
        [ -2.4395,  -0.6981],
        [ -0.4844,   2.9186],
        [  0.8597,  11.6175],
        [ 11.2700,   4.0051],
        [ -0.9265,   5.5959]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([-13.9266,  -0.7646,  11.5515,   4.1831,   6.7658,  -4.1519,  -2.1829,
          8.8985,  -0.7432,   2.8173], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 3.0475e+00,  1.1022e+00, -6.3736e+00, -2.5142e-01, -3.9344e+00,
          1.6201e+00, -3.1178e-02, -1.5480e-02, -9.8576e+00, -4.3613e-02],
        [-1.2498e+01,  7.0245e-01,  1.7777e+00, -5.0157e+00, -2.8531e-01,
          6.2946e-01, -1.4079e-01, -1.6630e+01, -2.0693e+00, -1.2411e+00],
        [-2.1999e+00, -1.2114e+01,  5.8741e+00, -6.9786e+00, -3.0692e+00,
          1.0144e-01, -8.9981e-02, -2.2412e+00, -1.9764e+00, -9.6344e-01],
        [ 3.1513e+00,  3.6666e+00, -2.6663e+00,  3.3714e+00,  1.2162e+00,
          5.2361e-01, -7.5250e-02,  4.0641e+00,  1.4277e+00,  6.2683e-01],
        [-4.6047e+00, -2.5371e+00, -9.5873e-01,  1.1041e+00, -6.3282e+00,
         -3.0936e+00,  7.2113e-01, -6.3383e+00,  1.7360e+00, -8.7781e-01],
        [-1.1099e+00, -1.0486e+00, -9.2523e-01, -1.0886e+00, -6.4904e-02,
         -1.0421e+00, -2.7735e-02, -5.6701e-01, -1.1340e+00, -2.7431e-01],
        [-2.1940e+00, -1.2594e+00,  6.4763e-01, -2.3597e+00, -7.8884e-01,
         -8.8805e-01,  2.9522e-02, -1.1478e+00, -1.7458e+00, -3.2159e-01],
        [-1.1098e+00, -1.0485e+00, -9.2522e-01, -1.0885e+00, -6.4893e-02,
         -1.0421e+00, -2.7735e-02, -5.6702e-01, -1.1339e+00, -2.7431e-01],
        [-1.1098e+00, -1.0485e+00, -9.2522e-01, -1.0885e+00, -6.4893e-02,
         -1.0421e+00, -2.7735e-02, -5.6702e-01, -1.1339e+00, -2.7431e-01],
        [-8.2422e+00, -5.0868e+00, -5.9050e+00, -2.1319e+00, -1.7731e+00,
         -6.6556e+00,  1.2061e+00, -4.2185e+00,  2.3940e+00, -5.2436e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ 1.5410,  1.4908, -0.4017,  0.3101,  5.4848, -2.2349, -1.3846, -2.2351,
        -2.2351, 14.2815], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-4.7582, -8.0263, -6.5886,  4.6334, -0.5517,  0.0259, -0.1988,  0.0238,
          0.0239, -4.0167],
        [ 4.3899,  8.0259,  6.5914, -4.5695,  0.4899, -0.0218,  0.1972, -0.0239,
         -0.0239,  4.3113]], device='cuda:0'))])
loaded xi:  -489.0211
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -1739.7664936188473
new min fval from sgd:  -1739.8144867265514
min fval:  -1739.8144867265514
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.6039,  1.4143],
        [16.1926,  2.2607],
        [-2.7906,  5.1895],
        [-4.0661,  7.8832],
        [-0.6039,  1.4143],
        [-0.6039,  1.4143],
        [-0.6039,  1.4143],
        [-0.6039,  1.4143],
        [-0.6039,  1.4143],
        [-0.6039,  1.4143]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-0.9389, -8.8784,  6.7519, 13.6215, -0.9389, -0.9389, -0.9390, -0.9389,
        -0.9389, -0.9389], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ 0.0384, -0.3307,  0.0576, -0.1063,  0.0384,  0.0384,  0.0384,  0.0384,
          0.0384,  0.0384],
        [ 0.0384, -0.3307,  0.0576, -0.1063,  0.0384,  0.0384,  0.0384,  0.0384,
          0.0384,  0.0384],
        [ 0.0457,  5.1488,  1.0044,  6.1614,  0.0457,  0.0457,  0.0424,  0.0457,
          0.0457,  0.0457],
        [ 0.0824, -8.1832, -1.7314, -9.5153,  0.0824,  0.0824,  0.0781,  0.0824,
          0.0824,  0.0824],
        [ 0.0384, -0.3307,  0.0576, -0.1063,  0.0384,  0.0384,  0.0384,  0.0384,
          0.0384,  0.0384],
        [ 0.0384, -0.3307,  0.0576, -0.1063,  0.0384,  0.0384,  0.0384,  0.0384,
          0.0384,  0.0384],
        [ 0.0384, -0.3307,  0.0576, -0.1063,  0.0384,  0.0384,  0.0384,  0.0384,
          0.0384,  0.0384],
        [ 0.0384, -0.3307,  0.0576, -0.1063,  0.0384,  0.0384,  0.0384,  0.0384,
          0.0384,  0.0384],
        [ 0.0260,  5.6283,  1.0727,  6.6813,  0.0260,  0.0260,  0.0221,  0.0260,
          0.0260,  0.0260],
        [ 0.0384, -0.3307,  0.0576, -0.1063,  0.0384,  0.0384,  0.0384,  0.0384,
          0.0384,  0.0384]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.7602, -0.7602, -3.4659,  5.1633, -0.7602, -0.7602, -0.7602, -0.7602,
        -3.7178, -0.7602], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[  0.0534,   0.0534,   6.9409, -12.5774,   0.0534,   0.0534,   0.0534,
           0.0534,   7.7338,   0.0534]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[-10.8006, -13.1794],
        [-17.6441,  -5.1119],
        [-11.0627,   0.7861],
        [ 11.5472,   8.7928],
        [-10.5112,   2.7507],
        [ -2.4182,  -0.6850],
        [ -0.5697,   2.7449],
        [  0.8943,  11.6143],
        [ 11.2387,   4.0655],
        [ -0.9407,   5.6991]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([-13.8727,  -0.6754,  11.5839,   4.1041,   6.7882,  -4.1959,  -2.2776,
          8.8950,  -0.7156,   2.6845], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 3.2155e+00,  9.7258e-01, -6.4146e+00, -1.8484e-01, -4.0987e+00,
          1.7015e+00, -1.2115e-01, -1.2385e-02, -9.7223e+00, -8.3918e-02],
        [-1.2573e+01,  6.9573e-01,  1.7878e+00, -4.9591e+00, -2.9063e-01,
          6.3380e-01, -1.3670e-01, -1.6616e+01, -2.0068e+00, -1.2251e+00],
        [-2.2760e+00, -1.2340e+01,  5.6967e+00, -7.0906e+00, -3.3224e+00,
         -4.4118e-02, -2.9640e-01, -2.4073e+00, -2.0636e+00, -1.0707e+00],
        [ 3.1709e+00,  3.7632e+00, -2.5952e+00,  3.3797e+00,  1.3123e+00,
          5.5512e-01,  1.2138e-01,  4.1169e+00,  1.4395e+00,  7.7060e-01],
        [-4.6082e+00, -2.5267e+00, -9.4472e-01,  1.1093e+00, -6.2219e+00,
         -2.9770e+00,  6.6222e-01, -6.3332e+00,  1.7372e+00, -8.7428e-01],
        [-1.2940e+00, -1.2376e+00, -9.9215e-01, -1.1120e+00, -2.4881e-01,
         -1.1264e+00,  1.5010e-01, -3.9428e-01, -1.2090e+00, -7.9646e-02],
        [-2.2117e+00, -1.3256e+00,  5.8251e-01, -2.2711e+00, -8.5757e-01,
         -8.2306e-01, -3.7270e-02, -1.1692e+00, -1.6653e+00, -3.3301e-01],
        [-1.2939e+00, -1.2375e+00, -9.9213e-01, -1.1119e+00, -2.4877e-01,
         -1.1264e+00,  1.5011e-01, -3.9428e-01, -1.2089e+00, -7.9645e-02],
        [-1.2939e+00, -1.2375e+00, -9.9213e-01, -1.1119e+00, -2.4877e-01,
         -1.1264e+00,  1.5011e-01, -3.9428e-01, -1.2089e+00, -7.9645e-02],
        [-8.3719e+00, -5.0936e+00, -5.8597e+00, -2.1681e+00, -1.7633e+00,
         -6.5924e+00,  1.0737e+00, -4.2624e+00,  2.3641e+00, -5.8667e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ 1.7002,  1.5125, -0.5118,  0.3467,  5.4870, -2.3538, -1.3977, -2.3541,
        -2.3541, 14.3362], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-4.8389, -8.0367, -6.4677,  4.5327, -0.6342, -0.0945, -0.2030, -0.0965,
         -0.0965, -4.0194],
        [ 4.4707,  8.0363,  6.4704, -4.4688,  0.5723,  0.0985,  0.2014,  0.0965,
          0.0965,  4.3140]], device='cuda:0'))])
xi:  [-489.25323]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 367.64500201797074
W_T_median: 168.12991267753392
W_T_pctile_5: -502.6205927212873
W_T_CVAR_5_pct: -624.9487836957767
Average q (qsum/M+1):  57.13232815650202
Optimal xi:  [-489.25323]
Expected(across Rb) median(across samples) p_equity:  0.30196787195163777
obj fun:  tensor(-1739.8145, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 0.05
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-3.9530, -6.5935],
        [-4.2095, -7.1137],
        [-0.5164,  1.2203],
        [-4.2235, -7.0429],
        [-0.5161,  1.2205],
        [-0.5161,  1.2205],
        [-8.0767,  6.2485],
        [-0.5161,  1.2205],
        [-0.5161,  1.2205],
        [-5.5175,  6.6329]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-6.3626, -6.8108, -1.0627, -6.6425, -1.0625, -1.0625, 10.0755, -1.0625,
        -1.0625,  7.5087], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-3.6522, -5.0090, -0.0213, -5.7398, -0.0140, -0.0140,  7.5544, -0.0140,
         -0.0140,  3.5584],
        [-0.0877, -0.0887, -0.0167, -0.0943, -0.0167, -0.0167, -0.1064, -0.0167,
         -0.0167, -0.0279],
        [-2.4671, -3.3347,  0.0270, -3.6471,  0.0315,  0.0315,  5.2154,  0.0315,
          0.0315,  1.9645],
        [-0.0877, -0.0887, -0.0167, -0.0943, -0.0167, -0.0167, -0.1064, -0.0167,
         -0.0167, -0.0279],
        [ 2.2579,  2.9349,  0.0414,  3.2052,  0.0402,  0.0402, -3.7379,  0.0402,
          0.0402, -1.2358],
        [-0.0877, -0.0887, -0.0167, -0.0943, -0.0167, -0.0167, -0.1064, -0.0167,
         -0.0167, -0.0279],
        [ 4.2915,  5.5018,  0.0889,  6.5722,  0.0994,  0.0994, -8.2340,  0.0994,
          0.0994, -4.2372],
        [-0.0877, -0.0887, -0.0167, -0.0943, -0.0167, -0.0167, -0.1064, -0.0167,
         -0.0167, -0.0279],
        [-0.0877, -0.0887, -0.0167, -0.0943, -0.0167, -0.0167, -0.1064, -0.0167,
         -0.0167, -0.0279],
        [-2.4347, -3.2952,  0.0273, -3.6188,  0.0316,  0.0316,  5.1701,  0.0316,
          0.0316,  1.9296]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([ 0.8825, -0.6611,  0.3061, -0.6611, -1.2865, -0.6611, -1.3087, -0.6611,
        -0.6611,  0.2922], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 8.6556e+00, -1.0256e-02,  4.8116e+00, -1.0256e-02, -3.7963e+00,
         -1.0256e-02, -1.0723e+01, -1.0256e-02, -1.0256e-02,  4.7419e+00]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -5.6567,   7.9237],
        [-10.2275,   2.5919],
        [  6.7828,   3.4934],
        [  6.1748,  -1.3434],
        [-12.4596,  -3.6344],
        [  2.6133,  -0.1700],
        [ -1.1366,  13.0466],
        [-11.2255, -15.1498],
        [ 11.6862,  -0.5650],
        [ 15.0612,   8.6661]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([  6.4890,   6.4381,  -3.7935, -10.7406,  -0.6264,   1.9752,  11.4260,
        -14.8960, -10.0834,   5.8228], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ -1.6231,  -2.4053,  -0.2640,  -8.4041,   5.3185,   0.2654,  -1.3684,
           8.7672, -10.2807,  -8.6776],
        [ -3.9665,   5.0795,   0.1696,  -1.7930,   4.1090,  -0.8083, -10.1188,
          -9.2054,  -2.6351,  -0.6728],
        [ -0.3961,  -0.9307,  -0.3800,  -0.9658,  -0.9890,  -2.0713,  -1.4317,
          -0.4921,  -1.2113,  -0.6785],
        [ -4.8990,   3.3279,  -0.0935,  -4.2385,   8.3586,  -3.3731,  -8.5724,
           7.2564,  -8.9073, -10.0585],
        [  0.0219,  -0.0778,  -0.1180,  -0.2005,  -0.2112,  -1.7245,  -0.2512,
          -0.4026,  -0.7203,  -1.3589],
        [  0.0219,  -0.0778,  -0.1181,  -0.2005,  -0.2112,  -1.7245,  -0.2512,
          -0.4026,  -0.7203,  -1.3589],
        [  1.2566,   2.4863,   0.0544,   0.8148,   1.4905,  -3.0261,   5.0189,
           0.9466,  -2.5368,   0.9221],
        [ -0.6847,  -1.5610,  -1.0849,  -1.9966,  -1.7324,  -1.4568,  -2.5666,
          -0.1906,  -1.1604,  -0.5750],
        [ -0.9292,   0.5187,  -1.7203,  -1.0731,  -1.7741,  -1.5667,  -3.4338,
          -0.2885,  -1.1052,   0.8110],
        [ -0.4396,   1.5734,  -1.8535,   2.1121,   6.1013,  -3.9868,   4.4713,
          -6.3593,   1.8730,  -0.9565]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-2.2216, -2.1385, -2.1091, -5.0481, -1.7535, -1.7535, -3.4560, -1.4954,
        -2.1527, -4.5197], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ -5.6341,  -7.4803,  -0.9328,  13.6144,   0.0592,   0.0592,   0.7312,
          -2.5920,  -3.3989,   3.2572],
        [  5.6080,   7.3290,   0.9328, -13.6127,  -0.0592,  -0.0592,  -0.6412,
           2.5921,   3.4002,  -3.2576]], device='cuda:0'))])
loaded xi:  -244.3079
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -1672.33045271355
new min fval from sgd:  -1672.3568243838047
min fval:  -1672.3568243838047
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-3.9272, -6.6597],
        [-4.1789, -7.1819],
        [-0.7086,  1.4940],
        [-4.1978, -7.1100],
        [-0.7083,  1.4940],
        [-0.7083,  1.4940],
        [-8.1428,  6.3388],
        [-0.7083,  1.4940],
        [-0.7083,  1.4940],
        [-5.5878,  6.7056]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-6.2992, -6.7454, -1.3382, -6.5783, -1.3378, -1.3378,  9.9877, -1.3378,
        -1.3378,  7.4385], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-3.7231e+00, -5.0813e+00, -5.6793e-02, -5.8119e+00, -4.9471e-02,
         -4.9471e-02,  7.4774e+00, -4.9472e-02, -4.9471e-02,  3.4938e+00],
        [-3.6372e-01, -3.6411e-01, -2.7669e-01, -3.7000e-01, -2.7670e-01,
         -2.7670e-01, -3.8152e-01, -2.7670e-01, -2.7670e-01, -3.0170e-01],
        [-2.5396e+00, -3.4086e+00, -1.1298e-02, -3.7207e+00, -6.7825e-03,
         -6.7825e-03,  5.1369e+00, -6.7826e-03, -6.7826e-03,  1.8984e+00],
        [-3.6372e-01, -3.6411e-01, -2.7669e-01, -3.7000e-01, -2.7670e-01,
         -2.7670e-01, -3.8152e-01, -2.7670e-01, -2.7670e-01, -3.0170e-01],
        [ 2.3283e+00,  3.0067e+00,  7.9190e-02,  3.2768e+00,  7.7990e-02,
          7.7990e-02, -3.6614e+00,  7.7990e-02,  7.7990e-02, -1.1720e+00],
        [-3.6372e-01, -3.6411e-01, -2.7669e-01, -3.7000e-01, -2.7670e-01,
         -2.7670e-01, -3.8152e-01, -2.7670e-01, -2.7670e-01, -3.0170e-01],
        [ 4.3613e+00,  5.5730e+00,  1.2231e-01,  6.6431e+00,  1.3274e-01,
          1.3274e-01, -8.1580e+00,  1.3274e-01,  1.3274e-01, -4.1736e+00],
        [-3.6372e-01, -3.6411e-01, -2.7669e-01, -3.7000e-01, -2.7670e-01,
         -2.7670e-01, -3.8152e-01, -2.7670e-01, -2.7670e-01, -3.0170e-01],
        [-3.6372e-01, -3.6411e-01, -2.7669e-01, -3.7000e-01, -2.7670e-01,
         -2.7670e-01, -3.8152e-01, -2.7670e-01, -2.7670e-01, -3.0170e-01],
        [-2.5073e+00, -3.3692e+00, -1.1088e-02, -3.6925e+00, -6.7370e-03,
         -6.7370e-03,  5.0915e+00, -6.7371e-03, -6.7371e-03,  1.8635e+00]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([ 0.8565, -0.9447,  0.2774, -0.9447, -1.2576, -0.9447, -1.2848, -0.9447,
        -0.9447,  0.2634], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[  8.6299,  -0.0250,   4.7768,  -0.0250,  -3.8327,  -0.0250, -10.7546,
          -0.0250,  -0.0250,   4.7070]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -5.7445,   7.9765],
        [-10.3945,   2.7224],
        [  6.6373,   3.6518],
        [  6.0000,  -1.1638],
        [-12.4263,  -3.6620],
        [  2.6302,  -0.2525],
        [ -0.9957,  13.0742],
        [-11.2472, -15.2056],
        [ 11.5277,  -0.4481],
        [ 14.9626,   8.7576]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([  6.4294,   6.2029,  -3.9282, -10.9060,  -0.6456,   2.0415,  11.4102,
        -14.7788, -10.2293,   5.7517], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ -1.6436,  -2.3320,  -0.2889,  -8.3521,   5.4381,   0.3281,  -1.3889,
           8.8364, -10.1395,  -8.6839],
        [ -3.9396,   5.0810,   0.3134,  -1.6040,   4.0950,  -0.7323, -10.0834,
          -9.4253,  -2.4607,  -0.5826],
        [ -0.3866,  -0.8514,  -0.5223,  -0.9460,  -0.8927,  -2.0310,  -1.6103,
          -0.3780,  -1.0860,  -0.6516],
        [ -4.6809,   3.3996,  -0.2105,  -4.1219,   8.4506,  -3.2878,  -8.3334,
           7.3402,  -8.7925, -10.2169],
        [ -0.1789,  -0.1994,  -0.0613,  -0.1162,  -0.1233,  -1.8477,  -0.1838,
          -0.5713,  -0.6675,  -1.3239],
        [ -0.1789,  -0.1994,  -0.0613,  -0.1162,  -0.1233,  -1.8477,  -0.1838,
          -0.5713,  -0.6675,  -1.3239],
        [  1.2343,   2.3875,   0.1527,   0.9522,   1.4692,  -3.0439,   4.9945,
           0.8814,  -2.4164,   0.9034],
        [ -0.6703,  -1.4760,  -1.0146,  -1.8337,  -1.6096,  -1.3886,  -2.7478,
          -0.0642,  -0.9616,  -0.5261],
        [ -0.8795,   0.6074,  -1.5786,  -0.8841,  -1.6670,  -1.5033,  -3.5759,
          -0.2173,  -0.9162,   0.8652],
        [ -0.5000,   1.5261,  -1.7268,   2.2375,   6.0452,  -4.0148,   4.4462,
          -6.2378,   1.9936,  -0.9729]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-2.1590, -2.0633, -2.0687, -4.9647, -1.8806, -1.8806, -3.4745, -1.4273,
        -2.0892, -4.5504], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ -5.8107,  -7.5362,  -0.9737,  13.6735,   0.0223,   0.0223,   0.6686,
          -2.6597,  -3.4620,   3.2181],
        [  5.7847,   7.3850,   0.9737, -13.6718,  -0.0223,  -0.0223,  -0.5786,
           2.6598,   3.4633,  -3.2185]], device='cuda:0'))])
xi:  [-244.48242]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 334.8773276601984
W_T_median: 105.40247346920466
W_T_pctile_5: -229.08454497614383
W_T_CVAR_5_pct: -340.5996049479228
Average q (qsum/M+1):  56.155789283014116
Optimal xi:  [-244.48242]
Expected(across Rb) median(across samples) p_equity:  0.30934414453804493
obj fun:  tensor(-1672.3568, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 0.2
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[  3.6047,  -7.4220],
        [ -1.3573, -10.3820],
        [-10.1818,  -1.6791],
        [  7.7994,  -4.2249],
        [  7.2278,  -4.0491],
        [ -2.3685,   4.0330],
        [  6.7288,  -4.2840],
        [ -5.7483,   1.6286],
        [ -1.9271,   3.4546],
        [ -0.7611,   1.2675]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-7.2764, -9.5770,  9.6802, -8.9838, -8.6172,  0.8839, -8.8531,  5.4692,
         0.2073, -1.6732], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ 2.4012e+00,  7.7635e+00, -2.1767e+00,  3.4378e+00,  3.2429e+00,
         -3.2225e-02,  2.2607e+00, -1.9369e+00,  2.1469e-02,  1.4306e-02],
        [-3.8577e-01, -4.3400e-02, -6.0550e-01, -2.8460e-01, -2.4917e-01,
         -1.6165e-03, -1.6889e-01, -3.0348e-01, -1.9240e-03, -6.3184e-03],
        [-3.8577e-01, -4.3400e-02, -6.0550e-01, -2.8460e-01, -2.4917e-01,
         -1.6165e-03, -1.6889e-01, -3.0348e-01, -1.9240e-03, -6.3185e-03],
        [ 2.8185e+00,  1.0262e+01, -2.8036e+00,  4.3237e+00,  4.1031e+00,
         -7.5924e-02,  2.9942e+00, -2.3890e+00,  4.5086e-03,  6.8206e-03],
        [ 3.1653e+00,  7.7718e+00, -2.9909e+00,  3.3680e+00,  3.2450e+00,
         -2.0752e-02,  2.2741e+00, -1.3925e+00,  3.7884e-02,  2.1884e-02],
        [ 3.3789e+00,  1.0350e+01, -3.5647e+00,  4.1684e+00,  4.2645e+00,
         -7.4885e-02,  3.0637e+00, -1.9619e+00,  1.1568e-02,  1.4476e-02],
        [ 2.9625e+00,  1.0208e+01, -3.0404e+00,  4.3260e+00,  4.1157e+00,
         -7.1965e-02,  3.0143e+00, -2.1393e+00,  9.3760e-03,  1.0272e-02],
        [-3.8577e-01, -4.3400e-02, -6.0550e-01, -2.8460e-01, -2.4917e-01,
         -1.6165e-03, -1.6889e-01, -3.0348e-01, -1.9240e-03, -6.3184e-03],
        [-2.6260e+00, -1.7447e+01,  1.0644e+01, -4.2463e+00, -3.6043e+00,
          1.0746e+00, -4.0734e+00, -1.4817e-01,  8.0548e-01,  1.3071e-02],
        [-3.8577e-01, -4.3400e-02, -6.0550e-01, -2.8460e-01, -2.4917e-01,
         -1.6165e-03, -1.6889e-01, -3.0348e-01, -1.9240e-03, -6.3184e-03]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.4457, -0.7023, -0.7023, -1.9794, -1.5069, -1.9321, -2.0205, -0.7023,
         0.6363, -0.7023], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-2.4386e+00,  1.6175e-02,  1.6175e-02, -4.0245e+00, -2.6772e+00,
         -4.3228e+00, -4.0631e+00,  1.6175e-02,  1.6816e+01,  1.6175e-02]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 12.0445,   4.3339],
        [ 10.9021,   3.2606],
        [  0.1720,   4.9713],
        [ 11.0546,  -0.9470],
        [ -1.7577,   0.9840],
        [  8.2158,  -3.0134],
        [ -8.4184,   4.6442],
        [ 13.3147,   3.7069],
        [ -4.0006, -15.2089],
        [-13.8870,  -4.1283]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -0.9947,   1.5613,   4.6805, -11.2062,  -3.4314, -16.8982,  10.3050,
         -0.5258, -14.4599,  -2.2945], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-5.0679e+00, -7.8096e+00, -1.3701e+01, -1.4158e+01,  2.1456e-03,
         -1.4597e+01, -3.8456e+00, -9.2662e+00,  1.0135e+01,  1.1240e+01],
        [-8.8368e-01, -1.1921e+00, -6.8067e-01, -8.9658e-01, -2.5037e-03,
         -7.0148e-01, -7.2208e-01, -1.0496e+00, -1.0992e+00, -7.5538e-01],
        [-8.8356e-01, -1.1918e+00, -6.8048e-01, -8.9635e-01, -2.5022e-03,
         -7.0123e-01, -7.2176e-01, -1.0492e+00, -1.0987e+00, -7.5505e-01],
        [-2.3416e+00, -1.4477e+00, -5.8778e-01, -3.0381e+00,  1.5986e-01,
         -2.7104e+00,  1.6072e+00, -2.8529e+00,  5.4614e-01,  1.0880e+00],
        [-2.5223e+00, -2.1241e+00,  2.8412e+00, -8.5615e+00, -1.1457e-01,
          2.5042e-02,  6.8016e+00, -2.6333e+00, -2.4494e+01,  5.7613e-01],
        [-4.2957e+00, -8.0025e+00, -2.1785e+00,  1.7246e+00, -1.2540e-02,
          7.1917e-01, -2.9080e+00, -2.8251e+00,  8.1750e+00,  4.5708e+00],
        [ 9.9060e-01,  1.0070e+01,  3.5669e+00,  1.0178e+00,  8.1598e-02,
          9.2599e-01,  6.7723e-01,  2.7826e+00, -8.5483e+00, -6.9087e+00],
        [-2.3801e+00,  1.3370e+00, -9.8929e-01, -2.1112e+00,  8.4335e-02,
         -1.2100e+00,  7.6110e-01, -1.6485e+00, -1.0104e+01,  5.6613e+00],
        [ 5.8898e+00,  6.8627e+00,  8.2755e+00,  4.2360e+00,  2.1044e-01,
          9.3667e+00,  1.1703e+00,  7.1831e+00, -1.9289e+01, -2.2393e+00],
        [-7.1554e-02, -7.6552e+00,  3.1938e-01,  1.4059e+00,  7.3634e-02,
         -1.4762e+00, -2.3958e+00, -1.9714e+00,  3.2326e-01,  6.6110e+00]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-0.2544, -2.0825, -2.0840, -1.7369, -3.1082, -2.9133,  4.6702,  0.3742,
         2.8690, -1.1093], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ 1.0694e+01,  5.0685e-03,  4.9645e-03,  1.5434e+00,  1.9209e+00,
          2.1109e+00, -3.1863e+00, -1.9433e+00,  3.4522e+00, -2.0233e+00],
        [-1.0694e+01, -5.1069e-03, -5.2150e-03, -1.5445e+00, -2.0569e+00,
         -2.1325e+00,  3.1435e+00,  1.9080e+00, -3.2805e+00,  2.0224e+00]],
       device='cuda:0'))])
loaded xi:  -73.26509
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -1597.075418324208
new min fval from sgd:  -1597.2985189722524
min fval:  -1597.2985189722524
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[  3.6792,  -7.5465],
        [ -1.2485, -10.5127],
        [-10.1529,  -1.7661],
        [  7.7577,  -4.2400],
        [  7.1891,  -4.0734],
        [ -2.5079,   4.1755],
        [  6.6930,  -4.3156],
        [ -5.7143,   1.6840],
        [ -2.0723,   3.6018],
        [ -0.8619,   1.4752]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-7.1562, -9.4487,  9.7181, -8.9782, -8.6036,  0.7418, -8.8324,  5.4283,
         0.0602, -1.8753], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[  2.5105,   7.8944,  -2.0630,   3.4167,   3.2289,   0.0935,   2.2533,
          -1.8152,   0.1472,   0.1299],
        [ -0.7019,  -0.3426,  -0.9199,  -0.4785,  -0.4491,  -0.2967,  -0.3771,
          -0.6151,  -0.2967,  -0.3116],
        [ -0.7019,  -0.3426,  -0.9199,  -0.4785,  -0.4491,  -0.2967,  -0.3771,
          -0.6151,  -0.2967,  -0.3116],
        [  2.9291,  10.3929,  -2.6889,   4.3019,   4.0887,   0.0505,   2.9869,
          -2.2665,   0.1310,   0.1233],
        [  3.2746,   7.9030,  -2.8772,   3.3495,   3.2333,   0.1051,   2.2688,
          -1.2705,   0.1637,   0.1375],
        [  3.4893,  10.4815,  -3.4502,   4.1480,   4.2512,   0.0514,   3.0573,
          -1.8395,   0.1378,   0.1308],
        [  3.0728,  10.3399,  -2.9259,   4.3044,   4.1014,   0.0543,   3.0069,
          -2.0170,   0.1357,   0.1265],
        [ -0.7019,  -0.3426,  -0.9199,  -0.4785,  -0.4491,  -0.2967,  -0.3771,
          -0.6151,  -0.2967,  -0.3116],
        [ -2.7477, -17.5822,  10.5192,  -4.2489,  -3.6162,   0.9410,  -4.0922,
          -0.2776,   0.6715,  -0.1127],
        [ -0.7019,  -0.3426,  -0.9199,  -0.4785,  -0.4491,  -0.2967,  -0.3771,
          -0.6151,  -0.2967,  -0.3116]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.3321, -1.0154, -1.0154, -1.8648, -1.3934, -1.8178, -1.9062, -1.0154,
         0.5115, -1.0154], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-2.5200, -0.1173, -0.1173, -4.1070, -2.7607, -4.4071, -4.1462, -0.1173,
         16.7329, -0.1173]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 12.0354,   4.3468],
        [ 10.7908,   3.3808],
        [  0.0581,   5.0505],
        [ 11.2139,  -0.9601],
        [ -1.9373,   0.8132],
        [  8.0845,  -2.8798],
        [ -8.3952,   4.7772],
        [ 13.2342,   3.7996],
        [ -3.7754, -15.2952],
        [-13.8017,  -4.2347]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -0.9977,   1.4997,   4.5803, -11.0326,  -3.6271, -17.0191,  10.3127,
         -0.5752, -14.3786,  -2.2310], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ -4.9863,  -7.7388, -13.6763, -14.1483,   0.0312, -14.5908,  -3.8140,
          -9.1634,  10.2242,  11.2814],
        [ -1.0866,  -1.3768,  -0.8420,  -1.1351,  -0.0292,  -0.8749,  -0.8693,
          -1.2425,  -1.3417,  -0.9767],
        [ -1.0864,  -1.3764,  -0.8418,  -1.1348,  -0.0292,  -0.8746,  -0.8689,
          -1.2421,  -1.3411,  -0.9764],
        [ -2.2554,  -1.3291,  -0.6473,  -3.0608,   0.0828,  -2.7370,   1.5584,
          -2.7198,   0.5002,   0.9077],
        [ -2.5181,  -2.1174,   2.8540,  -8.6235,   0.0262,  -0.0402,   6.8107,
          -2.6316, -24.3938,   0.5887],
        [ -4.5713,  -8.2595,  -2.3742,   1.4643,  -0.1957,   0.4648,  -3.0704,
          -3.0850,   7.9157,   4.3665],
        [  1.1989,  10.2220,   3.5631,   1.2539,   0.1015,   1.1634,   0.6723,
           3.0189,  -8.3985,  -6.7183],
        [ -2.3021,   1.3959,  -0.9181,  -2.1112,  -0.0508,  -1.2206,   0.8264,
          -1.5793, -10.0902,   5.8249],
        [  5.8755,   6.8224,   8.1927,   4.1478,   0.1539,   9.0913,   1.0561,
           7.1506, -19.3439,  -2.3592],
        [  0.1210,  -7.3025,   0.5669,   1.6527,   0.3270,  -1.2379,  -2.1417,
          -1.6557,   0.6342,   6.8930]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-0.1940, -2.3015, -2.3031, -1.7838, -3.0987, -3.1764,  4.8384,  0.4381,
         2.8098, -0.7740], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ 10.7500,  -0.0175,  -0.0176,   1.4408,   1.9297,   2.0953,  -3.2166,
          -2.0034,   3.4218,  -2.0340],
        [-10.7501,   0.0174,   0.0173,  -1.4419,  -2.0657,  -2.1169,   3.1738,
           1.9681,  -3.2501,   2.0331]], device='cuda:0'))])
xi:  [-73.34086]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 472.24021784982637
W_T_median: 225.1685245059316
W_T_pctile_5: -52.73567501010898
W_T_CVAR_5_pct: -176.5475146466264
Average q (qsum/M+1):  54.42106776083669
Optimal xi:  [-73.34086]
Expected(across Rb) median(across samples) p_equity:  0.3505172332127889
obj fun:  tensor(-1597.2985, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 0.5
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -0.9553,   1.0080],
        [-10.8614,   7.0624],
        [-12.4871,  -1.7089],
        [ -1.3744,  -9.5360],
        [ 12.5159,  -2.7972],
        [ -2.1049, -10.0500],
        [-49.9498,  -7.6964],
        [  8.9716,  -6.4039],
        [  2.6822, -10.7349],
        [ -0.9550,   1.0082]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-2.6515,  3.7595, 12.4347, -8.4650, -9.7612, -8.6210, -7.4386, -9.3722,
        -9.3796, -2.6513], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-4.3955e-03, -5.1370e-02, -1.0217e+00, -1.8801e-01, -3.4561e-01,
         -2.2617e-01, -1.0791e-01, -6.6659e-02, -2.2987e-01, -4.3959e-03],
        [-4.3955e-03, -5.1370e-02, -1.0217e+00, -1.8801e-01, -3.4561e-01,
         -2.2617e-01, -1.0791e-01, -6.6659e-02, -2.2987e-01, -4.3959e-03],
        [-4.3955e-03, -5.1370e-02, -1.0217e+00, -1.8801e-01, -3.4561e-01,
         -2.2617e-01, -1.0791e-01, -6.6659e-02, -2.2987e-01, -4.3959e-03],
        [-4.3955e-03, -5.1370e-02, -1.0217e+00, -1.8801e-01, -3.4561e-01,
         -2.2617e-01, -1.0791e-01, -6.6659e-02, -2.2987e-01, -4.3959e-03],
        [-3.7428e-03, -7.1506e+00, -8.9232e+00,  7.4431e+00,  1.0595e+01,
          8.6785e+00,  8.6733e+00,  5.8855e+00,  9.4683e+00, -2.9656e-03],
        [-4.3956e-03, -5.1370e-02, -1.0217e+00, -1.8801e-01, -3.4561e-01,
         -2.2617e-01, -1.0791e-01, -6.6659e-02, -2.2987e-01, -4.3959e-03],
        [-4.3955e-03, -5.1370e-02, -1.0217e+00, -1.8801e-01, -3.4561e-01,
         -2.2617e-01, -1.0791e-01, -6.6659e-02, -2.2987e-01, -4.3959e-03],
        [ 1.0166e-01, -6.0856e+00, -8.8140e+00,  6.8621e+00,  8.4896e+00,
          8.1946e+00,  7.0089e+00,  3.8004e+00,  9.3820e+00,  1.0114e-01],
        [-4.3955e-03, -5.1370e-02, -1.0217e+00, -1.8801e-01, -3.4561e-01,
         -2.2617e-01, -1.0791e-01, -6.6659e-02, -2.2987e-01, -4.3959e-03],
        [ 4.0560e-02,  1.5166e+00,  1.0292e+01, -7.4440e+00, -8.8579e+00,
         -8.0970e+00, -8.0951e+00, -1.0011e+01, -1.0933e+01,  4.0878e-02]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.1978, -1.1978, -1.1978, -1.1978, -3.9055, -1.1978, -1.1978, -3.2988,
        -1.1978,  0.5184], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 1.3266e-02,  1.3266e-02,  1.3266e-02,  1.3266e-02, -1.0848e+01,
          1.3266e-02,  1.3266e-02, -7.9416e+00,  1.3266e-02,  1.5741e+01]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 13.4805,   7.6035],
        [-12.5345,   3.0015],
        [ 13.9035,   2.7227],
        [  4.8417,   2.6225],
        [ -4.2711,   2.4017],
        [ -8.8058,   2.9486],
        [-12.9350,   7.4324],
        [ -6.9064,   7.2045],
        [ -1.6546,   0.3460],
        [  8.6300,  13.5385]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ 3.4188, 13.2654, -3.9433, -3.8553, -6.5076, 14.8300,  8.3296,  8.0741,
        -3.8364, 10.8957], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-4.9826e-01, -9.7229e-01, -1.1201e+00,  1.6596e+00,  6.1056e-01,
         -1.2558e+00, -4.6746e-02, -4.5508e+00, -1.9351e-01,  9.6934e-01],
        [ 9.8528e-01,  9.3675e-01,  1.3027e+00,  1.4003e-01,  8.3569e-02,
          2.0824e+00,  2.6821e-01,  4.0551e-01, -8.0092e-04,  6.3324e-01],
        [-6.5458e+00, -1.0958e+00, -4.7643e-01,  1.2700e+00,  1.5085e+00,
         -5.1117e+00,  3.4617e+00,  3.1687e+00,  7.1731e-02,  1.6790e-01],
        [-1.1016e+01,  5.7353e+00, -9.0153e+00, -3.2379e-01,  4.5142e-02,
          6.9574e+00, -5.3534e+00,  8.8213e-01,  9.6781e-02, -3.2389e+01],
        [-1.1087e+00,  6.3911e-01, -2.5974e+00,  5.3334e-01,  8.7565e-01,
         -4.2871e-01, -1.1494e+00, -4.4929e+00,  2.3809e-01,  2.4067e+00],
        [-1.7320e+00, -4.6672e-01, -2.4367e+00,  4.5303e-01,  6.3355e-01,
         -1.3885e+00,  7.0933e-01, -2.0046e+00,  1.9152e-02,  9.7596e-01],
        [ 6.7685e+00, -3.2627e+00, -1.2841e-01, -9.5673e+00, -2.7464e+00,
         -4.2618e+00,  6.1210e+00,  1.0082e+01,  5.5293e-02,  6.9224e-01],
        [-1.7696e+00, -4.2124e-01, -2.4507e+00,  4.1071e-02,  6.6775e-01,
         -9.0910e-01,  8.7740e-01, -1.5409e+00,  7.4274e-02,  4.5755e-01],
        [-4.6116e+00,  7.3086e+00, -8.0312e-01,  3.1587e+00, -1.7607e-02,
          2.6289e+00, -1.0784e+01, -7.6286e+00,  5.4661e-02, -8.4977e+00],
        [-2.1920e+01,  1.9811e+00, -9.7156e+00, -3.8452e-01,  1.0402e-02,
          2.1337e+00, -1.2178e+00,  6.3185e+00,  2.7708e-01, -2.8355e+01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-2.5459,  2.9412, -1.1326,  1.7500, -2.2012, -2.7232, -7.1768, -2.4897,
        -0.0420, -0.9855], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  1.5789,   0.2309,   3.0535,  -7.8657,   2.5689,   1.3467,   0.3864,
           1.6854,  -0.6410,  16.4837],
        [ -1.5792,  -0.2713,  -3.0455,   8.0614,  -2.5689,  -1.3466,  -0.4456,
          -1.6855,   0.5531, -16.4705]], device='cuda:0'))])
loaded xi:  59.100292
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -1549.1486012736123
new min fval from sgd:  -1549.210947571714
min fval:  -1549.210947571714
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -1.1437,   1.3274],
        [-10.6667,   7.2281],
        [-12.5175,  -1.5354],
        [ -1.2260,  -9.6998],
        [ 12.5723,  -2.9226],
        [ -1.9547, -10.2139],
        [-49.7821,  -7.8583],
        [  9.0745,  -6.5470],
        [  2.8095, -10.8979],
        [ -1.1434,   1.3279]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-2.9870,  3.5977, 12.3974, -8.3019, -9.6930, -8.4579, -7.2773, -9.2395,
        -9.2178, -2.9869], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ -0.2505,  -0.3171,  -1.2920,  -0.4446,  -0.5433,  -0.4816,  -0.3638,
          -0.3650,  -0.4936,  -0.2505],
        [ -0.2505,  -0.3171,  -1.2920,  -0.4446,  -0.5433,  -0.4816,  -0.3638,
          -0.3650,  -0.4936,  -0.2505],
        [ -0.2505,  -0.3171,  -1.2920,  -0.4446,  -0.5433,  -0.4816,  -0.3638,
          -0.3650,  -0.4936,  -0.2505],
        [ -0.2505,  -0.3171,  -1.2920,  -0.4446,  -0.5433,  -0.4816,  -0.3638,
          -0.3650,  -0.4936,  -0.2505],
        [  0.1586,  -6.9897,  -8.7649,   7.6069,  10.6829,   8.8425,   8.8345,
           6.0031,   9.6305,   0.1593],
        [ -0.2505,  -0.3171,  -1.2920,  -0.4446,  -0.5433,  -0.4816,  -0.3638,
          -0.3650,  -0.4936,  -0.2505],
        [ -0.2505,  -0.3171,  -1.2920,  -0.4446,  -0.5433,  -0.4816,  -0.3638,
          -0.3650,  -0.4936,  -0.2505],
        [  0.2665,  -5.9244,  -8.6528,   7.0262,   8.5429,   8.3589,   7.1699,
           3.9314,   9.5452,   0.2659],
        [ -0.2505,  -0.3171,  -1.2920,  -0.4446,  -0.5433,  -0.4816,  -0.3638,
          -0.3650,  -0.4936,  -0.2505],
        [ -0.1229,   1.3559,  10.1322,  -7.6082,  -8.9500,  -8.2614,  -8.2568,
         -10.1368, -11.0965,  -0.1226]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.4678, -1.4678, -1.4678, -1.4678, -3.7481, -1.4678, -1.4678, -3.1382,
        -1.4678,  0.3594], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.1513,  -0.1513,  -0.1513,  -0.1513, -11.0048,  -0.1513,  -0.1513,
          -8.1027,  -0.1513,  15.5815]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 13.3654,   7.7188],
        [-12.4079,   2.9824],
        [ 13.6285,   2.8974],
        [  4.9689,   2.4955],
        [ -4.0797,   2.5922],
        [ -8.7884,   2.9396],
        [-13.0405,   7.5254],
        [ -7.0466,   7.3028],
        [ -1.7906,   0.2871],
        [  8.5183,  13.6133]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ 3.2986, 13.4009, -4.1836, -3.7386, -6.3160, 14.8463,  8.2291,  7.9532,
        -4.0101, 10.8409], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-3.8526e-01, -9.8876e-01, -1.0103e+00,  1.6833e+00,  4.7767e-01,
         -1.1474e+00, -1.6291e-01, -4.5646e+00, -2.1725e-01,  1.0926e+00],
        [ 9.1450e-01,  8.6125e-01,  1.3129e+00,  1.3131e-01, -2.7809e-02,
          1.9939e+00,  1.4937e-01,  3.0985e-01, -8.5187e-02,  6.1282e-01],
        [-6.7106e+00, -1.2528e+00, -7.3868e-01,  1.1058e+00,  1.3500e+00,
         -5.2757e+00,  3.3044e+00,  3.0110e+00, -9.5834e-02,  6.1100e-03],
        [-1.0828e+01,  5.8597e+00, -8.7127e+00, -1.3414e-01,  4.4493e-02,
          7.1118e+00, -5.3422e+00,  8.9711e-01,  1.8693e-01, -3.2316e+01],
        [-1.1079e+00,  6.2063e-01, -2.6042e+00,  5.4940e-01,  7.3550e-01,
         -4.3911e-01, -1.2838e+00, -4.5852e+00,  1.9060e-01,  2.4186e+00],
        [-1.8120e+00, -5.8461e-01, -2.5358e+00,  3.4170e-01,  4.7493e-01,
         -1.5034e+00,  5.5266e-01, -2.1492e+00, -1.2030e-01,  8.8005e-01],
        [ 6.6422e+00, -3.3969e+00, -2.5584e-01, -9.7137e+00, -2.9194e+00,
         -4.3959e+00,  5.9794e+00,  9.9492e+00, -9.4648e-02,  5.6174e-01],
        [-1.8682e+00, -5.5046e-01, -2.5789e+00, -8.0493e-02,  5.0945e-01,
         -1.0378e+00,  7.2137e-01, -1.6887e+00, -7.1279e-02,  3.4363e-01],
        [-4.8905e+00,  7.1734e+00, -9.4421e-01,  2.8943e+00, -1.5294e-01,
          2.3415e+00, -1.0756e+01, -7.7419e+00, -1.1514e-01, -8.6662e+00],
        [-2.1993e+01,  1.9226e+00, -9.7960e+00, -4.5292e-01,  4.9580e-03,
          2.0901e+00, -1.2319e+00,  6.3155e+00,  2.3605e-01, -2.8374e+01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-2.4414,  2.7625, -1.3189,  1.9610, -2.2120, -2.8535, -7.3110, -2.6292,
        -0.3321, -1.0259], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  1.6851,   0.1916,   2.8668,  -8.0661,   2.5616,   1.2185,   0.3172,
           1.5472,  -0.8144,  16.4551],
        [ -1.6854,  -0.2320,  -2.8588,   8.2617,  -2.5616,  -1.2184,  -0.3764,
          -1.5473,   0.7265, -16.4420]], device='cuda:0'))])
xi:  [58.988163]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 660.5479252804332
W_T_median: 331.8815787356473
W_T_pctile_5: 92.54478453471309
W_T_CVAR_5_pct: -40.64534842844277
Average q (qsum/M+1):  51.520606256300404
Optimal xi:  [58.988163]
Expected(across Rb) median(across samples) p_equity:  0.31819867516557376
obj fun:  tensor(-1549.2109, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 1.0
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -0.9215,   0.8616],
        [ -0.9218,   0.8621],
        [-15.1298,  -1.5817],
        [  1.2217, -11.8991],
        [ 16.7054,  -2.7197],
        [ -3.9348, -12.7149],
        [-47.8094,  -9.5532],
        [ 13.9379,  -6.2224],
        [  6.6439, -13.0280],
        [ -0.9215,   0.8616]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -2.9270,  -2.9268,  15.3793, -10.2912, -12.6830, -10.1735,  -8.6860,
        -11.2473, -11.1091,  -2.9270], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-9.4662e-03, -9.4609e-03, -9.7162e-01, -1.0056e-01, -3.2747e-01,
         -1.6146e-01, -4.8349e-02, -2.4016e-01, -1.9658e-01, -9.4662e-03],
        [-9.4663e-03, -9.4609e-03, -9.7162e-01, -1.0056e-01, -3.2747e-01,
         -1.6146e-01, -4.8349e-02, -2.4016e-01, -1.9658e-01, -9.4662e-03],
        [-9.4662e-03, -9.4609e-03, -9.7162e-01, -1.0056e-01, -3.2747e-01,
         -1.6146e-01, -4.8349e-02, -2.4016e-01, -1.9658e-01, -9.4662e-03],
        [-9.4662e-03, -9.4609e-03, -9.7162e-01, -1.0056e-01, -3.2747e-01,
         -1.6146e-01, -4.8349e-02, -2.4016e-01, -1.9658e-01, -9.4662e-03],
        [ 4.8304e-01,  4.8332e-01, -1.1042e+01,  8.1583e+00,  1.3172e+01,
          9.8747e+00,  1.1595e+01,  6.5478e+00,  1.3811e+01,  4.8304e-01],
        [-9.4662e-03, -9.4609e-03, -9.7162e-01, -1.0056e-01, -3.2747e-01,
         -1.6146e-01, -4.8349e-02, -2.4016e-01, -1.9658e-01, -9.4662e-03],
        [-9.4662e-03, -9.4609e-03, -9.7162e-01, -1.0056e-01, -3.2747e-01,
         -1.6146e-01, -4.8349e-02, -2.4016e-01, -1.9658e-01, -9.4662e-03],
        [ 1.4195e-01,  1.4189e-01, -8.0429e+00,  4.5753e+00,  3.8018e-01,
          6.6600e+00,  6.3763e+00,  7.0929e-01,  8.3253e+00,  1.4195e-01],
        [-9.4662e-03, -9.4609e-03, -9.7162e-01, -1.0056e-01, -3.2747e-01,
         -1.6146e-01, -4.8349e-02, -2.4016e-01, -1.9658e-01, -9.4662e-03],
        [ 3.8200e-01,  3.8222e-01,  1.0920e+01, -8.3457e+00, -1.0892e+01,
         -1.0197e+01, -1.0157e+01, -1.0025e+01, -1.3676e+01,  3.8200e-01]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.1261, -1.1261, -1.1261, -1.1261, -5.2517, -1.1261, -1.1261, -3.1568,
        -1.1261,  1.4455], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 1.0213e-02,  1.0213e-02,  1.0213e-02,  1.0213e-02, -1.6901e+01,
          1.0213e-02,  1.0213e-02, -4.3750e+00,  1.0213e-02,  1.6205e+01]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 15.1296,   9.9926],
        [-17.9314,  -0.4414],
        [ 13.0987,   2.2064],
        [  8.0967,   1.2242],
        [ -0.2698,   5.1921],
        [-14.5525,   1.1727],
        [-13.3018,   9.8017],
        [ -5.8329,  12.1198],
        [ -0.2363,   4.9738],
        [  7.2713,  16.8663]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ 5.4328, 13.5048, -5.2835, -7.7756, -3.5882, 15.0327,  7.7604, 10.3209,
        -3.5214, 13.5269], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-2.3397e+00, -9.3439e-01, -1.9957e+00, -5.4270e-02,  6.2871e-02,
         -1.4454e+00, -2.7488e-02, -6.4440e-01,  5.8821e-02,  1.7842e-01],
        [ 5.2770e+00, -3.7226e+00, -3.3238e-01,  2.5741e+00,  8.6634e-02,
         -1.4828e+00, -1.7912e+00,  2.0692e+01,  1.1130e-01,  5.6744e+00],
        [-6.8411e+00, -5.1753e+00, -2.5777e-01,  1.8853e-01,  1.4368e-01,
         -6.3622e+00,  1.4352e-01,  7.5375e-01,  1.4259e-01,  2.9991e-01],
        [-1.7644e+01,  7.5412e+00, -7.2371e+00,  3.6107e-01, -2.8605e-02,
          5.1868e+00,  9.1094e-01,  1.8024e+00, -3.8803e-02, -3.2178e+01],
        [-4.0211e+00, -9.3176e-01, -3.6143e+00,  6.8942e-01,  7.2891e-01,
         -7.9880e-01, -1.9752e-01, -8.6820e+00,  7.0098e-01,  5.5861e+00],
        [-2.2981e+00,  1.0705e-01, -1.8385e+00, -3.2043e-01,  8.0070e-02,
         -1.3810e+00,  8.1559e-01, -2.0294e-01,  6.5038e-02, -1.1353e+00],
        [ 1.9315e+00,  6.5588e+00, -6.1841e+00, -7.5572e+00,  2.6878e+00,
         -4.2586e+00,  6.9553e+00,  1.1920e+01,  2.2972e+00, -4.5623e+00],
        [-2.8057e+00,  1.0038e+00, -2.0409e+00, -3.4249e-01,  1.0238e-01,
         -1.0371e+00,  1.6023e+00,  1.8276e-01,  7.9816e-02, -9.1241e-01],
        [-8.4186e+00,  7.9011e+00, -3.5224e+00, -2.4622e+00,  3.0464e-02,
          2.7240e+00, -1.0970e+01, -1.4862e-01,  4.3994e-02, -1.6841e+01],
        [-2.9624e+01,  2.9931e+00, -2.2733e+01, -5.3901e-01,  5.1597e-02,
          1.6204e+00,  5.2327e-01,  2.9009e+00,  4.8170e-02, -1.3295e+01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-3.2041, -2.5964, -0.9832, -0.8876, -1.7976, -2.7350, -6.8863, -2.6785,
        -0.9982, -2.3272], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  1.1636,   0.3276,   3.4929,  -8.5499,   5.3094,   1.3020,   0.3119,
           1.6217,  -0.7461,  18.9726],
        [ -1.1636,  -0.3679,  -3.4921,   8.6390,  -5.3093,  -1.3020,  -0.3665,
          -1.6217,   0.6614, -18.9667]], device='cuda:0'))])
loaded xi:  117.02424
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -1543.0613372019923
new min fval from sgd:  -1543.0667833613784
min fval:  -1543.0667833613784
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -0.8538,   0.9285],
        [ -0.8541,   0.9290],
        [-15.1760,  -1.6284],
        [  1.3343, -12.0549],
        [ 16.7555,  -2.6845],
        [ -3.8138, -12.8728],
        [-47.6451,  -9.7155],
        [ 14.1251,  -6.2678],
        [  6.8074, -13.1856],
        [ -0.8538,   0.9285]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -2.7409,  -2.7407,  15.3333, -10.1361, -12.6267, -10.0163,  -8.5241,
        -11.0325, -10.9510,  -2.7409], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ -0.1388,  -0.1387,  -1.1936,  -0.4033,  -0.1517,  -0.4547,  -0.3290,
          -0.1853,  -0.4871,  -0.1388],
        [ -0.1388,  -0.1387,  -1.1936,  -0.4033,  -0.1517,  -0.4547,  -0.3290,
          -0.1853,  -0.4871,  -0.1388],
        [ -0.1388,  -0.1387,  -1.1936,  -0.4033,  -0.1517,  -0.4547,  -0.3290,
          -0.1853,  -0.4871,  -0.1388],
        [ -0.1388,  -0.1387,  -1.1936,  -0.4033,  -0.1517,  -0.4547,  -0.3290,
          -0.1853,  -0.4871,  -0.1388],
        [  0.6647,   0.6650, -10.8693,   8.3139,  13.2314,  10.0340,  11.7565,
           6.7869,  13.9636,   0.6647],
        [ -0.1388,  -0.1387,  -1.1936,  -0.4033,  -0.1517,  -0.4547,  -0.3290,
          -0.1853,  -0.4871,  -0.1388],
        [ -0.1388,  -0.1387,  -1.1936,  -0.4033,  -0.1517,  -0.4547,  -0.3290,
          -0.1853,  -0.4871,  -0.1388],
        [  0.2909,   0.2909,  -7.8899,   4.7288,   0.5837,   6.8167,   6.5354,
           0.7837,   8.4742,   0.2909],
        [ -0.1388,  -0.1387,  -1.1936,  -0.4033,  -0.1517,  -0.4547,  -0.3290,
          -0.1853,  -0.4871,  -0.1388],
        [  0.2096,   0.2098,  10.7564,  -8.5018, -10.9220, -10.3566, -10.3189,
         -10.1903, -13.8301,   0.2096]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.2986, -1.2986, -1.2986, -1.2986, -5.0725, -1.2986, -1.2986, -3.0037,
        -1.2986,  1.2762], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.1682,  -0.1682,  -0.1682,  -0.1682, -17.0817,  -0.1682,  -0.1682,
          -4.5284,  -0.1682,  16.0351]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 1.5067e+01,  1.0269e+01],
        [-1.7980e+01, -3.8490e-01],
        [ 1.3153e+01,  2.1081e+00],
        [ 7.9531e+00,  1.2724e+00],
        [-2.4898e-02,  5.4266e+00],
        [-1.4612e+01,  1.2488e+00],
        [-1.3401e+01,  9.8904e+00],
        [-6.0599e+00,  1.2322e+01],
        [ 3.7305e-03,  5.1964e+00],
        [ 7.3089e+00,  1.6892e+01]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ 5.1903, 13.4548, -5.2655, -7.9049, -3.3416, 14.9817,  7.6704, 10.1123,
        -3.2781, 13.4960], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-2.4222e+00, -1.0037e+00, -1.9157e+00, -7.2409e-02,  4.0895e-02,
         -1.5193e+00, -1.2991e-01, -7.8016e-01,  3.3765e-02,  1.2349e-01],
        [ 5.2517e+00, -3.6443e+00, -4.3559e-01,  2.3694e+00,  1.6871e-01,
         -1.4682e+00, -1.8997e+00,  2.0642e+01,  1.9425e-01,  5.7768e+00],
        [-6.6349e+00, -5.0563e+00, -1.6233e-01,  3.1569e-01,  6.3913e-02,
         -6.1961e+00,  5.2739e-02,  5.7002e-01,  6.1650e-02,  2.7154e-01],
        [-1.7644e+01,  7.6329e+00, -7.4580e+00,  1.2325e-01,  4.1053e-02,
          5.2680e+00,  9.6917e-01,  1.8743e+00,  3.2203e-02, -3.2094e+01],
        [-3.9414e+00, -8.9717e-01, -3.3660e+00,  8.4891e-01,  8.1333e-01,
         -7.3978e-01, -2.6626e-01, -8.7038e+00,  7.8445e-01,  5.6631e+00],
        [-2.4002e+00,  2.3445e-02, -1.8342e+00, -4.0495e-01,  9.4141e-02,
         -1.4719e+00,  7.0466e-01, -3.2236e-01,  7.5892e-02, -1.2060e+00],
        [ 1.8333e+00,  6.4559e+00, -6.2667e+00, -7.4265e+00,  2.8133e+00,
         -4.3531e+00,  7.0294e+00,  1.1837e+01,  2.4216e+00, -4.6563e+00],
        [-2.8828e+00,  9.1067e-01, -1.9992e+00, -3.6173e-01,  1.5181e-01,
         -1.1313e+00,  1.4900e+00,  6.7745e-02,  1.2541e-01, -9.9783e-01],
        [-8.3772e+00,  7.9447e+00, -3.5817e+00, -2.5125e+00,  6.2826e-02,
          2.7829e+00, -1.0888e+01, -7.1410e-02,  7.6362e-02, -1.6803e+01],
        [-2.9674e+01,  2.9712e+00, -2.2424e+01, -2.3213e-01,  1.2022e-02,
          1.5987e+00,  4.7041e-01,  2.8451e+00,  8.9909e-03, -1.3359e+01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-3.2572, -2.6366, -0.9044, -0.8623, -1.7334, -2.8137, -6.9811, -2.7693,
        -0.9512, -2.3487], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  1.1139,   0.2991,   3.5642,  -8.5257,   5.3733,   1.2276,   0.2599,
           1.5341,  -0.7223,  19.1239],
        [ -1.1139,  -0.3393,  -3.5634,   8.6148,  -5.3733,  -1.2277,  -0.3145,
          -1.5341,   0.6376, -19.1179]], device='cuda:0'))])
xi:  [116.91297]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 620.1910914191345
W_T_median: 367.5903250440398
W_T_pctile_5: 133.6186916251929
W_T_CVAR_5_pct: -6.408549710899719
Average q (qsum/M+1):  50.19050056703629
Optimal xi:  [116.91297]
Expected(across Rb) median(across samples) p_equity:  0.2889071178932985
obj fun:  tensor(-1543.0668, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 1.5
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -0.8359,   0.3641],
        [ -0.8359,   0.3641],
        [-17.5158,  -1.7010],
        [  5.4723, -14.2955],
        [ 20.5766,  -2.7311],
        [ -6.1593, -15.6942],
        [-40.3822, -11.2493],
        [ 17.6531,  -5.9710],
        [ 12.0900, -14.0113],
        [ -0.8359,   0.3641]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -2.7036,  -2.7036,  18.1651, -11.7522, -14.9912, -11.1776,  -9.7162,
        -13.0085, -12.1809,  -2.7036], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-2.9685e-02, -2.9685e-02, -1.2411e+00, -1.8402e-01, -2.8700e-01,
         -2.4530e-01, -5.5474e-02, -2.6148e-01, -4.0973e-01, -2.9685e-02],
        [-2.9685e-02, -2.9685e-02, -1.2411e+00, -1.8402e-01, -2.8700e-01,
         -2.4530e-01, -5.5474e-02, -2.6148e-01, -4.0973e-01, -2.9685e-02],
        [-2.9685e-02, -2.9685e-02, -1.2411e+00, -1.8402e-01, -2.8700e-01,
         -2.4530e-01, -5.5474e-02, -2.6148e-01, -4.0973e-01, -2.9685e-02],
        [-2.9685e-02, -2.9685e-02, -1.2411e+00, -1.8402e-01, -2.8700e-01,
         -2.4530e-01, -5.5474e-02, -2.6148e-01, -4.0973e-01, -2.9685e-02],
        [-1.3769e-02, -1.3769e-02, -1.3133e+01,  9.5057e+00,  1.7246e+01,
          1.1661e+01,  1.4015e+01,  6.3303e+00,  1.4571e+01, -1.3768e-02],
        [-2.9685e-02, -2.9685e-02, -1.2411e+00, -1.8402e-01, -2.8700e-01,
         -2.4530e-01, -5.5474e-02, -2.6148e-01, -4.0973e-01, -2.9685e-02],
        [-2.9685e-02, -2.9685e-02, -1.2411e+00, -1.8402e-01, -2.8700e-01,
         -2.4530e-01, -5.5474e-02, -2.6148e-01, -4.0973e-01, -2.9685e-02],
        [-2.9685e-02, -2.9685e-02, -1.2411e+00, -1.8402e-01, -2.8700e-01,
         -2.4530e-01, -5.5474e-02, -2.6148e-01, -4.0973e-01, -2.9685e-02],
        [-2.9685e-02, -2.9685e-02, -1.2411e+00, -1.8402e-01, -2.8700e-01,
         -2.4530e-01, -5.5474e-02, -2.6148e-01, -4.0973e-01, -2.9685e-02],
        [-8.6846e-03, -8.6846e-03,  1.2058e+01, -8.9207e+00, -1.2311e+01,
         -1.1604e+01, -9.0399e+00, -1.2951e+01, -1.4397e+01, -8.6846e-03]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.2725, -1.2725, -1.2725, -1.2725, -5.7730, -1.2725, -1.2725, -1.2725,
        -1.2725,  1.7925], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.0214,  -0.0214,  -0.0214,  -0.0214, -18.6497,  -0.0214,  -0.0214,
          -0.0214,  -0.0214,  15.3728]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 15.7390,  10.0090],
        [-21.8645,  -1.1391],
        [ 13.4035,   0.9411],
        [  0.6978,   5.2760],
        [  0.4981,   5.5921],
        [-17.1943,   1.3969],
        [ -7.7317,  13.6072],
        [ -3.2693,  16.3680],
        [  0.5007,   5.5892],
        [  8.1838,  19.6637]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ 5.5188, 15.5513, -7.7046, -2.2956, -2.1161, 18.8004, 10.1141, 12.5274,
        -2.1209, 15.3261], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-7.9540e-01, -5.1798e+00,  1.4737e-01,  2.3166e-01,  2.1255e-01,
         -7.3597e-01,  1.0711e-01, -8.5546e-02,  2.1209e-01, -9.5901e+00],
        [ 7.6790e+00, -1.4303e+00, -2.4078e-01,  1.1211e-02, -7.5046e-02,
         -2.1322e+00,  4.5485e+00,  2.1851e+01, -7.2900e-02,  2.5889e+00],
        [-2.6175e+00, -1.5367e+00, -1.7374e+00, -4.7413e-02, -3.2902e-02,
         -1.9848e+00, -9.8243e-02, -2.5365e-01, -3.3370e-02, -4.4189e-01],
        [-1.7665e+01,  8.9568e+00, -5.6403e+00, -2.3683e-02, -3.4451e-02,
          5.0117e+00,  2.2296e+00,  2.8948e-01, -3.3930e-02, -3.0696e+01],
        [-2.7979e+00,  1.6065e-01, -8.7280e+00, -3.2810e-01, -6.3762e-02,
         -1.7810e+00,  3.6119e+00, -4.1110e+00, -6.8395e-02,  5.1751e+00],
        [-3.4129e+00,  1.4286e+00,  2.6826e-01, -3.9631e-02, -1.0036e-01,
         -2.6833e-01, -9.3445e+00,  2.6645e+00, -9.9947e-02,  1.5679e+00],
        [-4.5325e+00,  6.8813e+00, -4.5915e+00,  1.4643e+00,  2.3542e+00,
         -3.7676e+00,  4.5979e+00,  3.7277e+00,  2.3369e+00, -1.5579e+00],
        [-2.7988e+00, -1.4902e+00, -1.6064e+00, -3.7701e-02, -1.8369e-02,
         -1.9819e+00, -9.1151e-02, -2.5078e-01, -1.8964e-02, -4.2652e-01],
        [-9.5168e+00,  8.7150e+00, -2.2160e+00,  3.4687e-02,  6.3670e-02,
          3.3656e+00, -4.4350e+00, -8.7123e+00,  6.3441e-02, -1.3256e+01],
        [-4.2461e+01,  3.4506e+00, -3.1601e+01, -6.4885e-01, -6.0389e-01,
          2.3158e+00, -4.8429e-01, -3.3397e+00, -6.0283e-01, -2.0442e+01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-2.4043, -5.3756, -3.2653, -2.5129, -3.6005, -4.2516, -5.6217, -3.3356,
        -2.7179, -2.4236], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  2.9572,   0.4040,   0.5096,  -8.4944,   4.6061,   3.3208,   0.7226,
           0.6607,  -0.9424,  20.4348],
        [ -2.9572,  -0.4443,  -0.5096,   8.5345,  -4.6062,  -3.3209,  -0.7617,
          -0.6607,   0.8587, -20.4315]], device='cuda:0'))])
loaded xi:  168.78386
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -1555.40225483047
min fval:  -1555.40225483047
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -0.8707,   0.6713],
        [ -0.8707,   0.6713],
        [-17.3533,  -1.5556],
        [  5.5977, -14.4564],
        [ 20.6194,  -2.8599],
        [ -6.0009, -15.8575],
        [-40.2198, -11.4134],
        [ 17.7120,  -6.0878],
        [ 12.1847, -14.1704],
        [ -0.8707,   0.6713]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -2.9708,  -2.9708,  18.3298, -11.5927, -14.9415, -11.0146,  -9.5524,
        -12.9442, -12.0257,  -2.9708], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ 4.7186e-02,  4.7186e-02, -1.2194e+00, -1.3435e-01, -2.4090e-01,
         -1.6868e-01,  1.2807e-02, -3.6863e-01, -4.4772e-01,  4.7186e-02],
        [ 4.7187e-02,  4.7187e-02, -1.2194e+00, -1.3435e-01, -2.4090e-01,
         -1.6868e-01,  1.2808e-02, -3.6863e-01, -4.4772e-01,  4.7187e-02],
        [ 4.7186e-02,  4.7186e-02, -1.2194e+00, -1.3435e-01, -2.4090e-01,
         -1.6868e-01,  1.2808e-02, -3.6863e-01, -4.4772e-01,  4.7186e-02],
        [ 4.7186e-02,  4.7186e-02, -1.2194e+00, -1.3435e-01, -2.4090e-01,
         -1.6868e-01,  1.2808e-02, -3.6863e-01, -4.4772e-01,  4.7186e-02],
        [ 1.4846e-01,  1.4846e-01, -1.2980e+01,  9.6652e+00,  1.7069e+01,
          1.1824e+01,  1.4179e+01,  6.2858e+00,  1.4714e+01,  1.4846e-01],
        [ 4.7186e-02,  4.7186e-02, -1.2194e+00, -1.3435e-01, -2.4090e-01,
         -1.6868e-01,  1.2808e-02, -3.6863e-01, -4.4772e-01,  4.7186e-02],
        [ 4.7187e-02,  4.7187e-02, -1.2194e+00, -1.3435e-01, -2.4090e-01,
         -1.6868e-01,  1.2808e-02, -3.6863e-01, -4.4772e-01,  4.7187e-02],
        [ 4.7186e-02,  4.7186e-02, -1.2194e+00, -1.3435e-01, -2.4090e-01,
         -1.6868e-01,  1.2808e-02, -3.6863e-01, -4.4772e-01,  4.7186e-02],
        [ 4.7186e-02,  4.7186e-02, -1.2194e+00, -1.3435e-01, -2.4090e-01,
         -1.6868e-01,  1.2807e-02, -3.6863e-01, -4.4772e-01,  4.7186e-02],
        [-1.7377e-01, -1.7377e-01,  1.1901e+01, -9.0817e+00, -1.2405e+01,
         -1.1768e+01, -9.2044e+00, -1.3058e+01, -1.4547e+01, -1.7377e-01]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.2337, -1.2337, -1.2337, -1.2337, -5.6187, -1.2337, -1.2337, -1.2337,
        -1.2337,  1.6333], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.1672,  -0.1672,  -0.1672,  -0.1672, -18.8040,  -0.1672,  -0.1672,
          -0.1672,  -0.1672,  15.2134]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 15.7704,   9.9993],
        [-21.8555,  -1.1633],
        [ 13.6124,   0.7326],
        [  0.6037,   5.1678],
        [  0.3975,   5.4748],
        [-17.3633,   1.5527],
        [ -7.7151,  13.6557],
        [ -3.3999,  16.5049],
        [  0.4001,   5.4719],
        [  8.0667,  19.7877]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ 5.5023, 15.5542, -7.4949, -2.3962, -2.2221, 18.6324, 10.0940, 12.3963,
        -2.2269, 15.1953], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-6.3913e-01, -5.2695e+00,  2.4943e-01,  4.9672e-01,  4.7771e-01,
         -5.9904e-01,  3.5793e-01,  1.6597e-01,  4.7725e-01, -9.3278e+00],
        [ 7.7485e+00, -1.5116e+00,  1.6351e-02, -8.3099e-02, -1.7272e-01,
         -2.1016e+00,  4.4901e+00,  2.1755e+01, -1.7054e-01,  2.4717e+00],
        [-2.6996e+00, -1.7174e+00, -1.8725e+00,  2.4494e-01,  2.5929e-01,
         -2.1498e+00, -1.2132e-01, -3.0050e-01,  2.5883e-01, -6.0657e-01],
        [-1.7729e+01,  8.8933e+00, -5.8805e+00, -2.4010e-02, -3.5542e-02,
          4.9448e+00,  2.1469e+00,  2.2514e-01, -3.5011e-02, -3.0665e+01],
        [-2.9396e+00,  5.9628e-03, -8.8811e+00, -4.4044e-01, -1.7360e-01,
         -1.9357e+00,  3.4708e+00, -4.2559e+00, -1.7819e-01,  5.0350e+00],
        [-3.4363e+00,  1.2164e+00,  3.1091e-01,  1.9465e-02, -4.6049e-02,
         -4.3244e-01, -9.5296e+00,  2.6729e+00, -4.5565e-02,  1.5488e+00],
        [-4.5784e+00,  6.7595e+00, -4.5196e+00,  1.7130e+00,  2.4965e+00,
         -3.8758e+00,  4.5467e+00,  3.6574e+00,  2.4794e+00, -1.6520e+00],
        [-2.8856e+00, -1.6734e+00, -1.7469e+00,  2.5461e-01,  2.7377e-01,
         -2.1503e+00, -1.0833e-01, -2.9199e-01,  2.7318e-01, -5.8666e-01],
        [-9.5331e+00,  8.7239e+00, -2.1851e+00,  1.6193e-01,  2.0597e-01,
          3.3860e+00, -4.3414e+00, -8.5673e+00,  2.0559e-01, -1.3054e+01],
        [-4.2280e+01,  3.5764e+00, -3.1638e+01, -4.5107e-01, -4.0520e-01,
          2.4416e+00, -3.9461e-01, -3.2323e+00, -4.0415e-01, -2.0288e+01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-2.3015, -5.3347, -3.4234, -2.5829, -3.7552, -4.4167, -5.7297, -3.4961,
        -2.6928, -2.2976], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  3.0575,   0.4504,   0.3574,  -8.4046,   4.4517,   3.1574,   0.6156,
           0.5038,  -0.9334,  20.5430],
        [ -3.0575,  -0.4906,  -0.3574,   8.4446,  -4.4517,  -3.1575,  -0.6548,
          -0.5038,   0.8496, -20.5397]], device='cuda:0'))])
xi:  [168.69077]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 586.63724125062
W_T_median: 392.7666076093303
W_T_pctile_5: 179.16152394966886
W_T_CVAR_5_pct: 18.27839469131785
Average q (qsum/M+1):  48.473817886844756
Optimal xi:  [168.69077]
Expected(across Rb) median(across samples) p_equity:  0.2609406943122546
obj fun:  tensor(-1555.4023, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 3.0
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -1.0238,   0.2926],
        [ -1.0238,   0.2926],
        [-18.8886,  -1.6564],
        [  9.7305, -16.0244],
        [ 23.6773,  -2.5759],
        [ -4.3793, -18.0315],
        [-35.4348, -12.9739],
        [ 20.6385,  -6.3566],
        [ 15.2289, -13.9715],
        [ -1.0238,   0.2926]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -3.1572,  -3.1572,  20.0711, -13.1040, -17.4391, -12.8278, -10.6865,
        -13.6007, -12.2356,  -3.1572], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-1.7291e-02, -1.7291e-02, -1.1403e+00, -2.1477e-01, -1.5590e-01,
         -2.4867e-01, -1.5493e-02, -1.7924e-01, -3.6729e-01, -1.7291e-02],
        [-1.7291e-02, -1.7291e-02, -1.1403e+00, -2.1477e-01, -1.5590e-01,
         -2.4867e-01, -1.5493e-02, -1.7924e-01, -3.6729e-01, -1.7291e-02],
        [-1.7291e-02, -1.7291e-02, -1.1403e+00, -2.1477e-01, -1.5590e-01,
         -2.4867e-01, -1.5493e-02, -1.7924e-01, -3.6729e-01, -1.7291e-02],
        [-1.7291e-02, -1.7291e-02, -1.1403e+00, -2.1477e-01, -1.5590e-01,
         -2.4867e-01, -1.5493e-02, -1.7924e-01, -3.6729e-01, -1.7291e-02],
        [-1.0003e-01, -1.0003e-01, -1.4241e+01,  1.0273e+01,  1.9173e+01,
          1.4525e+01,  1.3689e+01,  7.9603e+00,  1.3594e+01, -1.0003e-01],
        [-1.7291e-02, -1.7291e-02, -1.1403e+00, -2.1477e-01, -1.5590e-01,
         -2.4867e-01, -1.5493e-02, -1.7924e-01, -3.6729e-01, -1.7291e-02],
        [-1.7291e-02, -1.7291e-02, -1.1403e+00, -2.1477e-01, -1.5590e-01,
         -2.4867e-01, -1.5493e-02, -1.7924e-01, -3.6729e-01, -1.7291e-02],
        [-1.7291e-02, -1.7291e-02, -1.1403e+00, -2.1477e-01, -1.5590e-01,
         -2.4867e-01, -1.5493e-02, -1.7924e-01, -3.6729e-01, -1.7291e-02],
        [-1.7291e-02, -1.7291e-02, -1.1403e+00, -2.1477e-01, -1.5590e-01,
         -2.4867e-01, -1.5493e-02, -1.7924e-01, -3.6729e-01, -1.7291e-02],
        [-1.5197e-01, -1.5197e-01,  1.2988e+01, -1.0051e+01, -1.4686e+01,
         -1.4413e+01, -8.4530e+00, -9.5035e+00, -1.2549e+01, -1.5197e-01]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.1922, -1.1922, -1.1922, -1.1922, -6.0731, -1.1922, -1.1922, -1.1922,
        -1.1922,  1.8220], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[  0.0195,   0.0195,   0.0195,   0.0195, -18.5423,   0.0195,   0.0195,
           0.0195,   0.0195,  14.3708]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 16.4424,   9.7148],
        [-24.8214,  -1.9611],
        [  9.8473,  -1.3117],
        [ -4.0486,   9.3379],
        [ -4.1071,   9.4499],
        [-19.8843,   1.6331],
        [ -8.1509,  11.7099],
        [ -1.6562,   2.2547],
        [ -3.9839,   9.9281],
        [  8.9919,  21.8283]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([  4.6881,  16.4318, -10.4079,   3.8346,   6.4796,  21.1091,   8.3454,
         -4.5927,   5.5298,  17.2000], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-2.0121e+00, -2.9787e+00, -1.1123e+00,  5.6896e-01,  4.3052e-01,
         -1.1035e+00,  1.4846e+00, -3.3242e+00,  3.1354e-01, -1.0842e+00],
        [ 8.6897e+00, -1.3175e+00,  2.9611e-01,  1.0827e+01,  2.3871e+01,
         -2.0452e+00,  1.3928e+01,  4.9597e-01,  2.1299e+01,  1.9288e+00],
        [-2.4216e+00, -1.4452e+00, -1.5382e+00,  2.7795e-01,  1.4699e-01,
         -1.5179e+00,  1.3018e+00, -2.6127e+00, -1.0571e-01, -3.4367e-01],
        [-1.7489e+01,  1.0779e+01, -3.9544e+00,  1.2519e+00,  2.4128e+00,
          3.8898e+00,  7.0814e+00,  1.2664e-01,  2.1681e+00, -2.9399e+01],
        [-3.5744e+00,  1.2186e+00, -1.1619e+01, -2.8241e+00, -7.7854e-01,
         -1.8820e+00, -5.7416e+00,  4.8959e-01, -1.6507e+00,  4.2313e+00],
        [-3.6671e+00,  2.1981e+00, -3.9075e+00, -7.3000e-01, -2.0503e+00,
         -1.8657e+00, -2.4611e+00,  1.2821e-02, -2.4369e+00,  3.7389e+00],
        [-2.7668e+00,  5.3642e+00, -4.5424e+00,  6.2185e-02, -2.0289e+00,
         -4.8299e+00,  5.5345e+00, -3.2253e+00, -1.1799e+00,  2.8407e+00],
        [-2.5275e+00, -1.5933e+00, -1.2146e+00,  5.6285e-01,  6.3679e-01,
         -1.3662e+00,  1.5862e+00, -3.6566e+00,  3.8781e-01,  3.6202e-02],
        [-9.0817e+00,  8.7123e+00, -9.6122e-01, -1.8547e+00, -3.3003e+00,
          2.9416e+00, -9.4633e+00,  2.8762e-01, -3.2452e+00, -1.0886e+01],
        [-5.4265e+01,  3.6975e+00, -3.6286e+01, -5.4405e-01, -1.7976e+00,
          2.4681e+00,  5.5841e+00, -3.8708e-01, -1.1236e+00, -3.4395e+01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-3.6985, -6.9758, -4.0898, -3.9120, -3.9474, -6.6076, -6.5272, -3.6866,
        -3.5229, -2.9805], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  1.5527,   0.4458,   1.0557,  -9.4157,   6.0281,   4.7268,   4.9316,
           1.6442,  -1.1524,  23.0428],
        [ -1.5527,  -0.4860,  -1.0557,   9.4377,  -6.0281,  -4.7269,  -4.9441,
          -1.6442,   1.0700, -23.0401]], device='cuda:0'))])
loaded xi:  189.21964
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -1578.3845671307809
new min fval from sgd:  -1578.8321272770272
min fval:  -1578.8321272770272
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -0.9432,   0.1545],
        [ -0.9432,   0.1545],
        [-18.6739,  -1.3976],
        [  9.8117, -16.1919],
        [ 23.5200,  -2.7545],
        [ -4.2295, -18.2053],
        [-35.2647, -13.1511],
        [ 20.6889,  -6.4197],
        [ 15.3609, -14.1408],
        [ -0.9432,   0.1545]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -3.0180,  -3.0180,  20.2780, -12.9385, -17.5881, -12.6545, -10.5094,
        -13.5520, -12.0671,  -3.0180], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ -0.2341,  -0.2341,  -1.3549,  -0.4529,  -0.0978,  -0.4558,  -0.2134,
          -0.2870,  -0.5963,  -0.2341],
        [ -0.2341,  -0.2341,  -1.3549,  -0.4529,  -0.0978,  -0.4558,  -0.2134,
          -0.2870,  -0.5963,  -0.2341],
        [ -0.2341,  -0.2341,  -1.3549,  -0.4529,  -0.0978,  -0.4558,  -0.2134,
          -0.2870,  -0.5963,  -0.2341],
        [ -0.2341,  -0.2341,  -1.3549,  -0.4529,  -0.0978,  -0.4558,  -0.2134,
          -0.2870,  -0.5963,  -0.2341],
        [  0.0635,   0.0635, -14.0764,  10.4307,  19.0201,  14.6991,  13.8668,
           7.9650,  13.7344,   0.0635],
        [ -0.2341,  -0.2341,  -1.3549,  -0.4529,  -0.0978,  -0.4558,  -0.2134,
          -0.2870,  -0.5963,  -0.2341],
        [ -0.2341,  -0.2341,  -1.3549,  -0.4529,  -0.0978,  -0.4558,  -0.2134,
          -0.2870,  -0.5963,  -0.2341],
        [ -0.2341,  -0.2341,  -1.3549,  -0.4529,  -0.0978,  -0.4558,  -0.2134,
          -0.2870,  -0.5963,  -0.2341],
        [ -0.2341,  -0.2341,  -1.3549,  -0.4529,  -0.0978,  -0.4558,  -0.2134,
          -0.2870,  -0.5963,  -0.2341],
        [ -0.3224,  -0.3224,  12.8162, -10.2171, -14.5532, -14.5897,  -8.6304,
          -9.5691, -12.7078,  -0.3224]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.4077, -1.4077, -1.4077, -1.4077, -5.9093, -1.4077, -1.4077, -1.4077,
        -1.4077,  1.6507], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.1511,  -0.1511,  -0.1511,  -0.1511, -18.7060,  -0.1511,  -0.1511,
          -0.1511,  -0.1511,  14.1984]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 16.3723,   9.7813],
        [-24.7409,  -2.0395],
        [  9.7787,  -1.2917],
        [ -3.9477,   9.3043],
        [ -4.0717,   9.4841],
        [-19.6496,   1.4134],
        [ -8.0002,  11.8002],
        [ -1.6414,   2.4934],
        [ -3.9363,   9.9570],
        [  9.0396,  21.9264]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([  4.6144,  16.5131, -10.4638,   3.8921,   6.4508,  21.3367,   8.2757,
         -4.4242,   5.5086,  17.0907], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-1.9571e+00, -3.1548e+00, -1.0958e+00,  6.0746e-01,  4.9303e-01,
         -1.0475e+00,  1.5274e+00, -3.3808e+00,  3.6870e-01, -1.0161e+00],
        [ 8.6911e+00, -1.2708e+00,  5.6791e-02,  1.0764e+01,  2.3822e+01,
         -2.0385e+00,  1.3751e+01,  4.9745e-01,  2.1245e+01,  1.9777e+00],
        [-2.4656e+00, -1.6781e+00, -1.6438e+00,  3.2932e-01,  2.2757e-01,
         -1.5855e+00,  1.3544e+00, -2.6578e+00, -3.1226e-02, -2.7499e-01],
        [-1.7455e+01,  1.0773e+01, -3.8913e+00,  1.1475e+00,  2.3038e+00,
          3.8904e+00,  6.9816e+00,  3.1409e-02,  2.0632e+00, -2.9513e+01],
        [-3.5632e+00,  1.1772e+00, -1.1560e+01, -3.1392e+00, -1.0944e+00,
         -1.9123e+00, -6.0320e+00,  3.3496e-01, -1.9670e+00,  4.2160e+00],
        [-3.6566e+00,  2.1249e+00, -3.9473e+00, -1.0317e+00, -2.3616e+00,
         -1.9114e+00, -2.7315e+00, -2.7901e-01, -2.7410e+00,  3.7093e+00],
        [-2.7058e+00,  5.0780e+00, -4.4074e+00,  8.5389e-02, -2.1979e+00,
         -5.1134e+00,  5.3693e+00, -3.4530e+00, -1.2322e+00,  2.5573e+00],
        [-2.4653e+00, -1.7578e+00, -1.1550e+00,  6.0276e-01,  6.9742e-01,
         -1.3094e+00,  1.6289e+00, -3.7163e+00,  4.4231e-01,  1.0012e-01],
        [-8.9636e+00,  8.8438e+00, -8.6424e-01, -1.6403e+00, -3.0942e+00,
          3.0709e+00, -9.2259e+00,  5.2406e-01, -3.0281e+00, -1.0802e+01],
        [-5.4183e+01,  3.7950e+00, -3.6478e+01, -3.4515e-01, -1.5970e+00,
          2.5656e+00,  5.7891e+00, -2.1144e-01, -9.2215e-01, -3.4190e+01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-3.6523, -6.9902, -4.1700, -3.9107, -3.9775, -6.6530, -6.8107, -3.6326,
        -3.3935, -2.8830], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  1.6014,   0.4046,   0.9780,  -9.3104,   5.9972,   4.6810,   4.6486,
           1.7001,  -1.2508,  23.1372],
        [ -1.6014,  -0.4448,  -0.9780,   9.3324,  -5.9972,  -4.6810,  -4.6611,
          -1.7001,   1.1685, -23.1345]], device='cuda:0'))])
xi:  [189.09138]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 749.1428631534923
W_T_median: 487.174560915051
W_T_pctile_5: 201.64642545063808
W_T_CVAR_5_pct: 17.960775861243633
Average q (qsum/M+1):  48.182841639364916
Optimal xi:  [189.09138]
Expected(across Rb) median(across samples) p_equity:  0.28795578305919967
obj fun:  tensor(-1578.8321, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 5.0
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-1.2734e+00,  4.8709e-01],
        [-2.0934e+00,  2.5409e+00],
        [-2.2876e+01,  1.6497e-02],
        [ 1.1707e+01, -1.9355e+01],
        [ 2.7174e+01, -2.8451e+00],
        [ 5.2974e-01, -2.0164e+01],
        [-1.4523e+01, -1.4006e+01],
        [ 2.5252e+01, -6.6165e+00],
        [ 2.1479e+01, -1.2247e+01],
        [ 1.4506e+00,  1.0643e+01]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -3.8504,  -4.9451,  19.2859, -14.5092, -18.2183, -14.7456, -12.5980,
        -15.0216, -12.3807,  -2.9477], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ 7.7663e-03,  5.1054e-02, -1.6077e+00, -3.6082e-01, -6.8995e-02,
         -2.2112e-01, -4.0013e-02, -1.5366e-01, -4.8100e-01, -2.2317e-01],
        [ 7.7667e-03,  5.1052e-02, -1.6077e+00, -3.6081e-01, -6.8996e-02,
         -2.2111e-01, -4.0013e-02, -1.5366e-01, -4.8100e-01, -2.2316e-01],
        [ 7.7593e-03,  5.1074e-02, -1.6075e+00, -3.6085e-01, -6.8988e-02,
         -2.2113e-01, -4.0012e-02, -1.5365e-01, -4.8096e-01, -2.2318e-01],
        [ 7.6082e-03,  5.1231e-02, -1.5976e+00, -3.5942e-01, -6.9857e-02,
         -2.2033e-01, -3.9888e-02, -1.5423e-01, -4.7853e-01, -2.1877e-01],
        [ 2.9546e-01, -7.0587e-01, -1.4249e+01,  1.5561e+01,  2.1216e+01,
          1.5625e+01,  9.1560e+00,  1.3380e+01,  1.4731e+01, -5.4137e-01],
        [ 7.5223e-03,  5.1595e-02, -1.5973e+00, -3.6067e-01, -6.9622e-02,
         -2.2059e-01, -3.9908e-02, -1.5389e-01, -4.7752e-01, -2.2053e-01],
        [ 7.5219e-03,  5.1596e-02, -1.5972e+00, -3.6067e-01, -6.9623e-02,
         -2.2059e-01, -3.9907e-02, -1.5389e-01, -4.7752e-01, -2.2053e-01],
        [ 7.6052e-03,  5.1337e-02, -1.5997e+00, -3.6001e-01, -6.9697e-02,
         -2.2043e-01, -3.9915e-02, -1.5401e-01, -4.7806e-01, -2.2001e-01],
        [ 7.7425e-03,  5.1127e-02, -1.6069e+00, -3.6098e-01, -6.8970e-02,
         -2.2117e-01, -4.0010e-02, -1.5363e-01, -4.8091e-01, -2.2327e-01],
        [ 2.0968e-01,  5.7453e-01,  1.2352e+01, -1.5429e+01, -1.5342e+01,
         -1.3502e+01, -1.4275e+00, -1.1646e+01, -1.2296e+01,  1.0666e+00]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.6527, -1.6527, -1.6529, -1.6660, -4.2043, -1.6636, -1.6636, -1.6626,
        -1.6532,  0.4355], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.0579,  -0.0579,  -0.0579,  -0.0577, -19.8162,  -0.0575,  -0.0575,
          -0.0577,  -0.0579,  13.0785]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 16.5454,  10.1505],
        [-27.7295,  -3.4493],
        [ 12.0052,  -2.8082],
        [ -7.3754,   2.4268],
        [-15.6389,   6.7443],
        [-22.1360,   2.1224],
        [ -5.7880,  13.9104],
        [ -7.6202,   5.0118],
        [-13.9450,   4.8303],
        [ 10.1323,  23.6041]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([  5.3889,  16.1790, -13.2207,  -3.5134,   1.1029,  24.0271,  10.9445,
         -8.9956,   0.0942,  18.2169], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-2.5210e+00,  2.8651e+00, -8.2776e+00, -2.5787e+00, -2.1681e-02,
         -2.7665e+00,  1.5492e+00, -2.4621e+00, -2.3149e+00,  2.5708e+00],
        [ 9.2009e+00, -9.2805e-01,  1.4710e-01,  1.1929e+00,  1.9313e+01,
         -2.2385e+00,  2.0543e+01,  1.7633e-02,  8.2694e+00,  2.2845e+00],
        [-1.7957e+00,  5.8038e-01, -1.7285e+01, -1.5858e+00, -2.2805e+00,
         -2.5971e+00,  1.0729e+00, -8.8275e-01, -2.9741e+00,  2.8343e+00],
        [-1.7300e+01,  1.2026e+01, -7.3663e+00,  8.1434e-01,  3.3758e+00,
          5.4412e+00,  2.3406e+00, -4.6183e-02,  1.2460e+00, -3.0484e+01],
        [-2.7516e+00,  5.2446e-02, -2.1913e+01, -1.2601e+00, -1.3140e+00,
         -2.0667e+00,  6.3349e-01, -4.2871e+00, -3.1028e+00,  5.1743e+00],
        [-3.1050e+00,  3.8474e-02, -1.8430e+01, -1.1562e+00, -1.0966e+00,
         -1.7040e+00,  6.8963e-01, -1.5615e+00, -4.1952e+00,  4.5244e+00],
        [-2.9802e+00,  2.0621e+00, -5.9482e+00, -8.5396e-01, -1.3693e+00,
         -5.0158e+00,  7.8727e-01, -9.7172e-01, -1.5423e+00,  3.8791e+00],
        [-5.2476e-01, -1.5870e+01,  8.7069e-01, -4.4496e-01, -5.1603e-01,
          1.6685e+00, -3.4716e-01, -5.3196e-01, -5.1674e-01, -9.1086e+00],
        [-8.3235e+00,  6.3334e+00, -8.6171e-01, -7.5219e-01, -2.3934e+00,
          4.6890e+00, -7.6771e+00, -1.5385e-02, -1.9552e+00, -8.6234e+00],
        [-8.7035e+01,  4.5951e+00, -4.8541e+01, -2.4205e+00,  1.6555e+00,
          3.3116e+00, -1.1850e+00,  3.9256e-04,  7.4916e-01, -7.9892e+01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-6.1122, -7.9929, -6.3331, -4.7742, -5.0293, -7.2396, -6.8996, -4.5070,
        -3.3346, -2.3465], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  4.9421,   0.4776,   5.4848,  -9.4060,   7.3509,   7.5357,   6.4729,
           4.4710,  -0.8656,  31.1138],
        [ -4.9421,  -0.5178,  -5.4848,   9.4228,  -7.3509,  -7.5358,  -6.4819,
          -4.4711,   0.7832, -31.1109]], device='cuda:0'))])
loaded xi:  214.20367
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -2749.060958229539
min fval:  -2749.060958229539
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -1.3252,   0.3236],
        [ -2.1084,   2.8134],
        [-22.8308,   0.3574],
        [ 11.5890, -19.5310],
        [ 27.3242,  -2.8001],
        [  0.6399, -20.3426],
        [-14.4312, -14.1866],
        [ 25.4033,  -6.4409],
        [ 21.6327, -12.3962],
        [  1.2759,  10.4683]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -3.7256,  -5.0825,  19.2949, -14.3342, -18.0649, -14.5676, -12.4171,
        -14.8748, -12.2244,  -3.1222], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ 1.4631e-01, -5.0104e-03, -1.4618e+00, -2.0486e-01, -3.6062e-02,
         -5.1891e-02,  1.3524e-01, -6.6260e-02, -4.6693e-01, -1.8806e-01],
        [ 1.4631e-01, -5.0114e-03, -1.4618e+00, -2.0485e-01, -3.6063e-02,
         -5.1889e-02,  1.3524e-01, -6.6260e-02, -4.6693e-01, -1.8805e-01],
        [ 1.4629e-01, -5.0005e-03, -1.4615e+00, -2.0490e-01, -3.6062e-02,
         -5.1902e-02,  1.3524e-01, -6.6262e-02, -4.6691e-01, -1.8808e-01],
        [ 1.4604e-01, -5.0472e-03, -1.4517e+00, -2.0352e-01, -3.7081e-02,
         -5.1140e-02,  1.3535e-01, -6.6998e-02, -4.6475e-01, -1.8391e-01],
        [ 4.6522e-01, -5.9956e-01, -1.4079e+01,  1.5735e+01,  2.1352e+01,
          1.5805e+01,  9.3371e+00,  1.3534e+01,  1.4838e+01, -4.0441e-01],
        [ 1.4587e-01, -4.8689e-03, -1.4515e+00, -2.0483e-01, -3.6936e-02,
         -5.1418e-02,  1.3532e-01, -6.6837e-02, -4.6406e-01, -1.8571e-01],
        [ 1.4587e-01, -4.8688e-03, -1.4514e+00, -2.0483e-01, -3.6938e-02,
         -5.1418e-02,  1.3532e-01, -6.6838e-02, -4.6406e-01, -1.8571e-01],
        [ 1.4602e-01, -4.9875e-03, -1.4539e+00, -2.0413e-01, -3.6926e-02,
         -5.1237e-02,  1.3532e-01, -6.6821e-02, -4.6438e-01, -1.8513e-01],
        [ 1.4627e-01, -4.9740e-03, -1.4609e+00, -2.0503e-01, -3.6060e-02,
         -5.1946e-02,  1.3524e-01, -6.6266e-02, -4.6690e-01, -1.8818e-01],
        [ 3.7672e-02,  4.5412e-01,  1.2180e+01, -1.5605e+01, -1.5487e+01,
         -1.3680e+01, -1.6079e+00, -1.1803e+01, -1.2430e+01,  9.2069e-01]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.5080, -1.5080, -1.5082, -1.5213, -4.0352, -1.5191, -1.5191, -1.5180,
        -1.5085,  0.2638], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.2257,  -0.2257,  -0.2256,  -0.2254, -19.9849,  -0.2253,  -0.2253,
          -0.2254,  -0.2256,  12.9072]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 16.4277,  10.2671],
        [-27.7881,  -3.4042],
        [ 11.7738,  -2.6438],
        [ -7.2945,   2.4060],
        [-15.6138,   6.5756],
        [-22.1549,   2.0952],
        [ -5.6891,  13.8767],
        [ -7.5614,   5.0629],
        [-13.8534,   4.6906],
        [ 10.2667,  23.6035]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([  5.2791,  16.1199, -13.4538,  -3.4661,   1.1920,  24.0127,  10.9873,
         -8.9353,   0.2015,  18.1904], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-2.5796e+00,  2.8005e+00, -8.3583e+00, -2.6251e+00, -4.3906e-02,
         -2.8246e+00,  1.4638e+00, -2.6077e+00, -2.3422e+00,  2.5162e+00],
        [ 9.3345e+00, -9.4381e-01,  1.8532e-01,  1.1992e+00,  1.9450e+01,
         -2.1572e+00,  2.0603e+01,  4.7017e-02,  8.3049e+00,  2.2035e+00],
        [-1.7946e+00,  5.1964e-01, -1.7059e+01, -1.6608e+00, -2.2978e+00,
         -2.6053e+00,  1.0571e+00, -1.0410e+00, -3.0244e+00,  2.8359e+00],
        [-1.7050e+01,  1.2249e+01, -7.2252e+00,  7.3715e-01,  3.2742e+00,
          5.6655e+00,  2.2512e+00, -8.0659e-02,  1.1484e+00, -3.0540e+01],
        [-2.7176e+00,  1.3475e-02, -2.1672e+01, -1.3052e+00, -1.3175e+00,
         -2.0425e+00,  6.4496e-01, -4.4053e+00, -3.1383e+00,  5.2081e+00],
        [-3.0723e+00, -8.1089e-03, -1.8195e+01, -1.2139e+00, -1.1008e+00,
         -1.6840e+00,  7.1429e-01, -1.7155e+00, -4.2290e+00,  4.5563e+00],
        [-3.0168e+00,  2.0099e+00, -6.0196e+00, -9.4323e-01, -1.4314e+00,
         -5.0558e+00,  7.2881e-01, -1.1265e+00, -1.5971e+00,  3.8449e+00],
        [-5.1167e-01, -1.5717e+01,  8.8761e-01, -5.9946e-01, -6.7923e-01,
          1.6667e+00, -2.7386e-01, -6.9827e-01, -6.8318e-01, -9.0768e+00],
        [-8.3207e+00,  6.3337e+00, -7.6717e-01, -7.4738e-01, -2.5051e+00,
          4.6902e+00, -7.6388e+00, -3.0698e-02, -2.0669e+00, -8.6486e+00],
        [-8.6852e+01,  4.7895e+00, -4.8325e+01, -2.2643e+00,  1.8277e+00,
          3.5060e+00, -1.0188e+00, -1.6171e-02,  9.1650e-01, -7.9733e+01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-6.1703, -7.8715, -6.3408, -4.5507, -5.0046, -7.2192, -6.9395, -4.4910,
        -3.3352, -2.1520], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  4.8852,   0.4772,   5.4776,  -9.5615,   7.3751,   7.5563,   6.4329,
           4.4865,  -0.8853,  31.3068],
        [ -4.8852,  -0.5174,  -5.4776,   9.5783,  -7.3751,  -7.5564,  -6.4419,
          -4.4865,   0.8029, -31.3040]], device='cuda:0'))])
xi:  [214.14267]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 717.24671013677
W_T_median: 504.8173090156531
W_T_pctile_5: 208.1769336529224
W_T_CVAR_5_pct: 27.120802726632796
Average q (qsum/M+1):  45.29914314516129
Optimal xi:  [214.14267]
Expected(across Rb) median(across samples) p_equity:  0.21238034640749295
obj fun:  tensor(-2749.0610, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 50.0
-----------------------------------------------
-----------------------------------------------
new min fval from sgd:  -28.225250905620825
min fval:  -28.225250905620825
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ 0.1286, -0.1987],
        [ 0.1286, -0.1987],
        [ 0.1286, -0.1987],
        [ 0.1286, -0.1987],
        [ 0.1286, -0.1987],
        [ 0.1286, -0.1987],
        [ 0.1286, -0.1987],
        [ 0.1286, -0.1987],
        [ 0.1286, -0.1987],
        [ 0.1286, -0.1987]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([0.2330, 0.2330, 0.2330, 0.2330, 0.2330, 0.2330, 0.2330, 0.2330, 0.2330,
        0.2330], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470,
         0.2470],
        [0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470,
         0.2470],
        [0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470,
         0.2470],
        [0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470,
         0.2470],
        [0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470,
         0.2470],
        [0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470,
         0.2470],
        [0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470,
         0.2470],
        [0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470,
         0.2470],
        [0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470,
         0.2470],
        [0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470, 0.2470,
         0.2470]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([0.4005, 0.4005, 0.4005, 0.4005, 0.4005, 0.4005, 0.4005, 0.4005, 0.4005,
        0.4005], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-1.7688, -1.7688, -1.7688, -1.7688, -1.7688, -1.7688, -1.7688, -1.7688,
         -1.7688, -1.7688]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 14.3071,   8.9954],
        [-27.3132,  -3.1232],
        [ 12.0633,  -2.6311],
        [ -1.7024,   0.4812],
        [-11.4305,   3.2591],
        [-22.9057,   2.3158],
        [ -3.0329,  16.1110],
        [ -2.1153,   3.9878],
        [ -1.7022,   0.4661],
        [ 14.3706,  23.1320]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([  4.1046,  16.1419, -12.4736,  -3.7949,   1.7351,  23.9689,  12.8677,
         -5.0090,  -3.8115,  16.4730], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-2.7733e+00,  1.5692e+00, -1.4278e+00, -9.5870e-02, -1.6441e+00,
         -2.1698e+00,  1.9237e+00, -4.2273e-01, -8.6045e-02,  1.0862e+00],
        [ 1.0069e+01, -9.8813e-01,  6.7221e-01,  3.8218e-02,  4.1513e+00,
         -1.6795e+00,  1.7912e+01,  2.3897e-02,  3.8220e-02,  1.7208e+00],
        [-3.2569e+00,  1.9828e+00,  1.4897e+00,  1.4046e-02, -1.1228e+00,
         -2.1014e+00,  4.9266e+00, -8.2885e-01,  3.1819e-02, -2.7258e-02],
        [-1.7446e+01,  1.0915e+01, -7.1271e+00, -4.5272e-02, -1.1678e+00,
          4.4786e+00, -1.0501e+01, -5.0717e-03, -4.9866e-02, -2.0494e+01],
        [-3.1059e+00, -4.5329e-01, -1.1084e+01,  8.0550e-02, -5.1100e+00,
         -2.0669e+00,  2.2020e+00,  1.9195e+00,  4.8091e-02,  4.9407e+00],
        [-2.7151e+00,  1.2689e+00, -5.9608e-01, -1.8189e-01, -5.0935e+00,
         -2.0358e+00,  2.9646e+00,  3.2088e+00, -1.3078e-01,  2.8209e+00],
        [-1.3108e-01, -3.1295e-01,  1.0464e+00,  1.6180e-01,  6.3027e-01,
         -2.4032e+00,  9.5382e-01,  5.6659e-01,  1.5917e-01, -3.2053e+00],
        [-2.0771e+00,  7.0294e-01, -3.3688e-01, -5.2928e-02,  6.9871e-01,
         -8.8556e-01,  1.6547e+00,  2.8458e-01, -3.4137e-02, -1.5123e+00],
        [-8.0526e+00,  2.8233e+00, -4.9481e-01,  4.0104e-01, -1.7294e+00,
          7.8355e+00, -8.5186e+00,  9.8750e-02,  3.7656e-01, -6.7861e+00],
        [-3.8605e+01,  3.0973e+00, -1.2227e+01, -5.1517e-01,  3.0994e+00,
          1.9489e+00, -1.0392e+01, -1.2594e-02, -4.7543e-01, -1.1490e+01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-5.0432, -9.1847, -4.9500, -5.8588, -5.5584, -6.3836, -4.1148, -4.1329,
        -3.2904, -3.2890], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  2.1611,   0.4604,   3.5708,  -8.5474,   4.9514,   3.1938,   1.8529,
           0.8438,  -0.5662,  20.3362],
        [ -2.1611,  -0.5005,  -3.5709,   8.5432,  -4.9514,  -3.1938,  -1.8530,
          -0.8438,   0.4854, -20.3335]], device='cuda:0'))])
xi:  [217.09328]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 1191.9874834053476
W_T_median: 943.9580375613932
W_T_pctile_5: 224.8418755010433
W_T_CVAR_5_pct: 28.52162258617943
Average q (qsum/M+1):  35.0
Optimal xi:  [217.09328]
Expected(across Rb) median(across samples) p_equity:  0.2273985207080841
obj fun:  tensor(-28.2253, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 999.0
-----------------------------------------------

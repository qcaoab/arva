Starting at: 
30-05-23_11:43

 numpy seed:  3  


 pytorch seed:  3  

Key parameters-------
paths: 256000
iterations: 10
batchsize: 1000
remove neg:  False
w constaint activation:  yy_fix_jan29


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = B10_and_VWD
timeseries_basket['basket_desc'] = CRSP data: B10 and VWD
timeseries_basket['basket_columns'] = 
['B10_real_ret', 'VWD_real_ret']
############# End: defined asset  basket #################
-----------------------------------------------
No need to read market data.
-----------------------------------------------
3.3333333333333335% of MC simulations done.
6.666666666666667% of MC simulations done.
10.0% of MC simulations done.
13.333333333333334% of MC simulations done.
16.666666666666664% of MC simulations done.
20.0% of MC simulations done.
23.333333333333332% of MC simulations done.
26.666666666666668% of MC simulations done.
30.0% of MC simulations done.
33.33333333333333% of MC simulations done.
36.666666666666664% of MC simulations done.
40.0% of MC simulations done.
43.333333333333336% of MC simulations done.
46.666666666666664% of MC simulations done.
50.0% of MC simulations done.
53.333333333333336% of MC simulations done.
56.666666666666664% of MC simulations done.
60.0% of MC simulations done.
63.33333333333333% of MC simulations done.
66.66666666666666% of MC simulations done.
70.0% of MC simulations done.
73.33333333333333% of MC simulations done.
76.66666666666667% of MC simulations done.
80.0% of MC simulations done.
83.33333333333334% of MC simulations done.
86.66666666666667% of MC simulations done.
90.0% of MC simulations done.
93.33333333333333% of MC simulations done.
96.66666666666667% of MC simulations done.
100.0% of MC simulations done.
Withdrawal NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       1       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      10  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      10  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       1              none   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 10)     True          10  
2     (10, 10)     True          10  
3      (10, 1)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
Allocation NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       2       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      10  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      10  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       2           softmax   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 10)     True          10  
2     (10, 10)     True          10  
3      (10, 2)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
{'methods': ['Adam'], 'output_progress': False, 'tol': 1e-06, 'itbound_scipy_algorithms': 1000, 'check_exit_criteria': False, 'nit_running_min': 1, 'itbound_SGD_algorithms': 10, 'nit_IterateAveragingStart': 9, 'batchsize': 1000, 'SGD_learningrate': 50.0, 'Adagrad_epsilon': 1e-08, 'Adagrad_eta': 1.0, 'Adadelta_ewma': 0.9, 'Adadelta_epsilon': 1e-08, 'RMSprop_ewma': 0.8, 'RMSprop_epsilon': 1e-08, 'RMSprop_eta': 0.1, 'Adam_ewma_1': 0.9, 'Adam_ewma_2': 0.998, 'Adam_eta': 0.0, 'Adam_epsilon': 1e-08, 'Adam_weight_decay': 0.0001, 'running_min_from_avg': False, 'running_min_from_sgd': True, 'lr_schedule': True}
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.4116,  1.3199],
        [-0.4116,  1.3199],
        [-2.8881,  6.7106],
        [14.9030,  1.8236],
        [-0.4116,  1.3199],
        [-0.4116,  1.3199],
        [-7.3815,  3.9500],
        [-0.4116,  1.3199],
        [-2.2671,  6.7956],
        [-7.1607, -2.9320]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-0.6831, -0.6831, 11.5805, -9.1002, -0.6831, -0.6831,  8.4358, -0.6831,
        11.4530, -1.4539], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-1.7876e-02, -1.7876e-02, -8.6863e-02, -2.6355e-01, -1.7876e-02,
         -1.7876e-02, -5.3778e-02, -1.7876e-02, -9.0438e-02, -1.9438e-01],
        [-1.7876e-02, -1.7876e-02, -8.6863e-02, -2.6355e-01, -1.7876e-02,
         -1.7876e-02, -5.3778e-02, -1.7876e-02, -9.0438e-02, -1.9438e-01],
        [ 1.2096e-01,  1.2096e-01, -7.4791e+00, -1.0507e+01,  1.2096e-01,
          1.2096e-01, -3.9778e+00,  1.2096e-01, -7.2422e+00,  6.5532e-01],
        [ 2.1593e-01,  2.1593e-01,  1.2645e+00, -1.2186e-02,  2.1593e-01,
          2.1593e-01,  1.2058e+00,  2.1593e-01,  1.2207e+00, -8.7088e-01],
        [-1.7876e-02, -1.7876e-02, -8.6863e-02, -2.6355e-01, -1.7876e-02,
         -1.7876e-02, -5.3778e-02, -1.7876e-02, -9.0438e-02, -1.9438e-01],
        [-1.7876e-02, -1.7876e-02, -8.6863e-02, -2.6355e-01, -1.7876e-02,
         -1.7876e-02, -5.3778e-02, -1.7876e-02, -9.0438e-02, -1.9438e-01],
        [ 3.3022e-02,  3.3022e-02,  3.7849e+00,  5.2999e+00,  3.3022e-02,
          3.3022e-02,  1.8996e+00,  3.3022e-02,  3.7527e+00,  6.6934e-01],
        [-6.9860e-03, -6.9859e-03,  4.3408e+00,  6.0624e+00, -6.9859e-03,
         -6.9859e-03,  2.1862e+00, -6.9860e-03,  4.2987e+00,  5.3325e-01],
        [-1.7876e-02, -1.7876e-02, -8.6863e-02, -2.6355e-01, -1.7876e-02,
         -1.7876e-02, -5.3778e-02, -1.7876e-02, -9.0438e-02, -1.9438e-01],
        [-1.7876e-02, -1.7876e-02, -8.6863e-02, -2.6355e-01, -1.7876e-02,
         -1.7876e-02, -5.3778e-02, -1.7876e-02, -9.0438e-02, -1.9438e-01]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.7982, -0.7982,  5.3043, -2.2768, -0.7982, -0.7982, -3.4286, -3.6425,
        -0.7982, -0.7982], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.0303,  -0.0303, -12.8805,   1.8007,  -0.0303,  -0.0303,   5.8044,
           6.9833,  -0.0303,  -0.0303]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 13.0398,   2.9332],
        [ -4.2506,  -9.6273],
        [  3.7264,  -7.9721],
        [-16.4685,  -6.4120],
        [-14.5486,  -2.5781],
        [-12.3933,   0.2663],
        [ -5.5573,  -6.1077],
        [-10.1669,  -9.6245],
        [ -8.4640,   1.3361],
        [  7.9075,   9.2857]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -3.8641, -12.0384,  -8.0521,  -4.2529,   1.8889,  12.1311,  -3.1131,
         -7.5913,   5.7351,   7.3481], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[  1.4363,  -0.7948,   3.7646,  -4.8710,  -5.5298,   1.7145,   3.3426,
           2.1426,  -0.7843,  -4.1346],
        [ -0.5591,  -1.1772,  -0.0351,  -0.4769,  -0.5398,  -1.3934,  -3.4742,
          -0.7858,  -3.8795,  -0.3909],
        [ -1.1882,  -0.4769,  -0.7346,  -0.4938,  -0.4959,  -0.8933,  -0.5026,
          -0.4793,  -0.2802,  -1.2512],
        [ -3.9416,   0.1736,  -0.7707,   8.5852,   0.3627,  -5.7661,  -0.5687,
           0.2845,  -3.7352,   0.1033],
        [ -1.1892,  -0.4769,  -0.7356,  -0.4932,  -0.4954,  -0.8925,  -0.5028,
          -0.4792,  -0.2804,  -1.2508],
        [ -0.9845,  10.4842,  -3.5289,   4.7125,   8.9020,   0.7348,  -4.2300,
          -2.9615,   0.3569,  -0.5315],
        [ -3.8781, -11.6431,   4.7153,  -2.7397,  -4.7000,   6.3348,  -0.6087,
           7.0057,  -2.6747,  -8.3752],
        [ -1.1912,  -0.4794,  -0.7289,  -0.4937,  -0.4961,  -0.8988,  -0.5029,
          -0.4812,  -0.2794,  -1.2450],
        [ -3.1889,   0.6671,  -0.9896,   6.7605,   1.8848,  -4.8835,  -0.8292,
           0.1301,  -3.1318,  -0.3236],
        [ -1.2607,   8.0956,  -5.6303,   8.9911,   1.4931,   2.6997,  -2.0809,
          -5.0753,   4.6687,  -0.3588]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-2.9338, -1.4592, -1.8484, -0.8441, -1.8465, -6.2203, -2.3888, -1.8587,
        -1.1750, -2.1765], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-0.5337, -2.0400,  0.0156, -4.1127,  0.0156,  5.5426, -7.6339,  0.0155,
         -1.9083,  0.5455],
        [ 0.3100,  2.0400, -0.0156,  4.1075, -0.0155, -5.4649,  7.6748, -0.0155,
          2.2147, -0.6907]], device='cuda:0'))])
loaded xi:  -474.13513
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -1740.9238805348436
min fval:  -1740.9238805348436
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.4116,  1.3199],
        [-0.4116,  1.3199],
        [-2.8881,  6.7106],
        [14.9030,  1.8236],
        [-0.4116,  1.3199],
        [-0.4116,  1.3199],
        [-7.3815,  3.9500],
        [-0.4116,  1.3199],
        [-2.2671,  6.7956],
        [-7.1607, -2.9320]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-0.6831, -0.6831, 11.5805, -9.1002, -0.6831, -0.6831,  8.4358, -0.6831,
        11.4530, -1.4539], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-1.7876e-02, -1.7876e-02, -8.6863e-02, -2.6355e-01, -1.7876e-02,
         -1.7876e-02, -5.3778e-02, -1.7876e-02, -9.0438e-02, -1.9438e-01],
        [-1.7876e-02, -1.7876e-02, -8.6863e-02, -2.6355e-01, -1.7876e-02,
         -1.7876e-02, -5.3778e-02, -1.7876e-02, -9.0438e-02, -1.9438e-01],
        [ 1.2096e-01,  1.2096e-01, -7.4791e+00, -1.0507e+01,  1.2096e-01,
          1.2096e-01, -3.9778e+00,  1.2096e-01, -7.2422e+00,  6.5532e-01],
        [ 2.1593e-01,  2.1593e-01,  1.2645e+00, -1.2186e-02,  2.1593e-01,
          2.1593e-01,  1.2058e+00,  2.1593e-01,  1.2207e+00, -8.7088e-01],
        [-1.7876e-02, -1.7876e-02, -8.6863e-02, -2.6355e-01, -1.7876e-02,
         -1.7876e-02, -5.3778e-02, -1.7876e-02, -9.0438e-02, -1.9438e-01],
        [-1.7876e-02, -1.7876e-02, -8.6863e-02, -2.6355e-01, -1.7876e-02,
         -1.7876e-02, -5.3778e-02, -1.7876e-02, -9.0438e-02, -1.9438e-01],
        [ 3.3022e-02,  3.3022e-02,  3.7849e+00,  5.2999e+00,  3.3022e-02,
          3.3022e-02,  1.8996e+00,  3.3022e-02,  3.7527e+00,  6.6934e-01],
        [-6.9860e-03, -6.9859e-03,  4.3408e+00,  6.0624e+00, -6.9859e-03,
         -6.9859e-03,  2.1862e+00, -6.9860e-03,  4.2987e+00,  5.3325e-01],
        [-1.7876e-02, -1.7876e-02, -8.6863e-02, -2.6355e-01, -1.7876e-02,
         -1.7876e-02, -5.3778e-02, -1.7876e-02, -9.0438e-02, -1.9438e-01],
        [-1.7876e-02, -1.7876e-02, -8.6863e-02, -2.6355e-01, -1.7876e-02,
         -1.7876e-02, -5.3778e-02, -1.7876e-02, -9.0438e-02, -1.9438e-01]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.7982, -0.7982,  5.3043, -2.2768, -0.7982, -0.7982, -3.4286, -3.6425,
        -0.7982, -0.7982], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.0303,  -0.0303, -12.8805,   1.8007,  -0.0303,  -0.0303,   5.8044,
           6.9833,  -0.0303,  -0.0303]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 13.0398,   2.9332],
        [ -4.2506,  -9.6273],
        [  3.7264,  -7.9721],
        [-16.4685,  -6.4120],
        [-14.5486,  -2.5781],
        [-12.3933,   0.2663],
        [ -5.5573,  -6.1077],
        [-10.1669,  -9.6245],
        [ -8.4640,   1.3361],
        [  7.9075,   9.2857]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -3.8641, -12.0384,  -8.0521,  -4.2529,   1.8889,  12.1311,  -3.1131,
         -7.5913,   5.7351,   7.3481], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[  1.4363,  -0.7948,   3.7646,  -4.8710,  -5.5298,   1.7145,   3.3426,
           2.1426,  -0.7843,  -4.1346],
        [ -0.5591,  -1.1772,  -0.0351,  -0.4769,  -0.5398,  -1.3934,  -3.4742,
          -0.7858,  -3.8795,  -0.3909],
        [ -1.1882,  -0.4769,  -0.7346,  -0.4938,  -0.4959,  -0.8933,  -0.5026,
          -0.4793,  -0.2802,  -1.2512],
        [ -3.9416,   0.1736,  -0.7707,   8.5852,   0.3627,  -5.7661,  -0.5687,
           0.2845,  -3.7352,   0.1033],
        [ -1.1892,  -0.4769,  -0.7356,  -0.4932,  -0.4954,  -0.8925,  -0.5028,
          -0.4792,  -0.2804,  -1.2508],
        [ -0.9845,  10.4842,  -3.5289,   4.7125,   8.9020,   0.7348,  -4.2300,
          -2.9615,   0.3569,  -0.5315],
        [ -3.8781, -11.6431,   4.7153,  -2.7397,  -4.7000,   6.3348,  -0.6087,
           7.0057,  -2.6747,  -8.3752],
        [ -1.1912,  -0.4794,  -0.7289,  -0.4937,  -0.4961,  -0.8988,  -0.5029,
          -0.4812,  -0.2794,  -1.2450],
        [ -3.1889,   0.6671,  -0.9896,   6.7605,   1.8848,  -4.8835,  -0.8292,
           0.1301,  -3.1318,  -0.3236],
        [ -1.2607,   8.0956,  -5.6303,   8.9911,   1.4931,   2.6997,  -2.0809,
          -5.0753,   4.6687,  -0.3588]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-2.9338, -1.4592, -1.8484, -0.8441, -1.8465, -6.2203, -2.3888, -1.8587,
        -1.1750, -2.1765], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-0.5337, -2.0400,  0.0156, -4.1127,  0.0156,  5.5426, -7.6339,  0.0155,
         -1.9083,  0.5455],
        [ 0.3100,  2.0400, -0.0156,  4.1075, -0.0155, -5.4649,  7.6748, -0.0155,
          2.2147, -0.6907]], device='cuda:0'))])
xi:  [-474.13513]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 343.4590344489455
W_T_median: 145.13572583972802
W_T_pctile_5: -481.4121814058269
W_T_CVAR_5_pct: -595.9331787859129
Average q (qsum/M+1):  57.120428269909276
Optimal xi:  [-474.13513]
Expected(across Rb) median(across samples) p_equity:  0.3010426040641808
obj fun:  tensor(-1740.9239, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 0.05
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.7547,  1.5011],
        [-0.7547,  1.5011],
        [-9.0234,  8.4485],
        [-0.7547,  1.5011],
        [-0.7547,  1.5011],
        [-0.7547,  1.5011],
        [-0.7547,  1.5011],
        [-0.7547,  1.5011],
        [ 5.0028,  9.4979],
        [-0.7547,  1.5011]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-1.1278, -1.1278, 13.6225, -1.1278, -1.1278, -1.1278, -1.1278, -1.1278,
         9.7794, -1.1278], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-8.7072e-03, -8.7072e-03, -3.4632e-01, -8.7072e-03, -8.7072e-03,
         -8.7072e-03, -8.7070e-03, -8.7072e-03, -5.4617e-01, -8.7072e-03],
        [-8.7072e-03, -8.7072e-03, -3.4632e-01, -8.7071e-03, -8.7072e-03,
         -8.7072e-03, -8.7070e-03, -8.7072e-03, -5.4617e-01, -8.7072e-03],
        [ 2.8803e-01,  2.8803e-01, -7.9615e+00,  2.8803e-01,  2.8803e-01,
          2.8803e-01,  2.8800e-01,  2.8803e-01, -9.9360e+00,  2.8803e-01],
        [-4.4986e-02, -4.4986e-02,  3.8023e+00, -4.4986e-02, -4.4986e-02,
         -4.4986e-02, -4.4992e-02, -4.4986e-02,  4.5611e+00, -4.4986e-02],
        [-8.7072e-03, -8.7072e-03, -3.4632e-01, -8.7071e-03, -8.7072e-03,
         -8.7072e-03, -8.7070e-03, -8.7072e-03, -5.4617e-01, -8.7072e-03],
        [-8.7071e-03, -8.7072e-03, -3.4632e-01, -8.7071e-03, -8.7072e-03,
         -8.7072e-03, -8.7070e-03, -8.7072e-03, -5.4617e-01, -8.7072e-03],
        [-1.0119e-01, -1.0119e-01,  4.4717e+00, -1.0119e-01, -1.0119e-01,
         -1.0119e-01, -1.0120e-01, -1.0119e-01,  5.4129e+00, -1.0119e-01],
        [-1.2789e-01, -1.2789e-01,  5.1497e+00, -1.2789e-01, -1.2789e-01,
         -1.2789e-01, -1.2792e-01, -1.2789e-01,  6.1610e+00, -1.2789e-01],
        [-8.7071e-03, -8.7071e-03, -3.4632e-01, -8.7071e-03, -8.7071e-03,
         -8.7071e-03, -8.7070e-03, -8.7071e-03, -5.4617e-01, -8.7071e-03],
        [-8.7071e-03, -8.7072e-03, -3.4632e-01, -8.7071e-03, -8.7071e-03,
         -8.7071e-03, -8.7070e-03, -8.7071e-03, -5.4617e-01, -8.7071e-03]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.9162, -0.9162,  8.6895, -4.2167, -0.9162, -0.9162, -4.8302, -5.5045,
        -0.9162, -0.9162], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-3.3262e-03, -3.3262e-03, -1.4671e+01,  3.9956e+00, -3.3262e-03,
         -3.3262e-03,  5.4179e+00,  6.9562e+00, -3.3263e-03, -3.3262e-03]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 15.8188,   2.1498],
        [ -2.1930,  -0.8806],
        [  1.9334, -16.0462],
        [-11.2783,  -1.4117],
        [-15.4302,  -2.7401],
        [-13.6265,   0.2803],
        [  1.9037,  -4.0017],
        [ -8.3565, -10.3499],
        [-13.0412,   2.8452],
        [ 13.4601,  11.3857]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -6.6437,  -5.3035, -16.1619,  -1.3299,   1.5421,  12.6302,  -3.0552,
         -9.7924,   8.2395,  11.7640], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ -1.5385,  -0.0969,   6.2621,  -4.7904,  -1.0882,   1.9835,  -1.5789,
          -1.9011,   1.8599,  -1.5028],
        [  0.1791,  -1.1077,  -0.8867,  -1.2336,  -1.0022,   0.4038,   1.8233,
          -0.5600,  -7.1505,  -0.7749],
        [ -1.2830,  -0.3512,  -0.7157,  -0.3515,  -0.3543,  -0.7129,  -1.0564,
          -0.5923,  -0.1328,  -1.1836],
        [ -2.7969,   4.7109,  -0.4599,   4.7826,   2.5341,  -3.2774,  -0.9907,
          -0.3494,  -2.8717,  -1.6164],
        [ -1.2829,  -0.3513,  -0.7157,  -0.3516,  -0.3544,  -0.7128,  -1.0564,
          -0.5922,  -0.1328,  -1.1840],
        [ -6.6539,   0.8123,   5.0930,  -0.3637,  10.1919,  -0.5864,  -2.5546,
           2.7646,   4.3220, -17.4497],
        [ -8.8141,  -1.9533,  12.6181,  -5.9548,   1.5214,   7.8471,  -4.1297,
          -1.3183,   8.9123, -12.5343],
        [ -1.2829,  -0.3513,  -0.7157,  -0.3516,  -0.3544,  -0.7128,  -1.0564,
          -0.5922,  -0.1328,  -1.1840],
        [ -2.6325,   4.5201,  -0.4851,   4.4594,   2.3966,  -3.1292,  -0.9731,
          -0.1783,  -2.6728,  -1.4606],
        [ -0.4053,   9.9173, -10.5833,   6.5345,   3.4628,   3.4959,  -2.0609,
          -0.9235,   1.0925,  -0.9137]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-5.1949, -4.0676, -1.8470, -2.4480, -1.8470, -6.6241, -8.7442, -1.8470,
        -2.3663, -1.7761], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-1.9342e+00, -2.3213e+00,  3.7472e-03, -5.6905e+00,  3.7421e-03,
          8.4818e+00, -3.8592e+00,  3.7422e-03, -3.5517e+00,  7.9993e-01],
        [ 1.7372e+00,  2.3213e+00, -3.7527e-03,  5.6855e+00, -3.7471e-03,
         -8.4062e+00,  3.8673e+00, -3.7471e-03,  3.8502e+00, -9.4156e-01]],
       device='cuda:0'))])
loaded xi:  -241.46672
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -1672.0587757670012
min fval:  -1672.0587757670012
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.7547,  1.5011],
        [-0.7547,  1.5011],
        [-9.0234,  8.4485],
        [-0.7547,  1.5011],
        [-0.7547,  1.5011],
        [-0.7547,  1.5011],
        [-0.7547,  1.5011],
        [-0.7547,  1.5011],
        [ 5.0028,  9.4979],
        [-0.7547,  1.5011]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-1.1278, -1.1278, 13.6225, -1.1278, -1.1278, -1.1278, -1.1278, -1.1278,
         9.7794, -1.1278], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-8.7072e-03, -8.7072e-03, -3.4632e-01, -8.7072e-03, -8.7072e-03,
         -8.7072e-03, -8.7070e-03, -8.7072e-03, -5.4617e-01, -8.7072e-03],
        [-8.7072e-03, -8.7072e-03, -3.4632e-01, -8.7071e-03, -8.7072e-03,
         -8.7072e-03, -8.7070e-03, -8.7072e-03, -5.4617e-01, -8.7072e-03],
        [ 2.8803e-01,  2.8803e-01, -7.9615e+00,  2.8803e-01,  2.8803e-01,
          2.8803e-01,  2.8800e-01,  2.8803e-01, -9.9360e+00,  2.8803e-01],
        [-4.4986e-02, -4.4986e-02,  3.8023e+00, -4.4986e-02, -4.4986e-02,
         -4.4986e-02, -4.4992e-02, -4.4986e-02,  4.5611e+00, -4.4986e-02],
        [-8.7072e-03, -8.7072e-03, -3.4632e-01, -8.7071e-03, -8.7072e-03,
         -8.7072e-03, -8.7070e-03, -8.7072e-03, -5.4617e-01, -8.7072e-03],
        [-8.7071e-03, -8.7072e-03, -3.4632e-01, -8.7071e-03, -8.7072e-03,
         -8.7072e-03, -8.7070e-03, -8.7072e-03, -5.4617e-01, -8.7072e-03],
        [-1.0119e-01, -1.0119e-01,  4.4717e+00, -1.0119e-01, -1.0119e-01,
         -1.0119e-01, -1.0120e-01, -1.0119e-01,  5.4129e+00, -1.0119e-01],
        [-1.2789e-01, -1.2789e-01,  5.1497e+00, -1.2789e-01, -1.2789e-01,
         -1.2789e-01, -1.2792e-01, -1.2789e-01,  6.1610e+00, -1.2789e-01],
        [-8.7071e-03, -8.7071e-03, -3.4632e-01, -8.7071e-03, -8.7071e-03,
         -8.7071e-03, -8.7070e-03, -8.7071e-03, -5.4617e-01, -8.7071e-03],
        [-8.7071e-03, -8.7072e-03, -3.4632e-01, -8.7071e-03, -8.7071e-03,
         -8.7071e-03, -8.7070e-03, -8.7071e-03, -5.4617e-01, -8.7071e-03]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.9162, -0.9162,  8.6895, -4.2167, -0.9162, -0.9162, -4.8302, -5.5045,
        -0.9162, -0.9162], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-3.3262e-03, -3.3262e-03, -1.4671e+01,  3.9956e+00, -3.3262e-03,
         -3.3262e-03,  5.4179e+00,  6.9562e+00, -3.3263e-03, -3.3262e-03]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 15.8188,   2.1498],
        [ -2.1930,  -0.8806],
        [  1.9334, -16.0462],
        [-11.2783,  -1.4117],
        [-15.4302,  -2.7401],
        [-13.6265,   0.2803],
        [  1.9037,  -4.0017],
        [ -8.3565, -10.3499],
        [-13.0412,   2.8452],
        [ 13.4601,  11.3857]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -6.6437,  -5.3035, -16.1619,  -1.3299,   1.5421,  12.6302,  -3.0552,
         -9.7924,   8.2395,  11.7640], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ -1.5385,  -0.0969,   6.2621,  -4.7904,  -1.0882,   1.9835,  -1.5789,
          -1.9011,   1.8599,  -1.5028],
        [  0.1791,  -1.1077,  -0.8867,  -1.2336,  -1.0022,   0.4038,   1.8233,
          -0.5600,  -7.1505,  -0.7749],
        [ -1.2830,  -0.3512,  -0.7157,  -0.3515,  -0.3543,  -0.7129,  -1.0564,
          -0.5923,  -0.1328,  -1.1836],
        [ -2.7969,   4.7109,  -0.4599,   4.7826,   2.5341,  -3.2774,  -0.9907,
          -0.3494,  -2.8717,  -1.6164],
        [ -1.2829,  -0.3513,  -0.7157,  -0.3516,  -0.3544,  -0.7128,  -1.0564,
          -0.5922,  -0.1328,  -1.1840],
        [ -6.6539,   0.8123,   5.0930,  -0.3637,  10.1919,  -0.5864,  -2.5546,
           2.7646,   4.3220, -17.4497],
        [ -8.8141,  -1.9533,  12.6181,  -5.9548,   1.5214,   7.8471,  -4.1297,
          -1.3183,   8.9123, -12.5343],
        [ -1.2829,  -0.3513,  -0.7157,  -0.3516,  -0.3544,  -0.7128,  -1.0564,
          -0.5922,  -0.1328,  -1.1840],
        [ -2.6325,   4.5201,  -0.4851,   4.4594,   2.3966,  -3.1292,  -0.9731,
          -0.1783,  -2.6728,  -1.4606],
        [ -0.4053,   9.9173, -10.5833,   6.5345,   3.4628,   3.4959,  -2.0609,
          -0.9235,   1.0925,  -0.9137]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-5.1949, -4.0676, -1.8470, -2.4480, -1.8470, -6.6241, -8.7442, -1.8470,
        -2.3663, -1.7761], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-1.9342e+00, -2.3213e+00,  3.7472e-03, -5.6905e+00,  3.7421e-03,
          8.4818e+00, -3.8592e+00,  3.7422e-03, -3.5517e+00,  7.9993e-01],
        [ 1.7372e+00,  2.3213e+00, -3.7527e-03,  5.6855e+00, -3.7471e-03,
         -8.4062e+00,  3.8673e+00, -3.7471e-03,  3.8502e+00, -9.4156e-01]],
       device='cuda:0'))])
xi:  [-241.46672]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 356.0378466915169
W_T_median: 134.22665206949816
W_T_pctile_5: -250.15134448017426
W_T_CVAR_5_pct: -357.24353669154107
Average q (qsum/M+1):  56.24629851310484
Optimal xi:  [-241.46672]
Expected(across Rb) median(across samples) p_equity:  0.3280041160682837
obj fun:  tensor(-1672.0588, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 0.2
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-3.6733,  6.9760],
        [-3.6687,  6.9892],
        [-6.8499,  9.7034],
        [-3.8797,  6.3713],
        [-3.8604,  6.4294],
        [-3.6600,  7.0143],
        [ 7.7546,  2.2440],
        [-3.6752,  6.9705],
        [ 6.6046, 12.0485],
        [-3.8732,  6.3907]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ 1.0666,  1.0668, 10.5463,  1.0453,  1.0476,  1.0671, -6.0731,  1.0665,
        11.4637,  1.0460], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ -1.5697,  -1.5701,  -2.0700,  -1.5459,  -1.5483,  -1.5709,  -1.9548,
          -1.5695,  -0.3746,  -1.5467],
        [ -1.5689,  -1.5693,  -2.0695,  -1.5451,  -1.5475,  -1.5700,  -1.9542,
          -1.5687,  -0.3741,  -1.5459],
        [ -2.3660,  -2.3694, -10.3529,  -2.2057,  -2.2209,  -2.3758,   7.4783,
          -2.3646, -10.3319,  -2.2108],
        [  1.4280,   1.4276,   7.7337,   1.4454,   1.4436,   1.4268,  -6.7570,
           1.4282,   4.7555,   1.4447],
        [ -1.5699,  -1.5704,  -2.0702,  -1.5462,  -1.5486,  -1.5711,  -1.9549,
          -1.5698,  -0.3747,  -1.5470],
        [ -1.5695,  -1.5699,  -2.0699,  -1.5458,  -1.5481,  -1.5707,  -1.9547,
          -1.5694,  -0.3745,  -1.5465],
        [  2.8677,   2.8748,   8.9455,   2.5766,   2.6023,   2.8886,  -7.6571,
           2.8647,   6.6454,   2.5851],
        [  3.9667,   3.9690,   6.4122,   3.8902,   3.8957,   3.9735, -11.8420,
           3.9657,   4.6778,   3.8920],
        [ -1.5688,  -1.5692,  -2.0694,  -1.5450,  -1.5474,  -1.5700,  -1.9542,
          -1.5687,  -0.3741,  -1.5458],
        [ -1.5693,  -1.5697,  -2.0698,  -1.5456,  -1.5479,  -1.5705,  -1.9545,
          -1.5692,  -0.3744,  -1.5463]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([ 1.3356,  1.3362, 10.4226, -5.7861,  1.3354,  1.3357, -5.5098, -8.0120,
         1.3362,  1.3359], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -2.3452,  -2.3456, -19.4387,   8.1020,  -2.3451,  -2.3453,  16.1817,
          11.1697,  -2.3456,  -2.3454]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 17.2902,   1.7101],
        [ -3.1460,  -1.9136],
        [ -5.9346, -18.1745],
        [-16.1503,   1.4928],
        [-12.4021,  -3.2926],
        [-15.9970,   0.9176],
        [  5.4149,  -5.1802],
        [-11.8666, -12.1471],
        [-11.7408,   1.3859],
        [ 16.1628,  11.8068]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -9.6558,  -7.6127, -18.5862,   3.2371,  -1.6008,  14.8368,  -8.1537,
        -10.8318,   6.1822,  10.9351], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-5.2466e+00, -4.2380e+00,  8.8434e+00, -2.3455e+00, -4.0574e+00,
          6.3640e+00, -2.1175e+00,  3.7623e+00, -2.1605e+00, -5.8732e+00],
        [-1.1707e+00, -6.0117e-01, -7.3373e-01, -2.0926e-02, -6.1992e-01,
         -7.5004e-01, -1.3146e+00, -6.2872e-01, -2.3091e-01, -1.7920e+00],
        [-3.9256e-01, -1.1678e-02, -1.8375e+00,  3.4202e-01, -1.0244e+00,
          1.0815e+00, -9.2474e-01, -8.9409e-01,  2.2363e+00, -2.6489e+00],
        [-3.2209e+00,  9.7909e+00, -1.0707e+01, -4.7115e+00,  4.3637e+00,
         -1.7062e+00, -6.7447e-01,  5.2267e+00,  1.4767e+00, -9.9246e-01],
        [-2.9183e-01, -7.3615e+00,  1.2518e-01, -3.7788e-01,  3.8886e+00,
         -1.1126e-01,  2.2823e+00, -1.5048e+00,  1.5487e+00, -8.2963e-01],
        [-8.8281e+00,  6.5036e-02,  8.2468e+00, -3.1044e+00,  1.1304e+01,
          7.5966e-01, -1.4886e+00,  7.4186e-01,  5.2504e+00, -2.2893e+01],
        [-1.2361e+01, -1.1373e+01,  1.4851e+01, -6.9268e+00,  3.5528e-01,
          9.4411e+00,  2.3187e-01,  2.6563e+00,  5.6496e+00, -1.6891e+01],
        [ 1.3734e-01, -4.6360e+00,  1.2221e+00,  6.9939e-01, -2.3584e-01,
         -4.0178e+00,  2.4895e-01,  1.1870e+00,  2.5994e+00,  1.4895e-01],
        [-3.6682e+00,  5.5311e+00, -1.7486e+00,  1.8802e+00,  6.1052e+00,
         -3.4410e+00, -5.8522e-01,  1.0816e-01, -2.1400e+00, -2.1753e+00],
        [-1.0921e+00,  1.2784e-01, -2.4690e+01,  5.7431e+00,  9.1492e+00,
          3.5896e+00, -9.5146e+00, -1.1114e+01,  1.4887e+00, -9.0314e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -8.7256,  -2.6431,  -4.8203,  -0.4532,  -3.8030,  -9.5792, -13.6000,
         -5.0348,  -2.0937,  -2.3085], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-1.0235, -0.0307, -0.5608, -5.2392,  2.9252,  8.7375, -4.6830,  1.9898,
         -3.2985,  1.3110],
        [ 0.8317,  0.0307,  0.5607,  5.2341, -2.9252, -8.6624,  4.6933, -1.9900,
          3.5954, -1.4414]], device='cuda:0'))])
loaded xi:  -34.958042
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -1602.4668883178845
min fval:  -1602.4668883178845
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-3.6733,  6.9760],
        [-3.6687,  6.9892],
        [-6.8499,  9.7034],
        [-3.8797,  6.3713],
        [-3.8604,  6.4294],
        [-3.6600,  7.0143],
        [ 7.7546,  2.2440],
        [-3.6752,  6.9705],
        [ 6.6046, 12.0485],
        [-3.8732,  6.3907]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ 1.0666,  1.0668, 10.5463,  1.0453,  1.0476,  1.0671, -6.0731,  1.0665,
        11.4637,  1.0460], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ -1.5697,  -1.5701,  -2.0700,  -1.5459,  -1.5483,  -1.5709,  -1.9548,
          -1.5695,  -0.3746,  -1.5467],
        [ -1.5689,  -1.5693,  -2.0695,  -1.5451,  -1.5475,  -1.5700,  -1.9542,
          -1.5687,  -0.3741,  -1.5459],
        [ -2.3660,  -2.3694, -10.3529,  -2.2057,  -2.2209,  -2.3758,   7.4783,
          -2.3646, -10.3319,  -2.2108],
        [  1.4280,   1.4276,   7.7337,   1.4454,   1.4436,   1.4268,  -6.7570,
           1.4282,   4.7555,   1.4447],
        [ -1.5699,  -1.5704,  -2.0702,  -1.5462,  -1.5486,  -1.5711,  -1.9549,
          -1.5698,  -0.3747,  -1.5470],
        [ -1.5695,  -1.5699,  -2.0699,  -1.5458,  -1.5481,  -1.5707,  -1.9547,
          -1.5694,  -0.3745,  -1.5465],
        [  2.8677,   2.8748,   8.9455,   2.5766,   2.6023,   2.8886,  -7.6571,
           2.8647,   6.6454,   2.5851],
        [  3.9667,   3.9690,   6.4122,   3.8902,   3.8957,   3.9735, -11.8420,
           3.9657,   4.6778,   3.8920],
        [ -1.5688,  -1.5692,  -2.0694,  -1.5450,  -1.5474,  -1.5700,  -1.9542,
          -1.5687,  -0.3741,  -1.5458],
        [ -1.5693,  -1.5697,  -2.0698,  -1.5456,  -1.5479,  -1.5705,  -1.9545,
          -1.5692,  -0.3744,  -1.5463]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([ 1.3356,  1.3362, 10.4226, -5.7861,  1.3354,  1.3357, -5.5098, -8.0120,
         1.3362,  1.3359], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -2.3452,  -2.3456, -19.4387,   8.1020,  -2.3451,  -2.3453,  16.1817,
          11.1697,  -2.3456,  -2.3454]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 17.2902,   1.7101],
        [ -3.1460,  -1.9136],
        [ -5.9346, -18.1745],
        [-16.1503,   1.4928],
        [-12.4021,  -3.2926],
        [-15.9970,   0.9176],
        [  5.4149,  -5.1802],
        [-11.8666, -12.1471],
        [-11.7408,   1.3859],
        [ 16.1628,  11.8068]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -9.6558,  -7.6127, -18.5862,   3.2371,  -1.6008,  14.8368,  -8.1537,
        -10.8318,   6.1822,  10.9351], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-5.2466e+00, -4.2380e+00,  8.8434e+00, -2.3455e+00, -4.0574e+00,
          6.3640e+00, -2.1175e+00,  3.7623e+00, -2.1605e+00, -5.8732e+00],
        [-1.1707e+00, -6.0117e-01, -7.3373e-01, -2.0926e-02, -6.1992e-01,
         -7.5004e-01, -1.3146e+00, -6.2872e-01, -2.3091e-01, -1.7920e+00],
        [-3.9256e-01, -1.1678e-02, -1.8375e+00,  3.4202e-01, -1.0244e+00,
          1.0815e+00, -9.2474e-01, -8.9409e-01,  2.2363e+00, -2.6489e+00],
        [-3.2209e+00,  9.7909e+00, -1.0707e+01, -4.7115e+00,  4.3637e+00,
         -1.7062e+00, -6.7447e-01,  5.2267e+00,  1.4767e+00, -9.9246e-01],
        [-2.9183e-01, -7.3615e+00,  1.2518e-01, -3.7788e-01,  3.8886e+00,
         -1.1126e-01,  2.2823e+00, -1.5048e+00,  1.5487e+00, -8.2963e-01],
        [-8.8281e+00,  6.5036e-02,  8.2468e+00, -3.1044e+00,  1.1304e+01,
          7.5966e-01, -1.4886e+00,  7.4186e-01,  5.2504e+00, -2.2893e+01],
        [-1.2361e+01, -1.1373e+01,  1.4851e+01, -6.9268e+00,  3.5528e-01,
          9.4411e+00,  2.3187e-01,  2.6563e+00,  5.6496e+00, -1.6891e+01],
        [ 1.3734e-01, -4.6360e+00,  1.2221e+00,  6.9939e-01, -2.3584e-01,
         -4.0178e+00,  2.4895e-01,  1.1870e+00,  2.5994e+00,  1.4895e-01],
        [-3.6682e+00,  5.5311e+00, -1.7486e+00,  1.8802e+00,  6.1052e+00,
         -3.4410e+00, -5.8522e-01,  1.0816e-01, -2.1400e+00, -2.1753e+00],
        [-1.0921e+00,  1.2784e-01, -2.4690e+01,  5.7431e+00,  9.1492e+00,
          3.5896e+00, -9.5146e+00, -1.1114e+01,  1.4887e+00, -9.0314e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -8.7256,  -2.6431,  -4.8203,  -0.4532,  -3.8030,  -9.5792, -13.6000,
         -5.0348,  -2.0937,  -2.3085], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-1.0235, -0.0307, -0.5608, -5.2392,  2.9252,  8.7375, -4.6830,  1.9898,
         -3.2985,  1.3110],
        [ 0.8317,  0.0307,  0.5607,  5.2341, -2.9252, -8.6624,  4.6933, -1.9900,
          3.5954, -1.4414]], device='cuda:0'))])
xi:  [-34.958042]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 347.8914659288794
W_T_median: 151.38612417827312
W_T_pctile_5: -37.2681229743026
W_T_CVAR_5_pct: -164.99108838857327
Average q (qsum/M+1):  54.35494502898185
Optimal xi:  [-34.958042]
Expected(across Rb) median(across samples) p_equity:  0.2929372053593397
obj fun:  tensor(-1602.4669, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 0.5
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-1.1782,  1.1679],
        [-1.1755,  1.1658],
        [-1.2865, 11.4851],
        [-1.1737,  1.1749],
        [-1.1740,  1.1747],
        [ 0.2333,  8.4279],
        [11.4307, -3.0828],
        [-1.1791,  1.1686],
        [51.1609, 11.0161],
        [-1.1738,  1.1748]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-3.0899, -3.1047, 10.1147, -3.0689, -3.0687, -3.9139, -9.1845, -3.0857,
        12.0260, -3.0688], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-0.0229, -0.0229, -0.5237, -0.0229, -0.0229, -0.1009, -0.0677, -0.0229,
         -1.0387, -0.0229],
        [-0.0229, -0.0229, -0.5237, -0.0229, -0.0229, -0.1009, -0.0677, -0.0229,
         -1.0387, -0.0229],
        [ 0.0932,  0.0939, -9.9377,  0.0753,  0.0760,  2.7650,  9.6589,  0.0930,
         -9.3327,  0.0755],
        [-0.0186, -0.0186, -0.5255, -0.0188, -0.0188, -0.0971, -0.0746, -0.0187,
         -1.0359, -0.0188],
        [-0.0229, -0.0229, -0.5237, -0.0229, -0.0229, -0.1009, -0.0677, -0.0229,
         -1.0387, -0.0229],
        [-0.0229, -0.0229, -0.5237, -0.0229, -0.0229, -0.1009, -0.0677, -0.0229,
         -1.0387, -0.0229],
        [ 0.1245,  0.1267,  8.9527,  0.0918,  0.0923, -2.4231, -8.1496,  0.1237,
          5.0728,  0.0919],
        [ 0.1155,  0.1151,  9.8816,  0.0988,  0.0998, -2.6780, -9.2569,  0.1156,
          5.6117,  0.0991],
        [-0.0229, -0.0229, -0.5237, -0.0229, -0.0229, -0.1009, -0.0677, -0.0229,
         -1.0387, -0.0229],
        [-0.0229, -0.0229, -0.5237, -0.0229, -0.0229, -0.1009, -0.0677, -0.0229,
         -1.0387, -0.0229]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.1619, -1.1619, 12.3229, -1.2396, -1.1619, -1.1619, -7.2843, -8.0424,
        -1.1619, -1.1619], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-1.1346e-02, -1.1346e-02, -2.3106e+01, -1.7027e-02, -1.1346e-02,
         -1.1346e-02,  8.0197e+00,  1.1086e+01, -1.1346e-02, -1.1346e-02]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 17.9843,   2.7583],
        [ -2.1407,   0.0797],
        [-15.6645, -17.8329],
        [-16.1201,  -1.6406],
        [-13.8635,  -4.9907],
        [-17.8848,   0.4473],
        [ -0.0202,  -1.7303],
        [-15.5357,  -7.9707],
        [ -2.0061,   9.1601],
        [ 16.7932,   9.9673]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -9.2361,  -4.8038, -17.3677,   7.9160,  -2.7580,  14.1947, -10.7229,
        -12.9636,   9.1621,  14.1272], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-2.4340e+00, -1.3297e-02,  7.4515e+00, -2.6086e+00,  1.9023e-01,
          4.6657e+00, -1.2640e+00,  5.8962e-01,  4.3945e-03, -6.3416e+00],
        [-1.7929e+00, -3.7322e-04,  5.5858e-01, -1.8950e-01, -1.3110e-01,
         -3.3744e+00, -4.6960e-01,  7.8005e-02, -2.1086e-02, -1.0088e+00],
        [ 3.0896e-01,  1.4555e-01,  1.3976e+00,  1.2994e+00,  5.4678e+00,
          6.3448e-01, -9.8751e-02,  8.4754e-01,  1.5397e+00, -3.6209e+00],
        [-1.6492e+00, -4.9271e-04, -7.8407e-01,  2.7532e-02, -1.0395e-01,
         -1.4850e+00, -6.6533e-03,  1.4894e-01, -1.2611e+00, -2.8873e+00],
        [ 2.5496e-01,  1.1423e-01, -2.4175e-01, -7.4675e+00, -4.7766e-01,
         -2.3030e-01,  3.4286e-01, -2.3477e+00, -8.4779e-01,  7.3511e-01],
        [-6.9450e+00, -2.6698e-06,  8.2689e+00, -2.3372e+00,  7.7382e+00,
         -1.3105e-01,  3.5761e-01,  2.1748e+00,  5.4522e-02, -2.3618e+01],
        [-8.2936e+00,  5.8653e-07,  1.2352e+01, -2.1159e+00,  3.4406e-03,
          5.2866e+00,  8.9230e-01,  2.2967e+00,  9.1632e-01, -1.8521e+01],
        [-3.1689e+00, -5.3437e-02,  4.4123e+00,  3.6999e+00,  9.4598e+00,
          1.8706e+00,  7.2303e-01,  2.0667e+00, -1.4688e+01, -3.3721e+00],
        [-3.7465e+00, -3.6721e-01,  6.0800e+00,  6.8949e+00,  2.4834e+01,
         -4.8139e+00, -8.7860e-01,  3.0984e+00, -1.8339e+01, -1.2148e+01],
        [-1.9033e+00,  1.5567e-01, -2.6517e+01, -1.1555e+00,  9.7076e+00,
          3.9650e+00, -3.2664e-01, -1.7466e-01, -3.0512e-01,  1.4243e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -8.1589,  -5.6256,  -4.7901,  -2.7704,  -2.5993,  -8.2419, -15.0443,
         -4.6613,  -9.0365,  -1.0102], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  0.5734,   0.3885,   1.6328,   0.6679,   2.1521,  10.7333,  -5.1302,
          -4.7430,   9.1697,   0.2517],
        [ -0.7620,  -0.3885,  -1.6328,  -0.6680,  -2.1520, -10.7059,   5.1404,
           4.7429,  -9.1597,  -0.3841]], device='cuda:0'))])
loaded xi:  53.01862
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -1560.1192567741327
min fval:  -1560.1192567741327
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-1.1782,  1.1679],
        [-1.1755,  1.1658],
        [-1.2865, 11.4851],
        [-1.1737,  1.1749],
        [-1.1740,  1.1747],
        [ 0.2333,  8.4279],
        [11.4307, -3.0828],
        [-1.1791,  1.1686],
        [51.1609, 11.0161],
        [-1.1738,  1.1748]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-3.0899, -3.1047, 10.1147, -3.0689, -3.0687, -3.9139, -9.1845, -3.0857,
        12.0260, -3.0688], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-0.0229, -0.0229, -0.5237, -0.0229, -0.0229, -0.1009, -0.0677, -0.0229,
         -1.0387, -0.0229],
        [-0.0229, -0.0229, -0.5237, -0.0229, -0.0229, -0.1009, -0.0677, -0.0229,
         -1.0387, -0.0229],
        [ 0.0932,  0.0939, -9.9377,  0.0753,  0.0760,  2.7650,  9.6589,  0.0930,
         -9.3327,  0.0755],
        [-0.0186, -0.0186, -0.5255, -0.0188, -0.0188, -0.0971, -0.0746, -0.0187,
         -1.0359, -0.0188],
        [-0.0229, -0.0229, -0.5237, -0.0229, -0.0229, -0.1009, -0.0677, -0.0229,
         -1.0387, -0.0229],
        [-0.0229, -0.0229, -0.5237, -0.0229, -0.0229, -0.1009, -0.0677, -0.0229,
         -1.0387, -0.0229],
        [ 0.1245,  0.1267,  8.9527,  0.0918,  0.0923, -2.4231, -8.1496,  0.1237,
          5.0728,  0.0919],
        [ 0.1155,  0.1151,  9.8816,  0.0988,  0.0998, -2.6780, -9.2569,  0.1156,
          5.6117,  0.0991],
        [-0.0229, -0.0229, -0.5237, -0.0229, -0.0229, -0.1009, -0.0677, -0.0229,
         -1.0387, -0.0229],
        [-0.0229, -0.0229, -0.5237, -0.0229, -0.0229, -0.1009, -0.0677, -0.0229,
         -1.0387, -0.0229]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.1619, -1.1619, 12.3229, -1.2396, -1.1619, -1.1619, -7.2843, -8.0424,
        -1.1619, -1.1619], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-1.1346e-02, -1.1346e-02, -2.3106e+01, -1.7027e-02, -1.1346e-02,
         -1.1346e-02,  8.0197e+00,  1.1086e+01, -1.1346e-02, -1.1346e-02]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 17.9843,   2.7583],
        [ -2.1407,   0.0797],
        [-15.6645, -17.8329],
        [-16.1201,  -1.6406],
        [-13.8635,  -4.9907],
        [-17.8848,   0.4473],
        [ -0.0202,  -1.7303],
        [-15.5357,  -7.9707],
        [ -2.0061,   9.1601],
        [ 16.7932,   9.9673]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -9.2361,  -4.8038, -17.3677,   7.9160,  -2.7580,  14.1947, -10.7229,
        -12.9636,   9.1621,  14.1272], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-2.4340e+00, -1.3297e-02,  7.4515e+00, -2.6086e+00,  1.9023e-01,
          4.6657e+00, -1.2640e+00,  5.8962e-01,  4.3945e-03, -6.3416e+00],
        [-1.7929e+00, -3.7322e-04,  5.5858e-01, -1.8950e-01, -1.3110e-01,
         -3.3744e+00, -4.6960e-01,  7.8005e-02, -2.1086e-02, -1.0088e+00],
        [ 3.0896e-01,  1.4555e-01,  1.3976e+00,  1.2994e+00,  5.4678e+00,
          6.3448e-01, -9.8751e-02,  8.4754e-01,  1.5397e+00, -3.6209e+00],
        [-1.6492e+00, -4.9271e-04, -7.8407e-01,  2.7532e-02, -1.0395e-01,
         -1.4850e+00, -6.6533e-03,  1.4894e-01, -1.2611e+00, -2.8873e+00],
        [ 2.5496e-01,  1.1423e-01, -2.4175e-01, -7.4675e+00, -4.7766e-01,
         -2.3030e-01,  3.4286e-01, -2.3477e+00, -8.4779e-01,  7.3511e-01],
        [-6.9450e+00, -2.6698e-06,  8.2689e+00, -2.3372e+00,  7.7382e+00,
         -1.3105e-01,  3.5761e-01,  2.1748e+00,  5.4522e-02, -2.3618e+01],
        [-8.2936e+00,  5.8653e-07,  1.2352e+01, -2.1159e+00,  3.4406e-03,
          5.2866e+00,  8.9230e-01,  2.2967e+00,  9.1632e-01, -1.8521e+01],
        [-3.1689e+00, -5.3437e-02,  4.4123e+00,  3.6999e+00,  9.4598e+00,
          1.8706e+00,  7.2303e-01,  2.0667e+00, -1.4688e+01, -3.3721e+00],
        [-3.7465e+00, -3.6721e-01,  6.0800e+00,  6.8949e+00,  2.4834e+01,
         -4.8139e+00, -8.7860e-01,  3.0984e+00, -1.8339e+01, -1.2148e+01],
        [-1.9033e+00,  1.5567e-01, -2.6517e+01, -1.1555e+00,  9.7076e+00,
          3.9650e+00, -3.2664e-01, -1.7466e-01, -3.0512e-01,  1.4243e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -8.1589,  -5.6256,  -4.7901,  -2.7704,  -2.5993,  -8.2419, -15.0443,
         -4.6613,  -9.0365,  -1.0102], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  0.5734,   0.3885,   1.6328,   0.6679,   2.1521,  10.7333,  -5.1302,
          -4.7430,   9.1697,   0.2517],
        [ -0.7620,  -0.3885,  -1.6328,  -0.6680,  -2.1520, -10.7059,   5.1404,
           4.7429,  -9.1597,  -0.3841]], device='cuda:0'))])
xi:  [53.01862]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 728.7301065710486
W_T_median: 312.36045799236075
W_T_pctile_5: 53.05744145788857
W_T_CVAR_5_pct: -60.95255069328099
Average q (qsum/M+1):  52.292752173639116
Optimal xi:  [53.01862]
Expected(across Rb) median(across samples) p_equity:  0.36373170266548793
obj fun:  tensor(-1560.1193, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 1.0
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-1.1399,  0.8723],
        [-1.1399,  0.8723],
        [-3.6026, 12.1487],
        [-1.1399,  0.8723],
        [-1.1399,  0.8723],
        [ 3.3460,  6.2014],
        [15.6437, -3.5683],
        [-1.1399,  0.8723],
        [47.9822, 11.8561],
        [-1.1399,  0.8723]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -3.2796,  -3.2796,   9.8453,  -3.2796,  -3.2796,  -8.3126, -11.3723,
         -3.2796,  11.8934,  -3.2796], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-6.0916e-03, -6.0916e-03, -5.1690e-01, -6.0916e-03, -6.0916e-03,
         -8.0279e-03, -2.0244e-01, -6.0916e-03, -1.0234e+00, -6.0916e-03],
        [-6.0916e-03, -6.0916e-03, -5.1689e-01, -6.0916e-03, -6.0916e-03,
         -8.0279e-03, -2.0244e-01, -6.0916e-03, -1.0234e+00, -6.0916e-03],
        [ 1.6762e-02,  1.6764e-02, -1.2779e+01,  1.6751e-02,  1.6752e-02,
          7.1923e+00,  1.2833e+01,  1.6761e-02, -9.2551e+00,  1.6751e-02],
        [-6.0916e-03, -6.0916e-03, -5.1689e-01, -6.0916e-03, -6.0916e-03,
         -8.0280e-03, -2.0244e-01, -6.0916e-03, -1.0234e+00, -6.0916e-03],
        [-6.0916e-03, -6.0916e-03, -5.1690e-01, -6.0916e-03, -6.0916e-03,
         -8.0279e-03, -2.0244e-01, -6.0916e-03, -1.0234e+00, -6.0916e-03],
        [-6.0916e-03, -6.0916e-03, -5.1690e-01, -6.0916e-03, -6.0916e-03,
         -8.0281e-03, -2.0244e-01, -6.0916e-03, -1.0234e+00, -6.0916e-03],
        [-5.4630e-02, -5.4629e-02,  1.2186e+01, -5.4632e-02, -5.4632e-02,
         -4.8762e+00, -1.0529e+01, -5.4630e-02,  4.6673e+00, -5.4632e-02],
        [-9.5678e-03, -9.5602e-03,  1.3233e+01, -9.5998e-03, -9.5980e-03,
         -6.1310e+00, -1.1993e+01, -9.5689e-03,  5.2952e+00, -9.5988e-03],
        [-6.0916e-03, -6.0916e-03, -5.1689e-01, -6.0916e-03, -6.0916e-03,
         -8.0278e-03, -2.0244e-01, -6.0916e-03, -1.0234e+00, -6.0916e-03],
        [-6.0916e-03, -6.0916e-03, -5.1689e-01, -6.0916e-03, -6.0916e-03,
         -8.0278e-03, -2.0244e-01, -6.0916e-03, -1.0234e+00, -6.0916e-03]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.1640, -1.1640, 12.3229, -1.1640, -1.1640, -1.1640, -6.7630, -7.6705,
        -1.1640, -1.1640], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-3.6893e-03, -3.6893e-03, -2.2266e+01, -3.6893e-03, -3.6893e-03,
         -3.6893e-03,  6.8036e+00,  1.0293e+01, -3.6894e-03, -3.6894e-03]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -2.2012,   0.4266],
        [ -0.7041,  -0.7780],
        [-13.7936, -19.0139],
        [-17.3310,   1.7286],
        [-15.3308,  -7.4443],
        [-21.5930,  -1.1479],
        [ -2.6760,  -5.2016],
        [ -2.0180,  -0.5773],
        [-17.7645,  -0.9040],
        [ 21.2366,  10.2990]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -4.8730,  -6.0334, -16.7628,   2.9339,  -1.8374,  15.6330, -11.4213,
         -4.5605,   8.4187,   9.6790], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-4.8486e-01,  2.0443e+00,  9.7822e+00, -9.8677e+00,  9.3654e-01,
          7.9022e+00,  1.4386e+00, -4.2033e-01,  4.1065e+00, -8.4712e+00],
        [-9.2531e-02,  1.6236e-01,  1.5221e+00, -9.7978e-02, -1.2310e+00,
         -1.9251e+00, -1.7031e-01,  1.4235e-01, -1.3822e+00, -1.1344e+00],
        [-8.6037e-01,  2.3215e+00,  1.4304e+00, -3.2726e+00, -7.7769e+00,
         -2.3340e-01, -3.8530e-02,  5.3793e-01, -4.3411e+00, -6.9608e-01],
        [-1.3639e-01,  2.7548e-01,  6.5437e-01, -2.9902e-01,  2.4082e+00,
         -4.3218e+00,  3.9204e+00,  4.0630e-02, -2.0508e+00, -4.1049e+00],
        [ 5.8218e-03, -2.6429e-03, -1.7500e-01,  6.0333e-02,  8.3664e-02,
         -9.2539e-01, -6.4658e-03, -8.6155e-03, -5.6628e-01, -3.7024e+00],
        [-4.5176e-01,  3.7814e-01,  4.4022e+00, -1.1581e+01,  5.7975e+00,
          9.7266e-01, -6.6521e+00, -5.7848e-01,  2.0058e+01, -2.2087e+01],
        [-3.9567e-02,  2.6737e+00,  1.6009e+01, -9.4287e+00,  8.0142e+00,
          1.0704e+01, -1.6493e+00,  1.5128e-01,  6.2921e+00, -1.7088e+01],
        [-1.7007e-01,  9.5803e-01,  3.0339e+00,  2.4421e+00,  1.0594e+00,
         -5.3408e+00,  2.2894e-01,  5.3753e-01,  3.6421e-01, -3.0982e+00],
        [ 1.5258e-01,  2.5699e+00,  1.2024e+00,  6.3013e+00,  7.7398e-02,
         -2.0140e+00, -1.3744e+00,  3.6685e-01,  1.8898e+00, -2.4105e+00],
        [ 2.3356e-01,  7.0669e-01, -1.5407e+01,  1.2517e+01,  1.2832e+00,
          9.5200e-01,  2.1132e+00,  8.2236e-01,  4.5899e-01, -4.3998e-02]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -8.8558,  -6.0637,  -2.7833,  -3.7948,  -3.9303, -13.0618, -17.1310,
         -3.6497,  -4.4077,  -0.8310], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ -0.7368,   1.4676,   4.2729,   2.2238,   0.1898,  14.0518,  -6.5514,
           3.4168,   2.0024,   0.4521],
        [  0.5474,  -1.4676,  -4.2729,  -2.2238,  -0.1898, -14.0454,   6.5610,
          -3.4167,  -2.0023,  -0.5803]], device='cuda:0'))])
loaded xi:  124.54354
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -1547.792558962063
min fval:  -1547.792558962063
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-1.1399,  0.8723],
        [-1.1399,  0.8723],
        [-3.6026, 12.1487],
        [-1.1399,  0.8723],
        [-1.1399,  0.8723],
        [ 3.3460,  6.2014],
        [15.6437, -3.5683],
        [-1.1399,  0.8723],
        [47.9822, 11.8561],
        [-1.1399,  0.8723]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -3.2796,  -3.2796,   9.8453,  -3.2796,  -3.2796,  -8.3126, -11.3723,
         -3.2796,  11.8934,  -3.2796], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-6.0916e-03, -6.0916e-03, -5.1690e-01, -6.0916e-03, -6.0916e-03,
         -8.0279e-03, -2.0244e-01, -6.0916e-03, -1.0234e+00, -6.0916e-03],
        [-6.0916e-03, -6.0916e-03, -5.1689e-01, -6.0916e-03, -6.0916e-03,
         -8.0279e-03, -2.0244e-01, -6.0916e-03, -1.0234e+00, -6.0916e-03],
        [ 1.6762e-02,  1.6764e-02, -1.2779e+01,  1.6751e-02,  1.6752e-02,
          7.1923e+00,  1.2833e+01,  1.6761e-02, -9.2551e+00,  1.6751e-02],
        [-6.0916e-03, -6.0916e-03, -5.1689e-01, -6.0916e-03, -6.0916e-03,
         -8.0280e-03, -2.0244e-01, -6.0916e-03, -1.0234e+00, -6.0916e-03],
        [-6.0916e-03, -6.0916e-03, -5.1690e-01, -6.0916e-03, -6.0916e-03,
         -8.0279e-03, -2.0244e-01, -6.0916e-03, -1.0234e+00, -6.0916e-03],
        [-6.0916e-03, -6.0916e-03, -5.1690e-01, -6.0916e-03, -6.0916e-03,
         -8.0281e-03, -2.0244e-01, -6.0916e-03, -1.0234e+00, -6.0916e-03],
        [-5.4630e-02, -5.4629e-02,  1.2186e+01, -5.4632e-02, -5.4632e-02,
         -4.8762e+00, -1.0529e+01, -5.4630e-02,  4.6673e+00, -5.4632e-02],
        [-9.5678e-03, -9.5602e-03,  1.3233e+01, -9.5998e-03, -9.5980e-03,
         -6.1310e+00, -1.1993e+01, -9.5689e-03,  5.2952e+00, -9.5988e-03],
        [-6.0916e-03, -6.0916e-03, -5.1689e-01, -6.0916e-03, -6.0916e-03,
         -8.0278e-03, -2.0244e-01, -6.0916e-03, -1.0234e+00, -6.0916e-03],
        [-6.0916e-03, -6.0916e-03, -5.1689e-01, -6.0916e-03, -6.0916e-03,
         -8.0278e-03, -2.0244e-01, -6.0916e-03, -1.0234e+00, -6.0916e-03]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.1640, -1.1640, 12.3229, -1.1640, -1.1640, -1.1640, -6.7630, -7.6705,
        -1.1640, -1.1640], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-3.6893e-03, -3.6893e-03, -2.2266e+01, -3.6893e-03, -3.6893e-03,
         -3.6893e-03,  6.8036e+00,  1.0293e+01, -3.6894e-03, -3.6894e-03]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -2.2012,   0.4266],
        [ -0.7041,  -0.7780],
        [-13.7936, -19.0139],
        [-17.3310,   1.7286],
        [-15.3308,  -7.4443],
        [-21.5930,  -1.1479],
        [ -2.6760,  -5.2016],
        [ -2.0180,  -0.5773],
        [-17.7645,  -0.9040],
        [ 21.2366,  10.2990]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -4.8730,  -6.0334, -16.7628,   2.9339,  -1.8374,  15.6330, -11.4213,
         -4.5605,   8.4187,   9.6790], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-4.8486e-01,  2.0443e+00,  9.7822e+00, -9.8677e+00,  9.3654e-01,
          7.9022e+00,  1.4386e+00, -4.2033e-01,  4.1065e+00, -8.4712e+00],
        [-9.2531e-02,  1.6236e-01,  1.5221e+00, -9.7978e-02, -1.2310e+00,
         -1.9251e+00, -1.7031e-01,  1.4235e-01, -1.3822e+00, -1.1344e+00],
        [-8.6037e-01,  2.3215e+00,  1.4304e+00, -3.2726e+00, -7.7769e+00,
         -2.3340e-01, -3.8530e-02,  5.3793e-01, -4.3411e+00, -6.9608e-01],
        [-1.3639e-01,  2.7548e-01,  6.5437e-01, -2.9902e-01,  2.4082e+00,
         -4.3218e+00,  3.9204e+00,  4.0630e-02, -2.0508e+00, -4.1049e+00],
        [ 5.8218e-03, -2.6429e-03, -1.7500e-01,  6.0333e-02,  8.3664e-02,
         -9.2539e-01, -6.4658e-03, -8.6155e-03, -5.6628e-01, -3.7024e+00],
        [-4.5176e-01,  3.7814e-01,  4.4022e+00, -1.1581e+01,  5.7975e+00,
          9.7266e-01, -6.6521e+00, -5.7848e-01,  2.0058e+01, -2.2087e+01],
        [-3.9567e-02,  2.6737e+00,  1.6009e+01, -9.4287e+00,  8.0142e+00,
          1.0704e+01, -1.6493e+00,  1.5128e-01,  6.2921e+00, -1.7088e+01],
        [-1.7007e-01,  9.5803e-01,  3.0339e+00,  2.4421e+00,  1.0594e+00,
         -5.3408e+00,  2.2894e-01,  5.3753e-01,  3.6421e-01, -3.0982e+00],
        [ 1.5258e-01,  2.5699e+00,  1.2024e+00,  6.3013e+00,  7.7398e-02,
         -2.0140e+00, -1.3744e+00,  3.6685e-01,  1.8898e+00, -2.4105e+00],
        [ 2.3356e-01,  7.0669e-01, -1.5407e+01,  1.2517e+01,  1.2832e+00,
          9.5200e-01,  2.1132e+00,  8.2236e-01,  4.5899e-01, -4.3998e-02]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -8.8558,  -6.0637,  -2.7833,  -3.7948,  -3.9303, -13.0618, -17.1310,
         -3.6497,  -4.4077,  -0.8310], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ -0.7368,   1.4676,   4.2729,   2.2238,   0.1898,  14.0518,  -6.5514,
           3.4168,   2.0024,   0.4521],
        [  0.5474,  -1.4676,  -4.2729,  -2.2238,  -0.1898, -14.0454,   6.5610,
          -3.4167,  -2.0023,  -0.5803]], device='cuda:0'))])
xi:  [124.54354]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 683.8262732047294
W_T_median: 373.13926738461714
W_T_pctile_5: 124.53852973438315
W_T_CVAR_5_pct: -18.748237123305902
Average q (qsum/M+1):  50.83594537550403
Optimal xi:  [124.54354]
Expected(across Rb) median(across samples) p_equity:  0.31880679676930107
obj fun:  tensor(-1547.7926, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 1.5
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-1.4781,  0.9045],
        [-1.4781,  0.9045],
        [-5.7277, 12.4442],
        [-1.4781,  0.9045],
        [-1.4781,  0.9045],
        [ 4.9569,  5.3891],
        [18.8995, -3.9013],
        [-1.4781,  0.9045],
        [36.5000, 12.6707],
        [-1.4781,  0.9045]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -4.5244,  -4.5244,   9.4769,  -4.5244,  -4.5244, -11.0367, -12.6464,
         -4.5244,  12.0612,  -4.5244], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-9.8288e-03, -9.8288e-03, -6.0398e-01, -9.8288e-03, -9.8288e-03,
         -3.7219e-02, -9.2030e-02, -9.8288e-03, -1.7394e+00, -9.8288e-03],
        [-9.8288e-03, -9.8288e-03, -6.0398e-01, -9.8288e-03, -9.8288e-03,
         -3.7219e-02, -9.2030e-02, -9.8288e-03, -1.7394e+00, -9.8288e-03],
        [ 6.2160e-02,  6.2160e-02, -1.4574e+01,  6.2160e-02,  6.2160e-02,
          9.7237e+00,  1.4974e+01,  6.2160e-02, -9.3878e+00,  6.2160e-02],
        [-9.8288e-03, -9.8288e-03, -6.0398e-01, -9.8288e-03, -9.8288e-03,
         -3.7219e-02, -9.2030e-02, -9.8288e-03, -1.7394e+00, -9.8288e-03],
        [-9.8288e-03, -9.8288e-03, -6.0398e-01, -9.8288e-03, -9.8288e-03,
         -3.7219e-02, -9.2030e-02, -9.8288e-03, -1.7394e+00, -9.8288e-03],
        [-9.8288e-03, -9.8288e-03, -6.0398e-01, -9.8288e-03, -9.8288e-03,
         -3.7219e-02, -9.2030e-02, -9.8288e-03, -1.7394e+00, -9.8288e-03],
        [ 4.6713e-02,  4.6713e-02,  1.3172e+01,  4.6713e-02,  4.6713e-02,
         -7.1033e+00, -1.2602e+01,  4.6713e-02,  4.4035e+00,  4.6713e-02],
        [ 5.5124e-02,  5.5124e-02,  1.4453e+01,  5.5124e-02,  5.5124e-02,
         -8.9396e+00, -1.4463e+01,  5.5123e-02,  5.1450e+00,  5.5124e-02],
        [-9.8288e-03, -9.8288e-03, -6.0398e-01, -9.8288e-03, -9.8288e-03,
         -3.7219e-02, -9.2030e-02, -9.8288e-03, -1.7394e+00, -9.8288e-03],
        [-9.8288e-03, -9.8288e-03, -6.0398e-01, -9.8288e-03, -9.8288e-03,
         -3.7219e-02, -9.2030e-02, -9.8288e-03, -1.7394e+00, -9.8288e-03]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.9680, -1.9680, 12.1724, -1.9680, -1.9680, -1.9680, -6.2669, -7.4407,
        -1.9680, -1.9680], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-1.5318e-02, -1.5318e-02, -2.1738e+01, -1.5317e-02, -1.5318e-02,
         -1.5318e-02,  5.4844e+00,  9.4223e+00, -1.5318e-02, -1.5318e-02]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -2.8017,   0.0803],
        [ -2.9185,   0.1361],
        [-12.7456, -18.1367],
        [-16.4041,   1.2018],
        [-15.2883,  -7.7163],
        [-23.7040,  -2.1112],
        [ -2.8176,   0.1974],
        [ -3.3599,  -0.6465],
        [-20.0194,  -2.4826],
        [ 22.6361,  10.6662]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -6.3798,  -6.3600, -15.6504,   2.6281,  -4.5510,  15.1688,  -6.7062,
         -6.6060,   5.9686,   9.4749], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 3.1673e-03,  3.4975e-04,  7.1309e+00, -5.5172e+00,  1.8421e+00,
          4.5165e+00, -6.8769e-03,  8.1010e-03, -6.4485e+00, -8.2044e+00],
        [-4.3021e-03, -3.1962e-03, -6.7335e-01,  1.3334e+00,  5.3574e+00,
         -9.1419e+00, -2.4399e-03, -5.8652e-03,  6.1103e-01, -3.1719e+00],
        [ 1.6238e-01,  2.3130e-01,  4.6379e+00, -1.2773e+00, -2.9481e+00,
          7.2806e+00,  3.3159e-01,  3.0938e-01,  2.1278e+00, -3.7770e+00],
        [-8.2024e-05, -4.0436e-03, -8.9217e-01,  1.4930e-01, -9.6423e-01,
         -1.2099e+00, -1.8754e-02,  2.2550e-01, -5.7415e+00, -3.2574e+00],
        [ 2.3499e-02, -4.0834e-02, -7.1506e+00,  7.9306e+00,  3.6456e+00,
         -1.3843e+00, -3.8122e-02,  2.4039e-02, -1.4800e+00, -3.5150e+00],
        [-1.1569e-01, -2.5501e-01,  5.5108e+00, -1.4681e+01,  6.6283e+00,
         -1.0154e-01, -2.3001e-01, -2.2512e-01,  2.3206e+01, -2.5397e+01],
        [ 1.0596e-01, -4.0204e-02,  1.3775e+01, -1.3955e+01,  5.8916e+00,
          1.6570e+01, -1.7519e-01,  2.0372e-01,  6.4676e+00, -1.5407e+01],
        [ 7.2919e-03,  9.9413e-04, -7.1621e-01, -9.9030e-03, -1.7734e-01,
         -1.0814e+00, -6.8015e-03,  1.4928e-02, -2.6003e-01, -4.6947e+00],
        [-1.9384e-01, -1.8011e-02,  9.9724e-01, -3.1509e+00, -2.9493e+01,
         -1.2953e+00,  9.0556e-02,  5.9704e-01, -1.0517e+01, -5.4284e-01],
        [ 4.8204e-01,  1.3143e-01, -2.8888e+01,  1.5403e+01,  7.9165e-01,
          1.4235e+00, -1.2763e-01,  6.8820e-01,  1.8115e+00, -1.8043e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -9.9238,  -7.0244,  -8.2044,  -3.2817,  -3.6472, -15.2495, -16.7625,
         -4.8169,  -2.8455,  -0.9256], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ -1.8966,   2.0683,  -1.5802,   4.1544,   1.9125,  13.8827,  -7.6585,
           0.3855,   5.7239,   0.5527],
        [  1.7291,  -2.0683,   1.5802,  -4.1544,  -1.9125, -13.8757,   7.6694,
          -0.3855,  -5.7237,  -0.6809]], device='cuda:0'))])
loaded xi:  170.225
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -1544.6803355557793
min fval:  -1544.6803355557793
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-1.4781,  0.9045],
        [-1.4781,  0.9045],
        [-5.7277, 12.4442],
        [-1.4781,  0.9045],
        [-1.4781,  0.9045],
        [ 4.9569,  5.3891],
        [18.8995, -3.9013],
        [-1.4781,  0.9045],
        [36.5000, 12.6707],
        [-1.4781,  0.9045]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -4.5244,  -4.5244,   9.4769,  -4.5244,  -4.5244, -11.0367, -12.6464,
         -4.5244,  12.0612,  -4.5244], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-9.8288e-03, -9.8288e-03, -6.0398e-01, -9.8288e-03, -9.8288e-03,
         -3.7219e-02, -9.2030e-02, -9.8288e-03, -1.7394e+00, -9.8288e-03],
        [-9.8288e-03, -9.8288e-03, -6.0398e-01, -9.8288e-03, -9.8288e-03,
         -3.7219e-02, -9.2030e-02, -9.8288e-03, -1.7394e+00, -9.8288e-03],
        [ 6.2160e-02,  6.2160e-02, -1.4574e+01,  6.2160e-02,  6.2160e-02,
          9.7237e+00,  1.4974e+01,  6.2160e-02, -9.3878e+00,  6.2160e-02],
        [-9.8288e-03, -9.8288e-03, -6.0398e-01, -9.8288e-03, -9.8288e-03,
         -3.7219e-02, -9.2030e-02, -9.8288e-03, -1.7394e+00, -9.8288e-03],
        [-9.8288e-03, -9.8288e-03, -6.0398e-01, -9.8288e-03, -9.8288e-03,
         -3.7219e-02, -9.2030e-02, -9.8288e-03, -1.7394e+00, -9.8288e-03],
        [-9.8288e-03, -9.8288e-03, -6.0398e-01, -9.8288e-03, -9.8288e-03,
         -3.7219e-02, -9.2030e-02, -9.8288e-03, -1.7394e+00, -9.8288e-03],
        [ 4.6713e-02,  4.6713e-02,  1.3172e+01,  4.6713e-02,  4.6713e-02,
         -7.1033e+00, -1.2602e+01,  4.6713e-02,  4.4035e+00,  4.6713e-02],
        [ 5.5124e-02,  5.5124e-02,  1.4453e+01,  5.5124e-02,  5.5124e-02,
         -8.9396e+00, -1.4463e+01,  5.5123e-02,  5.1450e+00,  5.5124e-02],
        [-9.8288e-03, -9.8288e-03, -6.0398e-01, -9.8288e-03, -9.8288e-03,
         -3.7219e-02, -9.2030e-02, -9.8288e-03, -1.7394e+00, -9.8288e-03],
        [-9.8288e-03, -9.8288e-03, -6.0398e-01, -9.8288e-03, -9.8288e-03,
         -3.7219e-02, -9.2030e-02, -9.8288e-03, -1.7394e+00, -9.8288e-03]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.9680, -1.9680, 12.1724, -1.9680, -1.9680, -1.9680, -6.2669, -7.4407,
        -1.9680, -1.9680], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-1.5318e-02, -1.5318e-02, -2.1738e+01, -1.5317e-02, -1.5318e-02,
         -1.5318e-02,  5.4844e+00,  9.4223e+00, -1.5318e-02, -1.5318e-02]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -2.8017,   0.0803],
        [ -2.9185,   0.1361],
        [-12.7456, -18.1367],
        [-16.4041,   1.2018],
        [-15.2883,  -7.7163],
        [-23.7040,  -2.1112],
        [ -2.8176,   0.1974],
        [ -3.3599,  -0.6465],
        [-20.0194,  -2.4826],
        [ 22.6361,  10.6662]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -6.3798,  -6.3600, -15.6504,   2.6281,  -4.5510,  15.1688,  -6.7062,
         -6.6060,   5.9686,   9.4749], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 3.1673e-03,  3.4975e-04,  7.1309e+00, -5.5172e+00,  1.8421e+00,
          4.5165e+00, -6.8769e-03,  8.1010e-03, -6.4485e+00, -8.2044e+00],
        [-4.3021e-03, -3.1962e-03, -6.7335e-01,  1.3334e+00,  5.3574e+00,
         -9.1419e+00, -2.4399e-03, -5.8652e-03,  6.1103e-01, -3.1719e+00],
        [ 1.6238e-01,  2.3130e-01,  4.6379e+00, -1.2773e+00, -2.9481e+00,
          7.2806e+00,  3.3159e-01,  3.0938e-01,  2.1278e+00, -3.7770e+00],
        [-8.2024e-05, -4.0436e-03, -8.9217e-01,  1.4930e-01, -9.6423e-01,
         -1.2099e+00, -1.8754e-02,  2.2550e-01, -5.7415e+00, -3.2574e+00],
        [ 2.3499e-02, -4.0834e-02, -7.1506e+00,  7.9306e+00,  3.6456e+00,
         -1.3843e+00, -3.8122e-02,  2.4039e-02, -1.4800e+00, -3.5150e+00],
        [-1.1569e-01, -2.5501e-01,  5.5108e+00, -1.4681e+01,  6.6283e+00,
         -1.0154e-01, -2.3001e-01, -2.2512e-01,  2.3206e+01, -2.5397e+01],
        [ 1.0596e-01, -4.0204e-02,  1.3775e+01, -1.3955e+01,  5.8916e+00,
          1.6570e+01, -1.7519e-01,  2.0372e-01,  6.4676e+00, -1.5407e+01],
        [ 7.2919e-03,  9.9413e-04, -7.1621e-01, -9.9030e-03, -1.7734e-01,
         -1.0814e+00, -6.8015e-03,  1.4928e-02, -2.6003e-01, -4.6947e+00],
        [-1.9384e-01, -1.8011e-02,  9.9724e-01, -3.1509e+00, -2.9493e+01,
         -1.2953e+00,  9.0556e-02,  5.9704e-01, -1.0517e+01, -5.4284e-01],
        [ 4.8204e-01,  1.3143e-01, -2.8888e+01,  1.5403e+01,  7.9165e-01,
          1.4235e+00, -1.2763e-01,  6.8820e-01,  1.8115e+00, -1.8043e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -9.9238,  -7.0244,  -8.2044,  -3.2817,  -3.6472, -15.2495, -16.7625,
         -4.8169,  -2.8455,  -0.9256], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ -1.8966,   2.0683,  -1.5802,   4.1544,   1.9125,  13.8827,  -7.6585,
           0.3855,   5.7239,   0.5527],
        [  1.7291,  -2.0683,   1.5802,  -4.1544,  -1.9125, -13.8757,   7.6694,
          -0.3855,  -5.7237,  -0.6809]], device='cuda:0'))])
xi:  [170.225]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 728.2343172875368
W_T_median: 435.68747934775104
W_T_pctile_5: 178.25806083604246
W_T_CVAR_5_pct: 5.340538898062032
Average q (qsum/M+1):  49.394472183719756
Optimal xi:  [170.225]
Expected(across Rb) median(across samples) p_equity:  0.2961081663767497
obj fun:  tensor(-1544.6803, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 3.0
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-1.4830e+00,  3.0718e-02],
        [-1.4830e+00,  3.0717e-02],
        [-6.3673e+00,  1.2632e+01],
        [-1.4830e+00,  3.0717e-02],
        [-1.4830e+00,  3.0717e-02],
        [ 6.8203e+00,  5.7258e+00],
        [ 2.0545e+01, -4.8124e+00],
        [-1.4830e+00,  3.0718e-02],
        [ 4.0414e+01,  1.3095e+01],
        [-1.4830e+00,  3.0717e-02]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -3.9128,  -3.9128,   9.5392,  -3.9128,  -3.9128, -11.5636, -13.0913,
         -3.9128,  12.3596,  -3.9128], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-1.0563e-02, -1.0563e-02, -8.2439e-01, -1.0563e-02, -1.0563e-02,
         -1.0488e-01, -4.2615e-01, -1.0563e-02, -1.4408e+00, -1.0563e-02],
        [-1.0563e-02, -1.0563e-02, -8.2439e-01, -1.0563e-02, -1.0563e-02,
         -1.0488e-01, -4.2615e-01, -1.0563e-02, -1.4408e+00, -1.0563e-02],
        [-9.5457e-02, -9.5457e-02, -1.5627e+01, -9.5457e-02, -9.5457e-02,
          1.1399e+01,  1.5160e+01, -9.5457e-02, -9.4408e+00, -9.5457e-02],
        [-1.0563e-02, -1.0563e-02, -8.2439e-01, -1.0563e-02, -1.0563e-02,
         -1.0488e-01, -4.2615e-01, -1.0563e-02, -1.4408e+00, -1.0563e-02],
        [-1.0563e-02, -1.0563e-02, -8.2439e-01, -1.0563e-02, -1.0563e-02,
         -1.0488e-01, -4.2615e-01, -1.0563e-02, -1.4408e+00, -1.0563e-02],
        [-1.0563e-02, -1.0563e-02, -8.2439e-01, -1.0563e-02, -1.0563e-02,
         -1.0488e-01, -4.2615e-01, -1.0563e-02, -1.4408e+00, -1.0563e-02],
        [-2.8364e-01, -2.8364e-01,  1.4495e+01, -2.8364e-01, -2.8364e-01,
         -3.8909e+00, -1.2539e+01, -2.8364e-01,  4.0974e+00, -2.8364e-01],
        [-3.3170e-01, -3.3170e-01,  1.6052e+01, -3.3171e-01, -3.3170e-01,
         -1.0792e+01, -1.4380e+01, -3.3170e-01,  4.6668e+00, -3.3170e-01],
        [-1.0563e-02, -1.0563e-02, -8.2439e-01, -1.0563e-02, -1.0563e-02,
         -1.0488e-01, -4.2615e-01, -1.0563e-02, -1.4408e+00, -1.0563e-02],
        [-1.0563e-02, -1.0563e-02, -8.2439e-01, -1.0563e-02, -1.0563e-02,
         -1.0488e-01, -4.2615e-01, -1.0563e-02, -1.4408e+00, -1.0563e-02]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.5591, -1.5591, 12.2476, -1.5591, -1.5591, -1.5591, -5.7974, -7.3604,
        -1.5591, -1.5591], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[  0.0581,   0.0581, -21.6139,   0.0581,   0.0581,   0.0581,   5.0675,
           9.5836,   0.0581,   0.0581]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[-2.8252e+00, -7.7867e-04],
        [-2.6740e+00, -2.9813e-02],
        [-1.3410e+01, -1.8116e+01],
        [-1.6457e+01,  1.9596e+00],
        [-1.6639e+01, -5.6714e+00],
        [-2.5881e+01, -3.3602e+00],
        [-2.9084e+00, -4.7585e-03],
        [-2.6220e+00, -8.6022e-02],
        [-2.1337e+01, -3.2181e+00],
        [ 2.1584e+01,  1.1774e+01]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -4.7412,  -4.8833, -15.6636,   2.9378,  -9.1299,  14.1175,  -4.6720,
         -5.0307,   5.0993,  10.6526], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-7.4588e-04, -1.4778e-03,  4.7667e+00, -1.8108e+00,  3.8164e+00,
          4.2135e+00, -5.6866e-04, -1.7925e-03, -3.1324e+00, -8.9948e+00],
        [ 4.8932e-03,  5.8277e-03, -2.0477e-01, -3.4624e-02,  4.0407e-01,
         -1.5406e+00,  5.5450e-03,  7.9204e-03, -3.5944e-01, -3.2495e+00],
        [ 2.5174e-01,  2.6574e-01,  5.6501e+00, -1.9406e+01,  1.1352e+00,
          7.1777e+00,  3.3144e-01,  3.4326e-01,  1.4224e+00, -3.1270e+00],
        [ 4.2452e-01,  5.2788e-01,  1.6169e+00, -2.7109e+00,  9.9586e-01,
         -1.1995e+01,  4.4376e-01,  6.5145e-01, -7.7820e-01, -2.6677e+00],
        [ 3.2161e-01,  3.5678e-01,  1.2443e+00,  7.0572e+00,  2.3647e+00,
         -5.6697e+00,  3.3542e-01,  3.2294e-01,  4.9641e+00, -4.9839e+00],
        [-7.3225e-01, -6.1848e-01,  7.4295e+00, -1.3165e+01,  5.7183e+00,
         -1.9732e+00, -7.9000e-01, -5.4210e-01,  2.7446e+01, -2.6823e+01],
        [ 5.2490e-01,  4.9068e-01,  1.5618e+01, -9.3955e+00,  4.0380e+00,
          1.5561e+01,  5.3541e-01,  4.9896e-01,  8.6275e+00, -1.5693e+01],
        [ 8.9285e-03,  8.3526e-03,  1.9714e+00, -5.5550e-02,  1.0070e+00,
         -4.8502e+00,  1.1147e-02,  9.2999e-03, -1.8475e-01, -4.9102e+00],
        [ 3.0692e-01,  5.0179e-01, -4.9770e-01, -1.4226e+01, -1.3137e+01,
         -1.0436e+00,  2.2329e-01,  8.1363e-01, -1.8844e+01, -4.4678e-01],
        [ 1.4322e+00,  1.1763e+00, -2.7737e+01,  1.6145e+01,  2.0293e+00,
          1.4628e+00,  1.7951e+00,  1.2399e+00,  1.9787e+00, -3.3616e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -9.0338,  -6.0156,  -7.7327,  -2.7984,  -2.9694, -15.8852, -16.8099,
         -4.6450,  -2.8357,  -1.0713], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ -3.9711,   0.7353,  -0.7936,   5.9505,   2.7723,  15.1545,  -7.7544,
           1.3151,   6.6677,   0.6086],
        [  3.8704,  -0.7352,   0.7934,  -5.9505,  -2.7721, -15.1471,   7.7628,
          -1.3151,  -6.6676,  -0.7366]], device='cuda:0'))])
loaded xi:  180.16188
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -1580.6513883961152
min fval:  -1580.6513883961152
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-1.4830e+00,  3.0718e-02],
        [-1.4830e+00,  3.0717e-02],
        [-6.3673e+00,  1.2632e+01],
        [-1.4830e+00,  3.0717e-02],
        [-1.4830e+00,  3.0717e-02],
        [ 6.8203e+00,  5.7258e+00],
        [ 2.0545e+01, -4.8124e+00],
        [-1.4830e+00,  3.0718e-02],
        [ 4.0414e+01,  1.3095e+01],
        [-1.4830e+00,  3.0717e-02]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -3.9128,  -3.9128,   9.5392,  -3.9128,  -3.9128, -11.5636, -13.0913,
         -3.9128,  12.3596,  -3.9128], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-1.0563e-02, -1.0563e-02, -8.2439e-01, -1.0563e-02, -1.0563e-02,
         -1.0488e-01, -4.2615e-01, -1.0563e-02, -1.4408e+00, -1.0563e-02],
        [-1.0563e-02, -1.0563e-02, -8.2439e-01, -1.0563e-02, -1.0563e-02,
         -1.0488e-01, -4.2615e-01, -1.0563e-02, -1.4408e+00, -1.0563e-02],
        [-9.5457e-02, -9.5457e-02, -1.5627e+01, -9.5457e-02, -9.5457e-02,
          1.1399e+01,  1.5160e+01, -9.5457e-02, -9.4408e+00, -9.5457e-02],
        [-1.0563e-02, -1.0563e-02, -8.2439e-01, -1.0563e-02, -1.0563e-02,
         -1.0488e-01, -4.2615e-01, -1.0563e-02, -1.4408e+00, -1.0563e-02],
        [-1.0563e-02, -1.0563e-02, -8.2439e-01, -1.0563e-02, -1.0563e-02,
         -1.0488e-01, -4.2615e-01, -1.0563e-02, -1.4408e+00, -1.0563e-02],
        [-1.0563e-02, -1.0563e-02, -8.2439e-01, -1.0563e-02, -1.0563e-02,
         -1.0488e-01, -4.2615e-01, -1.0563e-02, -1.4408e+00, -1.0563e-02],
        [-2.8364e-01, -2.8364e-01,  1.4495e+01, -2.8364e-01, -2.8364e-01,
         -3.8909e+00, -1.2539e+01, -2.8364e-01,  4.0974e+00, -2.8364e-01],
        [-3.3170e-01, -3.3170e-01,  1.6052e+01, -3.3171e-01, -3.3170e-01,
         -1.0792e+01, -1.4380e+01, -3.3170e-01,  4.6668e+00, -3.3170e-01],
        [-1.0563e-02, -1.0563e-02, -8.2439e-01, -1.0563e-02, -1.0563e-02,
         -1.0488e-01, -4.2615e-01, -1.0563e-02, -1.4408e+00, -1.0563e-02],
        [-1.0563e-02, -1.0563e-02, -8.2439e-01, -1.0563e-02, -1.0563e-02,
         -1.0488e-01, -4.2615e-01, -1.0563e-02, -1.4408e+00, -1.0563e-02]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.5591, -1.5591, 12.2476, -1.5591, -1.5591, -1.5591, -5.7974, -7.3604,
        -1.5591, -1.5591], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[  0.0581,   0.0581, -21.6139,   0.0581,   0.0581,   0.0581,   5.0675,
           9.5836,   0.0581,   0.0581]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[-2.8252e+00, -7.7867e-04],
        [-2.6740e+00, -2.9813e-02],
        [-1.3410e+01, -1.8116e+01],
        [-1.6457e+01,  1.9596e+00],
        [-1.6639e+01, -5.6714e+00],
        [-2.5881e+01, -3.3602e+00],
        [-2.9084e+00, -4.7585e-03],
        [-2.6220e+00, -8.6022e-02],
        [-2.1337e+01, -3.2181e+00],
        [ 2.1584e+01,  1.1774e+01]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -4.7412,  -4.8833, -15.6636,   2.9378,  -9.1299,  14.1175,  -4.6720,
         -5.0307,   5.0993,  10.6526], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-7.4588e-04, -1.4778e-03,  4.7667e+00, -1.8108e+00,  3.8164e+00,
          4.2135e+00, -5.6866e-04, -1.7925e-03, -3.1324e+00, -8.9948e+00],
        [ 4.8932e-03,  5.8277e-03, -2.0477e-01, -3.4624e-02,  4.0407e-01,
         -1.5406e+00,  5.5450e-03,  7.9204e-03, -3.5944e-01, -3.2495e+00],
        [ 2.5174e-01,  2.6574e-01,  5.6501e+00, -1.9406e+01,  1.1352e+00,
          7.1777e+00,  3.3144e-01,  3.4326e-01,  1.4224e+00, -3.1270e+00],
        [ 4.2452e-01,  5.2788e-01,  1.6169e+00, -2.7109e+00,  9.9586e-01,
         -1.1995e+01,  4.4376e-01,  6.5145e-01, -7.7820e-01, -2.6677e+00],
        [ 3.2161e-01,  3.5678e-01,  1.2443e+00,  7.0572e+00,  2.3647e+00,
         -5.6697e+00,  3.3542e-01,  3.2294e-01,  4.9641e+00, -4.9839e+00],
        [-7.3225e-01, -6.1848e-01,  7.4295e+00, -1.3165e+01,  5.7183e+00,
         -1.9732e+00, -7.9000e-01, -5.4210e-01,  2.7446e+01, -2.6823e+01],
        [ 5.2490e-01,  4.9068e-01,  1.5618e+01, -9.3955e+00,  4.0380e+00,
          1.5561e+01,  5.3541e-01,  4.9896e-01,  8.6275e+00, -1.5693e+01],
        [ 8.9285e-03,  8.3526e-03,  1.9714e+00, -5.5550e-02,  1.0070e+00,
         -4.8502e+00,  1.1147e-02,  9.2999e-03, -1.8475e-01, -4.9102e+00],
        [ 3.0692e-01,  5.0179e-01, -4.9770e-01, -1.4226e+01, -1.3137e+01,
         -1.0436e+00,  2.2329e-01,  8.1363e-01, -1.8844e+01, -4.4678e-01],
        [ 1.4322e+00,  1.1763e+00, -2.7737e+01,  1.6145e+01,  2.0293e+00,
          1.4628e+00,  1.7951e+00,  1.2399e+00,  1.9787e+00, -3.3616e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -9.0338,  -6.0156,  -7.7327,  -2.7984,  -2.9694, -15.8852, -16.8099,
         -4.6450,  -2.8357,  -1.0713], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ -3.9711,   0.7353,  -0.7936,   5.9505,   2.7723,  15.1545,  -7.7544,
           1.3151,   6.6677,   0.6086],
        [  3.8704,  -0.7352,   0.7934,  -5.9505,  -2.7721, -15.1471,   7.7628,
          -1.3151,  -6.6676,  -0.7366]], device='cuda:0'))])
xi:  [180.16188]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 705.579252594435
W_T_median: 443.7318146898827
W_T_pctile_5: 180.46512223868643
W_T_CVAR_5_pct: 13.3842665713668
Average q (qsum/M+1):  48.832212386592744
Optimal xi:  [180.16188]
Expected(across Rb) median(across samples) p_equity:  0.2786678152779738
obj fun:  tensor(-1580.6514, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 5.0
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -1.6642,   0.2200],
        [ -1.6640,   0.2202],
        [-14.2824,  12.5865],
        [ -1.6644,   0.2199],
        [ -1.6641,   0.2201],
        [  6.5632,   4.4345],
        [ 23.7188,  -3.1788],
        [ -1.6642,   0.2200],
        [ 13.2400,  15.9223],
        [ -1.6645,   0.2198]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -5.8620,  -5.8621,   9.7037,  -5.8620,  -5.8620, -15.1364, -14.0266,
         -5.8620,  11.8252,  -5.8620], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ 2.4426e-03,  2.4527e-03, -1.4393e+00,  2.4371e-03,  2.4495e-03,
         -5.3434e-01, -5.7187e-01,  2.4434e-03, -2.2848e+00,  2.4358e-03],
        [ 2.4425e-03,  2.4525e-03, -1.4393e+00,  2.4369e-03,  2.4494e-03,
         -5.3434e-01, -5.7187e-01,  2.4433e-03, -2.2848e+00,  2.4357e-03],
        [-3.3870e-02, -3.4042e-02, -1.7249e+01, -3.3766e-02, -3.3989e-02,
          1.1535e+01,  1.7552e+01, -3.3880e-02, -1.0647e+01, -3.3739e-02],
        [ 2.4425e-03,  2.4526e-03, -1.4393e+00,  2.4370e-03,  2.4494e-03,
         -5.3434e-01, -5.7187e-01,  2.4433e-03, -2.2848e+00,  2.4357e-03],
        [ 2.4425e-03,  2.4525e-03, -1.4393e+00,  2.4369e-03,  2.4493e-03,
         -5.3434e-01, -5.7187e-01,  2.4433e-03, -2.2848e+00,  2.4357e-03],
        [ 2.4426e-03,  2.4527e-03, -1.4393e+00,  2.4371e-03,  2.4495e-03,
         -5.3434e-01, -5.7186e-01,  2.4434e-03, -2.2848e+00,  2.4359e-03],
        [ 1.8270e-01,  1.8276e-01,  1.5515e+01,  1.8266e-01,  1.8274e-01,
          2.4888e-01, -1.4176e+01,  1.8270e-01,  4.6476e+00,  1.8265e-01],
        [ 4.6293e-01,  4.6308e-01,  1.7589e+01,  4.6285e-01,  4.6304e-01,
         -1.1054e+01, -1.6825e+01,  4.6294e-01,  5.4075e+00,  4.6282e-01],
        [ 2.4425e-03,  2.4525e-03, -1.4393e+00,  2.4369e-03,  2.4494e-03,
         -5.3434e-01, -5.7186e-01,  2.4433e-03, -2.2848e+00,  2.4357e-03],
        [ 2.4425e-03,  2.4525e-03, -1.4393e+00,  2.4369e-03,  2.4493e-03,
         -5.3434e-01, -5.7187e-01,  2.4433e-03, -2.2848e+00,  2.4357e-03]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-3.1840, -3.1840, 11.9265, -3.1840, -3.1840, -3.1840, -6.0131, -7.4370,
        -3.1840, -3.1840], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.2303,  -0.2303, -19.9441,  -0.2303,  -0.2303,  -0.2303,   2.2195,
           8.8020,  -0.2303,  -0.2303]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -0.0451,   6.1791],
        [  0.7593,  -4.5607],
        [ -5.0093,  -0.2366],
        [ -8.1709,   6.7186],
        [-14.2165,  -8.3646],
        [-25.2660,  -1.4830],
        [-25.0663,   1.0526],
        [-18.8863,   1.2476],
        [-21.0892,  -3.8272],
        [ 25.7293,  10.1660]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([-3.7827, -4.0401, -3.2205,  5.6508, -5.9248, 18.0168, -0.9090,  2.0474,
         8.4924,  8.4892], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 1.5123e+00,  4.9789e+00, -3.2326e+00,  1.4836e-01,  6.4102e+00,
         -8.0065e+00, -2.9692e+00, -3.6398e+00, -8.2168e-01, -4.4785e+00],
        [-4.7494e-01,  3.3424e+00, -1.3109e-01,  5.5933e-02,  2.0409e+00,
         -2.4503e+00,  4.6293e-01,  7.1544e-01,  4.7596e-01, -5.2584e+00],
        [-4.0140e+00,  6.7634e+00,  2.9287e+00, -1.0128e+01,  3.6400e+00,
          4.7080e+00,  5.6766e+00, -6.7393e+00,  6.1886e-01, -3.7161e+00],
        [-1.9566e+01, -4.1399e+00,  1.8420e+00, -2.6940e+01,  2.1418e+00,
         -1.1284e+01,  1.8828e-04,  4.2566e+00,  2.0603e+00, -2.9578e+00],
        [-3.7683e+00,  5.7293e+00,  4.8106e+00,  1.2388e+01, -5.2083e+00,
          1.6045e+00,  8.0609e+00,  8.0180e+00,  4.2716e+00, -1.1570e+01],
        [-4.1224e-01,  9.9679e+00, -4.7977e+00, -6.4519e+01,  6.8170e+00,
          8.9301e-01, -1.2428e+01, -1.2640e+01,  2.4696e+01, -2.9009e+01],
        [-2.7142e+00,  6.7578e+00,  2.9910e+00, -1.4793e+01,  9.7536e+00,
          1.5342e+01, -3.8166e+00, -3.4509e+00,  8.0222e+00, -1.5439e+01],
        [ 5.5162e-01, -9.5321e+00, -6.1862e-01, -4.7041e+00,  1.6496e+00,
          2.0588e+00, -1.8171e+00, -7.0648e+00,  3.4485e-01, -4.6692e+00],
        [-7.0881e+00, -5.0167e+00,  2.2634e-02, -2.3215e+01,  4.2879e+00,
         -1.3750e+01,  3.4764e-03,  2.3174e-04, -1.5181e+01, -2.8039e+00],
        [-1.7911e+01, -1.4464e+00,  5.7957e+00,  1.7269e+01, -2.1223e+01,
          3.2125e-01, -3.1876e-02,  1.4820e+01,  1.4142e-02,  1.1715e+00]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -6.0739,  -7.0162,  -9.1784,  -2.9716,  -3.7971, -16.7715, -17.1763,
         -4.7021,  -5.0947,   0.3935], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  2.8853,   0.1714,  -2.8316,   6.1902,   0.3509,  18.8505,  -8.0302,
          -1.5423,   4.8987,   0.5316],
        [ -2.9004,  -0.1713,   2.8318,  -6.1902,  -0.3503, -18.8414,   8.0424,
           1.5423,  -4.8985,  -0.6597]], device='cuda:0'))])
loaded xi:  214.245
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -2709.1821913323793
min fval:  -2709.1821913323793
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -1.6642,   0.2200],
        [ -1.6640,   0.2202],
        [-14.2824,  12.5865],
        [ -1.6644,   0.2199],
        [ -1.6641,   0.2201],
        [  6.5632,   4.4345],
        [ 23.7188,  -3.1788],
        [ -1.6642,   0.2200],
        [ 13.2400,  15.9223],
        [ -1.6645,   0.2198]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -5.8620,  -5.8621,   9.7037,  -5.8620,  -5.8620, -15.1364, -14.0266,
         -5.8620,  11.8252,  -5.8620], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ 2.4426e-03,  2.4527e-03, -1.4393e+00,  2.4371e-03,  2.4495e-03,
         -5.3434e-01, -5.7187e-01,  2.4434e-03, -2.2848e+00,  2.4358e-03],
        [ 2.4425e-03,  2.4525e-03, -1.4393e+00,  2.4369e-03,  2.4494e-03,
         -5.3434e-01, -5.7187e-01,  2.4433e-03, -2.2848e+00,  2.4357e-03],
        [-3.3870e-02, -3.4042e-02, -1.7249e+01, -3.3766e-02, -3.3989e-02,
          1.1535e+01,  1.7552e+01, -3.3880e-02, -1.0647e+01, -3.3739e-02],
        [ 2.4425e-03,  2.4526e-03, -1.4393e+00,  2.4370e-03,  2.4494e-03,
         -5.3434e-01, -5.7187e-01,  2.4433e-03, -2.2848e+00,  2.4357e-03],
        [ 2.4425e-03,  2.4525e-03, -1.4393e+00,  2.4369e-03,  2.4493e-03,
         -5.3434e-01, -5.7187e-01,  2.4433e-03, -2.2848e+00,  2.4357e-03],
        [ 2.4426e-03,  2.4527e-03, -1.4393e+00,  2.4371e-03,  2.4495e-03,
         -5.3434e-01, -5.7186e-01,  2.4434e-03, -2.2848e+00,  2.4359e-03],
        [ 1.8270e-01,  1.8276e-01,  1.5515e+01,  1.8266e-01,  1.8274e-01,
          2.4888e-01, -1.4176e+01,  1.8270e-01,  4.6476e+00,  1.8265e-01],
        [ 4.6293e-01,  4.6308e-01,  1.7589e+01,  4.6285e-01,  4.6304e-01,
         -1.1054e+01, -1.6825e+01,  4.6294e-01,  5.4075e+00,  4.6282e-01],
        [ 2.4425e-03,  2.4525e-03, -1.4393e+00,  2.4369e-03,  2.4494e-03,
         -5.3434e-01, -5.7186e-01,  2.4433e-03, -2.2848e+00,  2.4357e-03],
        [ 2.4425e-03,  2.4525e-03, -1.4393e+00,  2.4369e-03,  2.4493e-03,
         -5.3434e-01, -5.7187e-01,  2.4433e-03, -2.2848e+00,  2.4357e-03]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-3.1840, -3.1840, 11.9265, -3.1840, -3.1840, -3.1840, -6.0131, -7.4370,
        -3.1840, -3.1840], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.2303,  -0.2303, -19.9441,  -0.2303,  -0.2303,  -0.2303,   2.2195,
           8.8020,  -0.2303,  -0.2303]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -0.0451,   6.1791],
        [  0.7593,  -4.5607],
        [ -5.0093,  -0.2366],
        [ -8.1709,   6.7186],
        [-14.2165,  -8.3646],
        [-25.2660,  -1.4830],
        [-25.0663,   1.0526],
        [-18.8863,   1.2476],
        [-21.0892,  -3.8272],
        [ 25.7293,  10.1660]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([-3.7827, -4.0401, -3.2205,  5.6508, -5.9248, 18.0168, -0.9090,  2.0474,
         8.4924,  8.4892], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 1.5123e+00,  4.9789e+00, -3.2326e+00,  1.4836e-01,  6.4102e+00,
         -8.0065e+00, -2.9692e+00, -3.6398e+00, -8.2168e-01, -4.4785e+00],
        [-4.7494e-01,  3.3424e+00, -1.3109e-01,  5.5933e-02,  2.0409e+00,
         -2.4503e+00,  4.6293e-01,  7.1544e-01,  4.7596e-01, -5.2584e+00],
        [-4.0140e+00,  6.7634e+00,  2.9287e+00, -1.0128e+01,  3.6400e+00,
          4.7080e+00,  5.6766e+00, -6.7393e+00,  6.1886e-01, -3.7161e+00],
        [-1.9566e+01, -4.1399e+00,  1.8420e+00, -2.6940e+01,  2.1418e+00,
         -1.1284e+01,  1.8828e-04,  4.2566e+00,  2.0603e+00, -2.9578e+00],
        [-3.7683e+00,  5.7293e+00,  4.8106e+00,  1.2388e+01, -5.2083e+00,
          1.6045e+00,  8.0609e+00,  8.0180e+00,  4.2716e+00, -1.1570e+01],
        [-4.1224e-01,  9.9679e+00, -4.7977e+00, -6.4519e+01,  6.8170e+00,
          8.9301e-01, -1.2428e+01, -1.2640e+01,  2.4696e+01, -2.9009e+01],
        [-2.7142e+00,  6.7578e+00,  2.9910e+00, -1.4793e+01,  9.7536e+00,
          1.5342e+01, -3.8166e+00, -3.4509e+00,  8.0222e+00, -1.5439e+01],
        [ 5.5162e-01, -9.5321e+00, -6.1862e-01, -4.7041e+00,  1.6496e+00,
          2.0588e+00, -1.8171e+00, -7.0648e+00,  3.4485e-01, -4.6692e+00],
        [-7.0881e+00, -5.0167e+00,  2.2634e-02, -2.3215e+01,  4.2879e+00,
         -1.3750e+01,  3.4764e-03,  2.3174e-04, -1.5181e+01, -2.8039e+00],
        [-1.7911e+01, -1.4464e+00,  5.7957e+00,  1.7269e+01, -2.1223e+01,
          3.2125e-01, -3.1876e-02,  1.4820e+01,  1.4142e-02,  1.1715e+00]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -6.0739,  -7.0162,  -9.1784,  -2.9716,  -3.7971, -16.7715, -17.1763,
         -4.7021,  -5.0947,   0.3935], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  2.8853,   0.1714,  -2.8316,   6.1902,   0.3509,  18.8505,  -8.0302,
          -1.5423,   4.8987,   0.5316],
        [ -2.9004,  -0.1713,   2.8318,  -6.1902,  -0.3503, -18.8414,   8.0424,
           1.5423,  -4.8985,  -0.6597]], device='cuda:0'))])
xi:  [214.245]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 682.1382993255463
W_T_median: 487.2726212774127
W_T_pctile_5: 221.35521686440734
W_T_CVAR_5_pct: 25.734186933887653
Average q (qsum/M+1):  46.332381709929436
Optimal xi:  [214.245]
Expected(across Rb) median(across samples) p_equity:  0.2225630263487498
obj fun:  tensor(-2709.1822, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 50.0
-----------------------------------------------
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 1223.1730339263436
W_T_median: 947.6429325199256
W_T_pctile_5: 156.54377185002605
W_T_CVAR_5_pct: 6.165462850082208
Average q (qsum/M+1):  35.0
Optimal xi:  [220.98354]
Expected(across Rb) median(across samples) p_equity:  0.21972122564911842
obj fun:  tensor(10.0392, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 999.0
-----------------------------------------------


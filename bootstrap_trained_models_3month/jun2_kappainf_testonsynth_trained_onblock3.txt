Starting at: 
02-06-23_16:38

 numpy seed:  2  


 pytorch seed:  2  

Key parameters-------
paths: 256000
iterations: 10
batchsize: 1000
remove neg:  False
w constaint activation:  yy_fix_jan29


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = B10_and_VWD
timeseries_basket['basket_desc'] = CRSP data: B10 and VWD
timeseries_basket['basket_columns'] = 
['B10_real_ret', 'VWD_real_ret']
############# End: defined asset  basket #################
-----------------------------------------------
No need to read market data.
-----------------------------------------------
3.3333333333333335% of MC simulations done.
6.666666666666667% of MC simulations done.
10.0% of MC simulations done.
13.333333333333334% of MC simulations done.
16.666666666666664% of MC simulations done.
20.0% of MC simulations done.
23.333333333333332% of MC simulations done.
26.666666666666668% of MC simulations done.
30.0% of MC simulations done.
33.33333333333333% of MC simulations done.
36.666666666666664% of MC simulations done.
40.0% of MC simulations done.
43.333333333333336% of MC simulations done.
46.666666666666664% of MC simulations done.
50.0% of MC simulations done.
53.333333333333336% of MC simulations done.
56.666666666666664% of MC simulations done.
60.0% of MC simulations done.
63.33333333333333% of MC simulations done.
66.66666666666666% of MC simulations done.
70.0% of MC simulations done.
73.33333333333333% of MC simulations done.
76.66666666666667% of MC simulations done.
80.0% of MC simulations done.
83.33333333333334% of MC simulations done.
86.66666666666667% of MC simulations done.
90.0% of MC simulations done.
93.33333333333333% of MC simulations done.
96.66666666666667% of MC simulations done.
100.0% of MC simulations done.
Withdrawal NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       1       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      10  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      10  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       1              none   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 10)     True          10  
2     (10, 10)     True          10  
3      (10, 1)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
Allocation NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       2       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      10  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      10  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       2           softmax   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 10)     True          10  
2     (10, 10)     True          10  
3      (10, 2)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
{'methods': ['Adam'], 'output_progress': False, 'tol': 1e-06, 'itbound_scipy_algorithms': 1000, 'check_exit_criteria': False, 'nit_running_min': 1, 'itbound_SGD_algorithms': 10, 'nit_IterateAveragingStart': 9, 'batchsize': 1000, 'SGD_learningrate': 50.0, 'Adagrad_epsilon': 1e-08, 'Adagrad_eta': 1.0, 'Adadelta_ewma': 0.9, 'Adadelta_epsilon': 1e-08, 'RMSprop_ewma': 0.8, 'RMSprop_epsilon': 1e-08, 'RMSprop_eta': 0.1, 'Adam_ewma_1': 0.9, 'Adam_ewma_2': 0.998, 'Adam_eta': 0.0, 'Adam_epsilon': 1e-08, 'Adam_weight_decay': 0.0001, 'running_min_from_avg': False, 'running_min_from_sgd': True, 'lr_schedule': True}
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ 0.1284, -0.2121],
        [ 0.1284, -0.2121],
        [ 0.1284, -0.2121],
        [ 0.1284, -0.2121],
        [ 0.1284, -0.2121],
        [ 0.1284, -0.2121],
        [ 0.1284, -0.2121],
        [ 0.1284, -0.2121],
        [ 0.1284, -0.2121],
        [ 0.1284, -0.2121]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([0.2307, 0.2307, 0.2307, 0.2307, 0.2307, 0.2307, 0.2307, 0.2307, 0.2307,
        0.2307], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474,
         0.2474],
        [0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474,
         0.2474],
        [0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474,
         0.2474],
        [0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474,
         0.2474],
        [0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474,
         0.2474],
        [0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474,
         0.2474],
        [0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474,
         0.2474],
        [0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474,
         0.2474],
        [0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474,
         0.2474],
        [0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474,
         0.2474]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([0.3979, 0.3979, 0.3979, 0.3979, 0.3979, 0.3979, 0.3979, 0.3979, 0.3979,
        0.3979], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-1.7710, -1.7710, -1.7710, -1.7710, -1.7710, -1.7710, -1.7710, -1.7710,
         -1.7710, -1.7710]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 13.5695,   8.1036],
        [-28.2681,  -4.4919],
        [ 11.7660,  -2.1193],
        [ -1.6288,   3.2224],
        [ -8.8749,   4.1166],
        [-23.1671,   2.5371],
        [ -2.1679,  15.7311],
        [ -0.8909,   5.2492],
        [ -1.5964,   3.2706],
        [ 15.6971,  21.6228]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([  4.6965,  14.1229, -12.3747,  -5.2384,  -2.8694,  23.9059,  13.9323,
         -5.0847,  -5.2366,  17.0118], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-2.7532e+00, -1.6352e+00, -7.4842e-01, -1.1509e-01, -1.2563e-01,
         -1.7030e+00, -2.8202e-01, -1.1780e-01, -1.1476e-01, -5.5050e-01],
        [ 9.7472e+00, -1.3872e+00,  9.3050e-01,  3.8823e-02, -2.0039e-02,
         -2.8775e+00,  1.7823e+01,  1.2495e-02,  3.9573e-02,  3.4116e+00],
        [-3.3216e+00,  1.8583e+00, -3.6901e+00, -1.0732e+00, -1.0359e+00,
         -2.5120e+00,  5.8288e+00, -3.0637e+00, -1.0813e+00,  9.2231e-01],
        [-1.6138e+01,  1.0954e+01, -5.1696e+00,  4.2073e-02,  2.0717e-01,
          5.1081e+00, -1.0715e+01, -2.0154e-02,  4.0111e-02, -2.1477e+01],
        [-3.5744e+00, -5.0257e-01, -1.2406e+01, -8.7193e-01, -3.3783e+00,
         -1.7933e+00,  3.1757e+00, -1.1839e+00, -8.9115e-01,  4.7997e+00],
        [-3.6079e+00, -1.7014e-01, -5.4535e+00, -1.4173e+00, -7.6717e-01,
         -1.6123e+00,  4.2147e+00, -2.6945e+00, -1.4570e+00,  2.3765e+00],
        [-3.5064e+00, -5.1090e+00,  2.4262e+00,  6.0493e-03,  2.4116e-03,
         -8.8230e+00, -1.2555e+00,  2.9554e-03,  5.8760e-03, -9.5958e-01],
        [-2.7080e+00, -1.6080e+00, -1.2280e+00, -1.0732e-01, -1.1224e-01,
         -1.6422e+00, -3.6295e-01, -1.0261e-01, -1.0700e-01, -5.4580e-01],
        [-8.0275e+00,  3.7299e+00, -3.7955e-01,  5.1535e-02,  1.2807e-01,
          7.1845e+00, -1.1883e+01,  1.7189e-02,  5.1430e-02, -2.7910e+00],
        [-3.7736e+01,  3.1588e+00, -1.9166e+01,  5.7607e-02,  1.5618e-01,
          2.0243e+00, -8.0686e+00, -4.8827e-03,  5.3675e-02, -3.8178e+00]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-4.1026, -9.2769, -5.5117, -5.1892, -5.4990, -6.3315, -3.0905, -3.5925,
        -3.4527, -3.0500], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  0.0828,   0.3622,   3.2688,  -8.2533,   4.7846,   3.3364,   3.4881,
           0.0372,  -0.6570,  19.4198],
        [ -0.0828,  -0.4023,  -3.2688,   8.2441,  -4.7846,  -3.3364,  -3.4882,
          -0.0372,   0.5766, -19.4174]], device='cuda:0'))])
loaded xi:  220.98354
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1576.8182150775267
W_T_median: 1136.7449346433505
W_T_pctile_5: -127.64084552288806
W_T_CVAR_5_pct: -295.72244238283764
-----------------------------------------------
new min fval from sgd:  10.039163481829465
min fval:  10.039163481829465
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ 0.1284, -0.2121],
        [ 0.1284, -0.2121],
        [ 0.1284, -0.2121],
        [ 0.1284, -0.2121],
        [ 0.1284, -0.2121],
        [ 0.1284, -0.2121],
        [ 0.1284, -0.2121],
        [ 0.1284, -0.2121],
        [ 0.1284, -0.2121],
        [ 0.1284, -0.2121]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([0.2307, 0.2307, 0.2307, 0.2307, 0.2307, 0.2307, 0.2307, 0.2307, 0.2307,
        0.2307], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474,
         0.2474],
        [0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474,
         0.2474],
        [0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474,
         0.2474],
        [0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474,
         0.2474],
        [0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474,
         0.2474],
        [0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474,
         0.2474],
        [0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474,
         0.2474],
        [0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474,
         0.2474],
        [0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474,
         0.2474],
        [0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474, 0.2474,
         0.2474]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([0.3979, 0.3979, 0.3979, 0.3979, 0.3979, 0.3979, 0.3979, 0.3979, 0.3979,
        0.3979], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-1.7710, -1.7710, -1.7710, -1.7710, -1.7710, -1.7710, -1.7710, -1.7710,
         -1.7710, -1.7710]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 13.5695,   8.1036],
        [-28.2681,  -4.4919],
        [ 11.7660,  -2.1193],
        [ -1.6288,   3.2224],
        [ -8.8749,   4.1166],
        [-23.1671,   2.5371],
        [ -2.1679,  15.7311],
        [ -0.8909,   5.2492],
        [ -1.5964,   3.2706],
        [ 15.6971,  21.6228]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([  4.6965,  14.1229, -12.3747,  -5.2384,  -2.8694,  23.9059,  13.9323,
         -5.0847,  -5.2366,  17.0118], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-2.7532e+00, -1.6352e+00, -7.4842e-01, -1.1509e-01, -1.2563e-01,
         -1.7030e+00, -2.8202e-01, -1.1780e-01, -1.1476e-01, -5.5050e-01],
        [ 9.7472e+00, -1.3872e+00,  9.3050e-01,  3.8823e-02, -2.0039e-02,
         -2.8775e+00,  1.7823e+01,  1.2495e-02,  3.9573e-02,  3.4116e+00],
        [-3.3216e+00,  1.8583e+00, -3.6901e+00, -1.0732e+00, -1.0359e+00,
         -2.5120e+00,  5.8288e+00, -3.0637e+00, -1.0813e+00,  9.2231e-01],
        [-1.6138e+01,  1.0954e+01, -5.1696e+00,  4.2073e-02,  2.0717e-01,
          5.1081e+00, -1.0715e+01, -2.0154e-02,  4.0111e-02, -2.1477e+01],
        [-3.5744e+00, -5.0257e-01, -1.2406e+01, -8.7193e-01, -3.3783e+00,
         -1.7933e+00,  3.1757e+00, -1.1839e+00, -8.9115e-01,  4.7997e+00],
        [-3.6079e+00, -1.7014e-01, -5.4535e+00, -1.4173e+00, -7.6717e-01,
         -1.6123e+00,  4.2147e+00, -2.6945e+00, -1.4570e+00,  2.3765e+00],
        [-3.5064e+00, -5.1090e+00,  2.4262e+00,  6.0493e-03,  2.4116e-03,
         -8.8230e+00, -1.2555e+00,  2.9554e-03,  5.8760e-03, -9.5958e-01],
        [-2.7080e+00, -1.6080e+00, -1.2280e+00, -1.0732e-01, -1.1224e-01,
         -1.6422e+00, -3.6295e-01, -1.0261e-01, -1.0700e-01, -5.4580e-01],
        [-8.0275e+00,  3.7299e+00, -3.7955e-01,  5.1535e-02,  1.2807e-01,
          7.1845e+00, -1.1883e+01,  1.7189e-02,  5.1430e-02, -2.7910e+00],
        [-3.7736e+01,  3.1588e+00, -1.9166e+01,  5.7607e-02,  1.5618e-01,
          2.0243e+00, -8.0686e+00, -4.8827e-03,  5.3675e-02, -3.8178e+00]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-4.1026, -9.2769, -5.5117, -5.1892, -5.4990, -6.3315, -3.0905, -3.5925,
        -3.4527, -3.0500], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  0.0828,   0.3622,   3.2688,  -8.2533,   4.7846,   3.3364,   3.4881,
           0.0372,  -0.6570,  19.4198],
        [ -0.0828,  -0.4023,  -3.2688,   8.2441,  -4.7846,  -3.3364,  -3.4882,
          -0.0372,   0.5766, -19.4174]], device='cuda:0'))])
xi:  [220.98354]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 1223.1730339263436
W_T_median: 947.6429325199256
W_T_pctile_5: 156.54377185002605
W_T_CVAR_5_pct: 6.165462850082208
Average q (qsum/M+1):  35.0
Optimal xi:  [220.98354]
Expected(across Rb) median(across samples) p_equity:  0.21972122564911842
obj fun:  tensor(10.0392, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 999.0
-----------------------------------------------

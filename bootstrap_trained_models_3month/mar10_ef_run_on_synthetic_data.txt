Starting at: 
10-03-23_16:43

 numpy seed:  3  


 pytorch seed:  3  

Key parameters-------
paths: 256000
iterations: 10
batchsize: 1000
remove neg:  False
w constaint activation:  yy_fix_jan29


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = B10_and_VWD
timeseries_basket['basket_desc'] = CRSP data: B10 and VWD
timeseries_basket['basket_columns'] = 
['B10_real_ret', 'VWD_real_ret']
############# End: defined asset  basket #################
-----------------------------------------------
No need to read market data.
-----------------------------------------------
3.3333333333333335% of MC simulations done.
6.666666666666667% of MC simulations done.
10.0% of MC simulations done.
13.333333333333334% of MC simulations done.
16.666666666666664% of MC simulations done.
20.0% of MC simulations done.
23.333333333333332% of MC simulations done.
26.666666666666668% of MC simulations done.
30.0% of MC simulations done.
33.33333333333333% of MC simulations done.
36.666666666666664% of MC simulations done.
40.0% of MC simulations done.
43.333333333333336% of MC simulations done.
46.666666666666664% of MC simulations done.
50.0% of MC simulations done.
53.333333333333336% of MC simulations done.
56.666666666666664% of MC simulations done.
60.0% of MC simulations done.
63.33333333333333% of MC simulations done.
66.66666666666666% of MC simulations done.
70.0% of MC simulations done.
73.33333333333333% of MC simulations done.
76.66666666666667% of MC simulations done.
80.0% of MC simulations done.
83.33333333333334% of MC simulations done.
86.66666666666667% of MC simulations done.
90.0% of MC simulations done.
93.33333333333333% of MC simulations done.
96.66666666666667% of MC simulations done.
100.0% of MC simulations done.
Withdrawal NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       1       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      10  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      10  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       1              none   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 10)     True          10  
2     (10, 10)     True          10  
3      (10, 1)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
Allocation NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       2       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      10  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      10  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       2           softmax   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 10)     True          10  
2     (10, 10)     True          10  
3      (10, 2)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
{'methods': ['Adam'], 'output_progress': False, 'tol': 1e-06, 'itbound_scipy_algorithms': 1000, 'check_exit_criteria': False, 'nit_running_min': 1, 'itbound_SGD_algorithms': 10, 'nit_IterateAveragingStart': 9, 'batchsize': 1000, 'SGD_learningrate': 50.0, 'Adagrad_epsilon': 1e-08, 'Adagrad_eta': 1.0, 'Adadelta_ewma': 0.9, 'Adadelta_epsilon': 1e-08, 'RMSprop_ewma': 0.8, 'RMSprop_epsilon': 1e-08, 'RMSprop_eta': 0.1, 'Adam_ewma_1': 0.9, 'Adam_ewma_2': 0.998, 'Adam_eta': 0, 'Adam_epsilon': 1e-08, 'Adam_weight_decay': 0.0001, 'running_min_from_avg': False, 'running_min_from_sgd': True, 'lr_schedule': True}
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.3890,  1.2705],
        [-0.3890,  1.2705],
        [-3.1769,  6.0819],
        [13.5058,  1.4187],
        [-0.3899,  1.2758],
        [-0.3890,  1.2704],
        [-7.1279,  3.6605],
        [-0.3890,  1.2705],
        [-2.7274,  6.0897],
        [-7.4749, -4.6178]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-0.7172, -0.7172, 10.7230, -8.1522, -0.7211, -0.7172,  8.5092, -0.7172,
        10.6407,  0.0170], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [ 1.2597e-01,  1.2597e-01, -7.3658e+00, -9.7405e+00,  8.8391e-02,
          1.2638e-01, -4.9376e+00,  1.2597e-01, -6.9440e+00,  1.7873e+00],
        [ 8.3322e-02,  8.3323e-02,  2.1481e+00,  3.8260e+00,  7.0418e-02,
          8.3492e-02,  1.7870e+00,  8.3323e-02,  2.0981e+00, -7.7238e-02],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [ 4.2223e-02,  4.2225e-02,  3.4672e+00,  5.0553e+00,  6.1523e-03,
          4.2634e-02,  2.6714e+00,  4.2224e-02,  3.3334e+00, -1.9996e-01],
        [ 2.2983e-02,  2.2984e-02,  3.9047e+00,  5.5445e+00, -1.6427e-02,
          2.3378e-02,  2.9206e+00,  2.2984e-02,  3.7580e+00, -3.6710e-01],
        [-5.6500e-03, -5.6500e-03, -3.3708e-02, -1.4784e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6500e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6068e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.5222, -0.5222,  4.8970, -3.0995, -0.5222, -0.5222, -3.3636, -3.4951,
        -0.5221, -0.5222], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 1.4894e-03,  1.4894e-03, -1.3247e+01,  3.5944e+00,  1.4894e-03,
          1.4894e-03,  5.2154e+00,  5.9972e+00,  1.4895e-03,  1.4894e-03]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 12.8302,   3.0636],
        [ -4.1623,  -9.0103],
        [  2.6807,  -7.5523],
        [-16.5897,  -5.9841],
        [-15.5150,  -2.9124],
        [-10.2233,   0.7646],
        [ -2.3654,  -4.4019],
        [-10.1674,  -9.3383],
        [ -8.7847,   0.8757],
        [  7.9507,   8.6118]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -2.6631, -11.6716,  -7.2738,  -3.6322,   1.6722,  11.6587,  -1.8508,
         -7.5078,   5.2666,   7.2578], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 2.5515e+00,  1.5561e+00,  2.6742e+00, -3.0320e+00, -4.6687e+00,
         -9.0387e-01,  2.2213e+00,  5.3288e-01,  1.4450e+00, -4.0020e+00],
        [-2.4323e-01, -8.3041e-01, -1.0577e+00, -6.7899e-01, -5.0301e-01,
         -9.9127e-01, -1.5997e+00, -9.8904e-01, -3.1749e+00, -3.1361e-01],
        [-1.0866e+00, -4.0812e-01, -5.3434e+00,  9.1229e-01,  5.7108e+00,
         -1.3832e+00, -7.6576e+00, -2.6274e+00,  5.6125e+00, -8.4968e-01],
        [-4.1727e+00,  1.6408e-01,  2.5270e-02,  6.8018e+00,  9.1168e-03,
         -5.8992e+00, -3.1741e-01,  4.0828e-01, -3.6580e+00,  2.4430e-02],
        [-1.0131e+00, -3.2826e-01, -3.7271e+00, -1.5399e+00,  3.6249e+00,
         -1.3771e+00, -4.3775e+00, -2.7616e+00,  4.7750e+00, -7.7867e-01],
        [-1.5592e+00,  8.8254e+00, -9.7969e-01,  3.2892e+00,  8.9069e+00,
          4.6782e-03, -4.5292e+00, -2.0707e+00,  1.4748e+00, -2.4894e+00],
        [-4.3279e+00, -1.2782e+01,  4.2846e+00, -2.9663e+00, -4.8306e+00,
          6.2756e+00,  1.9816e-01,  7.3166e+00, -3.8854e+00, -7.5519e+00],
        [-4.0843e-01, -7.9911e-01, -1.1385e+00, -6.5685e-01, -4.2991e-01,
         -1.1014e+00, -1.6045e+00, -9.1947e-01, -2.6564e+00, -4.4088e-01],
        [-2.9625e+00,  1.0796e+00, -2.9583e-01,  5.3380e+00,  1.4345e+00,
         -4.7627e+00, -8.6064e-01, -3.2371e-01, -3.5119e+00,  1.2628e+00],
        [-8.1147e-01,  9.6900e+00, -5.2043e+00,  7.9194e+00,  1.0944e+00,
          1.1123e+00, -3.7378e+00, -4.9453e+00,  7.7430e+00,  1.2268e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-3.1657, -1.2410, -1.9436, -0.8159, -1.8813, -6.2588, -1.2579, -1.3573,
        -0.8754, -1.5403], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-0.3370, -1.0365, -4.3117, -4.1120, -2.4344,  5.4253, -7.8169, -0.8955,
         -1.9441,  0.7044],
        [ 0.1068,  1.0365,  4.3118,  4.1068,  2.4344, -5.3462,  7.8905,  0.8955,
          2.2557, -0.8519]], device='cuda:0'))])
loaded xi:  -458.1955
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -1723.3914241000496
min fval:  -1723.3914241000496
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.3890,  1.2705],
        [-0.3890,  1.2705],
        [-3.1769,  6.0819],
        [13.5058,  1.4187],
        [-0.3899,  1.2758],
        [-0.3890,  1.2704],
        [-7.1279,  3.6605],
        [-0.3890,  1.2705],
        [-2.7274,  6.0897],
        [-7.4749, -4.6178]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-0.7172, -0.7172, 10.7230, -8.1522, -0.7211, -0.7172,  8.5092, -0.7172,
        10.6407,  0.0170], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [ 1.2597e-01,  1.2597e-01, -7.3658e+00, -9.7405e+00,  8.8391e-02,
          1.2638e-01, -4.9376e+00,  1.2597e-01, -6.9440e+00,  1.7873e+00],
        [ 8.3322e-02,  8.3323e-02,  2.1481e+00,  3.8260e+00,  7.0418e-02,
          8.3492e-02,  1.7870e+00,  8.3323e-02,  2.0981e+00, -7.7238e-02],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [ 4.2223e-02,  4.2225e-02,  3.4672e+00,  5.0553e+00,  6.1523e-03,
          4.2634e-02,  2.6714e+00,  4.2224e-02,  3.3334e+00, -1.9996e-01],
        [ 2.2983e-02,  2.2984e-02,  3.9047e+00,  5.5445e+00, -1.6427e-02,
          2.3378e-02,  2.9206e+00,  2.2984e-02,  3.7580e+00, -3.6710e-01],
        [-5.6500e-03, -5.6500e-03, -3.3708e-02, -1.4784e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6500e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6068e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.5222, -0.5222,  4.8970, -3.0995, -0.5222, -0.5222, -3.3636, -3.4951,
        -0.5221, -0.5222], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 1.4894e-03,  1.4894e-03, -1.3247e+01,  3.5944e+00,  1.4894e-03,
          1.4894e-03,  5.2154e+00,  5.9972e+00,  1.4895e-03,  1.4894e-03]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 12.8302,   3.0636],
        [ -4.1623,  -9.0103],
        [  2.6807,  -7.5523],
        [-16.5897,  -5.9841],
        [-15.5150,  -2.9124],
        [-10.2233,   0.7646],
        [ -2.3654,  -4.4019],
        [-10.1674,  -9.3383],
        [ -8.7847,   0.8757],
        [  7.9507,   8.6118]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -2.6631, -11.6716,  -7.2738,  -3.6322,   1.6722,  11.6587,  -1.8508,
         -7.5078,   5.2666,   7.2578], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 2.5515e+00,  1.5561e+00,  2.6742e+00, -3.0320e+00, -4.6687e+00,
         -9.0387e-01,  2.2213e+00,  5.3288e-01,  1.4450e+00, -4.0020e+00],
        [-2.4323e-01, -8.3041e-01, -1.0577e+00, -6.7899e-01, -5.0301e-01,
         -9.9127e-01, -1.5997e+00, -9.8904e-01, -3.1749e+00, -3.1361e-01],
        [-1.0866e+00, -4.0812e-01, -5.3434e+00,  9.1229e-01,  5.7108e+00,
         -1.3832e+00, -7.6576e+00, -2.6274e+00,  5.6125e+00, -8.4968e-01],
        [-4.1727e+00,  1.6408e-01,  2.5270e-02,  6.8018e+00,  9.1168e-03,
         -5.8992e+00, -3.1741e-01,  4.0828e-01, -3.6580e+00,  2.4430e-02],
        [-1.0131e+00, -3.2826e-01, -3.7271e+00, -1.5399e+00,  3.6249e+00,
         -1.3771e+00, -4.3775e+00, -2.7616e+00,  4.7750e+00, -7.7867e-01],
        [-1.5592e+00,  8.8254e+00, -9.7969e-01,  3.2892e+00,  8.9069e+00,
          4.6782e-03, -4.5292e+00, -2.0707e+00,  1.4748e+00, -2.4894e+00],
        [-4.3279e+00, -1.2782e+01,  4.2846e+00, -2.9663e+00, -4.8306e+00,
          6.2756e+00,  1.9816e-01,  7.3166e+00, -3.8854e+00, -7.5519e+00],
        [-4.0843e-01, -7.9911e-01, -1.1385e+00, -6.5685e-01, -4.2991e-01,
         -1.1014e+00, -1.6045e+00, -9.1947e-01, -2.6564e+00, -4.4088e-01],
        [-2.9625e+00,  1.0796e+00, -2.9583e-01,  5.3380e+00,  1.4345e+00,
         -4.7627e+00, -8.6064e-01, -3.2371e-01, -3.5119e+00,  1.2628e+00],
        [-8.1147e-01,  9.6900e+00, -5.2043e+00,  7.9194e+00,  1.0944e+00,
          1.1123e+00, -3.7378e+00, -4.9453e+00,  7.7430e+00,  1.2268e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-3.1657, -1.2410, -1.9436, -0.8159, -1.8813, -6.2588, -1.2579, -1.3573,
        -0.8754, -1.5403], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-0.3370, -1.0365, -4.3117, -4.1120, -2.4344,  5.4253, -7.8169, -0.8955,
         -1.9441,  0.7044],
        [ 0.1068,  1.0365,  4.3118,  4.1068,  2.4344, -5.3462,  7.8905,  0.8955,
          2.2557, -0.8519]], device='cuda:0'))])
xi:  [-458.1955]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 1257.241849587196
W_T_median: 56.647951393723744
W_T_pctile_5: -640.4818224493704
W_T_CVAR_5_pct: -749.4948132389078
Average q (qsum/M+1):  57.053124212449596
Optimal xi:  [-458.1955]
Expected(across Rb) median(across samples) p_equity:  0.6308691461881002
obj fun:  tensor(-1723.3914, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 0.05
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.8181,  1.2655],
        [-0.8181,  1.2655],
        [-6.7043,  8.6399],
        [-0.8181,  1.2655],
        [-0.8181,  1.2655],
        [-0.8181,  1.2655],
        [-0.8319,  1.2686],
        [-0.8181,  1.2655],
        [ 4.0510,  9.2020],
        [-0.8181,  1.2655]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-0.9350, -0.9350, 12.2100, -0.9350, -0.9350, -0.9350, -0.9740, -0.9350,
         9.9181, -0.9350], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-9.6010e-03, -9.6010e-03, -1.3388e-01, -9.6008e-03, -9.6008e-03,
         -9.6011e-03, -9.0134e-03, -9.6010e-03, -5.0271e-01, -9.6008e-03],
        [-9.6010e-03, -9.6011e-03, -1.3388e-01, -9.6008e-03, -9.6008e-03,
         -9.6011e-03, -9.0134e-03, -9.6011e-03, -5.0271e-01, -9.6008e-03],
        [ 5.9245e-01,  5.9245e-01, -8.2989e+00,  5.9239e-01,  5.9240e-01,
          5.9246e-01,  4.7607e-01,  5.9245e-01, -9.4766e+00,  5.9239e-01],
        [-1.6111e-01, -1.6111e-01,  4.4591e+00, -1.6113e-01, -1.6113e-01,
         -1.6111e-01, -2.3334e-01, -1.6111e-01,  4.1745e+00, -1.6113e-01],
        [-9.6010e-03, -9.6010e-03, -1.3388e-01, -9.6008e-03, -9.6008e-03,
         -9.6011e-03, -9.0134e-03, -9.6010e-03, -5.0271e-01, -9.6008e-03],
        [-9.6011e-03, -9.6011e-03, -1.3388e-01, -9.6008e-03, -9.6008e-03,
         -9.6011e-03, -9.0134e-03, -9.6011e-03, -5.0271e-01, -9.6008e-03],
        [-1.7597e-01, -1.7597e-01,  5.2062e+00, -1.7602e-01, -1.7601e-01,
         -1.7597e-01, -2.4063e-01, -1.7597e-01,  4.7205e+00, -1.7602e-01],
        [-2.0765e-01, -2.0765e-01,  5.9716e+00, -2.0773e-01, -2.0771e-01,
         -2.0764e-01, -2.7815e-01, -2.0765e-01,  5.3062e+00, -2.0773e-01],
        [-9.6010e-03, -9.6011e-03, -1.3388e-01, -9.6008e-03, -9.6008e-03,
         -9.6011e-03, -9.0134e-03, -9.6011e-03, -5.0271e-01, -9.6008e-03],
        [-9.6010e-03, -9.6010e-03, -1.3388e-01, -9.6008e-03, -9.6008e-03,
         -9.6011e-03, -9.0134e-03, -9.6011e-03, -5.0271e-01, -9.6008e-03]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.7303, -0.7303,  8.0176, -4.1127, -0.7303, -0.7303, -4.6390, -5.1923,
        -0.7303, -0.7303], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.0248,  -0.0248, -14.4336,   4.4326,  -0.0248,  -0.0248,   5.3747,
           6.5926,  -0.0248,  -0.0248]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 14.9886,   2.4124],
        [ -3.9607,  -6.8647],
        [  2.8421, -15.0439],
        [-15.0104,  -1.3554],
        [-17.8803,  -2.1979],
        [-13.6356,   0.1386],
        [  1.5865,  -2.9758],
        [ -9.1459,  -9.2862],
        [-12.0836,   1.7614],
        [ 12.6914,  10.9896]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -5.8115, -13.3717, -15.6698,   0.1876,   3.0066,  12.2546,  -2.6500,
         -8.0082,   6.1204,  11.2100], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-9.9379e-01, -4.8549e+00,  6.0099e+00, -1.0764e+01,  1.1539e+00,
          1.3655e+00, -1.6340e+00, -1.3220e+00,  3.1557e+00, -2.2392e+00],
        [ 3.0425e-01, -2.2314e+00, -1.1031e+00, -4.3235e-01, -1.0041e+00,
          4.4433e-01,  1.8019e+00, -1.6744e+00, -6.2733e+00, -1.5991e+00],
        [-1.5442e+00, -9.9958e-03, -6.8393e+00,  4.0706e+00,  9.5080e-01,
          4.8177e+00, -9.3012e+00, -5.4022e+00,  3.5393e+00, -2.0912e+00],
        [-3.6220e+00,  2.5934e+00,  1.8413e-03,  5.1178e+00,  3.6488e+00,
         -4.4076e+00, -1.4818e+00, -1.1371e+00, -3.7062e+00, -2.1213e+00],
        [-1.1637e+00, -3.8776e-01, -7.0991e-01, -3.7050e-01, -3.8767e-01,
         -8.3575e-01, -1.0543e+00, -4.7849e-01, -2.9402e-02, -1.2324e+00],
        [-8.0890e+00,  4.4759e-01,  5.8985e+00,  8.0189e-01,  9.5517e+00,
          2.0382e+00, -3.0454e+00,  1.2842e+00,  1.8420e+00, -2.0685e+01],
        [-9.6121e+00,  4.2774e-01,  8.8690e+00, -1.0471e+01,  5.8744e+00,
          8.2530e+00, -4.9189e+00,  2.4137e+00,  8.7083e+00, -1.4855e+01],
        [-1.1633e+00, -3.8767e-01, -7.0976e-01, -3.7032e-01, -3.8750e-01,
         -8.3573e-01, -1.0541e+00, -4.7844e-01, -2.9403e-02, -1.2321e+00],
        [-3.3022e+00,  2.4695e+00,  7.7086e-02,  4.9005e+00,  3.4609e+00,
         -4.0536e+00, -1.4189e+00, -1.1454e+00, -3.4640e+00, -2.0260e+00],
        [-2.0113e-01,  1.0013e+01, -4.8859e+00,  6.8310e+00,  1.8534e+00,
          3.4384e+00, -3.1067e+00, -4.9847e+00,  1.8256e+00, -5.1503e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-4.5917, -3.1860, -3.7571, -2.1880, -1.7545, -6.7424, -7.9975, -1.7556,
        -2.1591, -1.7526], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-2.2944e+00, -2.0514e+00, -4.9324e+00, -5.4339e+00, -4.6270e-03,
          7.9311e+00, -3.4188e+00, -4.6358e-03, -3.2780e+00,  8.6686e-01],
        [ 2.0845e+00,  2.0514e+00,  4.9324e+00,  5.4288e+00,  4.6146e-03,
         -7.8544e+00,  3.4369e+00,  4.6236e-03,  3.5806e+00, -1.0103e+00]],
       device='cuda:0'))])
loaded xi:  -204.86673
loaded continuation NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.3890,  1.2705],
        [-0.3890,  1.2705],
        [-3.1769,  6.0819],
        [13.5058,  1.4187],
        [-0.3899,  1.2758],
        [-0.3890,  1.2704],
        [-7.1279,  3.6605],
        [-0.3890,  1.2705],
        [-2.7274,  6.0897],
        [-7.4749, -4.6178]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-0.7172, -0.7172, 10.7230, -8.1522, -0.7211, -0.7172,  8.5092, -0.7172,
        10.6407,  0.0170], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [ 1.2597e-01,  1.2597e-01, -7.3658e+00, -9.7405e+00,  8.8391e-02,
          1.2638e-01, -4.9376e+00,  1.2597e-01, -6.9440e+00,  1.7873e+00],
        [ 8.3322e-02,  8.3323e-02,  2.1481e+00,  3.8260e+00,  7.0418e-02,
          8.3492e-02,  1.7870e+00,  8.3323e-02,  2.0981e+00, -7.7238e-02],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [ 4.2223e-02,  4.2225e-02,  3.4672e+00,  5.0553e+00,  6.1523e-03,
          4.2634e-02,  2.6714e+00,  4.2224e-02,  3.3334e+00, -1.9996e-01],
        [ 2.2983e-02,  2.2984e-02,  3.9047e+00,  5.5445e+00, -1.6427e-02,
          2.3378e-02,  2.9206e+00,  2.2984e-02,  3.7580e+00, -3.6710e-01],
        [-5.6500e-03, -5.6500e-03, -3.3708e-02, -1.4784e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6500e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6068e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.5222, -0.5222,  4.8970, -3.0995, -0.5222, -0.5222, -3.3636, -3.4951,
        -0.5221, -0.5222], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 1.4894e-03,  1.4894e-03, -1.3247e+01,  3.5944e+00,  1.4894e-03,
          1.4894e-03,  5.2154e+00,  5.9972e+00,  1.4895e-03,  1.4894e-03]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 12.8302,   3.0636],
        [ -4.1623,  -9.0103],
        [  2.6807,  -7.5523],
        [-16.5897,  -5.9841],
        [-15.5150,  -2.9124],
        [-10.2233,   0.7646],
        [ -2.3654,  -4.4019],
        [-10.1674,  -9.3383],
        [ -8.7847,   0.8757],
        [  7.9507,   8.6118]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -2.6631, -11.6716,  -7.2738,  -3.6322,   1.6722,  11.6587,  -1.8508,
         -7.5078,   5.2666,   7.2578], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 2.5515e+00,  1.5561e+00,  2.6742e+00, -3.0320e+00, -4.6687e+00,
         -9.0387e-01,  2.2213e+00,  5.3288e-01,  1.4450e+00, -4.0020e+00],
        [-2.4323e-01, -8.3041e-01, -1.0577e+00, -6.7899e-01, -5.0301e-01,
         -9.9127e-01, -1.5997e+00, -9.8904e-01, -3.1749e+00, -3.1361e-01],
        [-1.0866e+00, -4.0812e-01, -5.3434e+00,  9.1229e-01,  5.7108e+00,
         -1.3832e+00, -7.6576e+00, -2.6274e+00,  5.6125e+00, -8.4968e-01],
        [-4.1727e+00,  1.6408e-01,  2.5270e-02,  6.8018e+00,  9.1168e-03,
         -5.8992e+00, -3.1741e-01,  4.0828e-01, -3.6580e+00,  2.4430e-02],
        [-1.0131e+00, -3.2826e-01, -3.7271e+00, -1.5399e+00,  3.6249e+00,
         -1.3771e+00, -4.3775e+00, -2.7616e+00,  4.7750e+00, -7.7867e-01],
        [-1.5592e+00,  8.8254e+00, -9.7969e-01,  3.2892e+00,  8.9069e+00,
          4.6782e-03, -4.5292e+00, -2.0707e+00,  1.4748e+00, -2.4894e+00],
        [-4.3279e+00, -1.2782e+01,  4.2846e+00, -2.9663e+00, -4.8306e+00,
          6.2756e+00,  1.9816e-01,  7.3166e+00, -3.8854e+00, -7.5519e+00],
        [-4.0843e-01, -7.9911e-01, -1.1385e+00, -6.5685e-01, -4.2991e-01,
         -1.1014e+00, -1.6045e+00, -9.1947e-01, -2.6564e+00, -4.4088e-01],
        [-2.9625e+00,  1.0796e+00, -2.9583e-01,  5.3380e+00,  1.4345e+00,
         -4.7627e+00, -8.6064e-01, -3.2371e-01, -3.5119e+00,  1.2628e+00],
        [-8.1147e-01,  9.6900e+00, -5.2043e+00,  7.9194e+00,  1.0944e+00,
          1.1123e+00, -3.7378e+00, -4.9453e+00,  7.7430e+00,  1.2268e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-3.1657, -1.2410, -1.9436, -0.8159, -1.8813, -6.2588, -1.2579, -1.3573,
        -0.8754, -1.5403], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-0.3370, -1.0365, -4.3117, -4.1120, -2.4344,  5.4253, -7.8169, -0.8955,
         -1.9441,  0.7044],
        [ 0.1068,  1.0365,  4.3118,  4.1068,  2.4344, -5.3462,  7.8905,  0.8955,
          2.2557, -0.8519]], device='cuda:0'))])
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -1457.7602449118363
min fval:  -1457.7602449118363
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.3890,  1.2705],
        [-0.3890,  1.2705],
        [-3.1769,  6.0819],
        [13.5058,  1.4187],
        [-0.3899,  1.2758],
        [-0.3890,  1.2704],
        [-7.1279,  3.6605],
        [-0.3890,  1.2705],
        [-2.7274,  6.0897],
        [-7.4749, -4.6178]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-0.7172, -0.7172, 10.7230, -8.1522, -0.7211, -0.7172,  8.5092, -0.7172,
        10.6407,  0.0170], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [ 1.2597e-01,  1.2597e-01, -7.3658e+00, -9.7405e+00,  8.8391e-02,
          1.2638e-01, -4.9376e+00,  1.2597e-01, -6.9440e+00,  1.7873e+00],
        [ 8.3322e-02,  8.3323e-02,  2.1481e+00,  3.8260e+00,  7.0418e-02,
          8.3492e-02,  1.7870e+00,  8.3323e-02,  2.0981e+00, -7.7238e-02],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [ 4.2223e-02,  4.2225e-02,  3.4672e+00,  5.0553e+00,  6.1523e-03,
          4.2634e-02,  2.6714e+00,  4.2224e-02,  3.3334e+00, -1.9996e-01],
        [ 2.2983e-02,  2.2984e-02,  3.9047e+00,  5.5445e+00, -1.6427e-02,
          2.3378e-02,  2.9206e+00,  2.2984e-02,  3.7580e+00, -3.6710e-01],
        [-5.6500e-03, -5.6500e-03, -3.3708e-02, -1.4784e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6500e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6068e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.5222, -0.5222,  4.8970, -3.0995, -0.5222, -0.5222, -3.3636, -3.4951,
        -0.5221, -0.5222], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 1.4894e-03,  1.4894e-03, -1.3247e+01,  3.5944e+00,  1.4894e-03,
          1.4894e-03,  5.2154e+00,  5.9972e+00,  1.4895e-03,  1.4894e-03]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 12.8302,   3.0636],
        [ -4.1623,  -9.0103],
        [  2.6807,  -7.5523],
        [-16.5897,  -5.9841],
        [-15.5150,  -2.9124],
        [-10.2233,   0.7646],
        [ -2.3654,  -4.4019],
        [-10.1674,  -9.3383],
        [ -8.7847,   0.8757],
        [  7.9507,   8.6118]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -2.6631, -11.6716,  -7.2738,  -3.6322,   1.6722,  11.6587,  -1.8508,
         -7.5078,   5.2666,   7.2578], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 2.5515e+00,  1.5561e+00,  2.6742e+00, -3.0320e+00, -4.6687e+00,
         -9.0387e-01,  2.2213e+00,  5.3288e-01,  1.4450e+00, -4.0020e+00],
        [-2.4323e-01, -8.3041e-01, -1.0577e+00, -6.7899e-01, -5.0301e-01,
         -9.9127e-01, -1.5997e+00, -9.8904e-01, -3.1749e+00, -3.1361e-01],
        [-1.0866e+00, -4.0812e-01, -5.3434e+00,  9.1229e-01,  5.7108e+00,
         -1.3832e+00, -7.6576e+00, -2.6274e+00,  5.6125e+00, -8.4968e-01],
        [-4.1727e+00,  1.6408e-01,  2.5270e-02,  6.8018e+00,  9.1168e-03,
         -5.8992e+00, -3.1741e-01,  4.0828e-01, -3.6580e+00,  2.4430e-02],
        [-1.0131e+00, -3.2826e-01, -3.7271e+00, -1.5399e+00,  3.6249e+00,
         -1.3771e+00, -4.3775e+00, -2.7616e+00,  4.7750e+00, -7.7867e-01],
        [-1.5592e+00,  8.8254e+00, -9.7969e-01,  3.2892e+00,  8.9069e+00,
          4.6782e-03, -4.5292e+00, -2.0707e+00,  1.4748e+00, -2.4894e+00],
        [-4.3279e+00, -1.2782e+01,  4.2846e+00, -2.9663e+00, -4.8306e+00,
          6.2756e+00,  1.9816e-01,  7.3166e+00, -3.8854e+00, -7.5519e+00],
        [-4.0843e-01, -7.9911e-01, -1.1385e+00, -6.5685e-01, -4.2991e-01,
         -1.1014e+00, -1.6045e+00, -9.1947e-01, -2.6564e+00, -4.4088e-01],
        [-2.9625e+00,  1.0796e+00, -2.9583e-01,  5.3380e+00,  1.4345e+00,
         -4.7627e+00, -8.6064e-01, -3.2371e-01, -3.5119e+00,  1.2628e+00],
        [-8.1147e-01,  9.6900e+00, -5.2043e+00,  7.9194e+00,  1.0944e+00,
          1.1123e+00, -3.7378e+00, -4.9453e+00,  7.7430e+00,  1.2268e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-3.1657, -1.2410, -1.9436, -0.8159, -1.8813, -6.2588, -1.2579, -1.3573,
        -0.8754, -1.5403], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-0.3370, -1.0365, -4.3117, -4.1120, -2.4344,  5.4253, -7.8169, -0.8955,
         -1.9441,  0.7044],
        [ 0.1068,  1.0365,  4.3118,  4.1068,  2.4344, -5.3462,  7.8905,  0.8955,
          2.2557, -0.8519]], device='cuda:0'))])
xi:  [-204.86673]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 1257.241849587196
W_T_median: 56.647951393723744
W_T_pctile_5: -640.4818224493704
W_T_CVAR_5_pct: -749.4948132389078
Average q (qsum/M+1):  57.053124212449596
Optimal xi:  [-204.86673]
Expected(across Rb) median(across samples) p_equity:  0.6308691461881002
obj fun:  tensor(-1457.7602, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 0.2
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-2.2247,  4.3209],
        [-2.2240,  4.3268],
        [-6.1086,  9.7295],
        [-2.2554,  4.0741],
        [-2.2525,  4.0967],
        [-2.2227,  4.3381],
        [ 6.7954,  2.8002],
        [-2.2250,  4.3185],
        [ 5.3083, 11.2098],
        [-2.2544,  4.0817]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ 0.3963,  0.3968, 10.7253,  0.3753,  0.3772,  0.3978, -5.0732,  0.3960,
        11.5013,  0.3759], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ -0.1684,  -0.1687,  -0.9404,  -0.1554,  -0.1565,  -0.1693,  -0.8081,
          -0.1682,  -1.4002,  -0.1558],
        [ -0.1684,  -0.1687,  -0.9404,  -0.1554,  -0.1565,  -0.1693,  -0.8081,
          -0.1682,  -1.4002,  -0.1558],
        [ -0.5656,  -0.5647,  -8.7616,  -0.6079,  -0.6036,  -0.5630,   7.2620,
          -0.5660, -10.7544,  -0.6064],
        [  0.7350,   0.7343,   5.9283,   0.7708,   0.7672,   0.7328,  -7.4856,
           0.7354,   4.0658,   0.7696],
        [ -0.1684,  -0.1687,  -0.9404,  -0.1554,  -0.1565,  -0.1693,  -0.8081,
          -0.1682,  -1.4002,  -0.1558],
        [ -0.1684,  -0.1687,  -0.9404,  -0.1554,  -0.1565,  -0.1693,  -0.8081,
          -0.1682,  -1.4002,  -0.1558],
        [  2.2900,   2.2910,   6.5259,   2.2522,   2.2556,   2.2928,  -8.2870,
           2.2896,   5.1739,   2.2533],
        [  3.2348,   3.2364,   6.9482,   3.1717,   3.1774,   3.2393,  -8.8705,
           3.2342,   5.9754,   3.1736],
        [ -0.1684,  -0.1687,  -0.9404,  -0.1554,  -0.1565,  -0.1693,  -0.8081,
          -0.1682,  -1.4002,  -0.1558],
        [ -0.1684,  -0.1687,  -0.9404,  -0.1554,  -0.1565,  -0.1693,  -0.8081,
          -0.1682,  -1.4002,  -0.1558]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.4110, -1.4110, 10.7223, -6.0868, -1.4110, -1.4110, -6.8565, -7.6155,
        -1.4110, -1.4110], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[  0.0706,   0.0706, -20.7368,   6.3760,   0.0706,   0.0706,   8.9201,
          11.4583,   0.0706,   0.0706]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 17.5218,   1.7324],
        [ -2.1461,  -2.0257],
        [ -6.8512, -17.2638],
        [-14.5313,   1.7647],
        [-13.4452,  -3.1005],
        [-15.7318,   0.2365],
        [  3.6337,  -5.3431],
        [-11.6388, -11.4033],
        [-10.0472,   1.7281],
        [ 14.6455,  11.8789]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -8.0086,  -6.5859, -17.8332,   2.9281,  -0.8009,  14.0234,  -7.3603,
        -10.6435,   6.5159,  11.3695], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-4.0960e+00, -2.9719e+00,  9.1244e+00, -5.7432e+00, -3.2062e+00,
          6.8884e+00, -2.3659e+00,  1.3669e+00, -1.6958e-01, -4.1299e+00],
        [-2.9595e-01, -1.6511e+00,  3.7282e-02, -1.3465e-02, -1.7968e+00,
         -2.0560e+00, -4.6125e-01,  2.2892e-01, -5.2864e-01, -1.5267e+00],
        [ 4.0496e-02, -6.9984e-02,  5.6310e-02,  6.3262e+00, -5.6710e+00,
          4.8562e+00, -8.0886e+00, -3.3964e+00,  7.7433e+00, -5.1245e+00],
        [-4.1321e+00,  7.9852e+00, -8.7048e+00, -4.2872e+00,  5.4975e+00,
         -2.1416e+00, -7.9463e-03,  3.2576e+00,  9.6131e-02,  2.8003e-01],
        [-8.4917e-01, -6.3890e+00, -1.7492e-01, -9.8749e-01,  2.9528e+00,
         -4.2911e-01,  2.6289e+00, -1.3506e+00,  9.9220e-01, -8.4796e-01],
        [-6.9732e+00,  3.8222e-01,  8.0288e+00,  5.5360e-01,  1.0899e+01,
         -7.9086e-03, -1.3856e+00,  5.3801e-01,  1.4334e+00, -2.1538e+01],
        [-1.3112e+01, -8.6230e+00,  1.4464e+01, -7.7538e+00, -9.8681e-01,
          8.7489e+00, -1.5331e-01,  1.6045e+00,  6.5969e+00, -1.6779e+01],
        [-1.8426e-01, -6.0389e+00,  6.9451e-01, -2.1815e+00,  2.7693e+00,
         -2.0308e+00,  1.2657e+00,  4.2083e-01,  3.4479e+00, -1.4204e+00],
        [-3.7185e+00,  5.8697e+00, -1.1276e+00, -1.6690e-01,  4.5050e+00,
         -3.7879e+00, -7.8347e-01,  2.7785e-01, -2.4582e+00, -2.2583e+00],
        [-1.5464e+00,  2.1880e-01, -1.9021e+01,  8.7624e+00,  7.3152e+00,
          2.0446e+00, -9.2952e+00, -1.1962e+01,  1.4433e+00, -4.6725e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -7.2575,  -2.8650,  -7.9039,  -0.6463,  -3.3122,  -8.3409, -12.6841,
         -4.2731,  -1.7224,  -1.6095], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-0.6682,  0.8723, -5.8822, -5.2736,  3.3221,  8.6715, -4.6380,  2.5104,
         -3.1895,  1.8983],
        [ 0.4710, -0.8723,  5.8822,  5.2685, -3.3221, -8.5960,  4.6501, -2.5104,
          3.4879, -2.0341]], device='cuda:0'))])
loaded xi:  -34.98182
loaded continuation NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.3890,  1.2705],
        [-0.3890,  1.2705],
        [-3.1769,  6.0819],
        [13.5058,  1.4187],
        [-0.3899,  1.2758],
        [-0.3890,  1.2704],
        [-7.1279,  3.6605],
        [-0.3890,  1.2705],
        [-2.7274,  6.0897],
        [-7.4749, -4.6178]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-0.7172, -0.7172, 10.7230, -8.1522, -0.7211, -0.7172,  8.5092, -0.7172,
        10.6407,  0.0170], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [ 1.2597e-01,  1.2597e-01, -7.3658e+00, -9.7405e+00,  8.8391e-02,
          1.2638e-01, -4.9376e+00,  1.2597e-01, -6.9440e+00,  1.7873e+00],
        [ 8.3322e-02,  8.3323e-02,  2.1481e+00,  3.8260e+00,  7.0418e-02,
          8.3492e-02,  1.7870e+00,  8.3323e-02,  2.0981e+00, -7.7238e-02],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [ 4.2223e-02,  4.2225e-02,  3.4672e+00,  5.0553e+00,  6.1523e-03,
          4.2634e-02,  2.6714e+00,  4.2224e-02,  3.3334e+00, -1.9996e-01],
        [ 2.2983e-02,  2.2984e-02,  3.9047e+00,  5.5445e+00, -1.6427e-02,
          2.3378e-02,  2.9206e+00,  2.2984e-02,  3.7580e+00, -3.6710e-01],
        [-5.6500e-03, -5.6500e-03, -3.3708e-02, -1.4784e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6500e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6068e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.5222, -0.5222,  4.8970, -3.0995, -0.5222, -0.5222, -3.3636, -3.4951,
        -0.5221, -0.5222], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 1.4894e-03,  1.4894e-03, -1.3247e+01,  3.5944e+00,  1.4894e-03,
          1.4894e-03,  5.2154e+00,  5.9972e+00,  1.4895e-03,  1.4894e-03]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 12.8302,   3.0636],
        [ -4.1623,  -9.0103],
        [  2.6807,  -7.5523],
        [-16.5897,  -5.9841],
        [-15.5150,  -2.9124],
        [-10.2233,   0.7646],
        [ -2.3654,  -4.4019],
        [-10.1674,  -9.3383],
        [ -8.7847,   0.8757],
        [  7.9507,   8.6118]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -2.6631, -11.6716,  -7.2738,  -3.6322,   1.6722,  11.6587,  -1.8508,
         -7.5078,   5.2666,   7.2578], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 2.5515e+00,  1.5561e+00,  2.6742e+00, -3.0320e+00, -4.6687e+00,
         -9.0387e-01,  2.2213e+00,  5.3288e-01,  1.4450e+00, -4.0020e+00],
        [-2.4323e-01, -8.3041e-01, -1.0577e+00, -6.7899e-01, -5.0301e-01,
         -9.9127e-01, -1.5997e+00, -9.8904e-01, -3.1749e+00, -3.1361e-01],
        [-1.0866e+00, -4.0812e-01, -5.3434e+00,  9.1229e-01,  5.7108e+00,
         -1.3832e+00, -7.6576e+00, -2.6274e+00,  5.6125e+00, -8.4968e-01],
        [-4.1727e+00,  1.6408e-01,  2.5270e-02,  6.8018e+00,  9.1168e-03,
         -5.8992e+00, -3.1741e-01,  4.0828e-01, -3.6580e+00,  2.4430e-02],
        [-1.0131e+00, -3.2826e-01, -3.7271e+00, -1.5399e+00,  3.6249e+00,
         -1.3771e+00, -4.3775e+00, -2.7616e+00,  4.7750e+00, -7.7867e-01],
        [-1.5592e+00,  8.8254e+00, -9.7969e-01,  3.2892e+00,  8.9069e+00,
          4.6782e-03, -4.5292e+00, -2.0707e+00,  1.4748e+00, -2.4894e+00],
        [-4.3279e+00, -1.2782e+01,  4.2846e+00, -2.9663e+00, -4.8306e+00,
          6.2756e+00,  1.9816e-01,  7.3166e+00, -3.8854e+00, -7.5519e+00],
        [-4.0843e-01, -7.9911e-01, -1.1385e+00, -6.5685e-01, -4.2991e-01,
         -1.1014e+00, -1.6045e+00, -9.1947e-01, -2.6564e+00, -4.4088e-01],
        [-2.9625e+00,  1.0796e+00, -2.9583e-01,  5.3380e+00,  1.4345e+00,
         -4.7627e+00, -8.6064e-01, -3.2371e-01, -3.5119e+00,  1.2628e+00],
        [-8.1147e-01,  9.6900e+00, -5.2043e+00,  7.9194e+00,  1.0944e+00,
          1.1123e+00, -3.7378e+00, -4.9453e+00,  7.7430e+00,  1.2268e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-3.1657, -1.2410, -1.9436, -0.8159, -1.8813, -6.2588, -1.2579, -1.3573,
        -0.8754, -1.5403], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-0.3370, -1.0365, -4.3117, -4.1120, -2.4344,  5.4253, -7.8169, -0.8955,
         -1.9441,  0.7044],
        [ 0.1068,  1.0365,  4.3118,  4.1068,  2.4344, -5.3462,  7.8905,  0.8955,
          2.2557, -0.8519]], device='cuda:0'))])
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -598.9563052992801
min fval:  -598.9563052992801
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.3890,  1.2705],
        [-0.3890,  1.2705],
        [-3.1769,  6.0819],
        [13.5058,  1.4187],
        [-0.3899,  1.2758],
        [-0.3890,  1.2704],
        [-7.1279,  3.6605],
        [-0.3890,  1.2705],
        [-2.7274,  6.0897],
        [-7.4749, -4.6178]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-0.7172, -0.7172, 10.7230, -8.1522, -0.7211, -0.7172,  8.5092, -0.7172,
        10.6407,  0.0170], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [ 1.2597e-01,  1.2597e-01, -7.3658e+00, -9.7405e+00,  8.8391e-02,
          1.2638e-01, -4.9376e+00,  1.2597e-01, -6.9440e+00,  1.7873e+00],
        [ 8.3322e-02,  8.3323e-02,  2.1481e+00,  3.8260e+00,  7.0418e-02,
          8.3492e-02,  1.7870e+00,  8.3323e-02,  2.0981e+00, -7.7238e-02],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [ 4.2223e-02,  4.2225e-02,  3.4672e+00,  5.0553e+00,  6.1523e-03,
          4.2634e-02,  2.6714e+00,  4.2224e-02,  3.3334e+00, -1.9996e-01],
        [ 2.2983e-02,  2.2984e-02,  3.9047e+00,  5.5445e+00, -1.6427e-02,
          2.3378e-02,  2.9206e+00,  2.2984e-02,  3.7580e+00, -3.6710e-01],
        [-5.6500e-03, -5.6500e-03, -3.3708e-02, -1.4784e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6500e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6068e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.5222, -0.5222,  4.8970, -3.0995, -0.5222, -0.5222, -3.3636, -3.4951,
        -0.5221, -0.5222], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 1.4894e-03,  1.4894e-03, -1.3247e+01,  3.5944e+00,  1.4894e-03,
          1.4894e-03,  5.2154e+00,  5.9972e+00,  1.4895e-03,  1.4894e-03]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 12.8302,   3.0636],
        [ -4.1623,  -9.0103],
        [  2.6807,  -7.5523],
        [-16.5897,  -5.9841],
        [-15.5150,  -2.9124],
        [-10.2233,   0.7646],
        [ -2.3654,  -4.4019],
        [-10.1674,  -9.3383],
        [ -8.7847,   0.8757],
        [  7.9507,   8.6118]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -2.6631, -11.6716,  -7.2738,  -3.6322,   1.6722,  11.6587,  -1.8508,
         -7.5078,   5.2666,   7.2578], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 2.5515e+00,  1.5561e+00,  2.6742e+00, -3.0320e+00, -4.6687e+00,
         -9.0387e-01,  2.2213e+00,  5.3288e-01,  1.4450e+00, -4.0020e+00],
        [-2.4323e-01, -8.3041e-01, -1.0577e+00, -6.7899e-01, -5.0301e-01,
         -9.9127e-01, -1.5997e+00, -9.8904e-01, -3.1749e+00, -3.1361e-01],
        [-1.0866e+00, -4.0812e-01, -5.3434e+00,  9.1229e-01,  5.7108e+00,
         -1.3832e+00, -7.6576e+00, -2.6274e+00,  5.6125e+00, -8.4968e-01],
        [-4.1727e+00,  1.6408e-01,  2.5270e-02,  6.8018e+00,  9.1168e-03,
         -5.8992e+00, -3.1741e-01,  4.0828e-01, -3.6580e+00,  2.4430e-02],
        [-1.0131e+00, -3.2826e-01, -3.7271e+00, -1.5399e+00,  3.6249e+00,
         -1.3771e+00, -4.3775e+00, -2.7616e+00,  4.7750e+00, -7.7867e-01],
        [-1.5592e+00,  8.8254e+00, -9.7969e-01,  3.2892e+00,  8.9069e+00,
          4.6782e-03, -4.5292e+00, -2.0707e+00,  1.4748e+00, -2.4894e+00],
        [-4.3279e+00, -1.2782e+01,  4.2846e+00, -2.9663e+00, -4.8306e+00,
          6.2756e+00,  1.9816e-01,  7.3166e+00, -3.8854e+00, -7.5519e+00],
        [-4.0843e-01, -7.9911e-01, -1.1385e+00, -6.5685e-01, -4.2991e-01,
         -1.1014e+00, -1.6045e+00, -9.1947e-01, -2.6564e+00, -4.4088e-01],
        [-2.9625e+00,  1.0796e+00, -2.9583e-01,  5.3380e+00,  1.4345e+00,
         -4.7627e+00, -8.6064e-01, -3.2371e-01, -3.5119e+00,  1.2628e+00],
        [-8.1147e-01,  9.6900e+00, -5.2043e+00,  7.9194e+00,  1.0944e+00,
          1.1123e+00, -3.7378e+00, -4.9453e+00,  7.7430e+00,  1.2268e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-3.1657, -1.2410, -1.9436, -0.8159, -1.8813, -6.2588, -1.2579, -1.3573,
        -0.8754, -1.5403], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-0.3370, -1.0365, -4.3117, -4.1120, -2.4344,  5.4253, -7.8169, -0.8955,
         -1.9441,  0.7044],
        [ 0.1068,  1.0365,  4.3118,  4.1068,  2.4344, -5.3462,  7.8905,  0.8955,
          2.2557, -0.8519]], device='cuda:0'))])
xi:  [-34.98182]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 1257.241849587196
W_T_median: 56.647951393723744
W_T_pctile_5: -640.4818224493704
W_T_CVAR_5_pct: -749.4948132389078
Average q (qsum/M+1):  57.053124212449596
Optimal xi:  [-34.98182]
Expected(across Rb) median(across samples) p_equity:  0.6308691461881002
obj fun:  tensor(-598.9563, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 0.5
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-1.9022,  2.1997],
        [-1.9027,  2.2008],
        [-2.5359, 11.3012],
        [-1.8886,  2.1637],
        [-1.8893,  2.1661],
        [-1.9038,  2.2030],
        [ 9.4669, -1.8947],
        [-1.9020,  2.1992],
        [35.0777, 11.0529],
        [-1.8888,  2.1644]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-3.9099, -3.9084, 10.2351, -3.9580, -3.9548, -3.9054, -7.6292, -3.9106,
        11.8060, -3.9570], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-0.0323, -0.0323, -0.8341, -0.0317, -0.0318, -0.0324,  0.1713, -0.0323,
         -1.6498, -0.0317],
        [-0.0323, -0.0323, -0.8341, -0.0317, -0.0318, -0.0324,  0.1713, -0.0323,
         -1.6498, -0.0317],
        [ 0.3042,  0.3058, -8.5943,  0.2453,  0.2499,  0.3090,  9.7746,  0.3035,
         -9.4847,  0.2468],
        [-0.0459, -0.0461,  4.1241, -0.0414, -0.0417, -0.0464, -4.8504, -0.0459,
          3.0107, -0.0415],
        [-0.0323, -0.0323, -0.8341, -0.0317, -0.0318, -0.0324,  0.1713, -0.0323,
         -1.6498, -0.0317],
        [-0.0323, -0.0323, -0.8341, -0.0317, -0.0318, -0.0324,  0.1713, -0.0323,
         -1.6498, -0.0317],
        [-0.0452, -0.0448,  7.3092, -0.0621, -0.0604, -0.0441, -8.0983, -0.0454,
          5.0301, -0.0615],
        [ 0.1863,  0.1879,  8.1710,  0.1243,  0.1296,  0.1910, -8.9808,  0.1857,
          5.5552,  0.1261],
        [-0.0323, -0.0323, -0.8341, -0.0317, -0.0318, -0.0324,  0.1713, -0.0323,
         -1.6498, -0.0317],
        [-0.0323, -0.0323, -0.8341, -0.0317, -0.0318, -0.0324,  0.1713, -0.0323,
         -1.6498, -0.0317]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.8905, -1.8905, 12.2159, -7.6068, -1.8905, -1.8905, -7.5374, -8.3188,
        -1.8905, -1.8905], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-2.0837e-02, -2.0837e-02, -2.3517e+01,  3.7147e+00, -2.0837e-02,
         -2.0837e-02,  8.4533e+00,  1.1297e+01, -2.0837e-02, -2.0837e-02]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 18.1543,   1.8292],
        [ -2.4963,   0.3935],
        [ -8.9401, -18.6446],
        [-17.8212,   2.2503],
        [-12.9877,  -4.5806],
        [-17.9568,  -0.0681],
        [  3.7617,  -6.9727],
        [-14.2883,  -9.6505],
        [-10.6075,   2.0204],
        [ 14.0266,  12.6445]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -8.7796,  -5.1752, -17.3002,   3.2370,  -3.7983,  14.2039,  -7.1168,
        -12.1026,   6.0532,  11.8976], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-3.8406e+00, -5.0604e-05,  9.2377e+00, -1.2129e+01,  2.6529e-01,
          7.5686e+00, -1.3486e+00,  2.8181e-02,  5.0669e-01, -4.5431e+00],
        [-5.6833e-01, -3.1932e-01,  2.1166e+00, -2.7407e-01,  1.9631e+00,
         -6.3949e+00, -4.3871e-01,  4.6075e-01, -2.7837e+00, -9.8641e-01],
        [-3.0841e-01,  1.6513e-01, -8.2044e+00,  7.2278e+00, -5.8960e+00,
          6.5574e+00, -1.7555e+01, -2.4367e+00,  8.9103e+00, -6.3373e+00],
        [-3.3190e+00, -2.4528e-03, -3.5481e-01, -1.5983e-01, -3.2941e-02,
         -1.8793e+00, -1.1023e+00,  1.3698e-01, -5.6799e-01, -2.1772e+00],
        [-7.7940e-02, -1.9193e-01, -1.0964e+00,  9.2041e-02,  3.0211e+00,
         -3.6099e-01,  9.7791e-01,  4.3726e-01,  1.6731e-01,  6.6685e-03],
        [-1.0566e+01, -4.3523e-02,  7.8878e+00, -2.0272e+00,  1.1324e+01,
         -6.2711e-01, -4.3568e-01,  2.7229e+00,  4.6671e+00, -2.5642e+01],
        [-1.4986e+01, -9.2645e-03,  1.4251e+01, -5.3074e+00,  2.7459e+00,
          8.9358e+00,  1.5125e+00,  1.7465e+00,  5.1019e+00, -1.6309e+01],
        [-1.7331e+00, -5.9463e-04,  9.3456e-02,  7.4209e-02,  2.0586e-01,
         -2.6298e+00,  9.9453e-01, -2.5439e-01, -1.6643e-01, -1.3235e+00],
        [-2.7923e+00,  2.4169e-03, -2.6580e-01, -1.7699e-01, -1.0988e-01,
         -1.4099e+00, -9.9616e-01,  2.9782e-01, -5.3087e-01, -1.8743e+00],
        [-2.1056e+00,  2.7644e-01, -6.3773e+00,  4.0284e+00,  1.2414e+00,
          4.4436e+00, -1.4050e+01,  1.1258e+00,  1.5008e+00, -1.4302e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -7.8213,  -4.0747,  -9.6565,  -2.8734,  -2.6047,  -8.8432, -13.9188,
         -5.4919,  -3.6199,  -1.2448], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ -0.6687,   1.1627,  -4.6536,   0.3585,   2.6883,  12.7566,  -5.4592,
           1.4591,   0.4631,   0.4319],
        [  0.4730,  -1.1627,   4.6537,  -0.3589,  -2.6882, -12.7178,   5.4710,
          -1.4592,  -0.4039,  -0.5650]], device='cuda:0'))])
loaded xi:  84.25147
loaded continuation NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.3890,  1.2705],
        [-0.3890,  1.2705],
        [-3.1769,  6.0819],
        [13.5058,  1.4187],
        [-0.3899,  1.2758],
        [-0.3890,  1.2704],
        [-7.1279,  3.6605],
        [-0.3890,  1.2705],
        [-2.7274,  6.0897],
        [-7.4749, -4.6178]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-0.7172, -0.7172, 10.7230, -8.1522, -0.7211, -0.7172,  8.5092, -0.7172,
        10.6407,  0.0170], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [ 1.2597e-01,  1.2597e-01, -7.3658e+00, -9.7405e+00,  8.8391e-02,
          1.2638e-01, -4.9376e+00,  1.2597e-01, -6.9440e+00,  1.7873e+00],
        [ 8.3322e-02,  8.3323e-02,  2.1481e+00,  3.8260e+00,  7.0418e-02,
          8.3492e-02,  1.7870e+00,  8.3323e-02,  2.0981e+00, -7.7238e-02],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [ 4.2223e-02,  4.2225e-02,  3.4672e+00,  5.0553e+00,  6.1523e-03,
          4.2634e-02,  2.6714e+00,  4.2224e-02,  3.3334e+00, -1.9996e-01],
        [ 2.2983e-02,  2.2984e-02,  3.9047e+00,  5.5445e+00, -1.6427e-02,
          2.3378e-02,  2.9206e+00,  2.2984e-02,  3.7580e+00, -3.6710e-01],
        [-5.6500e-03, -5.6500e-03, -3.3708e-02, -1.4784e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6500e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6068e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.5222, -0.5222,  4.8970, -3.0995, -0.5222, -0.5222, -3.3636, -3.4951,
        -0.5221, -0.5222], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 1.4894e-03,  1.4894e-03, -1.3247e+01,  3.5944e+00,  1.4894e-03,
          1.4894e-03,  5.2154e+00,  5.9972e+00,  1.4895e-03,  1.4894e-03]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 12.8302,   3.0636],
        [ -4.1623,  -9.0103],
        [  2.6807,  -7.5523],
        [-16.5897,  -5.9841],
        [-15.5150,  -2.9124],
        [-10.2233,   0.7646],
        [ -2.3654,  -4.4019],
        [-10.1674,  -9.3383],
        [ -8.7847,   0.8757],
        [  7.9507,   8.6118]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -2.6631, -11.6716,  -7.2738,  -3.6322,   1.6722,  11.6587,  -1.8508,
         -7.5078,   5.2666,   7.2578], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 2.5515e+00,  1.5561e+00,  2.6742e+00, -3.0320e+00, -4.6687e+00,
         -9.0387e-01,  2.2213e+00,  5.3288e-01,  1.4450e+00, -4.0020e+00],
        [-2.4323e-01, -8.3041e-01, -1.0577e+00, -6.7899e-01, -5.0301e-01,
         -9.9127e-01, -1.5997e+00, -9.8904e-01, -3.1749e+00, -3.1361e-01],
        [-1.0866e+00, -4.0812e-01, -5.3434e+00,  9.1229e-01,  5.7108e+00,
         -1.3832e+00, -7.6576e+00, -2.6274e+00,  5.6125e+00, -8.4968e-01],
        [-4.1727e+00,  1.6408e-01,  2.5270e-02,  6.8018e+00,  9.1168e-03,
         -5.8992e+00, -3.1741e-01,  4.0828e-01, -3.6580e+00,  2.4430e-02],
        [-1.0131e+00, -3.2826e-01, -3.7271e+00, -1.5399e+00,  3.6249e+00,
         -1.3771e+00, -4.3775e+00, -2.7616e+00,  4.7750e+00, -7.7867e-01],
        [-1.5592e+00,  8.8254e+00, -9.7969e-01,  3.2892e+00,  8.9069e+00,
          4.6782e-03, -4.5292e+00, -2.0707e+00,  1.4748e+00, -2.4894e+00],
        [-4.3279e+00, -1.2782e+01,  4.2846e+00, -2.9663e+00, -4.8306e+00,
          6.2756e+00,  1.9816e-01,  7.3166e+00, -3.8854e+00, -7.5519e+00],
        [-4.0843e-01, -7.9911e-01, -1.1385e+00, -6.5685e-01, -4.2991e-01,
         -1.1014e+00, -1.6045e+00, -9.1947e-01, -2.6564e+00, -4.4088e-01],
        [-2.9625e+00,  1.0796e+00, -2.9583e-01,  5.3380e+00,  1.4345e+00,
         -4.7627e+00, -8.6064e-01, -3.2371e-01, -3.5119e+00,  1.2628e+00],
        [-8.1147e-01,  9.6900e+00, -5.2043e+00,  7.9194e+00,  1.0944e+00,
          1.1123e+00, -3.7378e+00, -4.9453e+00,  7.7430e+00,  1.2268e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-3.1657, -1.2410, -1.9436, -0.8159, -1.8813, -6.2588, -1.2579, -1.3573,
        -0.8754, -1.5403], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-0.3370, -1.0365, -4.3117, -4.1120, -2.4344,  5.4253, -7.8169, -0.8955,
         -1.9441,  0.7044],
        [ 0.1068,  1.0365,  4.3118,  4.1068,  2.4344, -5.3462,  7.8905,  0.8955,
          2.2557, -0.8519]], device='cuda:0'))])
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  1560.5138918218909
min fval:  1560.5138918218909
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.3890,  1.2705],
        [-0.3890,  1.2705],
        [-3.1769,  6.0819],
        [13.5058,  1.4187],
        [-0.3899,  1.2758],
        [-0.3890,  1.2704],
        [-7.1279,  3.6605],
        [-0.3890,  1.2705],
        [-2.7274,  6.0897],
        [-7.4749, -4.6178]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-0.7172, -0.7172, 10.7230, -8.1522, -0.7211, -0.7172,  8.5092, -0.7172,
        10.6407,  0.0170], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [ 1.2597e-01,  1.2597e-01, -7.3658e+00, -9.7405e+00,  8.8391e-02,
          1.2638e-01, -4.9376e+00,  1.2597e-01, -6.9440e+00,  1.7873e+00],
        [ 8.3322e-02,  8.3323e-02,  2.1481e+00,  3.8260e+00,  7.0418e-02,
          8.3492e-02,  1.7870e+00,  8.3323e-02,  2.0981e+00, -7.7238e-02],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [ 4.2223e-02,  4.2225e-02,  3.4672e+00,  5.0553e+00,  6.1523e-03,
          4.2634e-02,  2.6714e+00,  4.2224e-02,  3.3334e+00, -1.9996e-01],
        [ 2.2983e-02,  2.2984e-02,  3.9047e+00,  5.5445e+00, -1.6427e-02,
          2.3378e-02,  2.9206e+00,  2.2984e-02,  3.7580e+00, -3.6710e-01],
        [-5.6500e-03, -5.6500e-03, -3.3708e-02, -1.4784e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6500e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6068e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.5222, -0.5222,  4.8970, -3.0995, -0.5222, -0.5222, -3.3636, -3.4951,
        -0.5221, -0.5222], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 1.4894e-03,  1.4894e-03, -1.3247e+01,  3.5944e+00,  1.4894e-03,
          1.4894e-03,  5.2154e+00,  5.9972e+00,  1.4895e-03,  1.4894e-03]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 12.8302,   3.0636],
        [ -4.1623,  -9.0103],
        [  2.6807,  -7.5523],
        [-16.5897,  -5.9841],
        [-15.5150,  -2.9124],
        [-10.2233,   0.7646],
        [ -2.3654,  -4.4019],
        [-10.1674,  -9.3383],
        [ -8.7847,   0.8757],
        [  7.9507,   8.6118]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -2.6631, -11.6716,  -7.2738,  -3.6322,   1.6722,  11.6587,  -1.8508,
         -7.5078,   5.2666,   7.2578], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 2.5515e+00,  1.5561e+00,  2.6742e+00, -3.0320e+00, -4.6687e+00,
         -9.0387e-01,  2.2213e+00,  5.3288e-01,  1.4450e+00, -4.0020e+00],
        [-2.4323e-01, -8.3041e-01, -1.0577e+00, -6.7899e-01, -5.0301e-01,
         -9.9127e-01, -1.5997e+00, -9.8904e-01, -3.1749e+00, -3.1361e-01],
        [-1.0866e+00, -4.0812e-01, -5.3434e+00,  9.1229e-01,  5.7108e+00,
         -1.3832e+00, -7.6576e+00, -2.6274e+00,  5.6125e+00, -8.4968e-01],
        [-4.1727e+00,  1.6408e-01,  2.5270e-02,  6.8018e+00,  9.1168e-03,
         -5.8992e+00, -3.1741e-01,  4.0828e-01, -3.6580e+00,  2.4430e-02],
        [-1.0131e+00, -3.2826e-01, -3.7271e+00, -1.5399e+00,  3.6249e+00,
         -1.3771e+00, -4.3775e+00, -2.7616e+00,  4.7750e+00, -7.7867e-01],
        [-1.5592e+00,  8.8254e+00, -9.7969e-01,  3.2892e+00,  8.9069e+00,
          4.6782e-03, -4.5292e+00, -2.0707e+00,  1.4748e+00, -2.4894e+00],
        [-4.3279e+00, -1.2782e+01,  4.2846e+00, -2.9663e+00, -4.8306e+00,
          6.2756e+00,  1.9816e-01,  7.3166e+00, -3.8854e+00, -7.5519e+00],
        [-4.0843e-01, -7.9911e-01, -1.1385e+00, -6.5685e-01, -4.2991e-01,
         -1.1014e+00, -1.6045e+00, -9.1947e-01, -2.6564e+00, -4.4088e-01],
        [-2.9625e+00,  1.0796e+00, -2.9583e-01,  5.3380e+00,  1.4345e+00,
         -4.7627e+00, -8.6064e-01, -3.2371e-01, -3.5119e+00,  1.2628e+00],
        [-8.1147e-01,  9.6900e+00, -5.2043e+00,  7.9194e+00,  1.0944e+00,
          1.1123e+00, -3.7378e+00, -4.9453e+00,  7.7430e+00,  1.2268e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-3.1657, -1.2410, -1.9436, -0.8159, -1.8813, -6.2588, -1.2579, -1.3573,
        -0.8754, -1.5403], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-0.3370, -1.0365, -4.3117, -4.1120, -2.4344,  5.4253, -7.8169, -0.8955,
         -1.9441,  0.7044],
        [ 0.1068,  1.0365,  4.3118,  4.1068,  2.4344, -5.3462,  7.8905,  0.8955,
          2.2557, -0.8519]], device='cuda:0'))])
xi:  [84.25147]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 1257.241849587196
W_T_median: 56.647951393723744
W_T_pctile_5: -640.4818224493704
W_T_CVAR_5_pct: -749.4948132389078
Average q (qsum/M+1):  57.053124212449596
Optimal xi:  [84.25147]
Expected(across Rb) median(across samples) p_equity:  0.6308691461881002
obj fun:  tensor(1560.5139, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 1.0
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-1.3135,  0.7434],
        [-1.3135,  0.7434],
        [-3.6036, 12.0503],
        [-1.3135,  0.7434],
        [-1.3135,  0.7434],
        [ 2.1665,  5.3625],
        [14.8901, -3.0004],
        [-1.3135,  0.7434],
        [41.0310, 11.6400],
        [-1.3135,  0.7434]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -3.1356,  -3.1357,   9.6844,  -3.1356,  -3.1356,  -7.8763, -10.4544,
         -3.1356,  11.9602,  -3.1356], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-6.2538e-03, -6.2537e-03, -3.7068e-01, -6.2543e-03, -6.2542e-03,
          2.8021e-03, -1.4149e-01, -6.2538e-03, -8.7595e-01, -6.2543e-03],
        [-6.2538e-03, -6.2537e-03, -3.7068e-01, -6.2543e-03, -6.2542e-03,
          2.8021e-03, -1.4149e-01, -6.2538e-03, -8.7595e-01, -6.2543e-03],
        [-1.1860e-02, -1.1826e-02, -1.2484e+01, -1.2008e-02, -1.2000e-02,
          5.8568e+00,  1.2112e+01, -1.1867e-02, -9.5974e+00, -1.2005e-02],
        [-6.2538e-03, -6.2537e-03, -3.7068e-01, -6.2543e-03, -6.2542e-03,
          2.8021e-03, -1.4149e-01, -6.2538e-03, -8.7595e-01, -6.2543e-03],
        [-6.2538e-03, -6.2537e-03, -3.7068e-01, -6.2543e-03, -6.2542e-03,
          2.8021e-03, -1.4149e-01, -6.2538e-03, -8.7595e-01, -6.2543e-03],
        [-6.2538e-03, -6.2537e-03, -3.7068e-01, -6.2543e-03, -6.2542e-03,
          2.8021e-03, -1.4149e-01, -6.2538e-03, -8.7595e-01, -6.2543e-03],
        [-1.5016e-01, -1.5015e-01,  1.1306e+01, -1.5020e-01, -1.5020e-01,
         -4.5917e+00, -1.0061e+01, -1.5016e-01,  4.8845e+00, -1.5020e-01],
        [-7.7669e-02, -7.7614e-02,  1.2175e+01, -7.7911e-02, -7.7897e-02,
         -5.6226e+00, -1.1451e+01, -7.7680e-02,  5.5440e+00, -7.7906e-02],
        [-6.2538e-03, -6.2537e-03, -3.7068e-01, -6.2543e-03, -6.2542e-03,
          2.8021e-03, -1.4149e-01, -6.2538e-03, -8.7595e-01, -6.2543e-03],
        [-6.2538e-03, -6.2537e-03, -3.7068e-01, -6.2543e-03, -6.2542e-03,
          2.8021e-03, -1.4149e-01, -6.2538e-03, -8.7595e-01, -6.2543e-03]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.9735, -0.9735, 11.9834, -0.9735, -0.9735, -0.9735, -6.9804, -7.8026,
        -0.9735, -0.9735], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-4.4353e-03, -4.4353e-03, -2.2854e+01, -4.4353e-03, -4.4353e-03,
         -4.4353e-03,  7.5316e+00,  1.0955e+01, -4.4353e-03, -4.4353e-03]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[  2.8755,  -0.1131],
        [  2.2070,  -2.9190],
        [-12.7398, -19.1529],
        [-20.8026,   2.6402],
        [-14.8786,  -5.8655],
        [-20.8819,  -0.4727],
        [ -1.6507,  -4.2140],
        [ -6.4622,  -2.9494],
        [-16.0097,  -0.3170],
        [ 19.5946,  11.0485]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([-10.4815,  -4.6727, -16.7637,   4.1533,  -2.0845,  15.4023, -10.0394,
         -8.8638,   7.3508,  10.3669], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-1.9834e-01,  5.4517e+00,  7.6134e+00, -7.4001e+00,  3.2587e+00,
          6.7567e+00, -8.7228e-01,  1.6534e-01,  4.2096e+00, -9.0514e+00],
        [ 2.5227e-02, -5.3127e+00,  1.6561e+00, -7.3609e-01, -1.7339e-01,
         -7.0294e+00, -3.8729e-01, -6.1912e-03, -2.4455e-01,  8.4616e-01],
        [ 2.9578e-04, -8.0853e-01, -9.2585e+00,  1.6414e+01, -1.0574e+01,
          6.6998e+00, -6.4838e-02, -2.8747e-02,  3.6350e+00, -5.0883e+00],
        [-6.5285e-03, -1.4741e+00, -7.4034e-01, -3.3373e-02, -6.6340e-02,
         -1.7186e+00, -2.0529e-02,  1.2917e-05, -1.4412e-01, -3.2719e+00],
        [-1.0602e-01, -1.0111e+00, -6.9635e+00,  8.3494e+00,  7.0579e+00,
         -1.2499e+00, -7.1254e-02,  1.3946e-01, -1.3285e+00, -2.7928e+00],
        [-4.8657e-02,  1.3083e-01,  4.2694e+00, -8.8046e+00,  7.0404e+00,
         -3.9656e-02, -5.1103e-01,  3.4600e+00,  1.6739e+01, -2.5370e+01],
        [-6.9055e-02,  7.4749e+00,  1.4589e+01, -7.7810e+00,  6.7638e+00,
          1.0506e+01, -9.9878e-01,  2.7763e-01,  4.9551e+00, -1.7466e+01],
        [ 4.0192e-02,  3.9246e+00,  5.9270e-01, -3.2575e-01, -4.0014e+00,
         -9.5712e+00, -1.5409e+00,  5.2173e-02, -5.6609e-01, -3.2432e+00],
        [ 2.1377e-02,  4.8526e+00,  7.1024e-01, -3.6780e-01, -5.5796e+00,
         -8.1754e+00, -2.9666e+00, -2.0890e-02,  4.4906e-01, -2.1805e+00],
        [ 1.8129e+00,  6.0915e-01, -9.5672e+00,  8.2498e+00,  2.8312e+00,
          5.4126e-02, -7.4598e+00, -1.0013e-01,  6.1623e-01,  4.9794e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -9.3533,  -4.7132,  -9.6718,  -4.4008,  -4.4709, -12.2256, -16.4986,
         -4.0382,  -4.4854,  -0.2981], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ -0.6295,  -0.7010,  -3.9059,  -0.3621,   0.8007,  12.5427,  -5.9097,
           2.2696,   1.9996,   0.4451],
        [  0.4385,   0.7010,   3.9059,   0.3621,  -0.8007, -12.5331,   5.9200,
          -2.2696,  -1.9994,  -0.5734]], device='cuda:0'))])
loaded xi:  148.70326
loaded continuation NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.3890,  1.2705],
        [-0.3890,  1.2705],
        [-3.1769,  6.0819],
        [13.5058,  1.4187],
        [-0.3899,  1.2758],
        [-0.3890,  1.2704],
        [-7.1279,  3.6605],
        [-0.3890,  1.2705],
        [-2.7274,  6.0897],
        [-7.4749, -4.6178]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-0.7172, -0.7172, 10.7230, -8.1522, -0.7211, -0.7172,  8.5092, -0.7172,
        10.6407,  0.0170], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [ 1.2597e-01,  1.2597e-01, -7.3658e+00, -9.7405e+00,  8.8391e-02,
          1.2638e-01, -4.9376e+00,  1.2597e-01, -6.9440e+00,  1.7873e+00],
        [ 8.3322e-02,  8.3323e-02,  2.1481e+00,  3.8260e+00,  7.0418e-02,
          8.3492e-02,  1.7870e+00,  8.3323e-02,  2.0981e+00, -7.7238e-02],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [ 4.2223e-02,  4.2225e-02,  3.4672e+00,  5.0553e+00,  6.1523e-03,
          4.2634e-02,  2.6714e+00,  4.2224e-02,  3.3334e+00, -1.9996e-01],
        [ 2.2983e-02,  2.2984e-02,  3.9047e+00,  5.5445e+00, -1.6427e-02,
          2.3378e-02,  2.9206e+00,  2.2984e-02,  3.7580e+00, -3.6710e-01],
        [-5.6500e-03, -5.6500e-03, -3.3708e-02, -1.4784e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6500e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6068e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.5222, -0.5222,  4.8970, -3.0995, -0.5222, -0.5222, -3.3636, -3.4951,
        -0.5221, -0.5222], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 1.4894e-03,  1.4894e-03, -1.3247e+01,  3.5944e+00,  1.4894e-03,
          1.4894e-03,  5.2154e+00,  5.9972e+00,  1.4895e-03,  1.4894e-03]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 12.8302,   3.0636],
        [ -4.1623,  -9.0103],
        [  2.6807,  -7.5523],
        [-16.5897,  -5.9841],
        [-15.5150,  -2.9124],
        [-10.2233,   0.7646],
        [ -2.3654,  -4.4019],
        [-10.1674,  -9.3383],
        [ -8.7847,   0.8757],
        [  7.9507,   8.6118]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -2.6631, -11.6716,  -7.2738,  -3.6322,   1.6722,  11.6587,  -1.8508,
         -7.5078,   5.2666,   7.2578], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 2.5515e+00,  1.5561e+00,  2.6742e+00, -3.0320e+00, -4.6687e+00,
         -9.0387e-01,  2.2213e+00,  5.3288e-01,  1.4450e+00, -4.0020e+00],
        [-2.4323e-01, -8.3041e-01, -1.0577e+00, -6.7899e-01, -5.0301e-01,
         -9.9127e-01, -1.5997e+00, -9.8904e-01, -3.1749e+00, -3.1361e-01],
        [-1.0866e+00, -4.0812e-01, -5.3434e+00,  9.1229e-01,  5.7108e+00,
         -1.3832e+00, -7.6576e+00, -2.6274e+00,  5.6125e+00, -8.4968e-01],
        [-4.1727e+00,  1.6408e-01,  2.5270e-02,  6.8018e+00,  9.1168e-03,
         -5.8992e+00, -3.1741e-01,  4.0828e-01, -3.6580e+00,  2.4430e-02],
        [-1.0131e+00, -3.2826e-01, -3.7271e+00, -1.5399e+00,  3.6249e+00,
         -1.3771e+00, -4.3775e+00, -2.7616e+00,  4.7750e+00, -7.7867e-01],
        [-1.5592e+00,  8.8254e+00, -9.7969e-01,  3.2892e+00,  8.9069e+00,
          4.6782e-03, -4.5292e+00, -2.0707e+00,  1.4748e+00, -2.4894e+00],
        [-4.3279e+00, -1.2782e+01,  4.2846e+00, -2.9663e+00, -4.8306e+00,
          6.2756e+00,  1.9816e-01,  7.3166e+00, -3.8854e+00, -7.5519e+00],
        [-4.0843e-01, -7.9911e-01, -1.1385e+00, -6.5685e-01, -4.2991e-01,
         -1.1014e+00, -1.6045e+00, -9.1947e-01, -2.6564e+00, -4.4088e-01],
        [-2.9625e+00,  1.0796e+00, -2.9583e-01,  5.3380e+00,  1.4345e+00,
         -4.7627e+00, -8.6064e-01, -3.2371e-01, -3.5119e+00,  1.2628e+00],
        [-8.1147e-01,  9.6900e+00, -5.2043e+00,  7.9194e+00,  1.0944e+00,
          1.1123e+00, -3.7378e+00, -4.9453e+00,  7.7430e+00,  1.2268e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-3.1657, -1.2410, -1.9436, -0.8159, -1.8813, -6.2588, -1.2579, -1.3573,
        -0.8754, -1.5403], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-0.3370, -1.0365, -4.3117, -4.1120, -2.4344,  5.4253, -7.8169, -0.8955,
         -1.9441,  0.7044],
        [ 0.1068,  1.0365,  4.3118,  4.1068,  2.4344, -5.3462,  7.8905,  0.8955,
          2.2557, -0.8519]], device='cuda:0'))])
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  4180.512640665095
min fval:  4180.512640665095
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.3890,  1.2705],
        [-0.3890,  1.2705],
        [-3.1769,  6.0819],
        [13.5058,  1.4187],
        [-0.3899,  1.2758],
        [-0.3890,  1.2704],
        [-7.1279,  3.6605],
        [-0.3890,  1.2705],
        [-2.7274,  6.0897],
        [-7.4749, -4.6178]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-0.7172, -0.7172, 10.7230, -8.1522, -0.7211, -0.7172,  8.5092, -0.7172,
        10.6407,  0.0170], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [ 1.2597e-01,  1.2597e-01, -7.3658e+00, -9.7405e+00,  8.8391e-02,
          1.2638e-01, -4.9376e+00,  1.2597e-01, -6.9440e+00,  1.7873e+00],
        [ 8.3322e-02,  8.3323e-02,  2.1481e+00,  3.8260e+00,  7.0418e-02,
          8.3492e-02,  1.7870e+00,  8.3323e-02,  2.0981e+00, -7.7238e-02],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [ 4.2223e-02,  4.2225e-02,  3.4672e+00,  5.0553e+00,  6.1523e-03,
          4.2634e-02,  2.6714e+00,  4.2224e-02,  3.3334e+00, -1.9996e-01],
        [ 2.2983e-02,  2.2984e-02,  3.9047e+00,  5.5445e+00, -1.6427e-02,
          2.3378e-02,  2.9206e+00,  2.2984e-02,  3.7580e+00, -3.6710e-01],
        [-5.6500e-03, -5.6500e-03, -3.3708e-02, -1.4784e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6500e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6068e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.5222, -0.5222,  4.8970, -3.0995, -0.5222, -0.5222, -3.3636, -3.4951,
        -0.5221, -0.5222], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 1.4894e-03,  1.4894e-03, -1.3247e+01,  3.5944e+00,  1.4894e-03,
          1.4894e-03,  5.2154e+00,  5.9972e+00,  1.4895e-03,  1.4894e-03]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 12.8302,   3.0636],
        [ -4.1623,  -9.0103],
        [  2.6807,  -7.5523],
        [-16.5897,  -5.9841],
        [-15.5150,  -2.9124],
        [-10.2233,   0.7646],
        [ -2.3654,  -4.4019],
        [-10.1674,  -9.3383],
        [ -8.7847,   0.8757],
        [  7.9507,   8.6118]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -2.6631, -11.6716,  -7.2738,  -3.6322,   1.6722,  11.6587,  -1.8508,
         -7.5078,   5.2666,   7.2578], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 2.5515e+00,  1.5561e+00,  2.6742e+00, -3.0320e+00, -4.6687e+00,
         -9.0387e-01,  2.2213e+00,  5.3288e-01,  1.4450e+00, -4.0020e+00],
        [-2.4323e-01, -8.3041e-01, -1.0577e+00, -6.7899e-01, -5.0301e-01,
         -9.9127e-01, -1.5997e+00, -9.8904e-01, -3.1749e+00, -3.1361e-01],
        [-1.0866e+00, -4.0812e-01, -5.3434e+00,  9.1229e-01,  5.7108e+00,
         -1.3832e+00, -7.6576e+00, -2.6274e+00,  5.6125e+00, -8.4968e-01],
        [-4.1727e+00,  1.6408e-01,  2.5270e-02,  6.8018e+00,  9.1168e-03,
         -5.8992e+00, -3.1741e-01,  4.0828e-01, -3.6580e+00,  2.4430e-02],
        [-1.0131e+00, -3.2826e-01, -3.7271e+00, -1.5399e+00,  3.6249e+00,
         -1.3771e+00, -4.3775e+00, -2.7616e+00,  4.7750e+00, -7.7867e-01],
        [-1.5592e+00,  8.8254e+00, -9.7969e-01,  3.2892e+00,  8.9069e+00,
          4.6782e-03, -4.5292e+00, -2.0707e+00,  1.4748e+00, -2.4894e+00],
        [-4.3279e+00, -1.2782e+01,  4.2846e+00, -2.9663e+00, -4.8306e+00,
          6.2756e+00,  1.9816e-01,  7.3166e+00, -3.8854e+00, -7.5519e+00],
        [-4.0843e-01, -7.9911e-01, -1.1385e+00, -6.5685e-01, -4.2991e-01,
         -1.1014e+00, -1.6045e+00, -9.1947e-01, -2.6564e+00, -4.4088e-01],
        [-2.9625e+00,  1.0796e+00, -2.9583e-01,  5.3380e+00,  1.4345e+00,
         -4.7627e+00, -8.6064e-01, -3.2371e-01, -3.5119e+00,  1.2628e+00],
        [-8.1147e-01,  9.6900e+00, -5.2043e+00,  7.9194e+00,  1.0944e+00,
          1.1123e+00, -3.7378e+00, -4.9453e+00,  7.7430e+00,  1.2268e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-3.1657, -1.2410, -1.9436, -0.8159, -1.8813, -6.2588, -1.2579, -1.3573,
        -0.8754, -1.5403], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-0.3370, -1.0365, -4.3117, -4.1120, -2.4344,  5.4253, -7.8169, -0.8955,
         -1.9441,  0.7044],
        [ 0.1068,  1.0365,  4.3118,  4.1068,  2.4344, -5.3462,  7.8905,  0.8955,
          2.2557, -0.8519]], device='cuda:0'))])
xi:  [148.70326]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 1257.241849587196
W_T_median: 56.647951393723744
W_T_pctile_5: -640.4818224493704
W_T_CVAR_5_pct: -749.4948132389078
Average q (qsum/M+1):  57.053124212449596
Optimal xi:  [148.70326]
Expected(across Rb) median(across samples) p_equity:  0.6308691461881002
obj fun:  tensor(4180.5126, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 1.5
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-1.4421,  0.6998],
        [-1.4421,  0.6998],
        [-6.3492, 12.4015],
        [-1.4421,  0.6998],
        [-1.4421,  0.6998],
        [ 4.8942,  4.5255],
        [18.5544, -3.4131],
        [-1.4421,  0.6998],
        [27.0829, 12.6198],
        [-1.4421,  0.6998]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -3.5873,  -3.5873,   9.4148,  -3.5873,  -3.5873, -10.2517, -12.3317,
         -3.5873,  12.0448,  -3.5873], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ -0.0164,  -0.0164,  -0.5062,  -0.0164,  -0.0164,  -0.0723,  -0.1750,
          -0.0164,  -1.2667,  -0.0164],
        [ -0.0164,  -0.0164,  -0.5062,  -0.0164,  -0.0164,  -0.0723,  -0.1750,
          -0.0164,  -1.2667,  -0.0164],
        [  0.0268,   0.0268, -14.7872,   0.0268,   0.0268,   7.6196,  15.0122,
           0.0268,  -9.6735,   0.0268],
        [ -0.0164,  -0.0164,  -0.5062,  -0.0164,  -0.0164,  -0.0723,  -0.1750,
          -0.0164,  -1.2667,  -0.0164],
        [ -0.0164,  -0.0164,  -0.5062,  -0.0164,  -0.0164,  -0.0723,  -0.1750,
          -0.0164,  -1.2667,  -0.0164],
        [ -0.0164,  -0.0164,  -0.5062,  -0.0164,  -0.0164,  -0.0723,  -0.1750,
          -0.0164,  -1.2667,  -0.0164],
        [ -0.1968,  -0.1968,  13.3947,  -0.1968,  -0.1968,  -5.6681, -12.5020,
          -0.1968,   4.5406,  -0.1968],
        [ -0.0833,  -0.0833,  14.5832,  -0.0833,  -0.0833,  -7.0292, -14.4098,
          -0.0833,   5.3216,  -0.0833],
        [ -0.0164,  -0.0164,  -0.5062,  -0.0164,  -0.0164,  -0.0723,  -0.1750,
          -0.0164,  -1.2667,  -0.0164],
        [ -0.0164,  -0.0164,  -0.5062,  -0.0164,  -0.0164,  -0.0723,  -0.1750,
          -0.0164,  -1.2667,  -0.0164]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.4053, -1.4053, 11.8715, -1.4053, -1.4053, -1.4053, -6.2928, -7.3809,
        -1.4053, -1.4053], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-1.7480e-02, -1.7480e-02, -2.1852e+01, -1.7480e-02, -1.7480e-02,
         -1.7480e-02,  6.0917e+00,  9.9946e+00, -1.7480e-02, -1.7480e-02]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -2.3457,   0.1683],
        [ -2.3556,   0.1658],
        [-13.6623, -18.1119],
        [-14.1734,   0.8251],
        [-15.6911,  -7.6266],
        [-23.3223,  -2.0399],
        [ -5.1833,  -3.0089],
        [ -2.3570,   0.1645],
        [-19.1378,  -2.7418],
        [ 22.9187,  10.0907]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -5.1298,  -5.1236, -15.6308,   2.0844,  -4.3454,  15.5897,  -9.9291,
         -5.1242,   5.7734,   9.9800], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-8.2296e-03, -1.2382e-02,  7.4049e+00, -7.7891e-01,  2.7601e+00,
          5.1472e+00,  9.9429e-02, -1.0842e-02, -1.7745e+00, -7.6753e+00],
        [-4.3285e-02, -2.3705e-02,  1.5169e+00,  1.5922e+00,  7.3540e+00,
         -7.8423e+00,  1.9123e+00, -3.7753e-02,  1.2147e+00, -1.3745e+00],
        [-6.1686e-02, -3.4079e-02,  3.3667e+00,  5.4968e+00, -6.8225e+00,
          7.4478e+00,  3.8429e-01, -4.6123e-02,  1.5284e+00, -3.6440e+00],
        [ 5.5519e-02, -2.7000e-02, -3.2171e-01,  3.8403e-02,  8.1400e-01,
         -3.0495e+00, -6.8656e-02,  1.2582e-02, -3.6820e+00, -2.7169e+00],
        [ 2.2316e-01,  1.9804e-01, -3.9594e+00,  8.6284e+00,  4.9462e+00,
         -1.7010e+00,  3.4354e-02,  2.1236e-01, -1.7169e+00, -3.8754e+00],
        [-1.1419e-01, -1.2562e-01,  7.4684e+00, -1.5122e+01,  8.4482e+00,
          2.8189e+00,  1.4867e+00, -1.2448e-01,  2.0376e+01, -2.6961e+01],
        [-2.8001e-01, -3.6862e-01,  1.3206e+01, -1.1624e+01,  6.8216e+00,
          1.6269e+01,  2.7123e-01, -3.3274e-01,  6.6447e+00, -1.5781e+01],
        [ 1.9747e-02,  1.9323e-02,  1.6043e-02,  1.7572e-02, -2.7489e-01,
         -1.5159e+00, -1.9185e-03,  1.9510e-02, -3.5549e-01, -4.1801e+00],
        [-1.0960e-01, -1.2240e-01,  1.3278e+00, -4.5093e+00, -2.5747e+01,
         -1.3892e+00, -2.8935e-01, -1.2066e-01, -1.0021e+01, -6.9452e-01],
        [ 1.4152e-01,  1.3157e-01, -3.0338e+01,  1.5325e+01,  2.7307e+00,
          7.9736e-01, -3.4945e-01,  1.3333e-01,  1.3387e+00,  2.4970e-02]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -9.6930,  -5.0978,  -7.9940,  -2.7008,  -3.5311, -13.0242, -17.0067,
         -4.2502,  -2.9973,  -0.7233], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ -1.8994,   4.0386,  -1.8969,   4.5199,   2.3008,  15.5971,  -6.4718,
           0.7752,   5.3116,   0.6160],
        [  1.7275,  -4.0386,   1.8970,  -4.5199,  -2.3008, -15.5912,   6.4825,
          -0.7752,  -5.3114,  -0.7441]], device='cuda:0'))])
loaded xi:  199.69646
loaded continuation NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.3890,  1.2705],
        [-0.3890,  1.2705],
        [-3.1769,  6.0819],
        [13.5058,  1.4187],
        [-0.3899,  1.2758],
        [-0.3890,  1.2704],
        [-7.1279,  3.6605],
        [-0.3890,  1.2705],
        [-2.7274,  6.0897],
        [-7.4749, -4.6178]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-0.7172, -0.7172, 10.7230, -8.1522, -0.7211, -0.7172,  8.5092, -0.7172,
        10.6407,  0.0170], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [ 1.2597e-01,  1.2597e-01, -7.3658e+00, -9.7405e+00,  8.8391e-02,
          1.2638e-01, -4.9376e+00,  1.2597e-01, -6.9440e+00,  1.7873e+00],
        [ 8.3322e-02,  8.3323e-02,  2.1481e+00,  3.8260e+00,  7.0418e-02,
          8.3492e-02,  1.7870e+00,  8.3323e-02,  2.0981e+00, -7.7238e-02],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [ 4.2223e-02,  4.2225e-02,  3.4672e+00,  5.0553e+00,  6.1523e-03,
          4.2634e-02,  2.6714e+00,  4.2224e-02,  3.3334e+00, -1.9996e-01],
        [ 2.2983e-02,  2.2984e-02,  3.9047e+00,  5.5445e+00, -1.6427e-02,
          2.3378e-02,  2.9206e+00,  2.2984e-02,  3.7580e+00, -3.6710e-01],
        [-5.6500e-03, -5.6500e-03, -3.3708e-02, -1.4784e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6500e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6068e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.5222, -0.5222,  4.8970, -3.0995, -0.5222, -0.5222, -3.3636, -3.4951,
        -0.5221, -0.5222], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 1.4894e-03,  1.4894e-03, -1.3247e+01,  3.5944e+00,  1.4894e-03,
          1.4894e-03,  5.2154e+00,  5.9972e+00,  1.4895e-03,  1.4894e-03]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 12.8302,   3.0636],
        [ -4.1623,  -9.0103],
        [  2.6807,  -7.5523],
        [-16.5897,  -5.9841],
        [-15.5150,  -2.9124],
        [-10.2233,   0.7646],
        [ -2.3654,  -4.4019],
        [-10.1674,  -9.3383],
        [ -8.7847,   0.8757],
        [  7.9507,   8.6118]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -2.6631, -11.6716,  -7.2738,  -3.6322,   1.6722,  11.6587,  -1.8508,
         -7.5078,   5.2666,   7.2578], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 2.5515e+00,  1.5561e+00,  2.6742e+00, -3.0320e+00, -4.6687e+00,
         -9.0387e-01,  2.2213e+00,  5.3288e-01,  1.4450e+00, -4.0020e+00],
        [-2.4323e-01, -8.3041e-01, -1.0577e+00, -6.7899e-01, -5.0301e-01,
         -9.9127e-01, -1.5997e+00, -9.8904e-01, -3.1749e+00, -3.1361e-01],
        [-1.0866e+00, -4.0812e-01, -5.3434e+00,  9.1229e-01,  5.7108e+00,
         -1.3832e+00, -7.6576e+00, -2.6274e+00,  5.6125e+00, -8.4968e-01],
        [-4.1727e+00,  1.6408e-01,  2.5270e-02,  6.8018e+00,  9.1168e-03,
         -5.8992e+00, -3.1741e-01,  4.0828e-01, -3.6580e+00,  2.4430e-02],
        [-1.0131e+00, -3.2826e-01, -3.7271e+00, -1.5399e+00,  3.6249e+00,
         -1.3771e+00, -4.3775e+00, -2.7616e+00,  4.7750e+00, -7.7867e-01],
        [-1.5592e+00,  8.8254e+00, -9.7969e-01,  3.2892e+00,  8.9069e+00,
          4.6782e-03, -4.5292e+00, -2.0707e+00,  1.4748e+00, -2.4894e+00],
        [-4.3279e+00, -1.2782e+01,  4.2846e+00, -2.9663e+00, -4.8306e+00,
          6.2756e+00,  1.9816e-01,  7.3166e+00, -3.8854e+00, -7.5519e+00],
        [-4.0843e-01, -7.9911e-01, -1.1385e+00, -6.5685e-01, -4.2991e-01,
         -1.1014e+00, -1.6045e+00, -9.1947e-01, -2.6564e+00, -4.4088e-01],
        [-2.9625e+00,  1.0796e+00, -2.9583e-01,  5.3380e+00,  1.4345e+00,
         -4.7627e+00, -8.6064e-01, -3.2371e-01, -3.5119e+00,  1.2628e+00],
        [-8.1147e-01,  9.6900e+00, -5.2043e+00,  7.9194e+00,  1.0944e+00,
          1.1123e+00, -3.7378e+00, -4.9453e+00,  7.7430e+00,  1.2268e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-3.1657, -1.2410, -1.9436, -0.8159, -1.8813, -6.2588, -1.2579, -1.3573,
        -0.8754, -1.5403], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-0.3370, -1.0365, -4.3117, -4.1120, -2.4344,  5.4253, -7.8169, -0.8955,
         -1.9441,  0.7044],
        [ 0.1068,  1.0365,  4.3118,  4.1068,  2.4344, -5.3462,  7.8905,  0.8955,
          2.2557, -0.8519]], device='cuda:0'))])
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  11740.973946999042
min fval:  11740.973946999042
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.3890,  1.2705],
        [-0.3890,  1.2705],
        [-3.1769,  6.0819],
        [13.5058,  1.4187],
        [-0.3899,  1.2758],
        [-0.3890,  1.2704],
        [-7.1279,  3.6605],
        [-0.3890,  1.2705],
        [-2.7274,  6.0897],
        [-7.4749, -4.6178]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-0.7172, -0.7172, 10.7230, -8.1522, -0.7211, -0.7172,  8.5092, -0.7172,
        10.6407,  0.0170], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [ 1.2597e-01,  1.2597e-01, -7.3658e+00, -9.7405e+00,  8.8391e-02,
          1.2638e-01, -4.9376e+00,  1.2597e-01, -6.9440e+00,  1.7873e+00],
        [ 8.3322e-02,  8.3323e-02,  2.1481e+00,  3.8260e+00,  7.0418e-02,
          8.3492e-02,  1.7870e+00,  8.3323e-02,  2.0981e+00, -7.7238e-02],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [ 4.2223e-02,  4.2225e-02,  3.4672e+00,  5.0553e+00,  6.1523e-03,
          4.2634e-02,  2.6714e+00,  4.2224e-02,  3.3334e+00, -1.9996e-01],
        [ 2.2983e-02,  2.2984e-02,  3.9047e+00,  5.5445e+00, -1.6427e-02,
          2.3378e-02,  2.9206e+00,  2.2984e-02,  3.7580e+00, -3.6710e-01],
        [-5.6500e-03, -5.6500e-03, -3.3708e-02, -1.4784e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6500e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6068e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.5222, -0.5222,  4.8970, -3.0995, -0.5222, -0.5222, -3.3636, -3.4951,
        -0.5221, -0.5222], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 1.4894e-03,  1.4894e-03, -1.3247e+01,  3.5944e+00,  1.4894e-03,
          1.4894e-03,  5.2154e+00,  5.9972e+00,  1.4895e-03,  1.4894e-03]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 12.8302,   3.0636],
        [ -4.1623,  -9.0103],
        [  2.6807,  -7.5523],
        [-16.5897,  -5.9841],
        [-15.5150,  -2.9124],
        [-10.2233,   0.7646],
        [ -2.3654,  -4.4019],
        [-10.1674,  -9.3383],
        [ -8.7847,   0.8757],
        [  7.9507,   8.6118]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -2.6631, -11.6716,  -7.2738,  -3.6322,   1.6722,  11.6587,  -1.8508,
         -7.5078,   5.2666,   7.2578], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 2.5515e+00,  1.5561e+00,  2.6742e+00, -3.0320e+00, -4.6687e+00,
         -9.0387e-01,  2.2213e+00,  5.3288e-01,  1.4450e+00, -4.0020e+00],
        [-2.4323e-01, -8.3041e-01, -1.0577e+00, -6.7899e-01, -5.0301e-01,
         -9.9127e-01, -1.5997e+00, -9.8904e-01, -3.1749e+00, -3.1361e-01],
        [-1.0866e+00, -4.0812e-01, -5.3434e+00,  9.1229e-01,  5.7108e+00,
         -1.3832e+00, -7.6576e+00, -2.6274e+00,  5.6125e+00, -8.4968e-01],
        [-4.1727e+00,  1.6408e-01,  2.5270e-02,  6.8018e+00,  9.1168e-03,
         -5.8992e+00, -3.1741e-01,  4.0828e-01, -3.6580e+00,  2.4430e-02],
        [-1.0131e+00, -3.2826e-01, -3.7271e+00, -1.5399e+00,  3.6249e+00,
         -1.3771e+00, -4.3775e+00, -2.7616e+00,  4.7750e+00, -7.7867e-01],
        [-1.5592e+00,  8.8254e+00, -9.7969e-01,  3.2892e+00,  8.9069e+00,
          4.6782e-03, -4.5292e+00, -2.0707e+00,  1.4748e+00, -2.4894e+00],
        [-4.3279e+00, -1.2782e+01,  4.2846e+00, -2.9663e+00, -4.8306e+00,
          6.2756e+00,  1.9816e-01,  7.3166e+00, -3.8854e+00, -7.5519e+00],
        [-4.0843e-01, -7.9911e-01, -1.1385e+00, -6.5685e-01, -4.2991e-01,
         -1.1014e+00, -1.6045e+00, -9.1947e-01, -2.6564e+00, -4.4088e-01],
        [-2.9625e+00,  1.0796e+00, -2.9583e-01,  5.3380e+00,  1.4345e+00,
         -4.7627e+00, -8.6064e-01, -3.2371e-01, -3.5119e+00,  1.2628e+00],
        [-8.1147e-01,  9.6900e+00, -5.2043e+00,  7.9194e+00,  1.0944e+00,
          1.1123e+00, -3.7378e+00, -4.9453e+00,  7.7430e+00,  1.2268e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-3.1657, -1.2410, -1.9436, -0.8159, -1.8813, -6.2588, -1.2579, -1.3573,
        -0.8754, -1.5403], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-0.3370, -1.0365, -4.3117, -4.1120, -2.4344,  5.4253, -7.8169, -0.8955,
         -1.9441,  0.7044],
        [ 0.1068,  1.0365,  4.3118,  4.1068,  2.4344, -5.3462,  7.8905,  0.8955,
          2.2557, -0.8519]], device='cuda:0'))])
xi:  [199.69646]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 1257.241849587196
W_T_median: 56.647951393723744
W_T_pctile_5: -640.4818224493704
W_T_CVAR_5_pct: -749.4948132389078
Average q (qsum/M+1):  57.053124212449596
Optimal xi:  [199.69646]
Expected(across Rb) median(across samples) p_equity:  0.6308691461881002
obj fun:  tensor(11740.9739, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 3.0
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-1.9019,  0.4988],
        [-1.9019,  0.4988],
        [-8.1422, 12.4736],
        [-1.9019,  0.4988],
        [-1.9019,  0.4988],
        [ 5.6019,  5.0115],
        [19.6630, -3.6740],
        [-1.9019,  0.4988],
        [23.3244, 13.1194],
        [-1.9019,  0.4988]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -5.2356,  -5.2356,   9.2481,  -5.2356,  -5.2356, -11.5191, -12.8330,
         -5.2356,  12.0039,  -5.2356], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ 1.3275e-02,  1.3275e-02, -5.1937e-01,  1.3275e-02,  1.3275e-02,
          3.6032e-02,  5.0111e-02,  1.3275e-02, -2.0882e+00,  1.3275e-02],
        [ 1.3275e-02,  1.3275e-02, -5.1937e-01,  1.3275e-02,  1.3275e-02,
          3.6032e-02,  5.0111e-02,  1.3275e-02, -2.0882e+00,  1.3275e-02],
        [ 1.3313e-01,  1.3313e-01, -1.5371e+01,  1.3313e-01,  1.3313e-01,
          9.7604e+00,  1.5560e+01,  1.3313e-01, -9.6678e+00,  1.3313e-01],
        [ 1.3275e-02,  1.3275e-02, -5.1937e-01,  1.3275e-02,  1.3275e-02,
          3.6032e-02,  5.0111e-02,  1.3275e-02, -2.0882e+00,  1.3275e-02],
        [ 1.3275e-02,  1.3275e-02, -5.1937e-01,  1.3275e-02,  1.3275e-02,
          3.6032e-02,  5.0111e-02,  1.3275e-02, -2.0882e+00,  1.3275e-02],
        [ 1.3275e-02,  1.3275e-02, -5.1937e-01,  1.3275e-02,  1.3275e-02,
          3.6032e-02,  5.0111e-02,  1.3275e-02, -2.0882e+00,  1.3275e-02],
        [ 8.2326e-02,  8.2326e-02,  1.3864e+01,  8.2326e-02,  8.2326e-02,
         -6.7444e+00, -1.3487e+01,  8.2326e-02,  4.4834e+00,  8.2326e-02],
        [-4.3109e-02, -4.3109e-02,  1.5211e+01, -4.3109e-02, -4.3109e-02,
         -8.9699e+00, -1.5253e+01, -4.3109e-02,  5.2065e+00, -4.3109e-02],
        [ 1.3275e-02,  1.3275e-02, -5.1937e-01,  1.3275e-02,  1.3275e-02,
          3.6032e-02,  5.0111e-02,  1.3275e-02, -2.0882e+00,  1.3275e-02],
        [ 1.3275e-02,  1.3275e-02, -5.1937e-01,  1.3275e-02,  1.3275e-02,
          3.6032e-02,  5.0111e-02,  1.3275e-02, -2.0882e+00,  1.3275e-02]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-2.3658, -2.3658, 11.9154, -2.3658, -2.3658, -2.3658, -5.9631, -7.2303,
        -2.3658, -2.3658], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-1.1782e-03, -1.1781e-03, -2.1808e+01, -1.1780e-03, -1.1780e-03,
         -1.1781e-03,  5.7429e+00,  1.0034e+01, -1.1781e-03, -1.1781e-03]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -2.7719,  -0.5696],
        [ -2.8855,  -0.9812],
        [-12.2353, -18.2173],
        [-14.5578,   1.1447],
        [-14.0825,  -8.2473],
        [-24.7263,  -3.3739],
        [ -3.4310,   0.2902],
        [ -2.8191,  -0.9488],
        [-20.8330,  -3.1332],
        [ 22.4955,  10.5721]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -6.3110,  -5.8883, -15.8407,   2.0953,  -6.1630,  14.9391,  -6.2312,
         -5.9700,   5.3374,  10.8521], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-1.4941e-01, -1.1865e+00,  7.1373e+00, -4.1889e+00,  4.1603e+00,
          5.1771e+00, -1.3789e-02, -9.4881e-01, -4.8181e+00, -8.4303e+00],
        [ 3.9608e-01,  4.5232e-01,  6.1251e-01,  4.2718e+00,  4.2220e+00,
         -2.4626e+00,  3.3116e-01,  4.3654e-01,  2.8868e+00, -2.5238e+00],
        [ 5.3466e-01,  6.4230e-01,  4.2585e+00, -2.6127e+00, -1.9798e-01,
          7.1470e+00, -4.0727e-01,  6.0353e-01,  1.5804e+00, -3.6629e+00],
        [ 1.1310e-01, -1.6970e-01,  1.3849e+00, -1.5478e+00, -5.2431e-01,
         -8.5469e+00, -3.7096e-01, -1.8283e-01, -2.0932e+00, -3.1289e+00],
        [-1.1634e-02, -7.1284e-02, -7.8162e-01,  4.5978e+00,  3.9493e+00,
         -1.7412e+00,  3.3428e-03, -6.0435e-02, -1.1142e+00, -6.6281e+00],
        [-3.5520e+00, -5.1921e+00,  7.0374e+00, -1.6692e+01,  6.5776e+00,
          8.0984e-01, -1.2232e+00, -5.0146e+00,  2.7216e+01, -2.7095e+01],
        [-8.9406e-01, -6.6762e-01,  1.4005e+01, -8.5994e+00,  5.7129e+00,
          1.5630e+01, -3.9389e-01, -7.2259e-01,  7.9317e+00, -1.5731e+01],
        [ 2.0524e-03, -4.4305e-04, -6.1746e-01,  5.0932e-02, -2.6030e-01,
         -1.7705e+00,  8.6110e-03,  3.6191e-04, -4.6635e-01, -4.7315e+00],
        [ 4.4417e-01, -1.5968e-01,  4.3980e-01, -5.1847e+00, -2.1919e+01,
         -1.8255e+00, -7.5973e-01, -2.4026e-02, -2.1976e+01, -7.1638e-01],
        [-6.8731e-01, -1.5296e+00, -2.5830e+01,  1.3671e+01,  2.7949e+00,
          4.2890e-01,  8.4443e-01, -1.5023e+00,  1.0097e+00,  8.0914e-02]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -9.5060,  -5.9330,  -8.3280,  -3.2013,  -5.4233, -14.7743, -17.0758,
         -4.8064,  -3.0177,  -0.6631], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ -3.0095,   2.3753,  -1.8263,   5.0601,   1.0920,  16.1966,  -6.7467,
           0.5833,   5.9697,   0.6871],
        [  2.8518,  -2.3753,   1.8263,  -5.0601,  -1.0920, -16.1889,   6.7577,
          -0.5833,  -5.9696,  -0.8152]], device='cuda:0'))])
loaded xi:  -0.0055836756
loaded continuation NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.3890,  1.2705],
        [-0.3890,  1.2705],
        [-3.1769,  6.0819],
        [13.5058,  1.4187],
        [-0.3899,  1.2758],
        [-0.3890,  1.2704],
        [-7.1279,  3.6605],
        [-0.3890,  1.2705],
        [-2.7274,  6.0897],
        [-7.4749, -4.6178]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-0.7172, -0.7172, 10.7230, -8.1522, -0.7211, -0.7172,  8.5092, -0.7172,
        10.6407,  0.0170], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [ 1.2597e-01,  1.2597e-01, -7.3658e+00, -9.7405e+00,  8.8391e-02,
          1.2638e-01, -4.9376e+00,  1.2597e-01, -6.9440e+00,  1.7873e+00],
        [ 8.3322e-02,  8.3323e-02,  2.1481e+00,  3.8260e+00,  7.0418e-02,
          8.3492e-02,  1.7870e+00,  8.3323e-02,  2.0981e+00, -7.7238e-02],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [ 4.2223e-02,  4.2225e-02,  3.4672e+00,  5.0553e+00,  6.1523e-03,
          4.2634e-02,  2.6714e+00,  4.2224e-02,  3.3334e+00, -1.9996e-01],
        [ 2.2983e-02,  2.2984e-02,  3.9047e+00,  5.5445e+00, -1.6427e-02,
          2.3378e-02,  2.9206e+00,  2.2984e-02,  3.7580e+00, -3.6710e-01],
        [-5.6500e-03, -5.6500e-03, -3.3708e-02, -1.4784e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6500e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6068e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.5222, -0.5222,  4.8970, -3.0995, -0.5222, -0.5222, -3.3636, -3.4951,
        -0.5221, -0.5222], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 1.4894e-03,  1.4894e-03, -1.3247e+01,  3.5944e+00,  1.4894e-03,
          1.4894e-03,  5.2154e+00,  5.9972e+00,  1.4895e-03,  1.4894e-03]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 12.8302,   3.0636],
        [ -4.1623,  -9.0103],
        [  2.6807,  -7.5523],
        [-16.5897,  -5.9841],
        [-15.5150,  -2.9124],
        [-10.2233,   0.7646],
        [ -2.3654,  -4.4019],
        [-10.1674,  -9.3383],
        [ -8.7847,   0.8757],
        [  7.9507,   8.6118]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -2.6631, -11.6716,  -7.2738,  -3.6322,   1.6722,  11.6587,  -1.8508,
         -7.5078,   5.2666,   7.2578], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 2.5515e+00,  1.5561e+00,  2.6742e+00, -3.0320e+00, -4.6687e+00,
         -9.0387e-01,  2.2213e+00,  5.3288e-01,  1.4450e+00, -4.0020e+00],
        [-2.4323e-01, -8.3041e-01, -1.0577e+00, -6.7899e-01, -5.0301e-01,
         -9.9127e-01, -1.5997e+00, -9.8904e-01, -3.1749e+00, -3.1361e-01],
        [-1.0866e+00, -4.0812e-01, -5.3434e+00,  9.1229e-01,  5.7108e+00,
         -1.3832e+00, -7.6576e+00, -2.6274e+00,  5.6125e+00, -8.4968e-01],
        [-4.1727e+00,  1.6408e-01,  2.5270e-02,  6.8018e+00,  9.1168e-03,
         -5.8992e+00, -3.1741e-01,  4.0828e-01, -3.6580e+00,  2.4430e-02],
        [-1.0131e+00, -3.2826e-01, -3.7271e+00, -1.5399e+00,  3.6249e+00,
         -1.3771e+00, -4.3775e+00, -2.7616e+00,  4.7750e+00, -7.7867e-01],
        [-1.5592e+00,  8.8254e+00, -9.7969e-01,  3.2892e+00,  8.9069e+00,
          4.6782e-03, -4.5292e+00, -2.0707e+00,  1.4748e+00, -2.4894e+00],
        [-4.3279e+00, -1.2782e+01,  4.2846e+00, -2.9663e+00, -4.8306e+00,
          6.2756e+00,  1.9816e-01,  7.3166e+00, -3.8854e+00, -7.5519e+00],
        [-4.0843e-01, -7.9911e-01, -1.1385e+00, -6.5685e-01, -4.2991e-01,
         -1.1014e+00, -1.6045e+00, -9.1947e-01, -2.6564e+00, -4.4088e-01],
        [-2.9625e+00,  1.0796e+00, -2.9583e-01,  5.3380e+00,  1.4345e+00,
         -4.7627e+00, -8.6064e-01, -3.2371e-01, -3.5119e+00,  1.2628e+00],
        [-8.1147e-01,  9.6900e+00, -5.2043e+00,  7.9194e+00,  1.0944e+00,
          1.1123e+00, -3.7378e+00, -4.9453e+00,  7.7430e+00,  1.2268e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-3.1657, -1.2410, -1.9436, -0.8159, -1.8813, -6.2588, -1.2579, -1.3573,
        -0.8754, -1.5403], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-0.3370, -1.0365, -4.3117, -4.1120, -2.4344,  5.4253, -7.8169, -0.8955,
         -1.9441,  0.7044],
        [ 0.1068,  1.0365,  4.3118,  4.1068,  2.4344, -5.3462,  7.8905,  0.8955,
          2.2557, -0.8519]], device='cuda:0'))])
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  11200.377771646825
min fval:  11200.377771646825
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.3890,  1.2705],
        [-0.3890,  1.2705],
        [-3.1769,  6.0819],
        [13.5058,  1.4187],
        [-0.3899,  1.2758],
        [-0.3890,  1.2704],
        [-7.1279,  3.6605],
        [-0.3890,  1.2705],
        [-2.7274,  6.0897],
        [-7.4749, -4.6178]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-0.7172, -0.7172, 10.7230, -8.1522, -0.7211, -0.7172,  8.5092, -0.7172,
        10.6407,  0.0170], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [ 1.2597e-01,  1.2597e-01, -7.3658e+00, -9.7405e+00,  8.8391e-02,
          1.2638e-01, -4.9376e+00,  1.2597e-01, -6.9440e+00,  1.7873e+00],
        [ 8.3322e-02,  8.3323e-02,  2.1481e+00,  3.8260e+00,  7.0418e-02,
          8.3492e-02,  1.7870e+00,  8.3323e-02,  2.0981e+00, -7.7238e-02],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [ 4.2223e-02,  4.2225e-02,  3.4672e+00,  5.0553e+00,  6.1523e-03,
          4.2634e-02,  2.6714e+00,  4.2224e-02,  3.3334e+00, -1.9996e-01],
        [ 2.2983e-02,  2.2984e-02,  3.9047e+00,  5.5445e+00, -1.6427e-02,
          2.3378e-02,  2.9206e+00,  2.2984e-02,  3.7580e+00, -3.6710e-01],
        [-5.6500e-03, -5.6500e-03, -3.3708e-02, -1.4784e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6500e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6068e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.5222, -0.5222,  4.8970, -3.0995, -0.5222, -0.5222, -3.3636, -3.4951,
        -0.5221, -0.5222], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 1.4894e-03,  1.4894e-03, -1.3247e+01,  3.5944e+00,  1.4894e-03,
          1.4894e-03,  5.2154e+00,  5.9972e+00,  1.4895e-03,  1.4894e-03]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 12.8302,   3.0636],
        [ -4.1623,  -9.0103],
        [  2.6807,  -7.5523],
        [-16.5897,  -5.9841],
        [-15.5150,  -2.9124],
        [-10.2233,   0.7646],
        [ -2.3654,  -4.4019],
        [-10.1674,  -9.3383],
        [ -8.7847,   0.8757],
        [  7.9507,   8.6118]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -2.6631, -11.6716,  -7.2738,  -3.6322,   1.6722,  11.6587,  -1.8508,
         -7.5078,   5.2666,   7.2578], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 2.5515e+00,  1.5561e+00,  2.6742e+00, -3.0320e+00, -4.6687e+00,
         -9.0387e-01,  2.2213e+00,  5.3288e-01,  1.4450e+00, -4.0020e+00],
        [-2.4323e-01, -8.3041e-01, -1.0577e+00, -6.7899e-01, -5.0301e-01,
         -9.9127e-01, -1.5997e+00, -9.8904e-01, -3.1749e+00, -3.1361e-01],
        [-1.0866e+00, -4.0812e-01, -5.3434e+00,  9.1229e-01,  5.7108e+00,
         -1.3832e+00, -7.6576e+00, -2.6274e+00,  5.6125e+00, -8.4968e-01],
        [-4.1727e+00,  1.6408e-01,  2.5270e-02,  6.8018e+00,  9.1168e-03,
         -5.8992e+00, -3.1741e-01,  4.0828e-01, -3.6580e+00,  2.4430e-02],
        [-1.0131e+00, -3.2826e-01, -3.7271e+00, -1.5399e+00,  3.6249e+00,
         -1.3771e+00, -4.3775e+00, -2.7616e+00,  4.7750e+00, -7.7867e-01],
        [-1.5592e+00,  8.8254e+00, -9.7969e-01,  3.2892e+00,  8.9069e+00,
          4.6782e-03, -4.5292e+00, -2.0707e+00,  1.4748e+00, -2.4894e+00],
        [-4.3279e+00, -1.2782e+01,  4.2846e+00, -2.9663e+00, -4.8306e+00,
          6.2756e+00,  1.9816e-01,  7.3166e+00, -3.8854e+00, -7.5519e+00],
        [-4.0843e-01, -7.9911e-01, -1.1385e+00, -6.5685e-01, -4.2991e-01,
         -1.1014e+00, -1.6045e+00, -9.1947e-01, -2.6564e+00, -4.4088e-01],
        [-2.9625e+00,  1.0796e+00, -2.9583e-01,  5.3380e+00,  1.4345e+00,
         -4.7627e+00, -8.6064e-01, -3.2371e-01, -3.5119e+00,  1.2628e+00],
        [-8.1147e-01,  9.6900e+00, -5.2043e+00,  7.9194e+00,  1.0944e+00,
          1.1123e+00, -3.7378e+00, -4.9453e+00,  7.7430e+00,  1.2268e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-3.1657, -1.2410, -1.9436, -0.8159, -1.8813, -6.2588, -1.2579, -1.3573,
        -0.8754, -1.5403], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-0.3370, -1.0365, -4.3117, -4.1120, -2.4344,  5.4253, -7.8169, -0.8955,
         -1.9441,  0.7044],
        [ 0.1068,  1.0365,  4.3118,  4.1068,  2.4344, -5.3462,  7.8905,  0.8955,
          2.2557, -0.8519]], device='cuda:0'))])
xi:  [-0.00558368]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 1257.241849587196
W_T_median: 56.647951393723744
W_T_pctile_5: -640.4818224493704
W_T_CVAR_5_pct: -749.4948132389078
Average q (qsum/M+1):  57.053124212449596
Optimal xi:  [-0.00558368]
Expected(across Rb) median(across samples) p_equity:  0.6308691461881002
obj fun:  tensor(11200.3778, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 5.0
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -0.3717,   0.6695],
        [ -0.3716,   0.6698],
        [-13.0855,  12.5922],
        [ -0.3717,   0.6693],
        [ -0.3716,   0.6697],
        [  5.9153,   4.0793],
        [ 23.7400,  -3.6224],
        [ -0.3717,   0.6695],
        [ 10.1120,  15.2336],
        [ -0.3717,   0.6692]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -5.0505,  -5.0505,   9.7641,  -5.0505,  -5.0505, -15.2228, -13.3805,
         -5.0505,  12.2042,  -5.0505], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-5.8485e-03, -5.8551e-03, -7.6404e-01, -5.8444e-03, -5.8528e-03,
         -1.4220e-03, -1.1432e-01, -5.8490e-03, -1.5264e+00, -5.8435e-03],
        [-5.8485e-03, -5.8551e-03, -7.6404e-01, -5.8444e-03, -5.8528e-03,
         -1.4219e-03, -1.1432e-01, -5.8490e-03, -1.5264e+00, -5.8434e-03],
        [ 3.2859e-02,  3.2874e-02, -1.7032e+01,  3.2850e-02,  3.2868e-02,
          1.2754e+01,  1.8633e+01,  3.2859e-02, -9.4154e+00,  3.2848e-02],
        [-5.8486e-03, -5.8552e-03, -7.6404e-01, -5.8444e-03, -5.8529e-03,
         -1.4219e-03, -1.1432e-01, -5.8490e-03, -1.5264e+00, -5.8435e-03],
        [-5.8485e-03, -5.8551e-03, -7.6404e-01, -5.8443e-03, -5.8528e-03,
         -1.4220e-03, -1.1432e-01, -5.8489e-03, -1.5264e+00, -5.8434e-03],
        [-5.8485e-03, -5.8551e-03, -7.6404e-01, -5.8444e-03, -5.8528e-03,
         -1.4219e-03, -1.1432e-01, -5.8490e-03, -1.5264e+00, -5.8435e-03],
        [ 3.6141e-01,  3.6144e-01,  1.5413e+01,  3.6139e-01,  3.6143e-01,
         -9.7311e-01, -1.5143e+01,  3.6141e-01,  3.7923e+00,  3.6138e-01],
        [ 5.6909e-02,  5.6910e-02,  1.6920e+01,  5.6907e-02,  5.6911e-02,
         -1.2295e+01, -1.7740e+01,  5.6910e-02,  4.4796e+00,  5.6907e-02],
        [-5.8484e-03, -5.8551e-03, -7.6404e-01, -5.8443e-03, -5.8528e-03,
         -1.4219e-03, -1.1432e-01, -5.8489e-03, -1.5264e+00, -5.8433e-03],
        [-5.8484e-03, -5.8550e-03, -7.6404e-01, -5.8443e-03, -5.8527e-03,
         -1.4219e-03, -1.1432e-01, -5.8489e-03, -1.5264e+00, -5.8433e-03]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-2.2693, -2.2693, 12.4049, -2.2693, -2.2693, -2.2693, -6.7425, -8.2173,
        -2.2693, -2.2693], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.1030,  -0.1030, -20.5494,  -0.1030,  -0.1030,  -0.1030,   2.5710,
           9.2263,  -0.1030,  -0.1030]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -4.3861,   5.4599],
        [ -4.2397,  -0.0905],
        [ -4.4164,   0.2492],
        [ -2.9491,   7.3178],
        [-13.3487,  -8.8484],
        [-25.0765,  -1.7542],
        [-17.2729,   1.0833],
        [-27.6241,   1.9478],
        [-20.7803,  -4.1706],
        [ 25.9706,  10.3564]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([-8.0550, -5.5325, -5.9800,  6.6908, -5.8258, 18.0276, -1.6679,  2.1162,
         9.0046,  8.0369], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-2.3907e-01, -3.8374e-03, -6.7160e-03, -8.6798e-01, -2.9549e-01,
         -4.5666e-01, -8.2811e-05, -1.3701e-02, -1.9292e-01, -4.2104e+00],
        [ 1.0908e-01,  1.0019e+00,  8.6860e-01,  7.9105e-01,  3.0713e+00,
         -7.6095e-01,  2.2625e+00,  3.1546e+00,  2.0174e+00, -3.6993e+00],
        [ 1.3899e-01,  1.1567e+00,  8.7849e-01, -5.9272e+00,  4.7075e+00,
          5.2993e+00,  3.1115e-01, -4.7893e+00,  1.6887e+00, -2.9310e+00],
        [ 7.6994e-03,  6.6736e-01,  2.2744e-01, -1.7566e+01,  1.8967e+00,
         -1.1864e+01,  3.1853e-03, -5.2087e-04,  1.3813e+00, -2.2098e+00],
        [-2.7124e+00,  2.6005e+00,  3.1840e+00,  1.3198e+01, -1.8426e+00,
          2.2916e+00,  6.2049e+00,  7.3561e+00,  5.2305e+00, -1.0786e+01],
        [-9.9072e-03, -3.2262e+00, -2.0612e+00, -5.9365e+01,  7.4415e+00,
          1.9468e+00,  1.7966e+00, -3.3964e+00,  2.5606e+01, -2.8539e+01],
        [-3.9568e-03,  5.4525e-02,  1.9926e-01, -1.6575e+01,  9.2899e+00,
          1.6442e+01, -4.5718e+00, -7.6150e+00,  9.2888e+00, -1.4181e+01],
        [-9.6519e-01, -1.3308e-01, -1.2591e-01, -3.4696e+00,  1.5107e+00,
          2.9861e+00, -3.3982e+00, -6.5947e+00,  1.6287e+00, -3.8129e+00],
        [-5.1323e-03,  1.7279e-01, -2.3867e-01, -2.1756e+01,  4.6246e+00,
         -1.3993e+01,  5.5183e-03, -5.8642e-05, -1.5793e+01, -6.3953e-01],
        [ 1.4124e-02, -4.2348e-01,  5.5579e-01,  2.3239e+01, -2.0920e+01,
         -7.1915e-01,  7.2353e+00,  2.0006e+01, -8.4537e-01,  6.5294e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -6.3065,  -5.4810,  -8.4394,  -2.2189,  -2.9406, -16.0554, -15.9864,
         -3.8750,  -2.9321,  -0.1042], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ -0.0503,   1.2914,  -4.0073,   6.8973,   0.2758,  19.5233,  -7.0728,
          -2.3013,   7.2728,   0.3457],
        [  0.0342,  -1.2913,   4.0074,  -6.8973,  -0.2753, -19.5148,   7.0846,
           2.3013,  -7.2726,  -0.4738]], device='cuda:0'))])
loaded xi:  247.51015
loaded continuation NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.3890,  1.2705],
        [-0.3890,  1.2705],
        [-3.1769,  6.0819],
        [13.5058,  1.4187],
        [-0.3899,  1.2758],
        [-0.3890,  1.2704],
        [-7.1279,  3.6605],
        [-0.3890,  1.2705],
        [-2.7274,  6.0897],
        [-7.4749, -4.6178]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-0.7172, -0.7172, 10.7230, -8.1522, -0.7211, -0.7172,  8.5092, -0.7172,
        10.6407,  0.0170], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [ 1.2597e-01,  1.2597e-01, -7.3658e+00, -9.7405e+00,  8.8391e-02,
          1.2638e-01, -4.9376e+00,  1.2597e-01, -6.9440e+00,  1.7873e+00],
        [ 8.3322e-02,  8.3323e-02,  2.1481e+00,  3.8260e+00,  7.0418e-02,
          8.3492e-02,  1.7870e+00,  8.3323e-02,  2.0981e+00, -7.7238e-02],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [ 4.2223e-02,  4.2225e-02,  3.4672e+00,  5.0553e+00,  6.1523e-03,
          4.2634e-02,  2.6714e+00,  4.2224e-02,  3.3334e+00, -1.9996e-01],
        [ 2.2983e-02,  2.2984e-02,  3.9047e+00,  5.5445e+00, -1.6427e-02,
          2.3378e-02,  2.9206e+00,  2.2984e-02,  3.7580e+00, -3.6710e-01],
        [-5.6500e-03, -5.6500e-03, -3.3708e-02, -1.4784e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6500e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6068e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.5222, -0.5222,  4.8970, -3.0995, -0.5222, -0.5222, -3.3636, -3.4951,
        -0.5221, -0.5222], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 1.4894e-03,  1.4894e-03, -1.3247e+01,  3.5944e+00,  1.4894e-03,
          1.4894e-03,  5.2154e+00,  5.9972e+00,  1.4895e-03,  1.4894e-03]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 12.8302,   3.0636],
        [ -4.1623,  -9.0103],
        [  2.6807,  -7.5523],
        [-16.5897,  -5.9841],
        [-15.5150,  -2.9124],
        [-10.2233,   0.7646],
        [ -2.3654,  -4.4019],
        [-10.1674,  -9.3383],
        [ -8.7847,   0.8757],
        [  7.9507,   8.6118]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -2.6631, -11.6716,  -7.2738,  -3.6322,   1.6722,  11.6587,  -1.8508,
         -7.5078,   5.2666,   7.2578], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 2.5515e+00,  1.5561e+00,  2.6742e+00, -3.0320e+00, -4.6687e+00,
         -9.0387e-01,  2.2213e+00,  5.3288e-01,  1.4450e+00, -4.0020e+00],
        [-2.4323e-01, -8.3041e-01, -1.0577e+00, -6.7899e-01, -5.0301e-01,
         -9.9127e-01, -1.5997e+00, -9.8904e-01, -3.1749e+00, -3.1361e-01],
        [-1.0866e+00, -4.0812e-01, -5.3434e+00,  9.1229e-01,  5.7108e+00,
         -1.3832e+00, -7.6576e+00, -2.6274e+00,  5.6125e+00, -8.4968e-01],
        [-4.1727e+00,  1.6408e-01,  2.5270e-02,  6.8018e+00,  9.1168e-03,
         -5.8992e+00, -3.1741e-01,  4.0828e-01, -3.6580e+00,  2.4430e-02],
        [-1.0131e+00, -3.2826e-01, -3.7271e+00, -1.5399e+00,  3.6249e+00,
         -1.3771e+00, -4.3775e+00, -2.7616e+00,  4.7750e+00, -7.7867e-01],
        [-1.5592e+00,  8.8254e+00, -9.7969e-01,  3.2892e+00,  8.9069e+00,
          4.6782e-03, -4.5292e+00, -2.0707e+00,  1.4748e+00, -2.4894e+00],
        [-4.3279e+00, -1.2782e+01,  4.2846e+00, -2.9663e+00, -4.8306e+00,
          6.2756e+00,  1.9816e-01,  7.3166e+00, -3.8854e+00, -7.5519e+00],
        [-4.0843e-01, -7.9911e-01, -1.1385e+00, -6.5685e-01, -4.2991e-01,
         -1.1014e+00, -1.6045e+00, -9.1947e-01, -2.6564e+00, -4.4088e-01],
        [-2.9625e+00,  1.0796e+00, -2.9583e-01,  5.3380e+00,  1.4345e+00,
         -4.7627e+00, -8.6064e-01, -3.2371e-01, -3.5119e+00,  1.2628e+00],
        [-8.1147e-01,  9.6900e+00, -5.2043e+00,  7.9194e+00,  1.0944e+00,
          1.1123e+00, -3.7378e+00, -4.9453e+00,  7.7430e+00,  1.2268e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-3.1657, -1.2410, -1.9436, -0.8159, -1.8813, -6.2588, -1.2579, -1.3573,
        -0.8754, -1.5403], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-0.3370, -1.0365, -4.3117, -4.1120, -2.4344,  5.4253, -7.8169, -0.8955,
         -1.9441,  0.7044],
        [ 0.1068,  1.0365,  4.3118,  4.1068,  2.4344, -5.3462,  7.8905,  0.8955,
          2.2557, -0.8519]], device='cuda:0'))])
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  249588.0440076895
min fval:  249588.0440076895
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.3890,  1.2705],
        [-0.3890,  1.2705],
        [-3.1769,  6.0819],
        [13.5058,  1.4187],
        [-0.3899,  1.2758],
        [-0.3890,  1.2704],
        [-7.1279,  3.6605],
        [-0.3890,  1.2705],
        [-2.7274,  6.0897],
        [-7.4749, -4.6178]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-0.7172, -0.7172, 10.7230, -8.1522, -0.7211, -0.7172,  8.5092, -0.7172,
        10.6407,  0.0170], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [ 1.2597e-01,  1.2597e-01, -7.3658e+00, -9.7405e+00,  8.8391e-02,
          1.2638e-01, -4.9376e+00,  1.2597e-01, -6.9440e+00,  1.7873e+00],
        [ 8.3322e-02,  8.3323e-02,  2.1481e+00,  3.8260e+00,  7.0418e-02,
          8.3492e-02,  1.7870e+00,  8.3323e-02,  2.0981e+00, -7.7238e-02],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01],
        [ 4.2223e-02,  4.2225e-02,  3.4672e+00,  5.0553e+00,  6.1523e-03,
          4.2634e-02,  2.6714e+00,  4.2224e-02,  3.3334e+00, -1.9996e-01],
        [ 2.2983e-02,  2.2984e-02,  3.9047e+00,  5.5445e+00, -1.6427e-02,
          2.3378e-02,  2.9206e+00,  2.2984e-02,  3.7580e+00, -3.6710e-01],
        [-5.6500e-03, -5.6500e-03, -3.3708e-02, -1.4784e-01, -5.6069e-03,
         -5.6504e-03, -1.8284e-02, -5.6500e-03, -4.0836e-02, -4.7452e-01],
        [-5.6499e-03, -5.6499e-03, -3.3709e-02, -1.4785e-01, -5.6068e-03,
         -5.6504e-03, -1.8284e-02, -5.6499e-03, -4.0836e-02, -4.7452e-01]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.5222, -0.5222,  4.8970, -3.0995, -0.5222, -0.5222, -3.3636, -3.4951,
        -0.5221, -0.5222], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 1.4894e-03,  1.4894e-03, -1.3247e+01,  3.5944e+00,  1.4894e-03,
          1.4894e-03,  5.2154e+00,  5.9972e+00,  1.4895e-03,  1.4894e-03]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 12.8302,   3.0636],
        [ -4.1623,  -9.0103],
        [  2.6807,  -7.5523],
        [-16.5897,  -5.9841],
        [-15.5150,  -2.9124],
        [-10.2233,   0.7646],
        [ -2.3654,  -4.4019],
        [-10.1674,  -9.3383],
        [ -8.7847,   0.8757],
        [  7.9507,   8.6118]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -2.6631, -11.6716,  -7.2738,  -3.6322,   1.6722,  11.6587,  -1.8508,
         -7.5078,   5.2666,   7.2578], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 2.5515e+00,  1.5561e+00,  2.6742e+00, -3.0320e+00, -4.6687e+00,
         -9.0387e-01,  2.2213e+00,  5.3288e-01,  1.4450e+00, -4.0020e+00],
        [-2.4323e-01, -8.3041e-01, -1.0577e+00, -6.7899e-01, -5.0301e-01,
         -9.9127e-01, -1.5997e+00, -9.8904e-01, -3.1749e+00, -3.1361e-01],
        [-1.0866e+00, -4.0812e-01, -5.3434e+00,  9.1229e-01,  5.7108e+00,
         -1.3832e+00, -7.6576e+00, -2.6274e+00,  5.6125e+00, -8.4968e-01],
        [-4.1727e+00,  1.6408e-01,  2.5270e-02,  6.8018e+00,  9.1168e-03,
         -5.8992e+00, -3.1741e-01,  4.0828e-01, -3.6580e+00,  2.4430e-02],
        [-1.0131e+00, -3.2826e-01, -3.7271e+00, -1.5399e+00,  3.6249e+00,
         -1.3771e+00, -4.3775e+00, -2.7616e+00,  4.7750e+00, -7.7867e-01],
        [-1.5592e+00,  8.8254e+00, -9.7969e-01,  3.2892e+00,  8.9069e+00,
          4.6782e-03, -4.5292e+00, -2.0707e+00,  1.4748e+00, -2.4894e+00],
        [-4.3279e+00, -1.2782e+01,  4.2846e+00, -2.9663e+00, -4.8306e+00,
          6.2756e+00,  1.9816e-01,  7.3166e+00, -3.8854e+00, -7.5519e+00],
        [-4.0843e-01, -7.9911e-01, -1.1385e+00, -6.5685e-01, -4.2991e-01,
         -1.1014e+00, -1.6045e+00, -9.1947e-01, -2.6564e+00, -4.4088e-01],
        [-2.9625e+00,  1.0796e+00, -2.9583e-01,  5.3380e+00,  1.4345e+00,
         -4.7627e+00, -8.6064e-01, -3.2371e-01, -3.5119e+00,  1.2628e+00],
        [-8.1147e-01,  9.6900e+00, -5.2043e+00,  7.9194e+00,  1.0944e+00,
          1.1123e+00, -3.7378e+00, -4.9453e+00,  7.7430e+00,  1.2268e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-3.1657, -1.2410, -1.9436, -0.8159, -1.8813, -6.2588, -1.2579, -1.3573,
        -0.8754, -1.5403], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-0.3370, -1.0365, -4.3117, -4.1120, -2.4344,  5.4253, -7.8169, -0.8955,
         -1.9441,  0.7044],
        [ 0.1068,  1.0365,  4.3118,  4.1068,  2.4344, -5.3462,  7.8905,  0.8955,
          2.2557, -0.8519]], device='cuda:0'))])
xi:  [247.51015]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 1257.241849587196
W_T_median: 56.647951393723744
W_T_pctile_5: -640.4818224493704
W_T_CVAR_5_pct: -749.4948132389078
Average q (qsum/M+1):  57.053124212449596
Optimal xi:  [247.51015]
Expected(across Rb) median(across samples) p_equity:  0.6308691461881002
obj fun:  tensor(249588.0440, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 50.0
-----------------------------------------------

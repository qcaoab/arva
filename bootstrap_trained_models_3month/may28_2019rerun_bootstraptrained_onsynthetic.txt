Starting at: 
28-05-23_20:36

 numpy seed:  3  


 pytorch seed:  3  

Key parameters-------
paths: 256000
iterations: 10
batchsize: 1000
remove neg:  False
w constaint activation:  yy_fix_jan29


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = B10_and_VWD
timeseries_basket['basket_desc'] = CRSP data: B10 and VWD
timeseries_basket['basket_columns'] = 
['B10_real_ret', 'VWD_real_ret']
############# End: defined asset  basket #################
-----------------------------------------------
No need to read market data.
-----------------------------------------------
3.3333333333333335% of MC simulations done.
6.666666666666667% of MC simulations done.
10.0% of MC simulations done.
13.333333333333334% of MC simulations done.
16.666666666666664% of MC simulations done.
20.0% of MC simulations done.
23.333333333333332% of MC simulations done.
26.666666666666668% of MC simulations done.
30.0% of MC simulations done.
33.33333333333333% of MC simulations done.
36.666666666666664% of MC simulations done.
40.0% of MC simulations done.
43.333333333333336% of MC simulations done.
46.666666666666664% of MC simulations done.
50.0% of MC simulations done.
53.333333333333336% of MC simulations done.
56.666666666666664% of MC simulations done.
60.0% of MC simulations done.
63.33333333333333% of MC simulations done.
66.66666666666666% of MC simulations done.
70.0% of MC simulations done.
73.33333333333333% of MC simulations done.
76.66666666666667% of MC simulations done.
80.0% of MC simulations done.
83.33333333333334% of MC simulations done.
86.66666666666667% of MC simulations done.
90.0% of MC simulations done.
93.33333333333333% of MC simulations done.
96.66666666666667% of MC simulations done.
100.0% of MC simulations done.
Withdrawal NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       1       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      10  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      10  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       1              none   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 10)     True          10  
2     (10, 10)     True          10  
3      (10, 1)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
Allocation NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       2       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      10  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      10  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       2           softmax   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 10)     True          10  
2     (10, 10)     True          10  
3      (10, 2)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
{'methods': ['Adam'], 'output_progress': False, 'tol': 1e-06, 'itbound_scipy_algorithms': 1000, 'check_exit_criteria': False, 'nit_running_min': 1, 'itbound_SGD_algorithms': 10, 'nit_IterateAveragingStart': 9, 'batchsize': 1000, 'SGD_learningrate': 50.0, 'Adagrad_epsilon': 1e-08, 'Adagrad_eta': 1.0, 'Adadelta_ewma': 0.9, 'Adadelta_epsilon': 1e-08, 'RMSprop_ewma': 0.8, 'RMSprop_epsilon': 1e-08, 'RMSprop_eta': 0.1, 'Adam_ewma_1': 0.9, 'Adam_ewma_2': 0.998, 'Adam_eta': 0.0, 'Adam_epsilon': 1e-08, 'Adam_weight_decay': 0.0001, 'running_min_from_avg': False, 'running_min_from_sgd': True, 'lr_schedule': True}
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.5617,  1.7671],
        [-0.5775,  1.7756],
        [-2.4710,  5.9977],
        [12.9912,  1.6838],
        [-1.3795,  3.9679],
        [-2.4951,  5.7569],
        [-6.7090,  3.9122],
        [-0.5613,  1.7665],
        [-2.6693,  6.1097],
        [-0.5653,  1.7210]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-0.9975, -1.0068,  9.8773, -7.8028,  3.3290,  8.9841,  7.9236, -0.9971,
        10.4591, -0.9857], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ 3.0119e-02,  2.4798e-02, -1.7249e-01, -3.2871e-01, -8.4524e-03,
         -1.0834e-01, -4.4549e-02,  3.0014e-02, -2.1420e-01,  2.5730e-02],
        [ 3.0119e-02,  2.4798e-02, -1.7249e-01, -3.2871e-01, -8.4524e-03,
         -1.0834e-01, -4.4549e-02,  3.0014e-02, -2.1420e-01,  2.5730e-02],
        [-3.4550e-02, -6.6303e-02, -6.6986e+00, -9.5870e+00, -1.2072e+00,
         -5.2025e+00, -4.4059e+00, -3.4031e-02, -7.6779e+00, -3.7301e-02],
        [ 1.6229e-02,  2.6595e-02,  2.0733e+00,  4.4657e+00,  1.8555e-01,
          1.3973e+00,  1.2239e+00,  1.6159e-02,  2.6237e+00,  2.7598e-02],
        [ 3.0119e-02,  2.4798e-02, -1.7249e-01, -3.2871e-01, -8.4524e-03,
         -1.0834e-01, -4.4549e-02,  3.0014e-02, -2.1420e-01,  2.5730e-02],
        [ 3.0119e-02,  2.4798e-02, -1.7249e-01, -3.2871e-01, -8.4524e-03,
         -1.0834e-01, -4.4549e-02,  3.0014e-02, -2.1420e-01,  2.5730e-02],
        [ 3.0894e-02,  4.4798e-02,  3.2173e+00,  5.1939e+00,  3.4282e-01,
          2.3282e+00,  2.2169e+00,  3.0920e-02,  3.9216e+00,  6.0602e-02],
        [ 4.0366e-02,  5.4379e-02,  3.9384e+00,  5.9008e+00,  4.7366e-01,
          2.9152e+00,  2.7346e+00,  4.0452e-02,  4.7487e+00,  8.1186e-02],
        [ 3.0119e-02,  2.4798e-02, -1.7249e-01, -3.2871e-01, -8.4524e-03,
         -1.0834e-01, -4.4549e-02,  3.0014e-02, -2.1420e-01,  2.5730e-02],
        [ 2.2806e-02,  2.5030e-02, -1.7275e-01, -3.2990e-01, -1.0514e-02,
         -1.0864e-01, -4.4866e-02,  2.9501e-02, -2.1447e-01, -2.3663e-02]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.5948, -1.5948,  5.0924, -3.1258, -1.5948, -1.5948, -3.0655, -3.2801,
        -1.5948, -1.5973], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.0565,  -0.0565, -13.6937,   3.7647,  -0.0565,  -0.0565,   5.0105,
           6.3726,  -0.0565,  -0.0564]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[  8.0304,   2.8892],
        [ -3.8788, -10.0199],
        [ -1.4494,  -0.8182],
        [-15.5368,  -1.8157],
        [-14.9599,  -1.4921],
        [ -7.1002,   0.7678],
        [ -4.5311,  -6.9696],
        [ -9.7366,  -8.8746],
        [  0.7730,  -5.7221],
        [ 10.5007,   3.5761]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -3.4100, -12.6924,  -6.1159,   3.3756,   0.6089,   4.3345,  -4.5487,
         -6.6006, -11.5009,  -1.0802], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ -0.9482,   0.5190,  -0.8485,  -1.6185,  -4.6641,  -0.2067,   0.8558,
          -0.8862,  -0.0322,   1.3892],
        [ -1.2496,  -0.4177,  -0.4702,  -0.7591,  -0.5306,  -0.7715,  -0.9017,
          -0.5198,  -0.4627,  -2.1559],
        [ -5.2879,  -1.3670,   2.1139,  -5.7780,  -0.5325,  -1.9552,   1.9956,
           1.8522,  -2.9532,  -2.2649],
        [ -4.9239,  -8.8275,   4.8898,  -7.5059,  -3.9290,  -4.8633,   6.3644,
          10.5595,  -7.1728,  -6.8163],
        [ -1.2445,  -0.4074,  -0.4599,  -0.7513,  -0.5229,  -0.7728,  -0.8887,
          -0.5122,  -0.4530,  -2.1431],
        [ -0.4648,   9.4653, -10.2793,   4.3563,   0.0703,   4.1850,  -4.2320,
           0.2734,  -0.1410,  -9.6471],
        [ -2.7861,  -1.2361,   0.3685,  -2.7041,  -1.2860,  -2.2169,   1.1705,
           1.5889,  -2.1377,  -2.5434],
        [ -1.2429,  -0.4041,  -0.4556,  -0.7464,  -0.5195,  -0.7730,  -0.8865,
          -0.5093,  -0.4496,  -2.1380],
        [ -1.2428,  -0.4040,  -0.4551,  -0.7455,  -0.5190,  -0.7730,  -0.8866,
          -0.5092,  -0.4492,  -2.1374],
        [  2.2350,  -2.0344,  -0.2626,   1.4174,   7.4433,   8.4738,  -6.9391,
          -6.2205,  -0.7340,  -1.0320]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ 1.9093, -3.0908, -0.8713, -0.2740, -3.0887, -7.6301, -2.1789, -3.0894,
        -3.0897, -2.7640], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ -0.4421,   0.0717,  -1.8093, -10.1434,   0.0676,   7.8503,  -0.9233,
           0.0666,   0.0678,   0.8170],
        [  0.2084,  -0.0715,   1.8727,  10.1416,  -0.0677,  -7.8431,   0.9588,
          -0.0663,  -0.0649,  -0.9635]], device='cuda:0'))])
loaded xi:  0.05
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -1645.0358987862332
min fval:  -1645.0358987862332
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.5617,  1.7671],
        [-0.5775,  1.7756],
        [-2.4710,  5.9977],
        [12.9912,  1.6838],
        [-1.3795,  3.9679],
        [-2.4951,  5.7569],
        [-6.7090,  3.9122],
        [-0.5613,  1.7665],
        [-2.6693,  6.1097],
        [-0.5653,  1.7210]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-0.9975, -1.0068,  9.8773, -7.8028,  3.3290,  8.9841,  7.9236, -0.9971,
        10.4591, -0.9857], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ 3.0119e-02,  2.4798e-02, -1.7249e-01, -3.2871e-01, -8.4524e-03,
         -1.0834e-01, -4.4549e-02,  3.0014e-02, -2.1420e-01,  2.5730e-02],
        [ 3.0119e-02,  2.4798e-02, -1.7249e-01, -3.2871e-01, -8.4524e-03,
         -1.0834e-01, -4.4549e-02,  3.0014e-02, -2.1420e-01,  2.5730e-02],
        [-3.4550e-02, -6.6303e-02, -6.6986e+00, -9.5870e+00, -1.2072e+00,
         -5.2025e+00, -4.4059e+00, -3.4031e-02, -7.6779e+00, -3.7301e-02],
        [ 1.6229e-02,  2.6595e-02,  2.0733e+00,  4.4657e+00,  1.8555e-01,
          1.3973e+00,  1.2239e+00,  1.6159e-02,  2.6237e+00,  2.7598e-02],
        [ 3.0119e-02,  2.4798e-02, -1.7249e-01, -3.2871e-01, -8.4524e-03,
         -1.0834e-01, -4.4549e-02,  3.0014e-02, -2.1420e-01,  2.5730e-02],
        [ 3.0119e-02,  2.4798e-02, -1.7249e-01, -3.2871e-01, -8.4524e-03,
         -1.0834e-01, -4.4549e-02,  3.0014e-02, -2.1420e-01,  2.5730e-02],
        [ 3.0894e-02,  4.4798e-02,  3.2173e+00,  5.1939e+00,  3.4282e-01,
          2.3282e+00,  2.2169e+00,  3.0920e-02,  3.9216e+00,  6.0602e-02],
        [ 4.0366e-02,  5.4379e-02,  3.9384e+00,  5.9008e+00,  4.7366e-01,
          2.9152e+00,  2.7346e+00,  4.0452e-02,  4.7487e+00,  8.1186e-02],
        [ 3.0119e-02,  2.4798e-02, -1.7249e-01, -3.2871e-01, -8.4524e-03,
         -1.0834e-01, -4.4549e-02,  3.0014e-02, -2.1420e-01,  2.5730e-02],
        [ 2.2806e-02,  2.5030e-02, -1.7275e-01, -3.2990e-01, -1.0514e-02,
         -1.0864e-01, -4.4866e-02,  2.9501e-02, -2.1447e-01, -2.3663e-02]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.5948, -1.5948,  5.0924, -3.1258, -1.5948, -1.5948, -3.0655, -3.2801,
        -1.5948, -1.5973], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.0565,  -0.0565, -13.6937,   3.7647,  -0.0565,  -0.0565,   5.0105,
           6.3726,  -0.0565,  -0.0564]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[  8.0304,   2.8892],
        [ -3.8788, -10.0199],
        [ -1.4494,  -0.8182],
        [-15.5368,  -1.8157],
        [-14.9599,  -1.4921],
        [ -7.1002,   0.7678],
        [ -4.5311,  -6.9696],
        [ -9.7366,  -8.8746],
        [  0.7730,  -5.7221],
        [ 10.5007,   3.5761]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -3.4100, -12.6924,  -6.1159,   3.3756,   0.6089,   4.3345,  -4.5487,
         -6.6006, -11.5009,  -1.0802], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ -0.9482,   0.5190,  -0.8485,  -1.6185,  -4.6641,  -0.2067,   0.8558,
          -0.8862,  -0.0322,   1.3892],
        [ -1.2496,  -0.4177,  -0.4702,  -0.7591,  -0.5306,  -0.7715,  -0.9017,
          -0.5198,  -0.4627,  -2.1559],
        [ -5.2879,  -1.3670,   2.1139,  -5.7780,  -0.5325,  -1.9552,   1.9956,
           1.8522,  -2.9532,  -2.2649],
        [ -4.9239,  -8.8275,   4.8898,  -7.5059,  -3.9290,  -4.8633,   6.3644,
          10.5595,  -7.1728,  -6.8163],
        [ -1.2445,  -0.4074,  -0.4599,  -0.7513,  -0.5229,  -0.7728,  -0.8887,
          -0.5122,  -0.4530,  -2.1431],
        [ -0.4648,   9.4653, -10.2793,   4.3563,   0.0703,   4.1850,  -4.2320,
           0.2734,  -0.1410,  -9.6471],
        [ -2.7861,  -1.2361,   0.3685,  -2.7041,  -1.2860,  -2.2169,   1.1705,
           1.5889,  -2.1377,  -2.5434],
        [ -1.2429,  -0.4041,  -0.4556,  -0.7464,  -0.5195,  -0.7730,  -0.8865,
          -0.5093,  -0.4496,  -2.1380],
        [ -1.2428,  -0.4040,  -0.4551,  -0.7455,  -0.5190,  -0.7730,  -0.8866,
          -0.5092,  -0.4492,  -2.1374],
        [  2.2350,  -2.0344,  -0.2626,   1.4174,   7.4433,   8.4738,  -6.9391,
          -6.2205,  -0.7340,  -1.0320]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ 1.9093, -3.0908, -0.8713, -0.2740, -3.0887, -7.6301, -2.1789, -3.0894,
        -3.0897, -2.7640], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ -0.4421,   0.0717,  -1.8093, -10.1434,   0.0676,   7.8503,  -0.9233,
           0.0666,   0.0678,   0.8170],
        [  0.2084,  -0.0715,   1.8727,  10.1416,  -0.0677,  -7.8431,   0.9588,
          -0.0663,  -0.0649,  -0.9635]], device='cuda:0'))])
xi:  [0.05]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 339.9994599508266
W_T_median: 109.12666759121213
W_T_pctile_5: -608.3594244810193
W_T_CVAR_5_pct: -720.4249303369875
Average q (qsum/M+1):  57.10368888608871
Optimal xi:  [0.05]
Expected(across Rb) median(across samples) p_equity:  0.32887726128101347
obj fun:  tensor(-1645.0359, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 0.05
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-1.7206, -4.5816],
        [-1.7592, -4.7563],
        [-1.3490, -3.2032],
        [ 1.7147,  5.7886],
        [-3.8491,  5.1388],
        [-5.4251,  4.3418],
        [-1.9807, -5.2780],
        [-2.0293, -5.2453],
        [-1.0476, -1.7315],
        [-4.5809,  4.7649]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-5.9093, -5.9175, -6.0040,  5.4616,  6.0442,  6.1683, -5.9977, -5.9111,
        -5.3881,  6.0145], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-0.4609, -0.5188, -0.1337, -0.5043, -0.2475, -0.3732, -0.6750, -0.6847,
         -0.0539, -0.2896],
        [ 2.0889,  2.2268,  0.9646, -4.0938, -4.0910, -4.2471,  3.1948,  3.2539,
          0.3566, -4.0375],
        [-2.4207, -3.0567, -1.4723,  4.6348,  5.6440,  5.6527, -4.0062, -3.6407,
         -0.6229,  5.4559],
        [-2.2528, -2.2279, -0.9142,  3.4500,  4.3434,  4.6966, -3.5131, -3.3128,
         -0.2712,  4.3506],
        [ 2.1044,  2.1736,  0.8382, -3.9962, -3.9872, -4.0908,  2.8996,  3.1492,
          0.3006, -3.9545],
        [ 0.6645,  0.6265,  0.0448, -2.5928, -1.8847, -2.3295,  1.4045,  1.4851,
         -0.0824, -1.9651],
        [-1.3442, -1.6788, -0.3763,  0.8442,  1.2793,  2.0775, -2.4676, -2.5307,
         -0.0907,  1.5307],
        [ 1.6772,  1.6129,  0.5460, -3.5106, -3.3053, -3.4749,  2.4661,  2.7536,
          0.1296, -3.2671],
        [-1.9556, -2.2533, -0.7177,  2.8300,  3.7304,  4.1727, -3.2345, -3.2037,
         -0.2375,  3.7309],
        [-0.6526, -0.7734, -0.1381, -0.4534, -0.1187, -0.0910, -1.2425, -1.2507,
         -0.0450, -0.1091]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.5839, -1.3007,  0.5721,  0.5765, -1.1900, -1.7642, -0.0816, -1.2918,
         0.5955, -0.9075], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 0.0179, -4.9806,  6.8240,  4.5529, -4.6516, -1.7828,  1.6248, -3.4551,
          3.6540,  0.2138]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -5.6203,   6.7713],
        [  9.3170,  -0.5736],
        [  3.5146,   7.5289],
        [ -0.9611,  11.1787],
        [ -2.4566,   0.8585],
        [ 12.5786,   4.4666],
        [ -7.8544, -10.7738],
        [ -9.3078,  -1.5682],
        [ 10.5246,   1.7448],
        [  2.5657,  -0.6703]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([  5.3477,  -9.3063,   9.2222,  10.5159,  -3.6060,   1.5339, -12.3890,
          0.8048,  -2.7802,  -9.0642], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-2.2443e-02, -1.0303e+00, -1.2103e+00, -3.0751e-01, -1.4835e-02,
         -1.5098e+00, -1.1969e+00, -9.5688e-01, -1.2115e+00, -8.8826e-01],
        [-8.9963e-01, -9.8320e+00, -7.5909e+00, -4.3827e+00,  1.1766e-01,
         -5.8268e+00,  8.4660e+00,  9.7204e+00, -5.1259e+00,  2.6312e-01],
        [-2.0458e-02, -1.0285e+00, -1.2057e+00, -3.0699e-01, -1.0540e-02,
         -1.5045e+00, -1.1995e+00, -9.4953e-01, -1.2117e+00, -8.7292e-01],
        [-6.8210e+00, -9.5249e+00, -2.4810e+00, -1.2514e+01, -1.3245e-01,
         -1.6308e+01,  5.5618e+00,  6.8111e+00, -7.5959e+00, -9.9383e+00],
        [ 4.4558e-01,  9.3053e-03, -3.0439e+00,  6.7503e+00,  6.5643e-02,
         -4.5564e+00,  4.9999e+00,  4.2628e+00, -7.4349e+00,  2.3524e+00],
        [-7.1876e+00, -8.4804e-01,  2.2043e-01, -1.5816e+00, -2.8002e-01,
         -5.1658e-01, -1.6811e-01, -1.9760e+00, -6.4226e-01, -2.8940e+00],
        [-7.0790e+00, -3.0708e+00,  1.8653e+00, -1.2185e+01,  1.1262e-01,
         -1.9453e+00, -1.1687e+01,  4.0702e+00, -3.4092e+00,  4.2379e-01],
        [ 1.5558e+00, -8.2451e+00,  1.4978e+00,  6.1811e+00,  4.7201e-01,
         -2.4404e+00,  1.4108e+00, -3.7250e-01, -3.1026e+00, -3.7410e-02],
        [-2.0427e-02, -1.0285e+00, -1.2058e+00, -3.0699e-01, -1.0549e-02,
         -1.5045e+00, -1.1995e+00, -9.4953e-01, -1.2117e+00, -8.7297e-01],
        [-2.0429e-02, -1.0285e+00, -1.2057e+00, -3.0697e-01, -1.0525e-02,
         -1.5045e+00, -1.1995e+00, -9.4950e-01, -1.2117e+00, -8.7291e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-2.7118, -0.3967, -2.7048, -1.4941, -4.0466, -0.7796,  0.0787, -2.5905,
        -2.7048, -2.7047], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ -0.0225,  -5.8364,  -0.0222,  13.1696,   5.7976,  -1.4774,  -7.5406,
           0.7129,  -0.0221,  -0.0221],
        [  0.0231,   5.7754,   0.0222, -13.1648,  -5.8200,   1.7148,   7.5573,
          -0.9039,   0.0223,   0.0223]], device='cuda:0'))])
loaded xi:  0.2
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -1377.0448649105094
min fval:  -1377.0448649105094
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-1.7206, -4.5816],
        [-1.7592, -4.7563],
        [-1.3490, -3.2032],
        [ 1.7147,  5.7886],
        [-3.8491,  5.1388],
        [-5.4251,  4.3418],
        [-1.9807, -5.2780],
        [-2.0293, -5.2453],
        [-1.0476, -1.7315],
        [-4.5809,  4.7649]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-5.9093, -5.9175, -6.0040,  5.4616,  6.0442,  6.1683, -5.9977, -5.9111,
        -5.3881,  6.0145], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-0.4609, -0.5188, -0.1337, -0.5043, -0.2475, -0.3732, -0.6750, -0.6847,
         -0.0539, -0.2896],
        [ 2.0889,  2.2268,  0.9646, -4.0938, -4.0910, -4.2471,  3.1948,  3.2539,
          0.3566, -4.0375],
        [-2.4207, -3.0567, -1.4723,  4.6348,  5.6440,  5.6527, -4.0062, -3.6407,
         -0.6229,  5.4559],
        [-2.2528, -2.2279, -0.9142,  3.4500,  4.3434,  4.6966, -3.5131, -3.3128,
         -0.2712,  4.3506],
        [ 2.1044,  2.1736,  0.8382, -3.9962, -3.9872, -4.0908,  2.8996,  3.1492,
          0.3006, -3.9545],
        [ 0.6645,  0.6265,  0.0448, -2.5928, -1.8847, -2.3295,  1.4045,  1.4851,
         -0.0824, -1.9651],
        [-1.3442, -1.6788, -0.3763,  0.8442,  1.2793,  2.0775, -2.4676, -2.5307,
         -0.0907,  1.5307],
        [ 1.6772,  1.6129,  0.5460, -3.5106, -3.3053, -3.4749,  2.4661,  2.7536,
          0.1296, -3.2671],
        [-1.9556, -2.2533, -0.7177,  2.8300,  3.7304,  4.1727, -3.2345, -3.2037,
         -0.2375,  3.7309],
        [-0.6526, -0.7734, -0.1381, -0.4534, -0.1187, -0.0910, -1.2425, -1.2507,
         -0.0450, -0.1091]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.5839, -1.3007,  0.5721,  0.5765, -1.1900, -1.7642, -0.0816, -1.2918,
         0.5955, -0.9075], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 0.0179, -4.9806,  6.8240,  4.5529, -4.6516, -1.7828,  1.6248, -3.4551,
          3.6540,  0.2138]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -5.6203,   6.7713],
        [  9.3170,  -0.5736],
        [  3.5146,   7.5289],
        [ -0.9611,  11.1787],
        [ -2.4566,   0.8585],
        [ 12.5786,   4.4666],
        [ -7.8544, -10.7738],
        [ -9.3078,  -1.5682],
        [ 10.5246,   1.7448],
        [  2.5657,  -0.6703]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([  5.3477,  -9.3063,   9.2222,  10.5159,  -3.6060,   1.5339, -12.3890,
          0.8048,  -2.7802,  -9.0642], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-2.2443e-02, -1.0303e+00, -1.2103e+00, -3.0751e-01, -1.4835e-02,
         -1.5098e+00, -1.1969e+00, -9.5688e-01, -1.2115e+00, -8.8826e-01],
        [-8.9963e-01, -9.8320e+00, -7.5909e+00, -4.3827e+00,  1.1766e-01,
         -5.8268e+00,  8.4660e+00,  9.7204e+00, -5.1259e+00,  2.6312e-01],
        [-2.0458e-02, -1.0285e+00, -1.2057e+00, -3.0699e-01, -1.0540e-02,
         -1.5045e+00, -1.1995e+00, -9.4953e-01, -1.2117e+00, -8.7292e-01],
        [-6.8210e+00, -9.5249e+00, -2.4810e+00, -1.2514e+01, -1.3245e-01,
         -1.6308e+01,  5.5618e+00,  6.8111e+00, -7.5959e+00, -9.9383e+00],
        [ 4.4558e-01,  9.3053e-03, -3.0439e+00,  6.7503e+00,  6.5643e-02,
         -4.5564e+00,  4.9999e+00,  4.2628e+00, -7.4349e+00,  2.3524e+00],
        [-7.1876e+00, -8.4804e-01,  2.2043e-01, -1.5816e+00, -2.8002e-01,
         -5.1658e-01, -1.6811e-01, -1.9760e+00, -6.4226e-01, -2.8940e+00],
        [-7.0790e+00, -3.0708e+00,  1.8653e+00, -1.2185e+01,  1.1262e-01,
         -1.9453e+00, -1.1687e+01,  4.0702e+00, -3.4092e+00,  4.2379e-01],
        [ 1.5558e+00, -8.2451e+00,  1.4978e+00,  6.1811e+00,  4.7201e-01,
         -2.4404e+00,  1.4108e+00, -3.7250e-01, -3.1026e+00, -3.7410e-02],
        [-2.0427e-02, -1.0285e+00, -1.2058e+00, -3.0699e-01, -1.0549e-02,
         -1.5045e+00, -1.1995e+00, -9.4953e-01, -1.2117e+00, -8.7297e-01],
        [-2.0429e-02, -1.0285e+00, -1.2057e+00, -3.0697e-01, -1.0525e-02,
         -1.5045e+00, -1.1995e+00, -9.4950e-01, -1.2117e+00, -8.7291e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-2.7118, -0.3967, -2.7048, -1.4941, -4.0466, -0.7796,  0.0787, -2.5905,
        -2.7048, -2.7047], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ -0.0225,  -5.8364,  -0.0222,  13.1696,   5.7976,  -1.4774,  -7.5406,
           0.7129,  -0.0221,  -0.0221],
        [  0.0231,   5.7754,   0.0222, -13.1648,  -5.8200,   1.7148,   7.5573,
          -0.9039,   0.0223,   0.0223]], device='cuda:0'))])
xi:  [0.2]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 292.6217199426392
W_T_median: 52.46462847984447
W_T_pctile_5: -406.0859850669189
W_T_CVAR_5_pct: -485.94243472870056
Average q (qsum/M+1):  56.37841009324597
Optimal xi:  [0.2]
Expected(across Rb) median(across samples) p_equity:  0.30768148850111177
obj fun:  tensor(-1377.0449, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 0.2
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.8523, -7.2196],
        [-0.5981, -7.4422],
        [-1.1661,  1.9276],
        [-1.1661,  1.9276],
        [-6.6993,  6.9318],
        [-9.6541,  2.9969],
        [-0.7743, -7.9554],
        [-6.2018, -8.2409],
        [-1.1661,  1.9276],
        [-6.4032,  5.6469]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-8.1140, -8.2654, -2.1880, -2.1880,  6.8186,  9.2488, -8.5384, -7.8832,
        -2.1880,  7.4077], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-2.0485e-01, -2.3342e-01, -9.6592e-02, -9.6583e-02, -1.5587e-01,
         -9.0193e-01, -2.5544e-01, -8.8704e-02, -9.6592e-02, -2.7946e-01],
        [ 3.4979e+00,  3.7707e+00, -3.6684e-03, -3.6087e-03, -4.7950e+00,
         -5.5528e+00,  5.2136e+00,  5.9504e+00, -3.6683e-03, -5.0447e+00],
        [-3.9511e+00, -4.6445e+00,  4.0495e-04,  4.9020e-04,  6.7727e+00,
          6.1731e+00, -6.1115e+00, -5.3778e+00,  4.0508e-04,  6.4020e+00],
        [-2.7881e+00, -3.1790e+00,  1.4269e-02,  1.4249e-02,  4.2385e+00,
          4.4953e+00, -4.2805e+00, -3.5497e+00,  1.4269e-02,  4.4364e+00],
        [ 3.3861e+00,  3.6145e+00, -3.5326e-03, -3.4730e-03, -4.4289e+00,
         -5.4771e+00,  4.9214e+00,  5.7661e+00, -3.5323e-03, -4.7324e+00],
        [-2.0485e-01, -2.3342e-01, -9.6593e-02, -9.6584e-02, -1.5586e-01,
         -9.0193e-01, -2.5544e-01, -8.8703e-02, -9.6593e-02, -2.7946e-01],
        [-2.0485e-01, -2.3342e-01, -9.6592e-02, -9.6583e-02, -1.5587e-01,
         -9.0193e-01, -2.5544e-01, -8.8704e-02, -9.6592e-02, -2.7946e-01],
        [-2.0485e-01, -2.3342e-01, -9.6593e-02, -9.6583e-02, -1.5587e-01,
         -9.0193e-01, -2.5544e-01, -8.8703e-02, -9.6593e-02, -2.7946e-01],
        [-2.0485e-01, -2.3342e-01, -9.6592e-02, -9.6583e-02, -1.5587e-01,
         -9.0193e-01, -2.5544e-01, -8.8704e-02, -9.6592e-02, -2.7946e-01],
        [-2.0485e-01, -2.3342e-01, -9.6592e-02, -9.6583e-02, -1.5587e-01,
         -9.0193e-01, -2.5544e-01, -8.8704e-02, -9.6592e-02, -2.7946e-01]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-2.2661,  0.8604, -3.1996, -3.1611,  0.7479, -2.2661, -2.2661, -2.2661,
        -2.2661, -2.2661], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-0.1012, -8.0947, 10.1928,  4.6190, -7.3616, -0.1012, -0.1012, -0.1012,
         -0.1012, -0.1012]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -7.2814,   7.0060],
        [ 12.6515,  -1.0540],
        [ -0.4561,  12.5915],
        [ -4.5252,  16.3156],
        [ -4.6125,   2.0295],
        [ 16.4523,   6.2576],
        [-10.1996, -13.0888],
        [-12.2411,  -4.4124],
        [ 10.9053,   1.9724],
        [ -2.7940,  -0.6280]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([  7.1954, -12.0873,  14.0533,  16.0063,  -2.8934,   4.3394, -13.5474,
         -1.7900,  -7.8231,  -4.7894], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ -1.0826,   1.6832,   0.1021,  -0.9852,  -0.2426,  -0.7294,   0.6497,
          -8.0625,  -0.1858,   2.4897],
        [ -4.9312,  -6.9836, -13.3881, -16.2183,  -0.0729,  -7.3269,   5.1938,
          11.5589,  -6.4988,   3.7612],
        [ -0.4022,   0.2084,  -1.7490,  -1.0752,  -0.1133,  -0.4468,  -1.1325,
          -7.7441,  -0.5107,   0.4595],
        [ -0.1328,  -3.7493,  -7.1167,  -2.6456,  -0.4120, -19.6065,  14.6899,
           9.6597,  -4.5826,  -1.0625],
        [  1.9640,  -0.9667,   2.5057,   3.5939,   0.1622,  -5.8310, -15.0095,
           4.6297,  -7.5156,   0.2038],
        [ -1.2239, -12.0558,  -0.6189, -14.2641,   0.0949,  -4.1965,  -0.8740,
           5.7794,   2.1505,  -0.1001],
        [  1.5719,  -8.1936,   5.6554, -10.9248,   0.2348,  -5.8835, -10.8110,
           3.9319, -10.5567,  -0.1393],
        [  3.2533,  -6.2327,  -2.3062,   3.1026,   1.0887,   0.1647,  -8.2021,
           2.5279,  -2.0919,   1.9789],
        [ -0.4011,   0.2242,  -1.7394,  -1.0670,  -0.1131,  -0.4575,  -1.1308,
          -7.6827,  -0.5237,   0.4184],
        [ -0.4011,   0.2228,  -1.7400,  -1.0686,  -0.1131,  -0.4566,  -1.1303,
          -7.6897,  -0.5225,   0.4227]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-4.6717,  0.1823, -3.8886, -7.2181, -5.0330, -1.1905, -0.4570, -1.2931,
        -3.9010, -3.8999], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ 3.6364, -6.2491,  4.1920,  6.2056,  4.9551,  5.6126, -3.6036,  0.5539,
          4.1755,  4.1771],
        [-3.6362,  6.1940, -4.1920, -6.2074, -4.9553, -5.5491,  3.6081, -0.7289,
         -4.1754, -4.1770]], device='cuda:0'))])
loaded xi:  0.5
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -1180.4755646703973
min fval:  -1180.4755646703973
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.8523, -7.2196],
        [-0.5981, -7.4422],
        [-1.1661,  1.9276],
        [-1.1661,  1.9276],
        [-6.6993,  6.9318],
        [-9.6541,  2.9969],
        [-0.7743, -7.9554],
        [-6.2018, -8.2409],
        [-1.1661,  1.9276],
        [-6.4032,  5.6469]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-8.1140, -8.2654, -2.1880, -2.1880,  6.8186,  9.2488, -8.5384, -7.8832,
        -2.1880,  7.4077], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-2.0485e-01, -2.3342e-01, -9.6592e-02, -9.6583e-02, -1.5587e-01,
         -9.0193e-01, -2.5544e-01, -8.8704e-02, -9.6592e-02, -2.7946e-01],
        [ 3.4979e+00,  3.7707e+00, -3.6684e-03, -3.6087e-03, -4.7950e+00,
         -5.5528e+00,  5.2136e+00,  5.9504e+00, -3.6683e-03, -5.0447e+00],
        [-3.9511e+00, -4.6445e+00,  4.0495e-04,  4.9020e-04,  6.7727e+00,
          6.1731e+00, -6.1115e+00, -5.3778e+00,  4.0508e-04,  6.4020e+00],
        [-2.7881e+00, -3.1790e+00,  1.4269e-02,  1.4249e-02,  4.2385e+00,
          4.4953e+00, -4.2805e+00, -3.5497e+00,  1.4269e-02,  4.4364e+00],
        [ 3.3861e+00,  3.6145e+00, -3.5326e-03, -3.4730e-03, -4.4289e+00,
         -5.4771e+00,  4.9214e+00,  5.7661e+00, -3.5323e-03, -4.7324e+00],
        [-2.0485e-01, -2.3342e-01, -9.6593e-02, -9.6584e-02, -1.5586e-01,
         -9.0193e-01, -2.5544e-01, -8.8703e-02, -9.6593e-02, -2.7946e-01],
        [-2.0485e-01, -2.3342e-01, -9.6592e-02, -9.6583e-02, -1.5587e-01,
         -9.0193e-01, -2.5544e-01, -8.8704e-02, -9.6592e-02, -2.7946e-01],
        [-2.0485e-01, -2.3342e-01, -9.6593e-02, -9.6583e-02, -1.5587e-01,
         -9.0193e-01, -2.5544e-01, -8.8703e-02, -9.6593e-02, -2.7946e-01],
        [-2.0485e-01, -2.3342e-01, -9.6592e-02, -9.6583e-02, -1.5587e-01,
         -9.0193e-01, -2.5544e-01, -8.8704e-02, -9.6592e-02, -2.7946e-01],
        [-2.0485e-01, -2.3342e-01, -9.6592e-02, -9.6583e-02, -1.5587e-01,
         -9.0193e-01, -2.5544e-01, -8.8704e-02, -9.6592e-02, -2.7946e-01]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-2.2661,  0.8604, -3.1996, -3.1611,  0.7479, -2.2661, -2.2661, -2.2661,
        -2.2661, -2.2661], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-0.1012, -8.0947, 10.1928,  4.6190, -7.3616, -0.1012, -0.1012, -0.1012,
         -0.1012, -0.1012]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -7.2814,   7.0060],
        [ 12.6515,  -1.0540],
        [ -0.4561,  12.5915],
        [ -4.5252,  16.3156],
        [ -4.6125,   2.0295],
        [ 16.4523,   6.2576],
        [-10.1996, -13.0888],
        [-12.2411,  -4.4124],
        [ 10.9053,   1.9724],
        [ -2.7940,  -0.6280]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([  7.1954, -12.0873,  14.0533,  16.0063,  -2.8934,   4.3394, -13.5474,
         -1.7900,  -7.8231,  -4.7894], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ -1.0826,   1.6832,   0.1021,  -0.9852,  -0.2426,  -0.7294,   0.6497,
          -8.0625,  -0.1858,   2.4897],
        [ -4.9312,  -6.9836, -13.3881, -16.2183,  -0.0729,  -7.3269,   5.1938,
          11.5589,  -6.4988,   3.7612],
        [ -0.4022,   0.2084,  -1.7490,  -1.0752,  -0.1133,  -0.4468,  -1.1325,
          -7.7441,  -0.5107,   0.4595],
        [ -0.1328,  -3.7493,  -7.1167,  -2.6456,  -0.4120, -19.6065,  14.6899,
           9.6597,  -4.5826,  -1.0625],
        [  1.9640,  -0.9667,   2.5057,   3.5939,   0.1622,  -5.8310, -15.0095,
           4.6297,  -7.5156,   0.2038],
        [ -1.2239, -12.0558,  -0.6189, -14.2641,   0.0949,  -4.1965,  -0.8740,
           5.7794,   2.1505,  -0.1001],
        [  1.5719,  -8.1936,   5.6554, -10.9248,   0.2348,  -5.8835, -10.8110,
           3.9319, -10.5567,  -0.1393],
        [  3.2533,  -6.2327,  -2.3062,   3.1026,   1.0887,   0.1647,  -8.2021,
           2.5279,  -2.0919,   1.9789],
        [ -0.4011,   0.2242,  -1.7394,  -1.0670,  -0.1131,  -0.4575,  -1.1308,
          -7.6827,  -0.5237,   0.4184],
        [ -0.4011,   0.2228,  -1.7400,  -1.0686,  -0.1131,  -0.4566,  -1.1303,
          -7.6897,  -0.5225,   0.4227]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-4.6717,  0.1823, -3.8886, -7.2181, -5.0330, -1.1905, -0.4570, -1.2931,
        -3.9010, -3.8999], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ 3.6364, -6.2491,  4.1920,  6.2056,  4.9551,  5.6126, -3.6036,  0.5539,
          4.1755,  4.1771],
        [-3.6362,  6.1940, -4.1920, -6.2074, -4.9553, -5.5491,  3.6081, -0.7289,
         -4.1754, -4.1770]], device='cuda:0'))])
xi:  [0.5]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 323.18994963532015
W_T_median: 74.20757651189014
W_T_pctile_5: -221.65190459567924
W_T_CVAR_5_pct: -286.6681755836419
Average q (qsum/M+1):  55.045713363155244
Optimal xi:  [0.5]
Expected(across Rb) median(across samples) p_equity:  0.28606927453074604
obj fun:  tensor(-1180.4756, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 0.5
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[  9.3645,  -7.5347],
        [  6.8578,  -9.1295],
        [ -1.1386,   0.6525],
        [ -1.1386,   0.6525],
        [ -1.1386,   0.6524],
        [-14.1843,   1.3401],
        [  6.8516,  -8.8836],
        [ -4.9454, -10.7550],
        [ -1.1386,   0.6525],
        [-11.4145,  -1.2170]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -3.3575,  -6.8378,  -1.9703,  -1.9703,  -1.9703,  12.7133, -10.6468,
        -10.1670,  -1.9703,   9.9973], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-8.5235e-01, -2.7924e-01, -5.9734e-03, -5.9734e-03, -5.9732e-03,
         -3.5520e-01, -4.6707e-02, -2.2622e-02, -5.9734e-03, -3.0731e-01],
        [ 3.1225e+00,  1.9266e+00,  1.1708e-01,  1.1708e-01,  1.1716e-01,
         -9.1235e+00,  1.0803e+01,  1.2675e+01,  1.1708e-01, -5.0506e+00],
        [-4.1811e+00, -3.3911e+00,  1.6479e-01,  1.6479e-01,  1.6484e-01,
          1.0401e+01, -1.2602e+01, -1.1174e+01,  1.6479e-01,  7.0587e+00],
        [-8.5235e-01, -2.7924e-01, -5.9734e-03, -5.9734e-03, -5.9732e-03,
         -3.5520e-01, -4.6707e-02, -2.2622e-02, -5.9734e-03, -3.0731e-01],
        [ 3.0620e+00,  1.8168e+00,  1.2743e-01,  1.2743e-01,  1.2747e-01,
         -8.7884e+00,  1.0186e+01,  1.2042e+01,  1.2743e-01, -4.6057e+00],
        [-8.5235e-01, -2.7924e-01, -5.9734e-03, -5.9734e-03, -5.9732e-03,
         -3.5520e-01, -4.6707e-02, -2.2622e-02, -5.9734e-03, -3.0731e-01],
        [-8.5235e-01, -2.7924e-01, -5.9734e-03, -5.9734e-03, -5.9732e-03,
         -3.5520e-01, -4.6707e-02, -2.2622e-02, -5.9734e-03, -3.0731e-01],
        [-8.5235e-01, -2.7924e-01, -5.9734e-03, -5.9734e-03, -5.9732e-03,
         -3.5520e-01, -4.6707e-02, -2.2622e-02, -5.9734e-03, -3.0731e-01],
        [-8.5235e-01, -2.7924e-01, -5.9734e-03, -5.9734e-03, -5.9732e-03,
         -3.5520e-01, -4.6707e-02, -2.2622e-02, -5.9734e-03, -3.0731e-01],
        [-8.5235e-01, -2.7924e-01, -5.9734e-03, -5.9734e-03, -5.9732e-03,
         -3.5520e-01, -4.6707e-02, -2.2622e-02, -5.9734e-03, -3.0731e-01]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.8804, -0.0467, -2.5173, -0.8804, -0.2444, -0.8804, -0.8804, -0.8804,
        -0.8804, -0.8804], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 0.0233, -8.8396, 14.0643,  0.0233, -7.6469,  0.0233,  0.0233,  0.0233,
          0.0233,  0.0233]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -3.6737,   0.7999],
        [ -4.1992,  -3.6677],
        [  8.2441,  15.5914],
        [ -7.1856,  18.3144],
        [-10.0756,   5.6687],
        [ 19.2967,   5.8635],
        [-17.3578, -11.8486],
        [-12.9156,  -4.5415],
        [ 12.5885,   0.1007],
        [ -2.0953,   0.2987]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([  7.7646,  -1.1888,  14.7651,  19.2006,   8.2751,   3.7539,  -9.8614,
         -3.9745, -10.8284,  -3.9123], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-2.1970e+00, -5.8569e-01,  1.3803e+00, -8.0239e-02, -1.5694e+00,
         -1.5989e+00, -2.5425e-01, -2.8924e-01, -2.6645e-01, -2.0347e-02],
        [-2.1753e+00,  3.1874e-01, -2.2238e+00, -3.7313e+00, -4.9470e+00,
         -4.9097e+00,  6.1914e+00,  4.9558e+00,  1.5007e+00, -1.7088e-01],
        [-2.3722e+00, -1.7907e-01, -1.9660e-01, -5.8506e-01, -6.3981e-01,
         -1.4176e+00, -1.7795e-01, -1.8825e-01, -2.7469e-01, -1.7096e-02],
        [-3.5488e+00,  5.1315e+00, -1.6391e+01, -3.9452e+00, -8.4709e+00,
         -1.4932e+01,  1.6265e+01,  1.2396e+01, -1.0356e+01,  6.5247e-01],
        [ 2.2088e+00,  3.2900e+00, -5.5379e+00, -1.9713e+01, -1.3284e+00,
         -4.0049e+00,  3.9627e+00,  1.7561e+01, -1.2202e+01,  2.6551e-01],
        [-7.4664e-01,  8.9035e-02,  1.4238e-01, -6.9841e-02, -1.7524e+00,
         -2.8330e+00, -8.1234e+00, -9.9589e+00,  4.0199e-01, -5.6963e-02],
        [-2.0443e+00,  1.8793e+00, -1.1013e+00, -2.8650e+00, -1.2482e+00,
         -1.8545e+00,  1.3659e+00,  1.8028e-01,  1.9866e+00, -1.0606e-02],
        [-1.3178e-01,  2.2324e+00, -4.0280e+00,  8.8983e+00,  5.8777e+00,
         -2.3496e+00, -1.2493e+01, -2.4238e+00, -5.4874e+00,  8.8007e-02],
        [-1.5675e+00,  1.8739e+00,  1.9660e+00, -1.0703e+01,  4.2812e+00,
         -9.5338e-01,  4.0024e-01,  6.0843e+00, -4.9924e-01,  7.4379e-02],
        [-1.9570e+00,  2.0130e+00,  1.3125e+00, -9.1126e+00,  2.3130e+00,
         -6.3665e-01, -4.8949e+00, -4.7822e-01, -6.6926e-01, -1.6394e-02]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-4.6344, -2.7191, -3.6789, -6.1528, -3.0934,  0.4610, -2.5189, -4.7733,
        -3.6706, -4.0488], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  1.2901,   3.6259,   0.3586,  11.0728,  -5.6211,   3.6653,   1.4760,
           0.4986,   3.5802,   3.4743],
        [ -1.2901,  -3.6258,  -0.3585, -11.0725,   5.6220,  -3.6137,  -1.4760,
          -0.6636,  -3.5802,  -3.4742]], device='cuda:0'))])
loaded xi:  1.0
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -1110.481298609906
min fval:  -1110.481298609906
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[  9.3645,  -7.5347],
        [  6.8578,  -9.1295],
        [ -1.1386,   0.6525],
        [ -1.1386,   0.6525],
        [ -1.1386,   0.6524],
        [-14.1843,   1.3401],
        [  6.8516,  -8.8836],
        [ -4.9454, -10.7550],
        [ -1.1386,   0.6525],
        [-11.4145,  -1.2170]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -3.3575,  -6.8378,  -1.9703,  -1.9703,  -1.9703,  12.7133, -10.6468,
        -10.1670,  -1.9703,   9.9973], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-8.5235e-01, -2.7924e-01, -5.9734e-03, -5.9734e-03, -5.9732e-03,
         -3.5520e-01, -4.6707e-02, -2.2622e-02, -5.9734e-03, -3.0731e-01],
        [ 3.1225e+00,  1.9266e+00,  1.1708e-01,  1.1708e-01,  1.1716e-01,
         -9.1235e+00,  1.0803e+01,  1.2675e+01,  1.1708e-01, -5.0506e+00],
        [-4.1811e+00, -3.3911e+00,  1.6479e-01,  1.6479e-01,  1.6484e-01,
          1.0401e+01, -1.2602e+01, -1.1174e+01,  1.6479e-01,  7.0587e+00],
        [-8.5235e-01, -2.7924e-01, -5.9734e-03, -5.9734e-03, -5.9732e-03,
         -3.5520e-01, -4.6707e-02, -2.2622e-02, -5.9734e-03, -3.0731e-01],
        [ 3.0620e+00,  1.8168e+00,  1.2743e-01,  1.2743e-01,  1.2747e-01,
         -8.7884e+00,  1.0186e+01,  1.2042e+01,  1.2743e-01, -4.6057e+00],
        [-8.5235e-01, -2.7924e-01, -5.9734e-03, -5.9734e-03, -5.9732e-03,
         -3.5520e-01, -4.6707e-02, -2.2622e-02, -5.9734e-03, -3.0731e-01],
        [-8.5235e-01, -2.7924e-01, -5.9734e-03, -5.9734e-03, -5.9732e-03,
         -3.5520e-01, -4.6707e-02, -2.2622e-02, -5.9734e-03, -3.0731e-01],
        [-8.5235e-01, -2.7924e-01, -5.9734e-03, -5.9734e-03, -5.9732e-03,
         -3.5520e-01, -4.6707e-02, -2.2622e-02, -5.9734e-03, -3.0731e-01],
        [-8.5235e-01, -2.7924e-01, -5.9734e-03, -5.9734e-03, -5.9732e-03,
         -3.5520e-01, -4.6707e-02, -2.2622e-02, -5.9734e-03, -3.0731e-01],
        [-8.5235e-01, -2.7924e-01, -5.9734e-03, -5.9734e-03, -5.9732e-03,
         -3.5520e-01, -4.6707e-02, -2.2622e-02, -5.9734e-03, -3.0731e-01]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.8804, -0.0467, -2.5173, -0.8804, -0.2444, -0.8804, -0.8804, -0.8804,
        -0.8804, -0.8804], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 0.0233, -8.8396, 14.0643,  0.0233, -7.6469,  0.0233,  0.0233,  0.0233,
          0.0233,  0.0233]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -3.6737,   0.7999],
        [ -4.1992,  -3.6677],
        [  8.2441,  15.5914],
        [ -7.1856,  18.3144],
        [-10.0756,   5.6687],
        [ 19.2967,   5.8635],
        [-17.3578, -11.8486],
        [-12.9156,  -4.5415],
        [ 12.5885,   0.1007],
        [ -2.0953,   0.2987]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([  7.7646,  -1.1888,  14.7651,  19.2006,   8.2751,   3.7539,  -9.8614,
         -3.9745, -10.8284,  -3.9123], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-2.1970e+00, -5.8569e-01,  1.3803e+00, -8.0239e-02, -1.5694e+00,
         -1.5989e+00, -2.5425e-01, -2.8924e-01, -2.6645e-01, -2.0347e-02],
        [-2.1753e+00,  3.1874e-01, -2.2238e+00, -3.7313e+00, -4.9470e+00,
         -4.9097e+00,  6.1914e+00,  4.9558e+00,  1.5007e+00, -1.7088e-01],
        [-2.3722e+00, -1.7907e-01, -1.9660e-01, -5.8506e-01, -6.3981e-01,
         -1.4176e+00, -1.7795e-01, -1.8825e-01, -2.7469e-01, -1.7096e-02],
        [-3.5488e+00,  5.1315e+00, -1.6391e+01, -3.9452e+00, -8.4709e+00,
         -1.4932e+01,  1.6265e+01,  1.2396e+01, -1.0356e+01,  6.5247e-01],
        [ 2.2088e+00,  3.2900e+00, -5.5379e+00, -1.9713e+01, -1.3284e+00,
         -4.0049e+00,  3.9627e+00,  1.7561e+01, -1.2202e+01,  2.6551e-01],
        [-7.4664e-01,  8.9035e-02,  1.4238e-01, -6.9841e-02, -1.7524e+00,
         -2.8330e+00, -8.1234e+00, -9.9589e+00,  4.0199e-01, -5.6963e-02],
        [-2.0443e+00,  1.8793e+00, -1.1013e+00, -2.8650e+00, -1.2482e+00,
         -1.8545e+00,  1.3659e+00,  1.8028e-01,  1.9866e+00, -1.0606e-02],
        [-1.3178e-01,  2.2324e+00, -4.0280e+00,  8.8983e+00,  5.8777e+00,
         -2.3496e+00, -1.2493e+01, -2.4238e+00, -5.4874e+00,  8.8007e-02],
        [-1.5675e+00,  1.8739e+00,  1.9660e+00, -1.0703e+01,  4.2812e+00,
         -9.5338e-01,  4.0024e-01,  6.0843e+00, -4.9924e-01,  7.4379e-02],
        [-1.9570e+00,  2.0130e+00,  1.3125e+00, -9.1126e+00,  2.3130e+00,
         -6.3665e-01, -4.8949e+00, -4.7822e-01, -6.6926e-01, -1.6394e-02]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-4.6344, -2.7191, -3.6789, -6.1528, -3.0934,  0.4610, -2.5189, -4.7733,
        -3.6706, -4.0488], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  1.2901,   3.6259,   0.3586,  11.0728,  -5.6211,   3.6653,   1.4760,
           0.4986,   3.5802,   3.4743],
        [ -1.2901,  -3.6258,  -0.3585, -11.0725,   5.6220,  -3.6137,  -1.4760,
          -0.6636,  -3.5802,  -3.4742]], device='cuda:0'))])
xi:  [1.]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 450.990394236031
W_T_median: 179.1548385475072
W_T_pctile_5: -117.55020943136878
W_T_CVAR_5_pct: -165.311185317876
Average q (qsum/M+1):  53.61731744581653
Optimal xi:  [1.]
Expected(across Rb) median(across samples) p_equity:  0.30280039037267364
obj fun:  tensor(-1110.4813, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 1.0
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[  2.4235,  -1.0921],
        [  3.2637,  -1.6524],
        [ -1.1181,   0.5197],
        [ -1.1181,   0.5197],
        [ -1.1181,   0.5197],
        [-17.7066,   2.0801],
        [  8.5407,  -9.3993],
        [ -4.5438, -12.9611],
        [ -1.1181,   0.5197],
        [-14.1467,   0.5270]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([  3.1713,   2.1736,  -2.0104,  -2.0104,  -2.0104,  15.4307, -11.5119,
        -12.2199,  -2.0104,  12.3369], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-6.5075e-01, -6.4857e-01, -2.1882e-02, -2.1882e-02, -2.1882e-02,
         -3.1052e-01, -1.1155e-01,  1.3993e-02, -2.1882e-02, -3.0039e-01],
        [ 2.0843e+00,  2.2786e+00, -5.0251e-03, -5.0250e-03, -5.0247e-03,
         -1.0906e+01,  1.3163e+01,  1.5235e+01, -5.0251e-03, -4.8042e+00],
        [-3.6918e+00, -1.5173e+00, -1.0161e-02, -1.0160e-02, -1.0160e-02,
          1.1712e+01, -1.4705e+01, -1.4879e+01, -1.0160e-02,  5.4096e+00],
        [-6.5075e-01, -6.4857e-01, -2.1882e-02, -2.1882e-02, -2.1882e-02,
         -3.1052e-01, -1.1155e-01,  1.3993e-02, -2.1882e-02, -3.0039e-01],
        [ 1.5326e+00,  1.7105e+00,  7.1651e-02,  7.1651e-02,  7.1651e-02,
         -8.7499e+00,  1.0004e+01,  1.2117e+01,  7.1651e-02, -3.3101e+00],
        [-6.5075e-01, -6.4857e-01, -2.1882e-02, -2.1882e-02, -2.1882e-02,
         -3.1052e-01, -1.1155e-01,  1.3993e-02, -2.1882e-02, -3.0039e-01],
        [-6.5075e-01, -6.4857e-01, -2.1882e-02, -2.1882e-02, -2.1882e-02,
         -3.1052e-01, -1.1155e-01,  1.3993e-02, -2.1882e-02, -3.0039e-01],
        [-6.5075e-01, -6.4857e-01, -2.1882e-02, -2.1882e-02, -2.1882e-02,
         -3.1052e-01, -1.1155e-01,  1.3993e-02, -2.1882e-02, -3.0039e-01],
        [-6.5075e-01, -6.4857e-01, -2.1882e-02, -2.1882e-02, -2.1882e-02,
         -3.1052e-01, -1.1155e-01,  1.3993e-02, -2.1882e-02, -3.0039e-01],
        [-6.5075e-01, -6.4857e-01, -2.1882e-02, -2.1882e-02, -2.1882e-02,
         -3.1052e-01, -1.1155e-01,  1.3993e-02, -2.1882e-02, -3.0039e-01]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.6553, -0.3403, -2.5267, -0.6553, -0.6960, -0.6553, -0.6553, -0.6553,
        -0.6553, -0.6553], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.0153, -11.0796,  12.8151,  -0.0153,  -6.1410,  -0.0153,  -0.0153,
          -0.0153,  -0.0153,  -0.0153]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[  1.2650,   0.3512],
        [  0.0918,   1.5418],
        [  6.3455,   9.8287],
        [ -4.5230,   9.7384],
        [-12.8493,  -1.5793],
        [ 17.8691,   8.4248],
        [-16.4041, -12.3591],
        [-15.5023,  -3.5395],
        [ 13.7700,  -3.5361],
        [-12.2830,   4.6490]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([  4.2318,  -3.0703,   9.2314,  24.9200,   7.8249,   5.8896, -11.2169,
         -0.0595, -15.7862,   6.7795], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-2.2997e+00, -2.0676e-01,  2.3689e-03, -2.8640e+00, -1.1867e+00,
         -3.1973e+00,  1.2972e+00,  7.9184e-02,  1.5376e+00, -3.7973e-02],
        [-8.9949e+00, -1.1770e-01, -9.8855e+00,  3.3281e+00, -1.9963e+00,
         -1.2640e+01,  1.6831e+01,  1.3555e+01, -4.6470e+00, -5.5358e+00],
        [ 1.2315e-01, -2.4542e-01, -3.9543e+00,  3.3090e+00,  4.0371e+00,
         -5.3906e+00,  1.5524e+01,  1.8635e+00, -1.3849e+01, -1.4950e+01],
        [-1.5520e+00,  2.3557e+00, -8.4267e-01, -8.6163e-01,  9.4663e-01,
         -6.5782e-01, -5.2780e+00,  2.3616e+00,  9.4731e-01,  9.4729e-01],
        [-1.6136e+00, -1.8862e-01, -8.8050e-01, -1.3917e+00, -6.8947e-01,
         -1.5015e+00, -2.1649e-01, -1.2937e-02, -5.1213e-01, -2.0258e-01],
        [-4.0808e-01, -4.6569e-01, -3.6844e-03, -5.2848e+00, -1.3247e+00,
         -3.6420e+00,  1.2695e+00, -5.3845e-01,  1.3329e+00, -1.5792e-02],
        [-1.8272e+00,  6.8210e-01, -3.7448e+00,  9.6519e-01,  2.8391e+00,
         -1.0153e+00,  6.9068e-01, -2.9290e+00,  5.1922e-01, -5.1157e+00],
        [-1.9680e+00, -2.6551e-01,  3.6174e-01, -3.2592e+00, -3.2525e-01,
         -3.8291e+00,  1.8011e+00,  4.2829e-01,  1.6015e+00,  3.6723e-01],
        [-2.0762e+00, -1.6770e+00,  6.1840e-01, -3.9203e+00, -1.2041e+00,
          1.3016e+00,  1.1952e+00, -1.1646e+00,  6.1830e+00,  1.0647e-01],
        [ 6.4841e-02, -4.1762e+00,  5.8507e+00, -1.9681e+00,  4.3556e+00,
         -2.7493e-02, -3.4297e+01,  4.7068e+00,  1.4538e+01,  1.9973e+01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-2.6266, -8.8154, -5.4064, -1.6762, -1.6384, -1.7271, -2.1005, -2.0354,
        -2.9538, -4.2311], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  0.8406,  12.8334,  -5.4653,  -1.2602,  -0.0129,   1.6505,  -1.3998,
           0.4322,   0.4573,   0.3519],
        [ -0.8405, -12.8271,   5.4701,   1.2602,   0.0129,  -1.6502,   1.3998,
          -0.4327,  -0.4573,  -0.3519]], device='cuda:0'))])
loaded xi:  1.5
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -824.261573876893
min fval:  -824.261573876893
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[  2.4235,  -1.0921],
        [  3.2637,  -1.6524],
        [ -1.1181,   0.5197],
        [ -1.1181,   0.5197],
        [ -1.1181,   0.5197],
        [-17.7066,   2.0801],
        [  8.5407,  -9.3993],
        [ -4.5438, -12.9611],
        [ -1.1181,   0.5197],
        [-14.1467,   0.5270]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([  3.1713,   2.1736,  -2.0104,  -2.0104,  -2.0104,  15.4307, -11.5119,
        -12.2199,  -2.0104,  12.3369], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-6.5075e-01, -6.4857e-01, -2.1882e-02, -2.1882e-02, -2.1882e-02,
         -3.1052e-01, -1.1155e-01,  1.3993e-02, -2.1882e-02, -3.0039e-01],
        [ 2.0843e+00,  2.2786e+00, -5.0251e-03, -5.0250e-03, -5.0247e-03,
         -1.0906e+01,  1.3163e+01,  1.5235e+01, -5.0251e-03, -4.8042e+00],
        [-3.6918e+00, -1.5173e+00, -1.0161e-02, -1.0160e-02, -1.0160e-02,
          1.1712e+01, -1.4705e+01, -1.4879e+01, -1.0160e-02,  5.4096e+00],
        [-6.5075e-01, -6.4857e-01, -2.1882e-02, -2.1882e-02, -2.1882e-02,
         -3.1052e-01, -1.1155e-01,  1.3993e-02, -2.1882e-02, -3.0039e-01],
        [ 1.5326e+00,  1.7105e+00,  7.1651e-02,  7.1651e-02,  7.1651e-02,
         -8.7499e+00,  1.0004e+01,  1.2117e+01,  7.1651e-02, -3.3101e+00],
        [-6.5075e-01, -6.4857e-01, -2.1882e-02, -2.1882e-02, -2.1882e-02,
         -3.1052e-01, -1.1155e-01,  1.3993e-02, -2.1882e-02, -3.0039e-01],
        [-6.5075e-01, -6.4857e-01, -2.1882e-02, -2.1882e-02, -2.1882e-02,
         -3.1052e-01, -1.1155e-01,  1.3993e-02, -2.1882e-02, -3.0039e-01],
        [-6.5075e-01, -6.4857e-01, -2.1882e-02, -2.1882e-02, -2.1882e-02,
         -3.1052e-01, -1.1155e-01,  1.3993e-02, -2.1882e-02, -3.0039e-01],
        [-6.5075e-01, -6.4857e-01, -2.1882e-02, -2.1882e-02, -2.1882e-02,
         -3.1052e-01, -1.1155e-01,  1.3993e-02, -2.1882e-02, -3.0039e-01],
        [-6.5075e-01, -6.4857e-01, -2.1882e-02, -2.1882e-02, -2.1882e-02,
         -3.1052e-01, -1.1155e-01,  1.3993e-02, -2.1882e-02, -3.0039e-01]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.6553, -0.3403, -2.5267, -0.6553, -0.6960, -0.6553, -0.6553, -0.6553,
        -0.6553, -0.6553], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.0153, -11.0796,  12.8151,  -0.0153,  -6.1410,  -0.0153,  -0.0153,
          -0.0153,  -0.0153,  -0.0153]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[  1.2650,   0.3512],
        [  0.0918,   1.5418],
        [  6.3455,   9.8287],
        [ -4.5230,   9.7384],
        [-12.8493,  -1.5793],
        [ 17.8691,   8.4248],
        [-16.4041, -12.3591],
        [-15.5023,  -3.5395],
        [ 13.7700,  -3.5361],
        [-12.2830,   4.6490]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([  4.2318,  -3.0703,   9.2314,  24.9200,   7.8249,   5.8896, -11.2169,
         -0.0595, -15.7862,   6.7795], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-2.2997e+00, -2.0676e-01,  2.3689e-03, -2.8640e+00, -1.1867e+00,
         -3.1973e+00,  1.2972e+00,  7.9184e-02,  1.5376e+00, -3.7973e-02],
        [-8.9949e+00, -1.1770e-01, -9.8855e+00,  3.3281e+00, -1.9963e+00,
         -1.2640e+01,  1.6831e+01,  1.3555e+01, -4.6470e+00, -5.5358e+00],
        [ 1.2315e-01, -2.4542e-01, -3.9543e+00,  3.3090e+00,  4.0371e+00,
         -5.3906e+00,  1.5524e+01,  1.8635e+00, -1.3849e+01, -1.4950e+01],
        [-1.5520e+00,  2.3557e+00, -8.4267e-01, -8.6163e-01,  9.4663e-01,
         -6.5782e-01, -5.2780e+00,  2.3616e+00,  9.4731e-01,  9.4729e-01],
        [-1.6136e+00, -1.8862e-01, -8.8050e-01, -1.3917e+00, -6.8947e-01,
         -1.5015e+00, -2.1649e-01, -1.2937e-02, -5.1213e-01, -2.0258e-01],
        [-4.0808e-01, -4.6569e-01, -3.6844e-03, -5.2848e+00, -1.3247e+00,
         -3.6420e+00,  1.2695e+00, -5.3845e-01,  1.3329e+00, -1.5792e-02],
        [-1.8272e+00,  6.8210e-01, -3.7448e+00,  9.6519e-01,  2.8391e+00,
         -1.0153e+00,  6.9068e-01, -2.9290e+00,  5.1922e-01, -5.1157e+00],
        [-1.9680e+00, -2.6551e-01,  3.6174e-01, -3.2592e+00, -3.2525e-01,
         -3.8291e+00,  1.8011e+00,  4.2829e-01,  1.6015e+00,  3.6723e-01],
        [-2.0762e+00, -1.6770e+00,  6.1840e-01, -3.9203e+00, -1.2041e+00,
          1.3016e+00,  1.1952e+00, -1.1646e+00,  6.1830e+00,  1.0647e-01],
        [ 6.4841e-02, -4.1762e+00,  5.8507e+00, -1.9681e+00,  4.3556e+00,
         -2.7493e-02, -3.4297e+01,  4.7068e+00,  1.4538e+01,  1.9973e+01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-2.6266, -8.8154, -5.4064, -1.6762, -1.6384, -1.7271, -2.1005, -2.0354,
        -2.9538, -4.2311], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  0.8406,  12.8334,  -5.4653,  -1.2602,  -0.0129,   1.6505,  -1.3998,
           0.4322,   0.4573,   0.3519],
        [ -0.8405, -12.8271,   5.4701,   1.2602,   0.0129,  -1.6502,   1.3998,
          -0.4327,  -0.4573,  -0.3519]], device='cuda:0'))])
xi:  [1.5]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 603.804184454876
W_T_median: 232.3168899084507
W_T_pctile_5: -114.40893464909551
W_T_CVAR_5_pct: -154.91432667276717
Average q (qsum/M+1):  53.16101861769153
Optimal xi:  [1.5]
Expected(across Rb) median(across samples) p_equity:  0.3550206219156583
obj fun:  tensor(-824.2616, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 1.5
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[  1.4375,  -0.3778],
        [  1.7405,  -0.3984],
        [ -1.2847,   0.5117],
        [ -1.2847,   0.5117],
        [ -1.2847,   0.5117],
        [-23.2145,   1.9576],
        [ 14.3943, -11.6583],
        [ -4.3903, -14.9793],
        [ -1.2847,   0.5117],
        [-18.1982,   1.2017]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([  4.5428,   3.6631,  -3.1070,  -3.1070,  -3.1070,  17.5939, -11.3304,
        -11.9495,  -3.1070,  13.9510], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-8.0069e-01, -7.9631e-01, -9.7078e-03, -9.7078e-03, -9.7078e-03,
         -4.3679e-01, -1.8447e-01, -4.2241e-02, -9.7078e-03, -4.3351e-01],
        [ 2.0926e+00,  2.1998e+00,  2.1658e-01,  2.1658e-01,  2.1658e-01,
         -1.6208e+01,  1.7288e+01,  1.5616e+01,  2.1658e-01, -4.8332e+00],
        [-2.6691e+00, -5.1832e-01,  1.7965e-01,  1.7965e-01,  1.7965e-01,
          1.3726e+01, -1.5488e+01, -1.6681e+01,  1.7965e-01,  4.3313e+00],
        [-8.0069e-01, -7.9631e-01, -9.7078e-03, -9.7078e-03, -9.7078e-03,
         -4.3679e-01, -1.8447e-01, -4.2241e-02, -9.7078e-03, -4.3351e-01],
        [-1.0730e-01, -6.1970e-02,  1.9040e-01,  1.9040e-01,  1.9040e-01,
         -5.7292e+00, -2.5064e+01,  2.1733e+01,  1.9040e-01, -1.6837e+00],
        [-8.0069e-01, -7.9631e-01, -9.7078e-03, -9.7078e-03, -9.7078e-03,
         -4.3679e-01, -1.8447e-01, -4.2241e-02, -9.7078e-03, -4.3351e-01],
        [-8.0069e-01, -7.9631e-01, -9.7078e-03, -9.7078e-03, -9.7078e-03,
         -4.3679e-01, -1.8447e-01, -4.2241e-02, -9.7078e-03, -4.3351e-01],
        [-8.0069e-01, -7.9631e-01, -9.7078e-03, -9.7078e-03, -9.7078e-03,
         -4.3679e-01, -1.8447e-01, -4.2241e-02, -9.7078e-03, -4.3351e-01],
        [-8.0069e-01, -7.9631e-01, -9.7078e-03, -9.7078e-03, -9.7078e-03,
         -4.3679e-01, -1.8447e-01, -4.2241e-02, -9.7078e-03, -4.3351e-01],
        [-8.0069e-01, -7.9631e-01, -9.7078e-03, -9.7078e-03, -9.7078e-03,
         -4.3679e-01, -1.8447e-01, -4.2241e-02, -9.7078e-03, -4.3351e-01]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.8048, -0.0888, -1.6513, -0.8048, -1.6477, -0.8048, -0.8048, -0.8048,
        -0.8048, -0.8048], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.0236, -15.0327,  14.6943,  -0.0236, -13.1863,  -0.0236,  -0.0236,
          -0.0236,  -0.0236,  -0.0236]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -6.0957,  -8.4957],
        [  0.8002,   3.7843],
        [  2.3106,  13.9821],
        [ -2.4631,   6.7792],
        [-18.6799,  -1.6292],
        [ 16.5741,  11.4748],
        [-19.9886, -11.9226],
        [-22.3845,  -4.7535],
        [ 16.3362,  -2.4055],
        [-16.5295,  10.6751]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -2.8243,  -2.1988,  12.1489,  24.6994,  12.3345,   5.8143,  -9.5439,
          2.1475, -19.3408,   9.9517], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ -0.5771,  -1.9307,  -0.6448,  -2.2382,  -3.4194,  -2.4017,   0.5134,
           0.6573,   3.0723,  -0.5028],
        [-12.6125,  -0.3165, -26.9235,   4.3783,  -3.2663,  -1.7385,  20.4554,
           8.2010,  -6.3963,   3.3470],
        [ -2.2096,  -1.1753, -14.0666,   3.2536,   6.0292,  -4.3005,  12.0483,
           0.3537, -14.8268,  -6.0557],
        [  0.1451,  -5.6654,   1.9069,  -2.4348,   0.4352,   0.7165,   1.8654,
           1.5748,   1.1857,   2.9741],
        [ -0.8749,  -1.4515,  -0.7423,  -2.6328,  -3.3632,  -2.0387,   0.6077,
           0.4411,   2.6180,  -0.5688],
        [ -1.4958,  -0.7834,  -0.8132,  -3.0602,  -1.6849,  -1.4325,   0.3082,
           0.0390,   1.3887,  -0.4431],
        [  0.1370,  -2.9217,   3.1690,  -3.4979,  -1.0010,  -2.0207,  -0.0846,
          -0.5013,   0.4737,   0.5754],
        [ -0.4155,  -2.1773,  -0.6580,  -1.9773,  -3.5275,  -2.5522,   0.4462,
           0.5151,   3.2764,  -0.4759],
        [ -0.5836,   0.0565,  -0.5413,  -2.9593,  -0.2518,  -0.7318,   0.1858,
          -0.1330,  -0.1275,  -0.0858],
        [  1.4487,  -3.3775,   7.6952,  -1.1672,  -3.4194,   5.8575, -24.7937,
           4.1733,   0.5762,  26.6797]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -2.2041, -12.5530,  -7.7057,  -2.8691,  -2.5203,  -2.9194,  -4.7343,
         -2.0243,  -3.8041,  -3.4467], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  1.6905,  14.9191,  -6.8886,   0.8938,   1.2509,   0.2170,   0.4034,
           1.9017,  -0.0989,   0.3362],
        [ -1.6905, -14.9088,   6.9009,  -0.8938,  -1.2509,  -0.2170,  -0.4032,
          -1.9017,   0.0989,  -0.3361]], device='cuda:0'))])
loaded xi:  3.0
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -1371.029102973991
min fval:  -1371.029102973991
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[  1.4375,  -0.3778],
        [  1.7405,  -0.3984],
        [ -1.2847,   0.5117],
        [ -1.2847,   0.5117],
        [ -1.2847,   0.5117],
        [-23.2145,   1.9576],
        [ 14.3943, -11.6583],
        [ -4.3903, -14.9793],
        [ -1.2847,   0.5117],
        [-18.1982,   1.2017]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([  4.5428,   3.6631,  -3.1070,  -3.1070,  -3.1070,  17.5939, -11.3304,
        -11.9495,  -3.1070,  13.9510], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-8.0069e-01, -7.9631e-01, -9.7078e-03, -9.7078e-03, -9.7078e-03,
         -4.3679e-01, -1.8447e-01, -4.2241e-02, -9.7078e-03, -4.3351e-01],
        [ 2.0926e+00,  2.1998e+00,  2.1658e-01,  2.1658e-01,  2.1658e-01,
         -1.6208e+01,  1.7288e+01,  1.5616e+01,  2.1658e-01, -4.8332e+00],
        [-2.6691e+00, -5.1832e-01,  1.7965e-01,  1.7965e-01,  1.7965e-01,
          1.3726e+01, -1.5488e+01, -1.6681e+01,  1.7965e-01,  4.3313e+00],
        [-8.0069e-01, -7.9631e-01, -9.7078e-03, -9.7078e-03, -9.7078e-03,
         -4.3679e-01, -1.8447e-01, -4.2241e-02, -9.7078e-03, -4.3351e-01],
        [-1.0730e-01, -6.1970e-02,  1.9040e-01,  1.9040e-01,  1.9040e-01,
         -5.7292e+00, -2.5064e+01,  2.1733e+01,  1.9040e-01, -1.6837e+00],
        [-8.0069e-01, -7.9631e-01, -9.7078e-03, -9.7078e-03, -9.7078e-03,
         -4.3679e-01, -1.8447e-01, -4.2241e-02, -9.7078e-03, -4.3351e-01],
        [-8.0069e-01, -7.9631e-01, -9.7078e-03, -9.7078e-03, -9.7078e-03,
         -4.3679e-01, -1.8447e-01, -4.2241e-02, -9.7078e-03, -4.3351e-01],
        [-8.0069e-01, -7.9631e-01, -9.7078e-03, -9.7078e-03, -9.7078e-03,
         -4.3679e-01, -1.8447e-01, -4.2241e-02, -9.7078e-03, -4.3351e-01],
        [-8.0069e-01, -7.9631e-01, -9.7078e-03, -9.7078e-03, -9.7078e-03,
         -4.3679e-01, -1.8447e-01, -4.2241e-02, -9.7078e-03, -4.3351e-01],
        [-8.0069e-01, -7.9631e-01, -9.7078e-03, -9.7078e-03, -9.7078e-03,
         -4.3679e-01, -1.8447e-01, -4.2241e-02, -9.7078e-03, -4.3351e-01]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.8048, -0.0888, -1.6513, -0.8048, -1.6477, -0.8048, -0.8048, -0.8048,
        -0.8048, -0.8048], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.0236, -15.0327,  14.6943,  -0.0236, -13.1863,  -0.0236,  -0.0236,
          -0.0236,  -0.0236,  -0.0236]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -6.0957,  -8.4957],
        [  0.8002,   3.7843],
        [  2.3106,  13.9821],
        [ -2.4631,   6.7792],
        [-18.6799,  -1.6292],
        [ 16.5741,  11.4748],
        [-19.9886, -11.9226],
        [-22.3845,  -4.7535],
        [ 16.3362,  -2.4055],
        [-16.5295,  10.6751]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -2.8243,  -2.1988,  12.1489,  24.6994,  12.3345,   5.8143,  -9.5439,
          2.1475, -19.3408,   9.9517], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ -0.5771,  -1.9307,  -0.6448,  -2.2382,  -3.4194,  -2.4017,   0.5134,
           0.6573,   3.0723,  -0.5028],
        [-12.6125,  -0.3165, -26.9235,   4.3783,  -3.2663,  -1.7385,  20.4554,
           8.2010,  -6.3963,   3.3470],
        [ -2.2096,  -1.1753, -14.0666,   3.2536,   6.0292,  -4.3005,  12.0483,
           0.3537, -14.8268,  -6.0557],
        [  0.1451,  -5.6654,   1.9069,  -2.4348,   0.4352,   0.7165,   1.8654,
           1.5748,   1.1857,   2.9741],
        [ -0.8749,  -1.4515,  -0.7423,  -2.6328,  -3.3632,  -2.0387,   0.6077,
           0.4411,   2.6180,  -0.5688],
        [ -1.4958,  -0.7834,  -0.8132,  -3.0602,  -1.6849,  -1.4325,   0.3082,
           0.0390,   1.3887,  -0.4431],
        [  0.1370,  -2.9217,   3.1690,  -3.4979,  -1.0010,  -2.0207,  -0.0846,
          -0.5013,   0.4737,   0.5754],
        [ -0.4155,  -2.1773,  -0.6580,  -1.9773,  -3.5275,  -2.5522,   0.4462,
           0.5151,   3.2764,  -0.4759],
        [ -0.5836,   0.0565,  -0.5413,  -2.9593,  -0.2518,  -0.7318,   0.1858,
          -0.1330,  -0.1275,  -0.0858],
        [  1.4487,  -3.3775,   7.6952,  -1.1672,  -3.4194,   5.8575, -24.7937,
           4.1733,   0.5762,  26.6797]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -2.2041, -12.5530,  -7.7057,  -2.8691,  -2.5203,  -2.9194,  -4.7343,
         -2.0243,  -3.8041,  -3.4467], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  1.6905,  14.9191,  -6.8886,   0.8938,   1.2509,   0.2170,   0.4034,
           1.9017,  -0.0989,   0.3362],
        [ -1.6905, -14.9088,   6.9009,  -0.8938,  -1.2509,  -0.2170,  -0.4032,
          -1.9017,   0.0989,  -0.3361]], device='cuda:0'))])
xi:  [3.]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 648.6556063735106
W_T_median: 371.915392867322
W_T_pctile_5: 44.446385532911926
W_T_CVAR_5_pct: -40.21671642334616
Average q (qsum/M+1):  49.99246314264113
Optimal xi:  [3.]
Expected(across Rb) median(across samples) p_equity:  0.27006971972684063
obj fun:  tensor(-1371.0291, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 3.0
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[  1.4610,  -0.1398],
        [ -1.3816,   0.3977],
        [ -1.3816,   0.3977],
        [ -1.3816,   0.3977],
        [ -1.3816,   0.3977],
        [-27.1288,   1.9074],
        [ 16.0799, -11.4676],
        [ -4.0385, -16.5926],
        [ -1.3816,   0.3977],
        [-21.2146,   1.2180]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([  4.7249,  -3.6215,  -3.6215,  -3.6215,  -3.6215,  19.3715, -11.0277,
        -12.9054,  -3.6215,  15.4751], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-1.3952e+00, -2.0838e-02, -2.0838e-02, -2.0838e-02, -2.0838e-02,
         -4.9201e-01, -3.5090e-01,  3.4257e-02, -2.0838e-02, -5.1455e-01],
        [ 1.7451e+00,  8.3679e-02,  8.3679e-02,  8.3679e-02,  8.3679e-02,
         -1.8142e+01,  2.1703e+01,  1.8785e+01,  8.3679e-02, -4.2501e+00],
        [-1.9742e+00,  8.0292e-03,  8.0293e-03,  8.0292e-03,  8.0291e-03,
          1.4993e+01, -1.8969e+01, -1.9413e+01,  8.0291e-03,  4.2104e+00],
        [-1.3952e+00, -2.0838e-02, -2.0838e-02, -2.0838e-02, -2.0838e-02,
         -4.9201e-01, -3.5090e-01,  3.4257e-02, -2.0838e-02, -5.1455e-01],
        [-9.0099e-01,  4.7538e-02,  4.7538e-02,  4.7537e-02,  4.7537e-02,
         -4.9983e+00, -3.4856e+01,  2.5027e+01,  4.7537e-02, -1.1567e+00],
        [-1.3952e+00, -2.0838e-02, -2.0838e-02, -2.0838e-02, -2.0838e-02,
         -4.9201e-01, -3.5090e-01,  3.4257e-02, -2.0838e-02, -5.1455e-01],
        [-1.3952e+00, -2.0838e-02, -2.0838e-02, -2.0838e-02, -2.0838e-02,
         -4.9201e-01, -3.5090e-01,  3.4257e-02, -2.0838e-02, -5.1455e-01],
        [-1.3952e+00, -2.0838e-02, -2.0838e-02, -2.0838e-02, -2.0838e-02,
         -4.9201e-01, -3.5090e-01,  3.4257e-02, -2.0838e-02, -5.1455e-01],
        [-1.3952e+00, -2.0838e-02, -2.0838e-02, -2.0838e-02, -2.0838e-02,
         -4.9201e-01, -3.5090e-01,  3.4257e-02, -2.0838e-02, -5.1455e-01],
        [-1.3952e+00, -2.0838e-02, -2.0838e-02, -2.0838e-02, -2.0838e-02,
         -4.9201e-01, -3.5090e-01,  3.4257e-02, -2.0838e-02, -5.1455e-01]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.3998, -0.2337, -1.1066, -1.3998, -2.1831, -1.3998, -1.3998, -1.3998,
        -1.3998, -1.3998], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.0658, -15.8258,  16.6339,  -0.0658, -10.5349,  -0.0658,  -0.0658,
          -0.0658,  -0.0658,  -0.0658]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[-14.5648,  -6.6254],
        [ -1.7157,   3.4006],
        [  3.4563,  16.0836],
        [ -0.7529,   4.7553],
        [-23.4535,  -2.7677],
        [ 14.1763,  11.1878],
        [-22.8144, -10.1074],
        [-26.9708,  -6.9550],
        [ 16.5507,  -1.8270],
        [-21.9029,   6.2357]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -6.6351,  -6.2055,  13.3463,  12.5654,  13.8047,   7.6272, -10.8177,
          1.4031, -22.0804,   6.6721], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 2.9662e-01, -1.0635e+00,  1.5162e+00, -3.9846e+00, -1.0979e+00,
         -1.4717e+00,  2.1058e-01, -3.8922e-02, -6.3807e-02, -1.4995e-01],
        [-6.0179e+00, -8.7511e-02, -3.4008e+01,  3.4153e+00, -3.7443e+00,
         -4.6795e+01,  2.4069e+01,  1.6336e+01, -5.7482e+00, -3.4751e+00],
        [ 4.0077e+00,  2.3447e-02, -9.6021e+00, -4.2317e-01,  1.1953e+01,
         -3.9890e+00,  1.7545e+01,  2.2460e-01, -8.0342e+00, -1.0210e+00],
        [ 3.3864e-01, -1.3040e+00,  1.1970e+00, -2.5959e+00, -8.2639e-01,
         -2.1035e+00,  1.6548e+00,  4.4372e+00,  1.3620e+00,  1.6178e+00],
        [-1.8687e+00, -2.1691e-01, -1.3448e+00, -3.4547e+00, -3.0225e+00,
         -4.0642e+00, -1.3891e+00, -5.7725e-02,  1.4545e+00, -3.5754e-01],
        [-1.0837e-01, -2.4746e-01, -4.3268e-01, -3.2392e+00, -1.0870e+00,
         -1.0936e+00, -5.4620e-02, -9.4545e-03, -2.2448e-01, -2.5057e-01],
        [-3.6295e-02, -1.0195e+00, -2.8625e+00, -2.1958e+00, -5.3394e+00,
         -2.4396e+00,  8.1201e-01, -6.5445e-01,  1.6774e+00, -1.6235e+00],
        [-4.4774e-01,  1.2622e+00, -2.9986e+00, -2.6438e+00, -5.0962e+00,
          1.9488e+00, -5.0342e-01, -1.9899e+00, -1.7468e-01, -3.4559e+00],
        [ 4.2471e+00, -1.2334e-02, -1.2408e+01, -2.2785e+00,  4.4184e+00,
         -7.5076e+00,  6.5041e+00,  3.2732e+00, -4.0548e+00, -2.5284e-01],
        [-2.6118e+00, -7.7056e+00,  1.7182e+00, -2.7421e+00,  5.2031e-01,
          6.9039e+00, -5.8150e-01,  2.6899e+00,  5.0175e+00,  7.4574e+00]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -4.3852, -14.5965, -11.1467,  -3.2388,  -2.5700,  -4.7162,  -0.8065,
         -2.1239,  -3.1178,  -5.0372], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ -0.1494,  17.8137,  -6.7450,   1.7483,   2.1822,   0.0534,   4.8845,
           3.3404,  -1.7739,   0.5799],
        [  0.1494, -17.8000,   6.7594,  -1.7482,  -2.1822,  -0.0532,  -4.8845,
          -3.3404,   1.7744,  -0.5798]], device='cuda:0'))])
loaded xi:  5.0
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -1230.416895094384
min fval:  -1230.416895094384
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[  1.4610,  -0.1398],
        [ -1.3816,   0.3977],
        [ -1.3816,   0.3977],
        [ -1.3816,   0.3977],
        [ -1.3816,   0.3977],
        [-27.1288,   1.9074],
        [ 16.0799, -11.4676],
        [ -4.0385, -16.5926],
        [ -1.3816,   0.3977],
        [-21.2146,   1.2180]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([  4.7249,  -3.6215,  -3.6215,  -3.6215,  -3.6215,  19.3715, -11.0277,
        -12.9054,  -3.6215,  15.4751], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-1.3952e+00, -2.0838e-02, -2.0838e-02, -2.0838e-02, -2.0838e-02,
         -4.9201e-01, -3.5090e-01,  3.4257e-02, -2.0838e-02, -5.1455e-01],
        [ 1.7451e+00,  8.3679e-02,  8.3679e-02,  8.3679e-02,  8.3679e-02,
         -1.8142e+01,  2.1703e+01,  1.8785e+01,  8.3679e-02, -4.2501e+00],
        [-1.9742e+00,  8.0292e-03,  8.0293e-03,  8.0292e-03,  8.0291e-03,
          1.4993e+01, -1.8969e+01, -1.9413e+01,  8.0291e-03,  4.2104e+00],
        [-1.3952e+00, -2.0838e-02, -2.0838e-02, -2.0838e-02, -2.0838e-02,
         -4.9201e-01, -3.5090e-01,  3.4257e-02, -2.0838e-02, -5.1455e-01],
        [-9.0099e-01,  4.7538e-02,  4.7538e-02,  4.7537e-02,  4.7537e-02,
         -4.9983e+00, -3.4856e+01,  2.5027e+01,  4.7537e-02, -1.1567e+00],
        [-1.3952e+00, -2.0838e-02, -2.0838e-02, -2.0838e-02, -2.0838e-02,
         -4.9201e-01, -3.5090e-01,  3.4257e-02, -2.0838e-02, -5.1455e-01],
        [-1.3952e+00, -2.0838e-02, -2.0838e-02, -2.0838e-02, -2.0838e-02,
         -4.9201e-01, -3.5090e-01,  3.4257e-02, -2.0838e-02, -5.1455e-01],
        [-1.3952e+00, -2.0838e-02, -2.0838e-02, -2.0838e-02, -2.0838e-02,
         -4.9201e-01, -3.5090e-01,  3.4257e-02, -2.0838e-02, -5.1455e-01],
        [-1.3952e+00, -2.0838e-02, -2.0838e-02, -2.0838e-02, -2.0838e-02,
         -4.9201e-01, -3.5090e-01,  3.4257e-02, -2.0838e-02, -5.1455e-01],
        [-1.3952e+00, -2.0838e-02, -2.0838e-02, -2.0838e-02, -2.0838e-02,
         -4.9201e-01, -3.5090e-01,  3.4257e-02, -2.0838e-02, -5.1455e-01]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.3998, -0.2337, -1.1066, -1.3998, -2.1831, -1.3998, -1.3998, -1.3998,
        -1.3998, -1.3998], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.0658, -15.8258,  16.6339,  -0.0658, -10.5349,  -0.0658,  -0.0658,
          -0.0658,  -0.0658,  -0.0658]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[-14.5648,  -6.6254],
        [ -1.7157,   3.4006],
        [  3.4563,  16.0836],
        [ -0.7529,   4.7553],
        [-23.4535,  -2.7677],
        [ 14.1763,  11.1878],
        [-22.8144, -10.1074],
        [-26.9708,  -6.9550],
        [ 16.5507,  -1.8270],
        [-21.9029,   6.2357]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -6.6351,  -6.2055,  13.3463,  12.5654,  13.8047,   7.6272, -10.8177,
          1.4031, -22.0804,   6.6721], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 2.9662e-01, -1.0635e+00,  1.5162e+00, -3.9846e+00, -1.0979e+00,
         -1.4717e+00,  2.1058e-01, -3.8922e-02, -6.3807e-02, -1.4995e-01],
        [-6.0179e+00, -8.7511e-02, -3.4008e+01,  3.4153e+00, -3.7443e+00,
         -4.6795e+01,  2.4069e+01,  1.6336e+01, -5.7482e+00, -3.4751e+00],
        [ 4.0077e+00,  2.3447e-02, -9.6021e+00, -4.2317e-01,  1.1953e+01,
         -3.9890e+00,  1.7545e+01,  2.2460e-01, -8.0342e+00, -1.0210e+00],
        [ 3.3864e-01, -1.3040e+00,  1.1970e+00, -2.5959e+00, -8.2639e-01,
         -2.1035e+00,  1.6548e+00,  4.4372e+00,  1.3620e+00,  1.6178e+00],
        [-1.8687e+00, -2.1691e-01, -1.3448e+00, -3.4547e+00, -3.0225e+00,
         -4.0642e+00, -1.3891e+00, -5.7725e-02,  1.4545e+00, -3.5754e-01],
        [-1.0837e-01, -2.4746e-01, -4.3268e-01, -3.2392e+00, -1.0870e+00,
         -1.0936e+00, -5.4620e-02, -9.4545e-03, -2.2448e-01, -2.5057e-01],
        [-3.6295e-02, -1.0195e+00, -2.8625e+00, -2.1958e+00, -5.3394e+00,
         -2.4396e+00,  8.1201e-01, -6.5445e-01,  1.6774e+00, -1.6235e+00],
        [-4.4774e-01,  1.2622e+00, -2.9986e+00, -2.6438e+00, -5.0962e+00,
          1.9488e+00, -5.0342e-01, -1.9899e+00, -1.7468e-01, -3.4559e+00],
        [ 4.2471e+00, -1.2334e-02, -1.2408e+01, -2.2785e+00,  4.4184e+00,
         -7.5076e+00,  6.5041e+00,  3.2732e+00, -4.0548e+00, -2.5284e-01],
        [-2.6118e+00, -7.7056e+00,  1.7182e+00, -2.7421e+00,  5.2031e-01,
          6.9039e+00, -5.8150e-01,  2.6899e+00,  5.0175e+00,  7.4574e+00]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -4.3852, -14.5965, -11.1467,  -3.2388,  -2.5700,  -4.7162,  -0.8065,
         -2.1239,  -3.1178,  -5.0372], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ -0.1494,  17.8137,  -6.7450,   1.7483,   2.1822,   0.0534,   4.8845,
           3.3404,  -1.7739,   0.5799],
        [  0.1494, -17.8000,   6.7594,  -1.7482,  -2.1822,  -0.0532,  -4.8845,
          -3.3404,   1.7744,  -0.5798]], device='cuda:0'))])
xi:  [5.]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 689.7604601265286
W_T_median: 443.03191619230614
W_T_pctile_5: 73.55572364211419
W_T_CVAR_5_pct: -24.630575216204726
Average q (qsum/M+1):  48.932439988659276
Optimal xi:  [5.]
Expected(across Rb) median(across samples) p_equity:  0.2701199479401112
obj fun:  tensor(-1230.4169, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 5.0
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -3.6378, -14.7880],
        [ -1.9735,   4.3246],
        [ -1.9786,   4.3177],
        [ -1.9798,   4.3164],
        [ -1.9808,   4.3152],
        [-32.0000,   2.7724],
        [ 20.0423, -12.8374],
        [  3.6369, -18.4097],
        [ -1.9790,   4.3173],
        [-24.5547,   5.4128]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([  1.2720, -10.4958, -10.5232, -10.5275, -10.5313,  19.4396, -12.6882,
        -14.4748, -10.5246,  14.3795], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-4.6616e-01,  1.4223e-02,  1.3359e-02,  1.3209e-02,  1.3072e-02,
         -7.5781e-01, -3.0995e-01, -5.4751e-02,  1.3310e-02, -1.5649e+00],
        [ 2.7087e-01,  2.5097e+00,  2.5950e+00,  2.6096e+00,  2.6240e+00,
         -1.9578e+01,  2.2820e+01,  2.6125e+01,  2.5995e+00, -3.5159e+00],
        [-1.4885e+00, -1.5355e+00, -1.5947e+00, -1.6078e+00, -1.6212e+00,
          1.5500e+01, -2.1251e+01, -2.2239e+01, -1.5987e+00,  2.9370e+00],
        [-4.6616e-01,  1.4223e-02,  1.3359e-02,  1.3209e-02,  1.3072e-02,
         -7.5780e-01, -3.0995e-01, -5.4751e-02,  1.3310e-02, -1.5649e+00],
        [-3.0012e+00,  6.5304e-03,  3.5209e-03,  3.0575e-03,  2.6443e-03,
         -6.1416e+00, -1.0317e+01,  2.5601e+01,  3.3703e-03, -2.4687e+00],
        [-4.6616e-01,  1.4223e-02,  1.3359e-02,  1.3209e-02,  1.3072e-02,
         -7.5781e-01, -3.0995e-01, -5.4751e-02,  1.3310e-02, -1.5649e+00],
        [-4.6616e-01,  1.4223e-02,  1.3359e-02,  1.3209e-02,  1.3072e-02,
         -7.5781e-01, -3.0995e-01, -5.4751e-02,  1.3310e-02, -1.5649e+00],
        [-4.6616e-01,  1.4223e-02,  1.3359e-02,  1.3209e-02,  1.3072e-02,
         -7.5781e-01, -3.0995e-01, -5.4751e-02,  1.3310e-02, -1.5649e+00],
        [-4.6616e-01,  1.4223e-02,  1.3359e-02,  1.3209e-02,  1.3072e-02,
         -7.5781e-01, -3.0995e-01, -5.4751e-02,  1.3310e-02, -1.5649e+00],
        [-4.6616e-01,  1.4223e-02,  1.3359e-02,  1.3209e-02,  1.3072e-02,
         -7.5780e-01, -3.0995e-01, -5.4751e-02,  1.3310e-02, -1.5649e+00]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-2.2477,  3.1596, -3.9572, -2.2477, -3.2788, -2.2477, -2.2477, -2.2477,
        -2.2477, -2.2477], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-3.6996e-03, -2.1387e+01,  1.1594e+01, -3.6999e-03, -9.5984e+00,
         -3.6996e-03, -3.6997e-03, -3.6996e-03, -3.6997e-03, -3.6997e-03]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -1.7802,   0.5837],
        [ -6.8959,   5.3157],
        [ 14.2687,  16.6164],
        [ -8.1215,   6.2961],
        [-25.9442,  -3.3063],
        [ 16.7185,  10.8515],
        [-24.7192,  -9.3475],
        [-24.5434,  -6.8463],
        [ -2.6321,   4.3823],
        [ -2.0413,  14.4971]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -5.1364, -13.0845,  12.1046,  17.1388,  14.7091,   6.9789,  -8.7806,
          2.3157,  -7.8006,  12.9384], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 5.9977e-01,  2.7103e-01, -5.7327e+00, -3.1763e+00,  1.3285e+00,
         -4.3232e-01, -7.5785e-01,  8.0726e-01,  2.5498e-01, -5.3897e-01],
        [ 8.5375e-01, -3.7964e-04, -7.2370e+01,  5.7088e+00, -5.2817e+00,
         -7.8439e+01,  1.6029e+01,  1.7036e+01,  1.3361e-02, -6.0763e+01],
        [ 4.6292e-01, -9.8672e-04, -8.5079e-01, -5.2511e-01,  1.2070e+01,
         -3.4951e+00,  8.9199e+00, -9.9611e-04,  7.0408e-04, -7.6343e+00],
        [-1.7301e-01, -8.1795e+00,  5.7146e+00, -4.3062e+00, -1.1021e+00,
          2.9155e+00,  1.1017e+01, -5.2878e-01, -2.1407e+00,  1.1967e+01],
        [ 2.1930e-01,  3.3341e-01, -3.8546e+00, -2.7464e+00,  3.8095e-01,
         -1.1908e+00, -5.7652e-01,  4.8606e-01,  3.1592e-01, -4.8090e-01],
        [ 5.9977e-01,  2.7103e-01, -5.7327e+00, -3.1763e+00,  1.3285e+00,
         -4.3233e-01, -7.5785e-01,  8.0726e-01,  2.5498e-01, -5.3897e-01],
        [-3.9576e-02,  4.7131e-07, -1.3988e-02, -2.4259e+01, -8.5186e+00,
         -8.5077e+00,  1.2314e+00,  1.0555e+00,  1.3304e-04, -7.4076e-05],
        [ 2.4798e-02,  1.2642e-03, -3.0512e+00,  1.4979e+00, -2.2437e+01,
          8.4910e-01,  4.0300e-02, -3.7744e+00, -1.9344e-03, -1.8251e+01],
        [ 2.0657e-01,  1.9495e-03, -2.8321e+01,  2.6197e+00,  3.7305e+00,
         -2.1247e+00,  1.2981e+00,  6.8341e+00,  2.0219e-04, -7.5097e+00],
        [ 5.3698e+00, -8.3104e+00,  1.7718e+00, -1.9717e+00,  2.0321e+00,
         -7.4949e-01,  1.8605e+01,  2.1101e+00,  3.9313e+00,  7.5171e+00]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -4.9033, -16.4126, -10.8229,  -3.1391,  -5.6813,  -4.9033,  -0.6461,
         -4.2175,  -5.9793,  -8.7064], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ -2.8293,  23.2371,  -5.1087,   0.4238,  -2.0101,  -2.8293,   7.2274,
           5.0796,  -3.9532,   0.5720],
        [  2.8293, -23.2247,   5.1223,  -0.4238,   2.0101,   2.8293,  -7.2274,
          -5.0796,   3.9539,  -0.5719]], device='cuda:0'))])
loaded xi:  50.0
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  48.484953695004734
min fval:  48.484953695004734
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -3.6378, -14.7880],
        [ -1.9735,   4.3246],
        [ -1.9786,   4.3177],
        [ -1.9798,   4.3164],
        [ -1.9808,   4.3152],
        [-32.0000,   2.7724],
        [ 20.0423, -12.8374],
        [  3.6369, -18.4097],
        [ -1.9790,   4.3173],
        [-24.5547,   5.4128]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([  1.2720, -10.4958, -10.5232, -10.5275, -10.5313,  19.4396, -12.6882,
        -14.4748, -10.5246,  14.3795], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-4.6616e-01,  1.4223e-02,  1.3359e-02,  1.3209e-02,  1.3072e-02,
         -7.5781e-01, -3.0995e-01, -5.4751e-02,  1.3310e-02, -1.5649e+00],
        [ 2.7087e-01,  2.5097e+00,  2.5950e+00,  2.6096e+00,  2.6240e+00,
         -1.9578e+01,  2.2820e+01,  2.6125e+01,  2.5995e+00, -3.5159e+00],
        [-1.4885e+00, -1.5355e+00, -1.5947e+00, -1.6078e+00, -1.6212e+00,
          1.5500e+01, -2.1251e+01, -2.2239e+01, -1.5987e+00,  2.9370e+00],
        [-4.6616e-01,  1.4223e-02,  1.3359e-02,  1.3209e-02,  1.3072e-02,
         -7.5780e-01, -3.0995e-01, -5.4751e-02,  1.3310e-02, -1.5649e+00],
        [-3.0012e+00,  6.5304e-03,  3.5209e-03,  3.0575e-03,  2.6443e-03,
         -6.1416e+00, -1.0317e+01,  2.5601e+01,  3.3703e-03, -2.4687e+00],
        [-4.6616e-01,  1.4223e-02,  1.3359e-02,  1.3209e-02,  1.3072e-02,
         -7.5781e-01, -3.0995e-01, -5.4751e-02,  1.3310e-02, -1.5649e+00],
        [-4.6616e-01,  1.4223e-02,  1.3359e-02,  1.3209e-02,  1.3072e-02,
         -7.5781e-01, -3.0995e-01, -5.4751e-02,  1.3310e-02, -1.5649e+00],
        [-4.6616e-01,  1.4223e-02,  1.3359e-02,  1.3209e-02,  1.3072e-02,
         -7.5781e-01, -3.0995e-01, -5.4751e-02,  1.3310e-02, -1.5649e+00],
        [-4.6616e-01,  1.4223e-02,  1.3359e-02,  1.3209e-02,  1.3072e-02,
         -7.5781e-01, -3.0995e-01, -5.4751e-02,  1.3310e-02, -1.5649e+00],
        [-4.6616e-01,  1.4223e-02,  1.3359e-02,  1.3209e-02,  1.3072e-02,
         -7.5780e-01, -3.0995e-01, -5.4751e-02,  1.3310e-02, -1.5649e+00]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-2.2477,  3.1596, -3.9572, -2.2477, -3.2788, -2.2477, -2.2477, -2.2477,
        -2.2477, -2.2477], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-3.6996e-03, -2.1387e+01,  1.1594e+01, -3.6999e-03, -9.5984e+00,
         -3.6996e-03, -3.6997e-03, -3.6996e-03, -3.6997e-03, -3.6997e-03]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -1.7802,   0.5837],
        [ -6.8959,   5.3157],
        [ 14.2687,  16.6164],
        [ -8.1215,   6.2961],
        [-25.9442,  -3.3063],
        [ 16.7185,  10.8515],
        [-24.7192,  -9.3475],
        [-24.5434,  -6.8463],
        [ -2.6321,   4.3823],
        [ -2.0413,  14.4971]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -5.1364, -13.0845,  12.1046,  17.1388,  14.7091,   6.9789,  -8.7806,
          2.3157,  -7.8006,  12.9384], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 5.9977e-01,  2.7103e-01, -5.7327e+00, -3.1763e+00,  1.3285e+00,
         -4.3232e-01, -7.5785e-01,  8.0726e-01,  2.5498e-01, -5.3897e-01],
        [ 8.5375e-01, -3.7964e-04, -7.2370e+01,  5.7088e+00, -5.2817e+00,
         -7.8439e+01,  1.6029e+01,  1.7036e+01,  1.3361e-02, -6.0763e+01],
        [ 4.6292e-01, -9.8672e-04, -8.5079e-01, -5.2511e-01,  1.2070e+01,
         -3.4951e+00,  8.9199e+00, -9.9611e-04,  7.0408e-04, -7.6343e+00],
        [-1.7301e-01, -8.1795e+00,  5.7146e+00, -4.3062e+00, -1.1021e+00,
          2.9155e+00,  1.1017e+01, -5.2878e-01, -2.1407e+00,  1.1967e+01],
        [ 2.1930e-01,  3.3341e-01, -3.8546e+00, -2.7464e+00,  3.8095e-01,
         -1.1908e+00, -5.7652e-01,  4.8606e-01,  3.1592e-01, -4.8090e-01],
        [ 5.9977e-01,  2.7103e-01, -5.7327e+00, -3.1763e+00,  1.3285e+00,
         -4.3233e-01, -7.5785e-01,  8.0726e-01,  2.5498e-01, -5.3897e-01],
        [-3.9576e-02,  4.7131e-07, -1.3988e-02, -2.4259e+01, -8.5186e+00,
         -8.5077e+00,  1.2314e+00,  1.0555e+00,  1.3304e-04, -7.4076e-05],
        [ 2.4798e-02,  1.2642e-03, -3.0512e+00,  1.4979e+00, -2.2437e+01,
          8.4910e-01,  4.0300e-02, -3.7744e+00, -1.9344e-03, -1.8251e+01],
        [ 2.0657e-01,  1.9495e-03, -2.8321e+01,  2.6197e+00,  3.7305e+00,
         -2.1247e+00,  1.2981e+00,  6.8341e+00,  2.0219e-04, -7.5097e+00],
        [ 5.3698e+00, -8.3104e+00,  1.7718e+00, -1.9717e+00,  2.0321e+00,
         -7.4949e-01,  1.8605e+01,  2.1101e+00,  3.9313e+00,  7.5171e+00]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -4.9033, -16.4126, -10.8229,  -3.1391,  -5.6813,  -4.9033,  -0.6461,
         -4.2175,  -5.9793,  -8.7064], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ -2.8293,  23.2371,  -5.1087,   0.4238,  -2.0101,  -2.8293,   7.2274,
           5.0796,  -3.9532,   0.5720],
        [  2.8293, -23.2247,   5.1223,  -0.4238,   2.0101,   2.8293,  -7.2274,
          -5.0796,   3.9539,  -0.5719]], device='cuda:0'))])
xi:  [50.]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 715.507585348164
W_T_median: 490.0525777981688
W_T_pctile_5: 124.2019616642696
W_T_CVAR_5_pct: -5.737101441121659
Average q (qsum/M+1):  46.45783455141129
Optimal xi:  [50.]
Expected(across Rb) median(across samples) p_equity:  0.22270660251379013
obj fun:  tensor(48.4850, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 50.0
-----------------------------------------------

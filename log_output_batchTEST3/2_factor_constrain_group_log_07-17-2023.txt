/home/marcchen/Documents/constrain_factor/researchcode/exp_config_json_files/multi_portfolio_TEST3_split_1991.json
Starting at: 
17-07-23_14:50

 numpy seed:  2  


 pytorch seed:  2  

Key parameters-------
paths: 256000
iterations: 10
batchsize: 10
remove neg:  False
w constaint activation:  yy_fix_jan29


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = Paper_FactorInv_Factor2
timeseries_basket['basket_desc'] = Factor2 portfolio for paper: Basic, size and value
timeseries_basket['basket_columns'] = 
['T30_real_ret', 'B10_real_ret', 'VWD_real_ret', 'Size_Lo30_real_ret', 'Value_Hi30_real_ret']
############# End: defined asset  basket #################
               Cash_nom_ret  Size_Lo30_nom_ret  ...  VWD_nom_ret  EWD_nom_ret
My identifier                                   ...                          
192601                  0.0                NaN  ...     0.000561     0.023174
192602                  0.0                NaN  ...    -0.033046    -0.053510
192603                  0.0                NaN  ...    -0.064002    -0.096824
192604                  0.0                NaN  ...     0.037029     0.032975
192605                  0.0                NaN  ...     0.012095     0.001035

[5 rows x 16 columns]
               Cash_nom_ret  Size_Lo30_nom_ret  ...  VWD_nom_ret  EWD_nom_ret
My identifier                                   ...                          
202208                  NaN            -0.0020  ...    -0.036240    -0.011556
202209                  NaN            -0.0955  ...    -0.091324    -0.099903
202210                  NaN             0.0883  ...     0.077403     0.049863
202211                  NaN            -0.0076  ...     0.052365     0.028123
202212                  NaN            -0.0457  ...    -0.057116    -0.047241

[5 rows x 16 columns]


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = Paper_FactorInv_Factor2
timeseries_basket['basket_desc'] = Factor2 portfolio for paper: Basic, size and value
timeseries_basket['basket_columns'] = 
['T30_nom_ret', 'B10_nom_ret', 'VWD_nom_ret', 'Size_Lo30_nom_ret', 'Value_Hi30_nom_ret']
############# End: defined asset  basket #################
               Size_Lo30_nom_ret  Value_Hi30_nom_ret  ...  B10_nom_ret  VWD_nom_ret
My identifier                                         ...                          
192607                    0.0014              0.0154  ...     0.005383     0.031411
192608                    0.0319              0.0561  ...     0.005363     0.028647
192609                   -0.0173             -0.0071  ...     0.005343     0.005787
192610                   -0.0294             -0.0355  ...     0.005323    -0.028996
192611                   -0.0038              0.0294  ...     0.005303     0.028554

[5 rows x 6 columns]
               Size_Lo30_nom_ret  Value_Hi30_nom_ret  ...  B10_nom_ret  VWD_nom_ret
My identifier                                         ...                          
202208                   -0.0020             -0.0164  ...    -0.043289    -0.036240
202209                   -0.0955             -0.0871  ...    -0.050056    -0.091324
202210                    0.0883              0.1486  ...    -0.014968     0.077403
202211                   -0.0076              0.0462  ...     0.040789     0.052365
202212                   -0.0457             -0.0499  ...    -0.018566    -0.057116

[5 rows x 6 columns]
Indices constructed with column names:
Index(['date_for_plt', 'Size_Lo30_nom_ret_ind', 'Value_Hi30_nom_ret_ind',
       'CPI_nom_ret_ind', 'T30_nom_ret_ind', 'B10_nom_ret_ind',
       'VWD_nom_ret_ind'],
      dtype='object')
############# Updated: defined asset basket #################
timeseries_basket['data_df_mean'] = 
T30_real_ret           0.000229
B10_real_ret           0.001637
VWD_real_ret           0.006759
Size_Lo30_real_ret     0.009939
Value_Hi30_real_ret    0.010052
dtype: float64


timeseries_basket['data_df_stdev'] = 
T30_real_ret           0.005227
B10_real_ret           0.019258
VWD_real_ret           0.053610
Size_Lo30_real_ret     0.082598
Value_Hi30_real_ret    0.072063
dtype: float64


timeseries_basket['data_df_corr'] = 
                     T30_real_ret  ...  Value_Hi30_real_ret
T30_real_ret             1.000000  ...             0.018239
B10_real_ret             0.351722  ...             0.031301
VWD_real_ret             0.068448  ...             0.909335
Size_Lo30_real_ret       0.014412  ...             0.908542
Value_Hi30_real_ret      0.018239  ...             1.000000

[5 rows x 5 columns]


timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names', 'data_df', 'data_df_mean', 'data_df_stdev', 'data_df_corr'])
############# End: updated: defined asset basket #################
-----------------------------------------------
Dates to be REMOVED due to missing values (should be at *start* only due to trading signals):
Int64Index([], dtype='int64')
-----------------------------------------------
Dates from available data for bootstrapping:
Start: 192607
End: 202212
-----------------------------------------------
Bootstrap block size: 6
-----------------------------------------------
Dates USED bootstrapping:
Start: 199201
End: 202212
-----------------------------------------------
0.0% of bootstrap sample done.
5.0% of bootstrap sample done.
10.0% of bootstrap sample done.
15.0% of bootstrap sample done.
20.0% of bootstrap sample done.
25.0% of bootstrap sample done.
30.0% of bootstrap sample done.
35.0% of bootstrap sample done.
40.0% of bootstrap sample done.
45.0% of bootstrap sample done.
50.0% of bootstrap sample done.
55.00000000000001% of bootstrap sample done.
60.0% of bootstrap sample done.
65.0% of bootstrap sample done.
70.0% of bootstrap sample done.
75.0% of bootstrap sample done.
80.0% of bootstrap sample done.
85.0% of bootstrap sample done.
90.0% of bootstrap sample done.
95.0% of bootstrap sample done.
Withdrawal NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       1       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      13  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      13  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       1              none   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 13)     True          13  
2     (13, 13)     True          13  
3      (13, 1)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
Allocation NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       6       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      13  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      13  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       6              none   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 13)     True          13  
2     (13, 13)     True          13  
3      (13, 6)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        6              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 6)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
{'methods': ['Adam'], 'output_progress': False, 'tol': 1e-06, 'itbound_scipy_algorithms': 1000, 'check_exit_criteria': False, 'nit_running_min': 0, 'itbound_SGD_algorithms': 10, 'nit_IterateAveragingStart': 9, 'batchsize': 10, 'SGD_learningrate': 50.0, 'Adagrad_epsilon': 1e-08, 'Adagrad_eta': 1.0, 'Adadelta_ewma': 0.9, 'Adadelta_epsilon': 1e-08, 'RMSprop_ewma': 0.8, 'RMSprop_epsilon': 1e-08, 'RMSprop_eta': 0.1, 'Adam_ewma_1': 0.9, 'Adam_ewma_2': 0.998, 'Adam_eta': 0.0, 'Adam_epsilon': 1e-08, 'Adam_weight_decay': 0.0001, 'running_min_from_avg': False, 'running_min_from_sgd': True, 'lr_schedule': True}
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        6              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 6)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-10.6829,  -0.9899],
        [  3.7461,  -8.6940],
        [ -1.1031,   1.4265],
        [ -4.2631, -11.0761],
        [  4.9691,  -8.8128],
        [ -1.0401,   1.3068],
        [ -7.0617,  -4.1018],
        [ -9.6502,   8.9263],
        [  9.5645,   1.0432],
        [ -8.9480,  -2.4834],
        [  3.0281,  -8.8872],
        [ -8.6267,   8.3395],
        [-49.8229,  -5.4397]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ 9.1355, -5.7429, -2.6909, -5.3538, -5.7410, -2.7192,  5.7084,  4.3039,
        -8.6489,  7.5354, -5.6595,  3.8232, -3.9535], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ 9.5440e+00,  9.0182e-01,  5.6541e-01, -1.4066e-03,  1.8922e+00,
          4.4803e-01,  4.5141e+00,  3.7661e+00, -4.3648e+00,  6.6846e+00,
          4.9106e-01,  7.3906e-01, -1.7109e-20],
        [-4.9072e-01, -1.4671e-01, -6.0405e-03, -2.4150e-01, -2.2039e-01,
         -6.8496e-03, -4.7508e-01, -8.2894e-02, -2.7851e-01, -4.8606e-01,
         -1.4535e-01, -8.1520e-02, -1.0049e-01],
        [-5.3446e+00,  3.5061e+00, -1.6298e-01,  1.1620e+01,  4.2876e+00,
         -1.8941e-02, -1.7479e+00, -7.7567e+00,  7.0560e+00, -4.1144e+00,
          3.6316e+00, -7.6515e+00,  1.0625e+01],
        [-6.2571e+00,  3.3289e+00,  2.4885e-01,  1.0370e+01,  3.7883e+00,
          2.2542e-01, -1.4455e+00, -4.6006e+00,  5.5843e+00, -4.0139e+00,
          3.7249e+00, -4.4364e+00,  7.5383e+00],
        [-4.9072e-01, -1.4671e-01, -6.0405e-03, -2.4150e-01, -2.2039e-01,
         -6.8496e-03, -4.7508e-01, -8.2894e-02, -2.7851e-01, -4.8606e-01,
         -1.4535e-01, -8.1520e-02, -1.0049e-01],
        [-5.3704e+00,  3.0000e+00,  5.7847e-03,  1.3655e+01,  4.2820e+00,
         -7.0646e-02, -1.3299e+00, -7.1488e+00,  5.8048e+00, -3.2771e+00,
          3.6867e+00, -7.0517e+00,  1.2433e+01],
        [-6.0730e+00,  3.4108e+00,  2.0064e-01,  1.1342e+01,  4.0053e+00,
          1.2312e-01, -1.6032e+00, -6.1736e+00,  6.8324e+00, -3.8984e+00,
          3.8052e+00, -6.0558e+00,  8.6698e+00],
        [-4.9072e-01, -1.4671e-01, -6.0405e-03, -2.4150e-01, -2.2039e-01,
         -6.8496e-03, -4.7508e-01, -8.2894e-02, -2.7851e-01, -4.8606e-01,
         -1.4535e-01, -8.1520e-02, -1.0049e-01],
        [-2.3990e+00,  2.6319e-02, -1.2302e-01,  4.0824e-01,  2.6876e-01,
         -1.0829e-01, -7.5869e-01, -3.5946e-01,  1.0200e+00, -1.5215e+00,
          2.8801e-03, -3.9632e-01,  1.7991e-02],
        [-4.9072e-01, -1.4671e-01, -6.0405e-03, -2.4150e-01, -2.2039e-01,
         -6.8496e-03, -4.7508e-01, -8.2894e-02, -2.7851e-01, -4.8606e-01,
         -1.4535e-01, -8.1520e-02, -1.0049e-01],
        [-4.9072e-01, -1.4671e-01, -6.0405e-03, -2.4150e-01, -2.2039e-01,
         -6.8496e-03, -4.7508e-01, -8.2894e-02, -2.7851e-01, -4.8606e-01,
         -1.4535e-01, -8.1520e-02, -1.0049e-01],
        [-4.9072e-01, -1.4671e-01, -6.0405e-03, -2.4150e-01, -2.2039e-01,
         -6.8496e-03, -4.7508e-01, -8.2894e-02, -2.7851e-01, -4.8606e-01,
         -1.4535e-01, -8.1520e-02, -1.0049e-01],
        [-4.9072e-01, -1.4671e-01, -6.0405e-03, -2.4150e-01, -2.2039e-01,
         -6.8496e-03, -4.7508e-01, -8.2894e-02, -2.7851e-01, -4.8606e-01,
         -1.4535e-01, -8.1520e-02, -1.0049e-01]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.2318, -0.9535, -2.9434, -1.9927, -0.9535, -2.4056, -2.5673, -0.9535,
        -2.2314, -0.9535, -0.9535, -0.9535, -0.9535], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 12.2102,   0.0346,  -9.6845,  -5.9831,   0.0346, -10.8043,  -7.7913,
           0.0346,  -0.9826,   0.0346,   0.0346,   0.0346,   0.0346]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[  0.2287,  14.1091],
        [-10.4143,  -5.1617],
        [-12.2121,   1.1868],
        [ 10.7429,   3.4456],
        [  0.1234,   1.7005],
        [ -1.6260,   0.3049],
        [ 10.6687,   4.5197],
        [  5.6502,  11.5341],
        [ -4.1337,  15.6659],
        [  8.9638,   4.1441],
        [ -8.7096,   3.7339],
        [-12.2784,  -6.3820],
        [ -2.2217, -12.9624]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ 7.7598, -3.0003, 10.9901, -2.4904, -4.4079, -3.9656,  0.7053,  8.1873,
         9.9863, -6.1396, -5.5146, -3.6450, -8.1119], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-1.5333e+00, -4.2342e-01, -1.0041e+00, -5.6805e-01,  1.0828e+00,
         -4.6744e-02, -1.0540e+00, -1.3107e+00, -2.6493e-01, -1.0013e+00,
          1.6374e+00, -4.6729e-01, -3.2120e-01],
        [-1.7515e+00, -8.0355e-01, -8.2736e-01, -2.7583e-01,  1.2337e+00,
          3.6873e-02, -7.1245e-01, -1.2469e+00,  4.1618e-02, -8.9002e-01,
          2.2531e+00, -9.0955e-01,  3.3894e-01],
        [-1.6848e+00, -6.4885e-01, -9.1447e-01, -2.2897e-01,  1.3951e+00,
          1.5354e-01, -7.2018e-01, -1.1007e+00,  3.0895e-01, -7.0130e-01,
          2.5065e+00, -7.5342e-01,  6.0066e-01],
        [-3.4486e+00,  2.2437e+00,  2.0310e+00, -3.2213e+00,  1.3708e-01,
          3.4800e-01, -3.1026e+00,  3.6217e+00, -9.5557e+00, -2.7793e+00,
          1.8361e-02,  5.3748e+00, -1.1628e+00],
        [-7.9508e-01,  2.8940e-01, -1.0705e+00, -1.5024e+00,  5.7296e-01,
         -5.3861e-02, -1.1965e+00,  1.2360e-01,  3.4560e-01, -2.1826e+00,
          8.4987e-01,  1.5328e-01, -1.3741e-01],
        [ 4.0948e-01, -5.3405e+00,  8.1251e-01,  1.0401e+00, -3.2544e-01,
         -1.3434e-01,  9.8637e-01, -2.9695e+00,  9.2264e+00, -1.2205e+00,
         -1.3802e-01, -4.9892e+00, -4.5928e-02],
        [ 5.1160e-01,  7.3621e+00,  7.2395e-01, -1.6604e+00, -2.0150e-01,
         -1.5868e-01, -1.0022e+01, -1.8805e+01,  3.9191e+00, -6.6153e-02,
          1.3633e-02,  1.0573e+01,  1.3172e+00],
        [-5.9643e-01, -3.0192e-01, -6.3058e-01, -1.2554e+00, -3.9998e-02,
          5.8343e-03, -1.9398e+00, -1.0892e+00, -9.7249e-01,  7.9070e-02,
         -2.5725e-02, -2.5176e-01, -1.0102e+00],
        [-9.7987e-01, -2.2740e-01, -1.2263e+00, -1.1681e+00,  4.7040e-02,
          5.1876e-03, -1.5942e+00, -8.2568e-01, -5.1736e-01, -7.6176e-01,
          6.5533e-02, -2.3047e-01, -6.4792e-01],
        [-8.0943e+00,  2.2381e+00,  1.6128e+00, -8.6471e-01,  1.3069e-01,
          1.8910e-01, -5.1711e+00, -1.2011e+01, -8.3444e+00, -7.4624e-01,
         -2.1222e-02,  9.0231e+00,  4.6157e+00],
        [-1.2814e+01,  4.1954e+00,  5.4845e+00, -3.6667e+00,  2.8457e-01,
          2.8567e-01, -5.9698e+00, -7.5266e+00, -1.9086e+01, -5.1107e+00,
          6.8492e-03,  1.1190e+01,  4.4451e+00],
        [-3.9215e+00,  4.3097e+00,  4.4074e+00, -1.7321e+00, -3.1981e-02,
          5.9617e-03, -4.8828e+00, -1.5814e+01, -3.7288e+00, -8.7054e-01,
         -5.1611e-04,  7.5909e+00,  2.5780e+00],
        [ 1.1560e+00,  3.1357e+00,  9.6439e+00, -3.4833e+00,  3.6166e-01,
          1.7087e-01, -5.0535e+00,  1.3162e-01,  4.3846e+00,  1.0848e+00,
         -5.6145e+00,  2.9158e+00, -2.2844e+01]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-1.7903, -1.4367, -1.3635, -1.6905, -1.5785,  0.9205, -1.2820, -2.7250,
        -2.0401,  2.2004,  1.3671, -1.5116, -5.8435], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-6.9570e-02, -2.7371e-01, -4.2894e-01, -2.8659e+00, -2.3648e-01,
         -5.9186e+00, -1.5547e-02, -1.6484e-02, -3.2538e-02, -1.0816e+00,
         -3.0326e+00, -7.1478e-02, -9.4163e-03],
        [-2.3553e-01, -3.3267e-01, -3.8674e-01, -3.9700e-01, -6.5018e-01,
         -5.8115e+00,  4.0932e-01,  1.5855e-02, -1.2032e-01,  5.4800e+00,
          2.8795e-01,  1.2112e+01, -1.1741e-01],
        [ 2.8016e-01,  3.8973e-01,  4.5286e-01,  1.3116e+00,  7.5580e-01,
          1.1790e+01, -3.8304e-01,  9.3621e-03,  1.5550e-01, -4.5382e+00,
          7.5127e-01, -1.2045e+01,  1.2215e-01],
        [-1.5595e+00, -2.1892e+00, -2.2187e+00,  2.0326e+00, -1.4831e+00,
         -2.9289e-01,  8.4674e+00, -2.5809e-01, -6.0090e-01, -5.2713e+00,
         -6.3804e+00,  7.1884e+00,  2.0110e+00],
        [ 1.5594e+00,  2.1891e+00,  2.2187e+00, -2.0316e+00,  1.4904e+00,
          2.7217e-01, -8.4721e+00,  2.5786e-01,  6.0086e-01,  5.2117e+00,
          6.3260e+00, -7.1920e+00, -2.0296e+00],
        [-9.8024e-02, -1.9390e-01, -3.6144e-01, -1.9889e+00,  2.5553e-01,
          1.0469e+00, -1.8969e+01, -5.3609e-01,  2.8045e-02, -2.0479e-01,
          1.1950e+01, -1.7808e+00, -2.3489e+00]], device='cuda:0'))])
loaded xi:  53.657986
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.0, 0.5, 0.2, 0.15, 0.15]
W_T_mean: 1121.2086969284844
W_T_median: 913.5981449464056
W_T_pctile_5: -49.656047068172875
W_T_CVAR_5_pct: -195.50895930099082
-----------------------------------------------
new min fval from sgd:  -1409.694653328619
min fval:  -1409.694653328619
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 481.69223967036066
W_T_median: 507.84877916459993
W_T_pctile_5: 176.49977710062146
W_T_CVAR_5_pct: -64.45681729806964
Average q (qsum/M+1):  48.105618384576616
Optimal xi:  [53.657986]
Expected(across Rb) median(across samples) p_equity:  0.330900185306867
obj fun:  tensor(-1409.6947, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
/home/marcchen/Documents/constrain_factor/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/constrain_factor/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: Paper_FactorInv_Factor2
Objective function: mean_cvar_single_level
Tracing param: 1.0
-----------------------------------------------

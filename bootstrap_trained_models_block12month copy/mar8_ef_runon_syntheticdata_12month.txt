Starting at: 
08-03-23_17:34

 numpy seed:  3  


 pytorch seed:  3  

Key parameters-------
paths: 256000
iterations: 10
batchsize: 1000
remove neg:  False
w constaint activation:  yy_fix_jan29


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = B10_and_VWD
timeseries_basket['basket_desc'] = CRSP data: B10 and VWD
timeseries_basket['basket_columns'] = 
['B10_real_ret', 'VWD_real_ret']
############# End: defined asset  basket #################
-----------------------------------------------
No need to read market data.
-----------------------------------------------
3.3333333333333335% of MC simulations done.
6.666666666666667% of MC simulations done.
10.0% of MC simulations done.
13.333333333333334% of MC simulations done.
16.666666666666664% of MC simulations done.
20.0% of MC simulations done.
23.333333333333332% of MC simulations done.
26.666666666666668% of MC simulations done.
30.0% of MC simulations done.
33.33333333333333% of MC simulations done.
36.666666666666664% of MC simulations done.
40.0% of MC simulations done.
43.333333333333336% of MC simulations done.
46.666666666666664% of MC simulations done.
50.0% of MC simulations done.
53.333333333333336% of MC simulations done.
56.666666666666664% of MC simulations done.
60.0% of MC simulations done.
63.33333333333333% of MC simulations done.
66.66666666666666% of MC simulations done.
70.0% of MC simulations done.
73.33333333333333% of MC simulations done.
76.66666666666667% of MC simulations done.
80.0% of MC simulations done.
83.33333333333334% of MC simulations done.
86.66666666666667% of MC simulations done.
90.0% of MC simulations done.
93.33333333333333% of MC simulations done.
96.66666666666667% of MC simulations done.
100.0% of MC simulations done.
Withdrawal NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       1       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      10  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      10  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       1              none   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 10)     True          10  
2     (10, 10)     True          10  
3      (10, 1)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
Allocation NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       2       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      10  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      10  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       2           softmax   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 10)     True          10  
2     (10, 10)     True          10  
3      (10, 2)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
{'methods': ['Adam'], 'output_progress': False, 'tol': 1e-06, 'itbound_scipy_algorithms': 1000, 'check_exit_criteria': False, 'nit_running_min': 1, 'itbound_SGD_algorithms': 10, 'nit_IterateAveragingStart': 9, 'batchsize': 1000, 'SGD_learningrate': 50.0, 'Adagrad_epsilon': 1e-08, 'Adagrad_eta': 1.0, 'Adadelta_ewma': 0.9, 'Adadelta_epsilon': 1e-08, 'RMSprop_ewma': 0.8, 'RMSprop_epsilon': 1e-08, 'RMSprop_eta': 0.1, 'Adam_ewma_1': 0.9, 'Adam_ewma_2': 0.998, 'Adam_eta': 0.0, 'Adam_epsilon': 1e-08, 'Adam_weight_decay': 0.0001, 'running_min_from_avg': False, 'running_min_from_sgd': True, 'lr_schedule': True}
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.3071,  1.2394],
        [-0.3071,  1.2394],
        [-4.8982,  5.6927],
        [13.1485,  1.0610],
        [-0.3071,  1.2394],
        [-0.3071,  1.2394],
        [-0.3067,  1.2458],
        [-0.3071,  1.2394],
        [-2.9520,  5.7725],
        [-0.3084,  1.2378]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-0.6547, -0.6547, 10.6766, -8.5432, -0.6547, -0.6547, -0.6562, -0.6547,
        10.8639, -0.6566], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-1.0928e-03, -1.0926e-03, -4.8933e-02, -2.3496e-01, -1.0929e-03,
         -1.0929e-03, -9.3688e-04, -1.0929e-03, -1.4032e-01, -1.1064e-03],
        [-1.0928e-03, -1.0926e-03, -4.8933e-02, -2.3496e-01, -1.0929e-03,
         -1.0929e-03, -9.3688e-04, -1.0929e-03, -1.4032e-01, -1.1064e-03],
        [ 1.6557e-01,  1.6550e-01, -7.7911e+00, -9.0572e+00,  1.6566e-01,
          1.6566e-01,  1.1629e-01,  1.6566e-01, -7.2562e+00,  1.8047e-01],
        [ 1.0254e-01,  1.0249e-01,  3.1937e+00,  4.3867e+00,  1.0257e-01,
          1.0257e-01,  6.8739e-02,  1.0256e-01,  3.1074e+00,  1.1285e-01],
        [-1.0928e-03, -1.0926e-03, -4.8933e-02, -2.3496e-01, -1.0929e-03,
         -1.0929e-03, -9.3689e-04, -1.0929e-03, -1.4032e-01, -1.1064e-03],
        [-1.0928e-03, -1.0926e-03, -4.8933e-02, -2.3496e-01, -1.0929e-03,
         -1.0929e-03, -9.3688e-04, -1.0929e-03, -1.4032e-01, -1.1064e-03],
        [ 8.5369e-02,  8.5306e-02,  3.7364e+00,  4.8170e+00,  8.5494e-02,
          8.5494e-02,  4.2657e-02,  8.5491e-02,  3.5833e+00,  9.8042e-02],
        [ 6.0243e-02,  6.0169e-02,  4.3384e+00,  5.3789e+00,  6.0308e-02,
          6.0307e-02,  9.9348e-03,  6.0303e-02,  4.1421e+00,  7.5093e-02],
        [-1.0928e-03, -1.0926e-03, -4.8933e-02, -2.3496e-01, -1.0929e-03,
         -1.0929e-03, -9.3688e-04, -1.0929e-03, -1.4032e-01, -1.1064e-03],
        [-1.0929e-03, -1.0927e-03, -4.8934e-02, -2.3496e-01, -1.0930e-03,
         -1.0930e-03, -9.3694e-04, -1.0930e-03, -1.4033e-01, -1.1064e-03]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.7904, -0.7904,  6.1571, -3.1699, -0.7904, -0.7904, -3.3933, -3.7342,
        -0.7904, -0.7904], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.0265,  -0.0265, -14.8421,   4.3500,  -0.0265,  -0.0265,   5.1253,
           6.1710,  -0.0265,  -0.0265]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 16.8635,   5.9910],
        [ -8.6801,   1.1813],
        [ -1.0344,  -8.8765],
        [-10.9241,   0.3336],
        [  3.3680,  -2.9547],
        [ -6.1388,   6.7634],
        [ -5.5954,  -0.5844],
        [  1.8254,   1.6754],
        [ -9.0611,   1.7643],
        [  9.9938,   3.1102]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([  3.6324,   1.7179,  -8.8058,  11.4021, -10.5574,   6.9868,  -0.3572,
         -6.0403,   4.1376,  -1.1949], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 7.8125e-01, -7.5402e-01, -4.7739e+00, -6.8207e+00, -2.0944e+00,
          7.1490e-01, -8.4823e-01,  1.3692e+00, -2.1261e+00,  1.0101e+00],
        [-4.8970e+00,  3.0076e-01, -4.2365e+00,  3.7364e+00, -1.5102e+00,
         -4.7758e-01,  1.9767e+00, -6.5183e-01,  1.7999e+00, -1.8628e+00],
        [-3.1516e+00,  4.2175e+00, -7.4128e+00, -6.6254e-01, -6.8155e-03,
          5.5622e+00, -5.4769e+00, -4.5604e+00,  6.6223e+00, -6.4359e-01],
        [-6.4965e+00, -1.8330e+00,  7.4624e+00,  7.0827e+00, -8.2248e-01,
         -1.3719e+01,  2.3094e+00, -4.8966e-02, -1.1100e+00, -7.2514e+00],
        [-6.6531e+00, -1.6035e+00,  6.9976e+00, -2.9508e+00, -3.6311e+00,
         -2.1896e+00,  4.9774e+00,  3.5000e-02, -3.4842e+00,  4.6453e-01],
        [-9.3171e+00, -2.7030e+00,  4.1540e+00,  5.0890e+00, -1.0082e+01,
         -3.1632e+00,  3.2229e-01,  1.4792e-02, -4.8349e+00, -3.5422e+00],
        [-2.7349e+00, -2.6226e+00,  2.1398e+00,  5.6341e+00, -2.9992e+00,
         -1.0175e+01,  2.6172e+00,  1.1767e-01, -2.9595e+00, -4.2366e+00],
        [-1.0014e+00, -1.4151e-02, -1.0662e+00, -8.0230e-01, -8.7620e-01,
         -4.3828e-01, -8.7010e-01, -7.4700e-02, -8.7208e-02, -9.0431e-01],
        [-1.0014e+00, -1.4151e-02, -1.0662e+00, -8.0230e-01, -8.7620e-01,
         -4.3828e-01, -8.7010e-01, -7.4700e-02, -8.7207e-02, -9.0431e-01],
        [-4.5450e+00,  1.4865e+00, -3.3089e+00,  8.7777e+00, -1.6116e+00,
          3.0105e+00,  4.3768e-01, -2.2472e+00,  5.5856e+00, -2.6165e+00]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-0.0882, -2.3083, -5.8194, -2.5287, -1.2284, -2.8469,  0.8334, -1.9254,
        -1.9254, -3.5360], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-2.8239,  2.3244, -4.5291, -5.2436,  5.8113,  9.2186, -0.6085, -0.0216,
         -0.0216,  0.4127],
        [ 2.7442, -2.3072,  4.5360,  5.2387, -5.8473, -9.2137,  0.8632,  0.0216,
          0.0217, -0.5559]], device='cuda:0'))])
loaded xi:  -459.98447
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -1740.8456286202734
min fval:  -1740.8456286202734
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.3071,  1.2394],
        [-0.3071,  1.2394],
        [-4.8982,  5.6927],
        [13.1485,  1.0610],
        [-0.3071,  1.2394],
        [-0.3071,  1.2394],
        [-0.3067,  1.2458],
        [-0.3071,  1.2394],
        [-2.9520,  5.7725],
        [-0.3084,  1.2378]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-0.6547, -0.6547, 10.6766, -8.5432, -0.6547, -0.6547, -0.6562, -0.6547,
        10.8639, -0.6566], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-1.0928e-03, -1.0926e-03, -4.8933e-02, -2.3496e-01, -1.0929e-03,
         -1.0929e-03, -9.3688e-04, -1.0929e-03, -1.4032e-01, -1.1064e-03],
        [-1.0928e-03, -1.0926e-03, -4.8933e-02, -2.3496e-01, -1.0929e-03,
         -1.0929e-03, -9.3688e-04, -1.0929e-03, -1.4032e-01, -1.1064e-03],
        [ 1.6557e-01,  1.6550e-01, -7.7911e+00, -9.0572e+00,  1.6566e-01,
          1.6566e-01,  1.1629e-01,  1.6566e-01, -7.2562e+00,  1.8047e-01],
        [ 1.0254e-01,  1.0249e-01,  3.1937e+00,  4.3867e+00,  1.0257e-01,
          1.0257e-01,  6.8739e-02,  1.0256e-01,  3.1074e+00,  1.1285e-01],
        [-1.0928e-03, -1.0926e-03, -4.8933e-02, -2.3496e-01, -1.0929e-03,
         -1.0929e-03, -9.3689e-04, -1.0929e-03, -1.4032e-01, -1.1064e-03],
        [-1.0928e-03, -1.0926e-03, -4.8933e-02, -2.3496e-01, -1.0929e-03,
         -1.0929e-03, -9.3688e-04, -1.0929e-03, -1.4032e-01, -1.1064e-03],
        [ 8.5369e-02,  8.5306e-02,  3.7364e+00,  4.8170e+00,  8.5494e-02,
          8.5494e-02,  4.2657e-02,  8.5491e-02,  3.5833e+00,  9.8042e-02],
        [ 6.0243e-02,  6.0169e-02,  4.3384e+00,  5.3789e+00,  6.0308e-02,
          6.0307e-02,  9.9348e-03,  6.0303e-02,  4.1421e+00,  7.5093e-02],
        [-1.0928e-03, -1.0926e-03, -4.8933e-02, -2.3496e-01, -1.0929e-03,
         -1.0929e-03, -9.3688e-04, -1.0929e-03, -1.4032e-01, -1.1064e-03],
        [-1.0929e-03, -1.0927e-03, -4.8934e-02, -2.3496e-01, -1.0930e-03,
         -1.0930e-03, -9.3694e-04, -1.0930e-03, -1.4033e-01, -1.1064e-03]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.7904, -0.7904,  6.1571, -3.1699, -0.7904, -0.7904, -3.3933, -3.7342,
        -0.7904, -0.7904], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.0265,  -0.0265, -14.8421,   4.3500,  -0.0265,  -0.0265,   5.1253,
           6.1710,  -0.0265,  -0.0265]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 16.8635,   5.9910],
        [ -8.6801,   1.1813],
        [ -1.0344,  -8.8765],
        [-10.9241,   0.3336],
        [  3.3680,  -2.9547],
        [ -6.1388,   6.7634],
        [ -5.5954,  -0.5844],
        [  1.8254,   1.6754],
        [ -9.0611,   1.7643],
        [  9.9938,   3.1102]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([  3.6324,   1.7179,  -8.8058,  11.4021, -10.5574,   6.9868,  -0.3572,
         -6.0403,   4.1376,  -1.1949], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 7.8125e-01, -7.5402e-01, -4.7739e+00, -6.8207e+00, -2.0944e+00,
          7.1490e-01, -8.4823e-01,  1.3692e+00, -2.1261e+00,  1.0101e+00],
        [-4.8970e+00,  3.0076e-01, -4.2365e+00,  3.7364e+00, -1.5102e+00,
         -4.7758e-01,  1.9767e+00, -6.5183e-01,  1.7999e+00, -1.8628e+00],
        [-3.1516e+00,  4.2175e+00, -7.4128e+00, -6.6254e-01, -6.8155e-03,
          5.5622e+00, -5.4769e+00, -4.5604e+00,  6.6223e+00, -6.4359e-01],
        [-6.4965e+00, -1.8330e+00,  7.4624e+00,  7.0827e+00, -8.2248e-01,
         -1.3719e+01,  2.3094e+00, -4.8966e-02, -1.1100e+00, -7.2514e+00],
        [-6.6531e+00, -1.6035e+00,  6.9976e+00, -2.9508e+00, -3.6311e+00,
         -2.1896e+00,  4.9774e+00,  3.5000e-02, -3.4842e+00,  4.6453e-01],
        [-9.3171e+00, -2.7030e+00,  4.1540e+00,  5.0890e+00, -1.0082e+01,
         -3.1632e+00,  3.2229e-01,  1.4792e-02, -4.8349e+00, -3.5422e+00],
        [-2.7349e+00, -2.6226e+00,  2.1398e+00,  5.6341e+00, -2.9992e+00,
         -1.0175e+01,  2.6172e+00,  1.1767e-01, -2.9595e+00, -4.2366e+00],
        [-1.0014e+00, -1.4151e-02, -1.0662e+00, -8.0230e-01, -8.7620e-01,
         -4.3828e-01, -8.7010e-01, -7.4700e-02, -8.7208e-02, -9.0431e-01],
        [-1.0014e+00, -1.4151e-02, -1.0662e+00, -8.0230e-01, -8.7620e-01,
         -4.3828e-01, -8.7010e-01, -7.4700e-02, -8.7207e-02, -9.0431e-01],
        [-4.5450e+00,  1.4865e+00, -3.3089e+00,  8.7777e+00, -1.6116e+00,
          3.0105e+00,  4.3768e-01, -2.2472e+00,  5.5856e+00, -2.6165e+00]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-0.0882, -2.3083, -5.8194, -2.5287, -1.2284, -2.8469,  0.8334, -1.9254,
        -1.9254, -3.5360], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-2.8239,  2.3244, -4.5291, -5.2436,  5.8113,  9.2186, -0.6085, -0.0216,
         -0.0216,  0.4127],
        [ 2.7442, -2.3072,  4.5360,  5.2387, -5.8473, -9.2137,  0.8632,  0.0216,
          0.0217, -0.5559]], device='cuda:0'))])
xi:  [-459.98447]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 1606.6164257843136
W_T_median: 136.34436454655702
W_T_pctile_5: -478.31034724253334
W_T_CVAR_5_pct: -591.910996476624
Average q (qsum/M+1):  57.06184239541331
Optimal xi:  [-459.98447]
Observed VAR:  136.34436454655702
Expected(across Rb) median(across samples) p_equity:  0.626634215315183
obj fun:  tensor(-1740.8456, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 0.05
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.3423,  1.3577],
        [-0.3423,  1.3577],
        [-1.0143, 10.0116],
        [15.0662,  2.6456],
        [-0.3422,  1.3577],
        [-0.3422,  1.3577],
        [-0.3422,  1.3577],
        [-0.3422,  1.3577],
        [-0.5960, 10.2783],
        [-0.3422,  1.3577]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -1.0488,  -1.0488,  11.2943, -10.4091,  -1.0488,  -1.0488,  -1.0488,
         -1.0488,  11.5239,  -1.0488], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ -0.0143,  -0.0143,  -0.0486,  -0.1928,  -0.0143,  -0.0143,  -0.0143,
          -0.0143,  -0.0595,  -0.0143],
        [ -0.0143,  -0.0143,  -0.0486,  -0.1928,  -0.0143,  -0.0143,  -0.0143,
          -0.0143,  -0.0595,  -0.0143],
        [  0.0661,   0.0661,  -8.5470, -10.4511,   0.0661,   0.0661,   0.0661,
           0.0661, -10.1132,   0.0661],
        [  0.0542,   0.0542,   1.3426,  -0.1276,   0.0542,   0.0542,   0.0542,
           0.0542,   1.4618,   0.0542],
        [ -0.0143,  -0.0143,  -0.0486,  -0.1928,  -0.0143,  -0.0143,  -0.0143,
          -0.0143,  -0.0595,  -0.0143],
        [ -0.0143,  -0.0143,  -0.0486,  -0.1928,  -0.0143,  -0.0143,  -0.0143,
          -0.0143,  -0.0595,  -0.0143],
        [  0.1100,   0.1100,   6.1343,  -3.1501,   0.1100,   0.1100,   0.1100,
           0.1100,   6.7198,   0.1100],
        [  0.0308,   0.0308,   5.4141,   5.4541,   0.0308,   0.0308,   0.0308,
           0.0308,   5.7186,   0.0308],
        [ -0.0143,  -0.0143,  -0.0486,  -0.1928,  -0.0143,  -0.0143,  -0.0143,
          -0.0143,  -0.0595,  -0.0143],
        [ -0.0143,  -0.0143,  -0.0486,  -0.1928,  -0.0143,  -0.0143,  -0.0143,
          -0.0143,  -0.0595,  -0.0143]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.8762, -0.8762,  4.6276, -2.3755, -0.8762, -0.8762, -3.3725, -3.0383,
        -0.8762, -0.8762], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 5.1034e-03,  5.1034e-03, -1.3910e+01,  1.5852e+00,  5.1034e-03,
          5.1034e-03,  7.3761e+00,  7.2616e+00,  5.1034e-03,  5.1034e-03]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 15.0042,  12.3535],
        [-12.8020,   2.0660],
        [ -5.9297, -14.7085],
        [-13.8602,   1.8298],
        [ -2.9042, -12.3586],
        [ -5.7133,  11.1590],
        [ -1.8977,  -1.3606],
        [  7.2315,   1.2971],
        [ -9.2971,   2.5285],
        [ 12.3426,   3.4484]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ 12.3623,   2.5071, -12.6020,  14.1407, -13.9984,  10.5956,  -5.1893,
         -8.2618,   5.2824,   0.1192], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-6.5391e-01, -1.0594e+00, -4.3970e+00, -6.2208e+00, -2.0306e+00,
          2.5993e+00, -6.5017e-01,  4.5558e+00, -1.4876e+00, -3.4298e-01],
        [-1.1124e+00,  7.4874e-04, -1.1214e+00, -7.6276e-01, -1.0747e+00,
         -4.9859e-01, -8.1781e-01, -2.4224e-02,  5.0611e-02, -1.2347e+00],
        [-2.7947e+00,  6.1756e+00, -3.2215e+00, -5.2561e+00, -1.3194e+00,
          5.6841e+00, -3.0416e-01, -4.9495e+00,  7.7483e+00,  1.0479e+00],
        [-1.0103e+01, -4.9866e+00,  7.7196e+00,  7.3617e+00, -7.3632e+00,
         -1.2227e+01,  7.2496e+00, -6.4304e-01,  1.0859e+00, -3.5149e+00],
        [ 4.1353e+00,  3.1692e+00,  1.2961e+00, -1.1658e+01, -2.1112e+00,
         -6.4139e-01,  7.6315e+00,  2.3263e+00,  6.9784e+00, -4.9372e+00],
        [-1.2185e+01, -4.1575e+00,  1.0675e-01,  8.3986e+00,  1.9788e+00,
         -2.2557e+00, -5.1320e+00, -6.9419e-03,  4.4197e+00, -1.2986e+01],
        [-3.7874e+00, -8.7039e-01,  3.5797e+00,  3.2214e+00, -5.3503e+00,
         -8.7067e+00, -4.7255e+00,  1.7260e+00, -2.7376e+00, -1.0598e-01],
        [-1.1100e+00,  5.4552e-04, -1.1334e+00, -7.7924e-01, -1.0679e+00,
         -4.9842e-01, -8.1127e-01, -2.3157e-02,  5.0622e-02, -1.2175e+00],
        [-1.1099e+00,  5.4417e-04, -1.1336e+00, -7.7951e-01, -1.0678e+00,
         -4.9835e-01, -8.1121e-01, -2.3145e-02,  5.0625e-02, -1.2173e+00],
        [-4.4756e+00,  1.9510e+00, -4.1172e+00,  8.7249e+00, -4.1103e+00,
          7.6290e-01, -1.6113e-01, -3.2814e+00,  2.8167e+00, -1.3267e+00]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-1.4009, -2.2165, -6.1326, -1.4287, -0.7034, -4.6225,  2.1984, -2.2332,
        -2.2334, -3.6748], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ -2.5552,   0.0589,  -4.7211,  -5.4033,   5.3139,  11.8122,  -0.2446,
           0.0592,   0.0592,   0.5086],
        [  2.5416,  -0.0589,   4.7214,   5.3988,  -5.3488, -11.8122,   0.4917,
          -0.0592,  -0.0592,  -0.6394]], device='cuda:0'))])
loaded xi:  -204.23682
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -1670.7545137604475
min fval:  -1670.7545137604475
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.3423,  1.3577],
        [-0.3423,  1.3577],
        [-1.0143, 10.0116],
        [15.0662,  2.6456],
        [-0.3422,  1.3577],
        [-0.3422,  1.3577],
        [-0.3422,  1.3577],
        [-0.3422,  1.3577],
        [-0.5960, 10.2783],
        [-0.3422,  1.3577]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -1.0488,  -1.0488,  11.2943, -10.4091,  -1.0488,  -1.0488,  -1.0488,
         -1.0488,  11.5239,  -1.0488], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ -0.0143,  -0.0143,  -0.0486,  -0.1928,  -0.0143,  -0.0143,  -0.0143,
          -0.0143,  -0.0595,  -0.0143],
        [ -0.0143,  -0.0143,  -0.0486,  -0.1928,  -0.0143,  -0.0143,  -0.0143,
          -0.0143,  -0.0595,  -0.0143],
        [  0.0661,   0.0661,  -8.5470, -10.4511,   0.0661,   0.0661,   0.0661,
           0.0661, -10.1132,   0.0661],
        [  0.0542,   0.0542,   1.3426,  -0.1276,   0.0542,   0.0542,   0.0542,
           0.0542,   1.4618,   0.0542],
        [ -0.0143,  -0.0143,  -0.0486,  -0.1928,  -0.0143,  -0.0143,  -0.0143,
          -0.0143,  -0.0595,  -0.0143],
        [ -0.0143,  -0.0143,  -0.0486,  -0.1928,  -0.0143,  -0.0143,  -0.0143,
          -0.0143,  -0.0595,  -0.0143],
        [  0.1100,   0.1100,   6.1343,  -3.1501,   0.1100,   0.1100,   0.1100,
           0.1100,   6.7198,   0.1100],
        [  0.0308,   0.0308,   5.4141,   5.4541,   0.0308,   0.0308,   0.0308,
           0.0308,   5.7186,   0.0308],
        [ -0.0143,  -0.0143,  -0.0486,  -0.1928,  -0.0143,  -0.0143,  -0.0143,
          -0.0143,  -0.0595,  -0.0143],
        [ -0.0143,  -0.0143,  -0.0486,  -0.1928,  -0.0143,  -0.0143,  -0.0143,
          -0.0143,  -0.0595,  -0.0143]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.8762, -0.8762,  4.6276, -2.3755, -0.8762, -0.8762, -3.3725, -3.0383,
        -0.8762, -0.8762], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 5.1034e-03,  5.1034e-03, -1.3910e+01,  1.5852e+00,  5.1034e-03,
          5.1034e-03,  7.3761e+00,  7.2616e+00,  5.1034e-03,  5.1034e-03]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 15.0042,  12.3535],
        [-12.8020,   2.0660],
        [ -5.9297, -14.7085],
        [-13.8602,   1.8298],
        [ -2.9042, -12.3586],
        [ -5.7133,  11.1590],
        [ -1.8977,  -1.3606],
        [  7.2315,   1.2971],
        [ -9.2971,   2.5285],
        [ 12.3426,   3.4484]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ 12.3623,   2.5071, -12.6020,  14.1407, -13.9984,  10.5956,  -5.1893,
         -8.2618,   5.2824,   0.1192], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-6.5391e-01, -1.0594e+00, -4.3970e+00, -6.2208e+00, -2.0306e+00,
          2.5993e+00, -6.5017e-01,  4.5558e+00, -1.4876e+00, -3.4298e-01],
        [-1.1124e+00,  7.4874e-04, -1.1214e+00, -7.6276e-01, -1.0747e+00,
         -4.9859e-01, -8.1781e-01, -2.4224e-02,  5.0611e-02, -1.2347e+00],
        [-2.7947e+00,  6.1756e+00, -3.2215e+00, -5.2561e+00, -1.3194e+00,
          5.6841e+00, -3.0416e-01, -4.9495e+00,  7.7483e+00,  1.0479e+00],
        [-1.0103e+01, -4.9866e+00,  7.7196e+00,  7.3617e+00, -7.3632e+00,
         -1.2227e+01,  7.2496e+00, -6.4304e-01,  1.0859e+00, -3.5149e+00],
        [ 4.1353e+00,  3.1692e+00,  1.2961e+00, -1.1658e+01, -2.1112e+00,
         -6.4139e-01,  7.6315e+00,  2.3263e+00,  6.9784e+00, -4.9372e+00],
        [-1.2185e+01, -4.1575e+00,  1.0675e-01,  8.3986e+00,  1.9788e+00,
         -2.2557e+00, -5.1320e+00, -6.9419e-03,  4.4197e+00, -1.2986e+01],
        [-3.7874e+00, -8.7039e-01,  3.5797e+00,  3.2214e+00, -5.3503e+00,
         -8.7067e+00, -4.7255e+00,  1.7260e+00, -2.7376e+00, -1.0598e-01],
        [-1.1100e+00,  5.4552e-04, -1.1334e+00, -7.7924e-01, -1.0679e+00,
         -4.9842e-01, -8.1127e-01, -2.3157e-02,  5.0622e-02, -1.2175e+00],
        [-1.1099e+00,  5.4417e-04, -1.1336e+00, -7.7951e-01, -1.0678e+00,
         -4.9835e-01, -8.1121e-01, -2.3145e-02,  5.0625e-02, -1.2173e+00],
        [-4.4756e+00,  1.9510e+00, -4.1172e+00,  8.7249e+00, -4.1103e+00,
          7.6290e-01, -1.6113e-01, -3.2814e+00,  2.8167e+00, -1.3267e+00]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-1.4009, -2.2165, -6.1326, -1.4287, -0.7034, -4.6225,  2.1984, -2.2332,
        -2.2334, -3.6748], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ -2.5552,   0.0589,  -4.7211,  -5.4033,   5.3139,  11.8122,  -0.2446,
           0.0592,   0.0592,   0.5086],
        [  2.5416,  -0.0589,   4.7214,   5.3988,  -5.3488, -11.8122,   0.4917,
          -0.0592,  -0.0592,  -0.6394]], device='cuda:0'))])
xi:  [-204.23682]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 1470.7638066297613
W_T_median: 123.82851121885807
W_T_pctile_5: -218.35740558121216
W_T_CVAR_5_pct: -337.8794142792595
Average q (qsum/M+1):  56.037534652217744
Optimal xi:  [-204.23682]
Observed VAR:  123.82851121885807
Expected(across Rb) median(across samples) p_equity:  0.6065832898020744
obj fun:  tensor(-1670.7545, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 0.2
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.5691,  1.3571],
        [-0.5691,  1.3571],
        [-1.7786, 11.3296],
        [10.0719, -3.5218],
        [-0.5691,  1.3571],
        [-0.5691,  1.3571],
        [-0.5691,  1.3571],
        [-0.5691,  1.3571],
        [ 1.3464, 11.8066],
        [-0.5691,  1.3571]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -1.4737,  -1.4737,  11.7579, -10.3454,  -1.4737,  -1.4737,  -1.4737,
         -1.4737,  12.0645,  -1.4737], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-1.3915e-02, -1.3915e-02, -5.3638e-01, -2.6596e-01, -1.3917e-02,
         -1.3917e-02, -1.3917e-02, -1.3917e-02, -6.4912e-01, -1.3917e-02],
        [-1.3914e-02, -1.3914e-02, -5.3638e-01, -2.6596e-01, -1.3917e-02,
         -1.3917e-02, -1.3917e-02, -1.3917e-02, -6.4912e-01, -1.3917e-02],
        [ 5.3049e-02,  5.3049e-02, -5.7575e+00,  1.0777e+01,  5.2979e-02,
          5.2979e-02,  5.2978e-02,  5.2978e-02, -1.0656e+01,  5.2979e-02],
        [-1.3914e-02, -1.3914e-02, -5.3638e-01, -2.6596e-01, -1.3917e-02,
         -1.3917e-02, -1.3917e-02, -1.3917e-02, -6.4912e-01, -1.3917e-02],
        [-1.3915e-02, -1.3915e-02, -5.3638e-01, -2.6596e-01, -1.3917e-02,
         -1.3917e-02, -1.3917e-02, -1.3917e-02, -6.4912e-01, -1.3917e-02],
        [-1.3914e-02, -1.3914e-02, -5.3638e-01, -2.6596e-01, -1.3917e-02,
         -1.3917e-02, -1.3917e-02, -1.3917e-02, -6.4912e-01, -1.3917e-02],
        [ 6.8537e-02,  6.8538e-02,  7.8774e+00, -1.1827e+01,  6.8509e-02,
          6.8509e-02,  6.8508e-02,  6.8508e-02,  4.3046e+00,  6.8508e-02],
        [-2.0595e-03, -2.0598e-03,  6.6403e+00, -9.8723e+00, -2.2113e-03,
         -2.2115e-03, -2.2113e-03, -2.2116e-03,  3.4489e+00, -2.2113e-03],
        [-1.3915e-02, -1.3915e-02, -5.3638e-01, -2.6596e-01, -1.3917e-02,
         -1.3917e-02, -1.3917e-02, -1.3917e-02, -6.4912e-01, -1.3917e-02],
        [-1.3914e-02, -1.3914e-02, -5.3638e-01, -2.6596e-01, -1.3917e-02,
         -1.3917e-02, -1.3917e-02, -1.3917e-02, -6.4912e-01, -1.3917e-02]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.8886, -0.8886,  5.3408, -0.8886, -0.8886, -0.8886, -4.9005, -4.4195,
        -0.8886, -0.8886], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.0933,  -0.0933, -15.5406,  -0.0933,  -0.0933,  -0.0933,   8.7989,
           6.1559,  -0.0933,  -0.0933]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 20.2705,  12.8347],
        [-12.7112,   3.4282],
        [-10.2512, -14.1797],
        [-15.8884,   1.4786],
        [ -5.9761, -17.8052],
        [ -5.7838,   9.7688],
        [ -3.2451,  -1.5819],
        [  3.8914,   3.2312],
        [-12.8977,   0.8692],
        [ 14.9595,   2.8429]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ 11.8236,   4.9143, -14.0658,  15.1130, -18.2875,  11.1435,  -5.2670,
         -8.3820,   5.3610,  -3.9133], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-1.5955e+00,  3.0404e-03, -1.0766e+00, -1.0367e+00, -1.2611e+00,
         -3.2245e-01, -8.6644e-01, -3.3177e-02, -2.7153e-02, -1.3730e+00],
        [-1.5330e+00,  2.6038e-03, -1.0501e+00, -1.0290e+00, -1.2192e+00,
         -3.1714e-01, -8.3800e-01, -3.2109e-02, -2.4700e-02, -1.3410e+00],
        [-3.7140e+00,  4.9666e+00, -1.0005e+01, -5.5466e+00, -7.2172e+00,
          6.6331e+00, -4.9340e-01, -1.0172e+00,  6.6123e+00,  3.2206e+00],
        [-1.1462e+01,  1.4786e+00,  7.2457e+00,  1.3239e+01, -4.3379e+00,
         -2.0101e+01,  8.8606e+00, -2.2402e-03,  1.5929e+00, -2.3370e+00],
        [ 4.3080e+00, -6.1772e-04, -6.3989e-01, -1.3010e+01, -5.0680e-01,
         -4.3343e-01,  9.8342e+00,  9.4165e-02, -4.5935e-02, -4.4217e+00],
        [-2.2096e+01, -4.0124e-02,  1.2619e+00,  5.6164e+00,  2.4401e+00,
         -9.5014e+00, -4.9855e+00, -1.8709e-04,  9.7138e+00, -1.2266e+01],
        [ 6.5422e-01,  8.2182e+00, -5.6597e+00,  1.4832e+00, -9.6641e+00,
         -6.1648e-01, -6.1438e-01, -6.7049e+00,  5.0496e+00, -2.8071e+00],
        [ 1.6642e+00, -4.7501e-01, -3.2953e+00,  7.0514e-02,  3.5368e-01,
         -8.4017e+00, -7.8363e-01,  6.0294e-02,  2.8307e+00, -3.8580e-01],
        [ 1.4088e+00,  5.2892e+00, -1.2469e+00, -1.4624e+00,  2.7369e-01,
         -8.0410e+00, -2.2184e+00, -2.3936e-01,  5.8928e+00,  7.1219e-01],
        [-2.9638e+00,  2.1405e+00, -9.5127e+00,  6.8203e+00, -9.0542e+00,
          3.8321e+00, -4.7324e-01, -1.7363e+00,  1.2941e-01, -5.1441e+00]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-2.6295, -2.7399, -7.1854, -4.5462, -1.7952, -6.4020, -2.1755, -4.9998,
        -5.1176, -3.7577], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  0.0174,   0.0165,  -4.6136,  -5.1820,   5.1688,  10.8919,  -1.3578,
           3.7451,   3.1030,   1.9664],
        [ -0.0174,  -0.0165,   4.6137,   5.1777,  -5.2032, -10.8906,   1.5794,
          -3.7450,  -3.1028,  -2.0853]], device='cuda:0'))])
loaded xi:  -71.82591
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -1600.4643004407776
min fval:  -1600.4643004407776
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.5691,  1.3571],
        [-0.5691,  1.3571],
        [-1.7786, 11.3296],
        [10.0719, -3.5218],
        [-0.5691,  1.3571],
        [-0.5691,  1.3571],
        [-0.5691,  1.3571],
        [-0.5691,  1.3571],
        [ 1.3464, 11.8066],
        [-0.5691,  1.3571]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -1.4737,  -1.4737,  11.7579, -10.3454,  -1.4737,  -1.4737,  -1.4737,
         -1.4737,  12.0645,  -1.4737], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-1.3915e-02, -1.3915e-02, -5.3638e-01, -2.6596e-01, -1.3917e-02,
         -1.3917e-02, -1.3917e-02, -1.3917e-02, -6.4912e-01, -1.3917e-02],
        [-1.3914e-02, -1.3914e-02, -5.3638e-01, -2.6596e-01, -1.3917e-02,
         -1.3917e-02, -1.3917e-02, -1.3917e-02, -6.4912e-01, -1.3917e-02],
        [ 5.3049e-02,  5.3049e-02, -5.7575e+00,  1.0777e+01,  5.2979e-02,
          5.2979e-02,  5.2978e-02,  5.2978e-02, -1.0656e+01,  5.2979e-02],
        [-1.3914e-02, -1.3914e-02, -5.3638e-01, -2.6596e-01, -1.3917e-02,
         -1.3917e-02, -1.3917e-02, -1.3917e-02, -6.4912e-01, -1.3917e-02],
        [-1.3915e-02, -1.3915e-02, -5.3638e-01, -2.6596e-01, -1.3917e-02,
         -1.3917e-02, -1.3917e-02, -1.3917e-02, -6.4912e-01, -1.3917e-02],
        [-1.3914e-02, -1.3914e-02, -5.3638e-01, -2.6596e-01, -1.3917e-02,
         -1.3917e-02, -1.3917e-02, -1.3917e-02, -6.4912e-01, -1.3917e-02],
        [ 6.8537e-02,  6.8538e-02,  7.8774e+00, -1.1827e+01,  6.8509e-02,
          6.8509e-02,  6.8508e-02,  6.8508e-02,  4.3046e+00,  6.8508e-02],
        [-2.0595e-03, -2.0598e-03,  6.6403e+00, -9.8723e+00, -2.2113e-03,
         -2.2115e-03, -2.2113e-03, -2.2116e-03,  3.4489e+00, -2.2113e-03],
        [-1.3915e-02, -1.3915e-02, -5.3638e-01, -2.6596e-01, -1.3917e-02,
         -1.3917e-02, -1.3917e-02, -1.3917e-02, -6.4912e-01, -1.3917e-02],
        [-1.3914e-02, -1.3914e-02, -5.3638e-01, -2.6596e-01, -1.3917e-02,
         -1.3917e-02, -1.3917e-02, -1.3917e-02, -6.4912e-01, -1.3917e-02]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.8886, -0.8886,  5.3408, -0.8886, -0.8886, -0.8886, -4.9005, -4.4195,
        -0.8886, -0.8886], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.0933,  -0.0933, -15.5406,  -0.0933,  -0.0933,  -0.0933,   8.7989,
           6.1559,  -0.0933,  -0.0933]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 20.2705,  12.8347],
        [-12.7112,   3.4282],
        [-10.2512, -14.1797],
        [-15.8884,   1.4786],
        [ -5.9761, -17.8052],
        [ -5.7838,   9.7688],
        [ -3.2451,  -1.5819],
        [  3.8914,   3.2312],
        [-12.8977,   0.8692],
        [ 14.9595,   2.8429]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ 11.8236,   4.9143, -14.0658,  15.1130, -18.2875,  11.1435,  -5.2670,
         -8.3820,   5.3610,  -3.9133], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-1.5955e+00,  3.0404e-03, -1.0766e+00, -1.0367e+00, -1.2611e+00,
         -3.2245e-01, -8.6644e-01, -3.3177e-02, -2.7153e-02, -1.3730e+00],
        [-1.5330e+00,  2.6038e-03, -1.0501e+00, -1.0290e+00, -1.2192e+00,
         -3.1714e-01, -8.3800e-01, -3.2109e-02, -2.4700e-02, -1.3410e+00],
        [-3.7140e+00,  4.9666e+00, -1.0005e+01, -5.5466e+00, -7.2172e+00,
          6.6331e+00, -4.9340e-01, -1.0172e+00,  6.6123e+00,  3.2206e+00],
        [-1.1462e+01,  1.4786e+00,  7.2457e+00,  1.3239e+01, -4.3379e+00,
         -2.0101e+01,  8.8606e+00, -2.2402e-03,  1.5929e+00, -2.3370e+00],
        [ 4.3080e+00, -6.1772e-04, -6.3989e-01, -1.3010e+01, -5.0680e-01,
         -4.3343e-01,  9.8342e+00,  9.4165e-02, -4.5935e-02, -4.4217e+00],
        [-2.2096e+01, -4.0124e-02,  1.2619e+00,  5.6164e+00,  2.4401e+00,
         -9.5014e+00, -4.9855e+00, -1.8709e-04,  9.7138e+00, -1.2266e+01],
        [ 6.5422e-01,  8.2182e+00, -5.6597e+00,  1.4832e+00, -9.6641e+00,
         -6.1648e-01, -6.1438e-01, -6.7049e+00,  5.0496e+00, -2.8071e+00],
        [ 1.6642e+00, -4.7501e-01, -3.2953e+00,  7.0514e-02,  3.5368e-01,
         -8.4017e+00, -7.8363e-01,  6.0294e-02,  2.8307e+00, -3.8580e-01],
        [ 1.4088e+00,  5.2892e+00, -1.2469e+00, -1.4624e+00,  2.7369e-01,
         -8.0410e+00, -2.2184e+00, -2.3936e-01,  5.8928e+00,  7.1219e-01],
        [-2.9638e+00,  2.1405e+00, -9.5127e+00,  6.8203e+00, -9.0542e+00,
          3.8321e+00, -4.7324e-01, -1.7363e+00,  1.2941e-01, -5.1441e+00]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-2.6295, -2.7399, -7.1854, -4.5462, -1.7952, -6.4020, -2.1755, -4.9998,
        -5.1176, -3.7577], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  0.0174,   0.0165,  -4.6136,  -5.1820,   5.1688,  10.8919,  -1.3578,
           3.7451,   3.1030,   1.9664],
        [ -0.0174,  -0.0165,   4.6137,   5.1777,  -5.2032, -10.8906,   1.5794,
          -3.7450,  -3.1028,  -2.0853]], device='cuda:0'))])
xi:  [-71.82591]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 1414.6380497109678
W_T_median: 147.8755458649357
W_T_pctile_5: -75.47905962727293
W_T_CVAR_5_pct: -191.52235896634792
Average q (qsum/M+1):  54.67793126260081
Optimal xi:  [-71.82591]
Observed VAR:  147.8755458649357
Expected(across Rb) median(across samples) p_equity:  0.5305271938443183
obj fun:  tensor(-1600.4643, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 0.5
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-50.9297,  -5.9420],
        [ -1.7255,   1.3905],
        [  3.7139,  -7.8873],
        [ -7.4670,   0.2655],
        [  8.4435,  -3.0162],
        [  7.9581,  -1.6778],
        [  3.1246,  -6.9585],
        [  8.4106,  -1.7614],
        [ -1.5985,  -9.6379],
        [ -2.0548,  -8.0285]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-6.2712, -4.1437, -7.6755,  6.2098, -7.2871, -7.4819, -7.1801, -7.6235,
        -8.8481,  4.0023], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-7.5009e+00,  2.9710e-02, -8.6132e+00,  5.8686e+00, -7.1350e+00,
         -5.1520e+00, -5.9775e+00, -6.1079e+00, -1.0144e+01,  1.4545e+00],
        [-2.2658e-01, -1.3114e-02, -2.6116e-01, -1.2896e+00, -8.1760e-01,
         -8.2522e-01, -1.9060e-01, -9.0164e-01, -3.7311e-01, -1.3226e+00],
        [ 1.4941e-01,  1.3061e-01,  3.4243e-01,  1.6116e+00,  7.4953e-01,
          7.5921e-01,  2.7485e-01,  8.4538e-01,  3.8867e-01,  1.5197e+00],
        [ 5.1744e+00, -7.0773e-03,  6.8692e+00, -5.6608e+00,  2.5813e+00,
          4.4830e+00,  3.9490e+00,  5.5505e+00,  1.0545e+01, -2.3507e+00],
        [ 1.6504e-01,  1.6146e-01,  3.6303e-01,  1.7892e+00,  8.7581e-01,
          8.9393e-01,  2.8995e-01,  9.9763e-01,  4.1747e-01,  1.6463e+00],
        [-2.2658e-01, -1.3094e-02, -2.6116e-01, -1.2896e+00, -8.1759e-01,
         -8.2522e-01, -1.9060e-01, -9.0163e-01, -3.7310e-01, -1.3226e+00],
        [ 5.6345e+00,  3.6632e-03,  6.9509e+00, -5.8149e+00,  2.8071e+00,
          4.5795e+00,  4.1896e+00,  5.7371e+00,  1.0332e+01, -2.3794e+00],
        [-1.6654e-01, -4.5534e-02, -2.4374e-01, -1.3200e+00, -6.9691e-01,
         -7.5275e-01, -1.8873e-01, -8.3527e-01, -2.7800e-01, -1.1533e+00],
        [-2.2658e-01, -1.3092e-02, -2.6116e-01, -1.2896e+00, -8.1759e-01,
         -8.2522e-01, -1.9060e-01, -9.0163e-01, -3.7310e-01, -1.3226e+00],
        [ 7.1348e+00,  1.4043e-04,  8.6696e+00, -6.0253e+00,  4.7576e+00,
          6.6144e+00,  5.6130e+00,  8.3716e+00,  1.2163e+01, -2.5671e+00]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([ 3.9115, -2.2606,  2.9195, -4.6776,  3.3467, -2.2606, -4.5697, -2.1203,
        -2.2606, -5.2327], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 1.1572e+01,  2.9992e-05,  1.3625e+00, -5.3331e+00,  2.7921e+00,
          3.1545e-05, -5.5228e+00,  2.3086e-02,  3.1332e-05, -1.1389e+01]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 9.3250,  1.8624],
        [ 1.4828, 11.8763],
        [-8.8804, -1.4306],
        [-1.3222,  5.9039],
        [-9.7003, -2.3791],
        [ 1.4315, 10.9659],
        [-9.3064, -2.2845],
        [-9.4249, -2.6613],
        [-7.8264, -2.0303],
        [10.0325,  2.0808]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([-5.6715,  0.1399,  3.5777,  7.8902, -0.8408, 10.4495, -0.9158, -2.5554,
        -2.5425, -1.7098], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-3.7857e+00, -7.6265e-01, -1.2175e+00, -9.9848e-01,  8.2126e-02,
          1.1707e+00,  6.2102e-02,  7.1536e-01,  2.6350e-01, -2.3603e+00],
        [ 1.6546e+00, -7.7288e+00, -1.6173e+01, -3.3834e+00, -1.9251e+00,
          2.0549e+00, -2.0346e+00, -6.0004e-01, -8.1098e-01, -8.8455e-01],
        [-8.9200e-01, -1.7579e+00, -5.7711e+00, -2.9845e+00, -8.1152e-01,
          1.1909e-01, -8.0154e-01, -5.0823e-01, -4.0452e-01, -2.2386e+00],
        [-4.3154e+00, -1.0375e+00, -2.6168e-01, -1.4448e+00,  2.1023e-01,
          2.4403e+00,  2.9077e-01,  2.2374e+00,  1.7615e+00, -2.4911e+00],
        [-7.8690e-01, -2.3625e+00, -8.4962e+00, -3.4761e+00, -1.4453e+00,
          9.8360e-02, -1.4223e+00, -8.3024e-01, -6.9220e-01, -1.5169e+00],
        [-1.9955e+00, -2.4879e+00, -8.9177e-01, -6.4246e-01,  7.9730e-01,
          1.5856e+00,  8.3291e-01,  1.2564e+00,  1.1061e+00, -2.5417e+00],
        [-4.9526e+00, -2.3823e-01, -1.2195e+00, -1.2948e+00,  4.8790e-01,
          2.0114e+00,  4.7466e-01,  1.2986e+00,  7.5162e-01, -1.9830e+00],
        [-3.3573e+00, -3.7362e-02,  4.2474e+00, -4.5449e+00,  6.2896e+00,
         -2.9380e+01,  5.8144e+00,  5.3684e+00,  4.3663e+00, -4.7801e+00],
        [-5.0636e+00,  2.9411e-02,  2.5767e+00, -9.1340e+00,  4.9585e+00,
         -8.6763e+00,  4.7043e+00,  5.3597e+00,  4.3483e+00, -7.8079e+00],
        [ 5.5387e+00, -5.8388e-03, -9.0129e+00,  2.3398e+00, -2.3698e+00,
          3.2145e+01, -2.5487e+00,  4.5909e-01, -1.8235e+00,  1.4785e+00]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-4.6124, -2.5821, -3.4484, -3.8514, -3.0332, -4.2928, -4.1645, -0.6284,
        -3.7622, -1.1467], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  1.4086,   3.6613,   1.7299,   2.2806,   2.4271,   1.5500,   2.1151,
          -8.0988,  16.4122,   0.0895],
        [ -1.4862,  -3.6049,  -1.6576,  -2.2842,  -2.4529,  -1.5338,  -1.9840,
           8.1202, -16.2242,  -0.2425]], device='cuda:0'))])
loaded xi:  51.40288
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -1547.457749182229
min fval:  -1547.457749182229
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-50.9297,  -5.9420],
        [ -1.7255,   1.3905],
        [  3.7139,  -7.8873],
        [ -7.4670,   0.2655],
        [  8.4435,  -3.0162],
        [  7.9581,  -1.6778],
        [  3.1246,  -6.9585],
        [  8.4106,  -1.7614],
        [ -1.5985,  -9.6379],
        [ -2.0548,  -8.0285]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-6.2712, -4.1437, -7.6755,  6.2098, -7.2871, -7.4819, -7.1801, -7.6235,
        -8.8481,  4.0023], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-7.5009e+00,  2.9710e-02, -8.6132e+00,  5.8686e+00, -7.1350e+00,
         -5.1520e+00, -5.9775e+00, -6.1079e+00, -1.0144e+01,  1.4545e+00],
        [-2.2658e-01, -1.3114e-02, -2.6116e-01, -1.2896e+00, -8.1760e-01,
         -8.2522e-01, -1.9060e-01, -9.0164e-01, -3.7311e-01, -1.3226e+00],
        [ 1.4941e-01,  1.3061e-01,  3.4243e-01,  1.6116e+00,  7.4953e-01,
          7.5921e-01,  2.7485e-01,  8.4538e-01,  3.8867e-01,  1.5197e+00],
        [ 5.1744e+00, -7.0773e-03,  6.8692e+00, -5.6608e+00,  2.5813e+00,
          4.4830e+00,  3.9490e+00,  5.5505e+00,  1.0545e+01, -2.3507e+00],
        [ 1.6504e-01,  1.6146e-01,  3.6303e-01,  1.7892e+00,  8.7581e-01,
          8.9393e-01,  2.8995e-01,  9.9763e-01,  4.1747e-01,  1.6463e+00],
        [-2.2658e-01, -1.3094e-02, -2.6116e-01, -1.2896e+00, -8.1759e-01,
         -8.2522e-01, -1.9060e-01, -9.0163e-01, -3.7310e-01, -1.3226e+00],
        [ 5.6345e+00,  3.6632e-03,  6.9509e+00, -5.8149e+00,  2.8071e+00,
          4.5795e+00,  4.1896e+00,  5.7371e+00,  1.0332e+01, -2.3794e+00],
        [-1.6654e-01, -4.5534e-02, -2.4374e-01, -1.3200e+00, -6.9691e-01,
         -7.5275e-01, -1.8873e-01, -8.3527e-01, -2.7800e-01, -1.1533e+00],
        [-2.2658e-01, -1.3092e-02, -2.6116e-01, -1.2896e+00, -8.1759e-01,
         -8.2522e-01, -1.9060e-01, -9.0163e-01, -3.7310e-01, -1.3226e+00],
        [ 7.1348e+00,  1.4043e-04,  8.6696e+00, -6.0253e+00,  4.7576e+00,
          6.6144e+00,  5.6130e+00,  8.3716e+00,  1.2163e+01, -2.5671e+00]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([ 3.9115, -2.2606,  2.9195, -4.6776,  3.3467, -2.2606, -4.5697, -2.1203,
        -2.2606, -5.2327], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 1.1572e+01,  2.9992e-05,  1.3625e+00, -5.3331e+00,  2.7921e+00,
          3.1545e-05, -5.5228e+00,  2.3086e-02,  3.1332e-05, -1.1389e+01]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 9.3250,  1.8624],
        [ 1.4828, 11.8763],
        [-8.8804, -1.4306],
        [-1.3222,  5.9039],
        [-9.7003, -2.3791],
        [ 1.4315, 10.9659],
        [-9.3064, -2.2845],
        [-9.4249, -2.6613],
        [-7.8264, -2.0303],
        [10.0325,  2.0808]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([-5.6715,  0.1399,  3.5777,  7.8902, -0.8408, 10.4495, -0.9158, -2.5554,
        -2.5425, -1.7098], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-3.7857e+00, -7.6265e-01, -1.2175e+00, -9.9848e-01,  8.2126e-02,
          1.1707e+00,  6.2102e-02,  7.1536e-01,  2.6350e-01, -2.3603e+00],
        [ 1.6546e+00, -7.7288e+00, -1.6173e+01, -3.3834e+00, -1.9251e+00,
          2.0549e+00, -2.0346e+00, -6.0004e-01, -8.1098e-01, -8.8455e-01],
        [-8.9200e-01, -1.7579e+00, -5.7711e+00, -2.9845e+00, -8.1152e-01,
          1.1909e-01, -8.0154e-01, -5.0823e-01, -4.0452e-01, -2.2386e+00],
        [-4.3154e+00, -1.0375e+00, -2.6168e-01, -1.4448e+00,  2.1023e-01,
          2.4403e+00,  2.9077e-01,  2.2374e+00,  1.7615e+00, -2.4911e+00],
        [-7.8690e-01, -2.3625e+00, -8.4962e+00, -3.4761e+00, -1.4453e+00,
          9.8360e-02, -1.4223e+00, -8.3024e-01, -6.9220e-01, -1.5169e+00],
        [-1.9955e+00, -2.4879e+00, -8.9177e-01, -6.4246e-01,  7.9730e-01,
          1.5856e+00,  8.3291e-01,  1.2564e+00,  1.1061e+00, -2.5417e+00],
        [-4.9526e+00, -2.3823e-01, -1.2195e+00, -1.2948e+00,  4.8790e-01,
          2.0114e+00,  4.7466e-01,  1.2986e+00,  7.5162e-01, -1.9830e+00],
        [-3.3573e+00, -3.7362e-02,  4.2474e+00, -4.5449e+00,  6.2896e+00,
         -2.9380e+01,  5.8144e+00,  5.3684e+00,  4.3663e+00, -4.7801e+00],
        [-5.0636e+00,  2.9411e-02,  2.5767e+00, -9.1340e+00,  4.9585e+00,
         -8.6763e+00,  4.7043e+00,  5.3597e+00,  4.3483e+00, -7.8079e+00],
        [ 5.5387e+00, -5.8388e-03, -9.0129e+00,  2.3398e+00, -2.3698e+00,
          3.2145e+01, -2.5487e+00,  4.5909e-01, -1.8235e+00,  1.4785e+00]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-4.6124, -2.5821, -3.4484, -3.8514, -3.0332, -4.2928, -4.1645, -0.6284,
        -3.7622, -1.1467], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  1.4086,   3.6613,   1.7299,   2.2806,   2.4271,   1.5500,   2.1151,
          -8.0988,  16.4122,   0.0895],
        [ -1.4862,  -3.6049,  -1.6576,  -2.2842,  -2.4529,  -1.5338,  -1.9840,
           8.1202, -16.2242,  -0.2425]], device='cuda:0'))])
xi:  [51.40288]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 889.3601791978954
W_T_median: 396.7493155198714
W_T_pctile_5: 75.55535519240955
W_T_CVAR_5_pct: -68.36317927408922
Average q (qsum/M+1):  52.26485713835685
Optimal xi:  [51.40288]
Observed VAR:  396.7493155198714
Expected(across Rb) median(across samples) p_equity:  0.39357727269331616
obj fun:  tensor(-1547.4577, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 1.0
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-50.8770,  -6.9131],
        [ -1.0773,   0.5241],
        [  6.4291,  -9.3704],
        [-11.1947,   0.3528],
        [ 12.1664,  -2.0625],
        [ 11.4374,  -1.6208],
        [  8.8241,  -7.8340],
        [ 12.4826,  -1.5587],
        [ -3.6302, -11.4153],
        [ -2.0000,  -8.5175]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -7.2069,  -2.6956,  -9.0979,   9.1799, -10.1538, -10.4683,  -8.3108,
        -10.3855,  -9.8811,   8.5012], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ -9.2866,  -0.0664, -10.9937,   6.3616,  -8.6453,  -4.8795,  -7.7905,
          -7.4796, -12.5313,   1.6014],
        [ -0.0308,  -0.0162,  -0.1695,  -0.6386,  -0.2181,  -0.1229,  -0.1559,
          -0.3158,  -0.1536,  -0.7489],
        [ -0.0308,  -0.0162,  -0.1695,  -0.6386,  -0.2181,  -0.1229,  -0.1559,
          -0.3158,  -0.1536,  -0.7489],
        [ -0.0308,  -0.0162,  -0.1695,  -0.6386,  -0.2181,  -0.1229,  -0.1559,
          -0.3158,  -0.1536,  -0.7489],
        [ -0.0954,   0.0403,   0.1178,   0.8666,   0.2899,   0.1854,   0.1113,
           0.3319,   0.1249,   1.1575],
        [ -0.0308,  -0.0162,  -0.1695,  -0.6386,  -0.2181,  -0.1229,  -0.1559,
          -0.3158,  -0.1536,  -0.7489],
        [ -0.0307,  -0.0161,  -0.1692,  -0.6508,  -0.2198,  -0.1244,  -0.1570,
          -0.3172,  -0.1499,  -0.7364],
        [ -0.0308,  -0.0162,  -0.1695,  -0.6386,  -0.2181,  -0.1229,  -0.1559,
          -0.3158,  -0.1536,  -0.7489],
        [ -0.0308,  -0.0162,  -0.1695,  -0.6386,  -0.2181,  -0.1229,  -0.1559,
          -0.3158,  -0.1536,  -0.7489],
        [  9.6373,  -0.0549,  11.2327,  -6.8464,   5.6433,   6.2875,   7.1477,
           9.6273,  14.2518,  -3.2216]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([ 4.4279, -1.1825, -1.1825, -1.1825,  1.7972, -1.1825, -1.2163, -1.1825,
        -1.1825, -6.0032], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 1.3699e+01, -1.6208e-02, -1.6208e-02, -1.6208e-02,  8.2031e-01,
         -1.6208e-02, -1.6046e-02, -1.6208e-02, -1.6208e-02, -1.6746e+01]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 12.2106,   0.8786],
        [ -1.2600,   7.1965],
        [-12.2299,  -0.3314],
        [  9.5402,   9.0034],
        [-11.9286,  -3.8746],
        [  3.0678,  13.6185],
        [-12.2129,  -3.6896],
        [ -1.8706,   0.5083],
        [ -9.6404,   2.4544],
        [ 13.3977,   1.8106]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([-10.2276,   2.1185,   9.1438,   8.3221,  -1.3532,  11.6582,  -3.6320,
         -4.0769,   1.5434,  -6.5967], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-3.2432e-01,  1.3314e-01, -1.3996e+00, -1.9525e+00, -2.5291e-01,
         -8.1709e-01, -7.0419e-02, -3.5919e-02,  1.1494e-01, -1.6105e+00],
        [ 2.1056e+00, -6.0069e+00, -1.7334e+01,  5.2396e-01, -2.9211e-01,
         -6.1192e-01, -1.2530e-02, -7.4283e-02,  1.9250e-01, -4.0219e-01],
        [-3.2466e-01,  1.3315e-01, -1.3997e+00, -1.9524e+00, -2.5297e-01,
         -8.1681e-01, -7.0404e-02, -3.5901e-02,  1.1501e-01, -1.6108e+00],
        [-5.8698e+00,  4.7791e+00,  2.0479e+00, -8.8958e-02,  2.4635e+00,
          1.3203e+00,  2.0335e+00,  4.4963e-01, -1.0341e+01, -2.6765e+00],
        [ 1.1156e+00,  4.4520e+00, -7.4392e+00, -1.9356e+00,  2.7012e-03,
          2.8815e-01, -1.2750e-02,  6.0772e-02, -5.3109e+00, -1.8341e+00],
        [ 3.6160e+00, -7.2384e+00, -1.2866e+00,  2.1601e-01,  3.3569e+00,
          3.2772e+00,  6.7262e+00, -3.4474e-02,  3.1439e+00, -2.1150e+00],
        [ 1.0035e+00, -2.8491e+00, -3.7776e+00, -8.2642e-01,  7.3314e-01,
          2.2291e+00,  1.1570e-01, -4.0435e-02,  6.8479e-01, -1.9113e+00],
        [-6.8841e+00, -4.7004e-01,  2.6391e+00, -2.8629e+00,  6.3488e+00,
         -2.6155e+01,  4.6669e+00,  6.5800e-02,  1.4264e-01, -2.0947e+00],
        [-1.4184e+00, -6.4572e-01,  2.8803e+00, -1.4509e+01,  8.8005e+00,
         -1.6749e+01,  6.4053e+00,  7.0129e-01, -3.2198e+00, -1.4504e+01],
        [ 2.6233e+00,  4.5259e-01, -6.5230e+00,  5.7506e+00, -4.8129e+00,
          2.8872e+01,  2.4882e+00,  1.4563e-01,  2.5043e+00,  7.7609e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-4.0285, -2.9444, -4.0284, -6.0982, -4.2455, -6.2109, -5.4372, -2.7450,
        -7.1300, -2.5366], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ -0.2478,   4.3722,  -0.2476,   1.5048,  -2.3572,   1.7692,   1.9871,
          -7.7607,  16.0216,   0.1485],
        [  0.2477,  -4.3291,   0.2477,  -1.5068,   2.3565,  -1.7589,  -1.9763,
           7.7811, -15.9689,  -0.3013]], device='cuda:0'))])
loaded xi:  136.99971
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -1536.2118192080893
min fval:  -1536.2118192080893
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-50.8770,  -6.9131],
        [ -1.0773,   0.5241],
        [  6.4291,  -9.3704],
        [-11.1947,   0.3528],
        [ 12.1664,  -2.0625],
        [ 11.4374,  -1.6208],
        [  8.8241,  -7.8340],
        [ 12.4826,  -1.5587],
        [ -3.6302, -11.4153],
        [ -2.0000,  -8.5175]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -7.2069,  -2.6956,  -9.0979,   9.1799, -10.1538, -10.4683,  -8.3108,
        -10.3855,  -9.8811,   8.5012], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ -9.2866,  -0.0664, -10.9937,   6.3616,  -8.6453,  -4.8795,  -7.7905,
          -7.4796, -12.5313,   1.6014],
        [ -0.0308,  -0.0162,  -0.1695,  -0.6386,  -0.2181,  -0.1229,  -0.1559,
          -0.3158,  -0.1536,  -0.7489],
        [ -0.0308,  -0.0162,  -0.1695,  -0.6386,  -0.2181,  -0.1229,  -0.1559,
          -0.3158,  -0.1536,  -0.7489],
        [ -0.0308,  -0.0162,  -0.1695,  -0.6386,  -0.2181,  -0.1229,  -0.1559,
          -0.3158,  -0.1536,  -0.7489],
        [ -0.0954,   0.0403,   0.1178,   0.8666,   0.2899,   0.1854,   0.1113,
           0.3319,   0.1249,   1.1575],
        [ -0.0308,  -0.0162,  -0.1695,  -0.6386,  -0.2181,  -0.1229,  -0.1559,
          -0.3158,  -0.1536,  -0.7489],
        [ -0.0307,  -0.0161,  -0.1692,  -0.6508,  -0.2198,  -0.1244,  -0.1570,
          -0.3172,  -0.1499,  -0.7364],
        [ -0.0308,  -0.0162,  -0.1695,  -0.6386,  -0.2181,  -0.1229,  -0.1559,
          -0.3158,  -0.1536,  -0.7489],
        [ -0.0308,  -0.0162,  -0.1695,  -0.6386,  -0.2181,  -0.1229,  -0.1559,
          -0.3158,  -0.1536,  -0.7489],
        [  9.6373,  -0.0549,  11.2327,  -6.8464,   5.6433,   6.2875,   7.1477,
           9.6273,  14.2518,  -3.2216]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([ 4.4279, -1.1825, -1.1825, -1.1825,  1.7972, -1.1825, -1.2163, -1.1825,
        -1.1825, -6.0032], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 1.3699e+01, -1.6208e-02, -1.6208e-02, -1.6208e-02,  8.2031e-01,
         -1.6208e-02, -1.6046e-02, -1.6208e-02, -1.6208e-02, -1.6746e+01]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 12.2106,   0.8786],
        [ -1.2600,   7.1965],
        [-12.2299,  -0.3314],
        [  9.5402,   9.0034],
        [-11.9286,  -3.8746],
        [  3.0678,  13.6185],
        [-12.2129,  -3.6896],
        [ -1.8706,   0.5083],
        [ -9.6404,   2.4544],
        [ 13.3977,   1.8106]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([-10.2276,   2.1185,   9.1438,   8.3221,  -1.3532,  11.6582,  -3.6320,
         -4.0769,   1.5434,  -6.5967], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-3.2432e-01,  1.3314e-01, -1.3996e+00, -1.9525e+00, -2.5291e-01,
         -8.1709e-01, -7.0419e-02, -3.5919e-02,  1.1494e-01, -1.6105e+00],
        [ 2.1056e+00, -6.0069e+00, -1.7334e+01,  5.2396e-01, -2.9211e-01,
         -6.1192e-01, -1.2530e-02, -7.4283e-02,  1.9250e-01, -4.0219e-01],
        [-3.2466e-01,  1.3315e-01, -1.3997e+00, -1.9524e+00, -2.5297e-01,
         -8.1681e-01, -7.0404e-02, -3.5901e-02,  1.1501e-01, -1.6108e+00],
        [-5.8698e+00,  4.7791e+00,  2.0479e+00, -8.8958e-02,  2.4635e+00,
          1.3203e+00,  2.0335e+00,  4.4963e-01, -1.0341e+01, -2.6765e+00],
        [ 1.1156e+00,  4.4520e+00, -7.4392e+00, -1.9356e+00,  2.7012e-03,
          2.8815e-01, -1.2750e-02,  6.0772e-02, -5.3109e+00, -1.8341e+00],
        [ 3.6160e+00, -7.2384e+00, -1.2866e+00,  2.1601e-01,  3.3569e+00,
          3.2772e+00,  6.7262e+00, -3.4474e-02,  3.1439e+00, -2.1150e+00],
        [ 1.0035e+00, -2.8491e+00, -3.7776e+00, -8.2642e-01,  7.3314e-01,
          2.2291e+00,  1.1570e-01, -4.0435e-02,  6.8479e-01, -1.9113e+00],
        [-6.8841e+00, -4.7004e-01,  2.6391e+00, -2.8629e+00,  6.3488e+00,
         -2.6155e+01,  4.6669e+00,  6.5800e-02,  1.4264e-01, -2.0947e+00],
        [-1.4184e+00, -6.4572e-01,  2.8803e+00, -1.4509e+01,  8.8005e+00,
         -1.6749e+01,  6.4053e+00,  7.0129e-01, -3.2198e+00, -1.4504e+01],
        [ 2.6233e+00,  4.5259e-01, -6.5230e+00,  5.7506e+00, -4.8129e+00,
          2.8872e+01,  2.4882e+00,  1.4563e-01,  2.5043e+00,  7.7609e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-4.0285, -2.9444, -4.0284, -6.0982, -4.2455, -6.2109, -5.4372, -2.7450,
        -7.1300, -2.5366], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ -0.2478,   4.3722,  -0.2476,   1.5048,  -2.3572,   1.7692,   1.9871,
          -7.7607,  16.0216,   0.1485],
        [  0.2477,  -4.3291,   0.2477,  -1.5068,   2.3565,  -1.7589,  -1.9763,
           7.7811, -15.9689,  -0.3013]], device='cuda:0'))])
xi:  [136.99971]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 828.3793400739785
W_T_median: 427.01172224692937
W_T_pctile_5: 134.87988837673916
W_T_CVAR_5_pct: -28.55577448748113
Average q (qsum/M+1):  50.967340284778224
Optimal xi:  [136.99971]
Observed VAR:  427.01172224692937
Expected(across Rb) median(across samples) p_equity:  0.35072964256008465
obj fun:  tensor(-1536.2118, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 1.5
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -2.2179,  -0.5368],
        [ -2.3361,  -0.6335],
        [ -0.5311,   7.2470],
        [ 18.3118,  -3.3749],
        [ -3.0461,  -1.1329],
        [ -3.5639,  -1.4705],
        [ -4.5593,  -2.1009],
        [-45.9455,  -2.2657],
        [ -7.3396,  12.9378],
        [ -6.1134,  -1.8969]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -4.5377,  -4.5159,  -7.5165, -11.9533,  -4.2881,  -4.0527,  -3.4724,
         -3.2549,  10.0112,  -3.5799], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-4.7313e-03, -5.3840e-03, -1.0303e-01, -1.3855e-01, -1.0744e-02,
         -2.0453e-02, -1.0473e-01, -3.5139e-02, -5.6899e-01, -6.2270e-02],
        [-4.7313e-03, -5.3840e-03, -1.0303e-01, -1.3855e-01, -1.0744e-02,
         -2.0453e-02, -1.0473e-01, -3.5139e-02, -5.6899e-01, -6.2270e-02],
        [ 1.5288e+00,  1.6712e+00,  6.4439e+00,  1.6816e+01,  2.3897e+00,
          2.8510e+00,  3.6484e+00,  5.3923e+00, -1.6772e+01,  3.7052e+00],
        [-4.7313e-03, -5.3840e-03, -1.0303e-01, -1.3855e-01, -1.0744e-02,
         -2.0453e-02, -1.0473e-01, -3.5139e-02, -5.6899e-01, -6.2270e-02],
        [-4.7313e-03, -5.3841e-03, -1.0303e-01, -1.3855e-01, -1.0744e-02,
         -2.0453e-02, -1.0473e-01, -3.5138e-02, -5.6899e-01, -6.2270e-02],
        [-4.7313e-03, -5.3841e-03, -1.0303e-01, -1.3855e-01, -1.0744e-02,
         -2.0453e-02, -1.0473e-01, -3.5138e-02, -5.6899e-01, -6.2270e-02],
        [-9.5099e-01, -1.0782e+00, -5.8579e+00, -1.3409e+01, -1.7662e+00,
         -2.2459e+00, -3.1307e+00, -5.0592e+00,  1.3433e+01, -3.2707e+00],
        [-3.6874e-01, -4.8142e-01, -3.5478e+00, -1.1698e+01, -1.2813e+00,
         -1.9924e+00, -3.3302e+00, -4.7743e+00,  8.8089e+00, -3.2709e+00],
        [-4.7313e-03, -5.3840e-03, -1.0303e-01, -1.3855e-01, -1.0744e-02,
         -2.0453e-02, -1.0473e-01, -3.5139e-02, -5.6899e-01, -6.2270e-02],
        [-4.7313e-03, -5.3840e-03, -1.0303e-01, -1.3855e-01, -1.0744e-02,
         -2.0453e-02, -1.0473e-01, -3.5139e-02, -5.6899e-01, -6.2270e-02]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.7904, -1.7904,  1.9355, -1.7904, -1.7904, -1.7904, -1.4514, -1.5835,
        -1.7904, -1.7904], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-1.3662e-02, -1.3662e-02, -2.4030e+01, -1.3662e-02, -1.3662e-02,
         -1.3662e-02,  1.3710e+01,  7.0183e+00, -1.3662e-02, -1.3662e-02]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 19.5117,  14.3907],
        [ -2.5644,   0.4779],
        [ -8.3021, -19.4571],
        [-21.2397,   0.9369],
        [-12.0931, -13.6297],
        [-14.0515,  10.9846],
        [ -2.5652,   0.4770],
        [ -2.5644,   0.4778],
        [-13.1529,   0.7819],
        [  7.6098,   0.7808]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ 12.8193,  -5.3244, -17.1896,  18.8142, -15.7450,   9.6578,  -5.3236,
         -5.3245,   6.0103, -13.5785], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 2.5085e-01,  1.0614e-01, -7.1542e-01, -5.9082e-02, -1.4498e+01,
         -2.8926e-01,  1.0657e-01,  1.0615e-01,  3.0840e-01,  5.7330e-01],
        [-8.9377e-01,  4.8060e-02, -6.4845e+00,  5.5669e-01, -3.5923e-01,
         -5.9691e-01,  4.7696e-02,  4.8234e-02, -5.8208e-01,  7.5836e-01],
        [-8.0173e+00,  7.9951e-01, -1.2934e+01, -3.8292e+00, -5.1322e-01,
          1.0487e+01,  7.9792e-01,  7.9941e-01,  1.6765e+01,  2.3710e-01],
        [-1.3174e+01,  6.0600e-02,  5.3740e+00,  1.5542e+01, -6.0685e-01,
         -1.0175e+01,  6.0677e-02,  6.0610e-02,  1.8239e+00, -2.2404e-01],
        [-3.5431e+00, -3.0188e-02, -8.2304e-02, -1.9599e+00,  2.1496e-01,
         -7.9330e-01, -3.0223e-02, -3.0186e-02, -5.1007e-01, -1.5589e-01],
        [-4.3552e+01,  2.0517e-01,  4.1050e+00,  6.1175e+00,  1.4757e+00,
         -4.5472e+00,  2.0548e-01,  2.0512e-01,  1.2210e+01,  2.8057e-02],
        [-3.5864e+00, -4.6397e-02,  1.0876e-02, -1.9545e+00,  2.9955e-01,
         -8.1923e-01, -4.6513e-02, -4.6399e-02, -5.2739e-01, -1.9041e-01],
        [ 1.1861e+00,  1.5128e-02, -2.4234e+01, -3.2882e-01,  3.0464e-01,
         -1.4878e+01,  1.4104e-02,  1.5280e-02,  8.0196e-01,  1.4370e+00],
        [ 2.7058e+00, -1.2929e-02,  9.1525e-01, -1.1284e+01, -1.0266e+00,
         -8.8435e+00, -1.3503e-02, -1.2854e-02, -2.0613e-01,  1.7618e+00],
        [-5.4868e+00, -1.0893e-01, -1.0118e+00,  5.6628e+00, -5.8591e+00,
          4.5001e+00, -1.1076e-01, -1.0905e-01,  4.3777e+00, -1.3787e+00]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -3.1012,  -4.7878, -13.4441,  -9.9347,  -3.9917, -13.9742,  -3.8785,
         -5.4041,  -6.1475,  -6.1022], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  4.4998,   5.2407,  -3.0046,  -5.1409,  -0.6420,  13.6732,  -0.7320,
           6.5317,   4.2916,   0.8377],
        [ -4.4998,  -5.2407,   3.0047,   5.1464,   0.6420, -13.6630,   0.7322,
          -6.5316,  -4.2913,  -0.9501]], device='cuda:0'))])
loaded xi:  188.32353
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -1533.1333259527842
min fval:  -1533.1333259527842
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -2.2179,  -0.5368],
        [ -2.3361,  -0.6335],
        [ -0.5311,   7.2470],
        [ 18.3118,  -3.3749],
        [ -3.0461,  -1.1329],
        [ -3.5639,  -1.4705],
        [ -4.5593,  -2.1009],
        [-45.9455,  -2.2657],
        [ -7.3396,  12.9378],
        [ -6.1134,  -1.8969]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -4.5377,  -4.5159,  -7.5165, -11.9533,  -4.2881,  -4.0527,  -3.4724,
         -3.2549,  10.0112,  -3.5799], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-4.7313e-03, -5.3840e-03, -1.0303e-01, -1.3855e-01, -1.0744e-02,
         -2.0453e-02, -1.0473e-01, -3.5139e-02, -5.6899e-01, -6.2270e-02],
        [-4.7313e-03, -5.3840e-03, -1.0303e-01, -1.3855e-01, -1.0744e-02,
         -2.0453e-02, -1.0473e-01, -3.5139e-02, -5.6899e-01, -6.2270e-02],
        [ 1.5288e+00,  1.6712e+00,  6.4439e+00,  1.6816e+01,  2.3897e+00,
          2.8510e+00,  3.6484e+00,  5.3923e+00, -1.6772e+01,  3.7052e+00],
        [-4.7313e-03, -5.3840e-03, -1.0303e-01, -1.3855e-01, -1.0744e-02,
         -2.0453e-02, -1.0473e-01, -3.5139e-02, -5.6899e-01, -6.2270e-02],
        [-4.7313e-03, -5.3841e-03, -1.0303e-01, -1.3855e-01, -1.0744e-02,
         -2.0453e-02, -1.0473e-01, -3.5138e-02, -5.6899e-01, -6.2270e-02],
        [-4.7313e-03, -5.3841e-03, -1.0303e-01, -1.3855e-01, -1.0744e-02,
         -2.0453e-02, -1.0473e-01, -3.5138e-02, -5.6899e-01, -6.2270e-02],
        [-9.5099e-01, -1.0782e+00, -5.8579e+00, -1.3409e+01, -1.7662e+00,
         -2.2459e+00, -3.1307e+00, -5.0592e+00,  1.3433e+01, -3.2707e+00],
        [-3.6874e-01, -4.8142e-01, -3.5478e+00, -1.1698e+01, -1.2813e+00,
         -1.9924e+00, -3.3302e+00, -4.7743e+00,  8.8089e+00, -3.2709e+00],
        [-4.7313e-03, -5.3840e-03, -1.0303e-01, -1.3855e-01, -1.0744e-02,
         -2.0453e-02, -1.0473e-01, -3.5139e-02, -5.6899e-01, -6.2270e-02],
        [-4.7313e-03, -5.3840e-03, -1.0303e-01, -1.3855e-01, -1.0744e-02,
         -2.0453e-02, -1.0473e-01, -3.5139e-02, -5.6899e-01, -6.2270e-02]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.7904, -1.7904,  1.9355, -1.7904, -1.7904, -1.7904, -1.4514, -1.5835,
        -1.7904, -1.7904], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-1.3662e-02, -1.3662e-02, -2.4030e+01, -1.3662e-02, -1.3662e-02,
         -1.3662e-02,  1.3710e+01,  7.0183e+00, -1.3662e-02, -1.3662e-02]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 19.5117,  14.3907],
        [ -2.5644,   0.4779],
        [ -8.3021, -19.4571],
        [-21.2397,   0.9369],
        [-12.0931, -13.6297],
        [-14.0515,  10.9846],
        [ -2.5652,   0.4770],
        [ -2.5644,   0.4778],
        [-13.1529,   0.7819],
        [  7.6098,   0.7808]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ 12.8193,  -5.3244, -17.1896,  18.8142, -15.7450,   9.6578,  -5.3236,
         -5.3245,   6.0103, -13.5785], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 2.5085e-01,  1.0614e-01, -7.1542e-01, -5.9082e-02, -1.4498e+01,
         -2.8926e-01,  1.0657e-01,  1.0615e-01,  3.0840e-01,  5.7330e-01],
        [-8.9377e-01,  4.8060e-02, -6.4845e+00,  5.5669e-01, -3.5923e-01,
         -5.9691e-01,  4.7696e-02,  4.8234e-02, -5.8208e-01,  7.5836e-01],
        [-8.0173e+00,  7.9951e-01, -1.2934e+01, -3.8292e+00, -5.1322e-01,
          1.0487e+01,  7.9792e-01,  7.9941e-01,  1.6765e+01,  2.3710e-01],
        [-1.3174e+01,  6.0600e-02,  5.3740e+00,  1.5542e+01, -6.0685e-01,
         -1.0175e+01,  6.0677e-02,  6.0610e-02,  1.8239e+00, -2.2404e-01],
        [-3.5431e+00, -3.0188e-02, -8.2304e-02, -1.9599e+00,  2.1496e-01,
         -7.9330e-01, -3.0223e-02, -3.0186e-02, -5.1007e-01, -1.5589e-01],
        [-4.3552e+01,  2.0517e-01,  4.1050e+00,  6.1175e+00,  1.4757e+00,
         -4.5472e+00,  2.0548e-01,  2.0512e-01,  1.2210e+01,  2.8057e-02],
        [-3.5864e+00, -4.6397e-02,  1.0876e-02, -1.9545e+00,  2.9955e-01,
         -8.1923e-01, -4.6513e-02, -4.6399e-02, -5.2739e-01, -1.9041e-01],
        [ 1.1861e+00,  1.5128e-02, -2.4234e+01, -3.2882e-01,  3.0464e-01,
         -1.4878e+01,  1.4104e-02,  1.5280e-02,  8.0196e-01,  1.4370e+00],
        [ 2.7058e+00, -1.2929e-02,  9.1525e-01, -1.1284e+01, -1.0266e+00,
         -8.8435e+00, -1.3503e-02, -1.2854e-02, -2.0613e-01,  1.7618e+00],
        [-5.4868e+00, -1.0893e-01, -1.0118e+00,  5.6628e+00, -5.8591e+00,
          4.5001e+00, -1.1076e-01, -1.0905e-01,  4.3777e+00, -1.3787e+00]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -3.1012,  -4.7878, -13.4441,  -9.9347,  -3.9917, -13.9742,  -3.8785,
         -5.4041,  -6.1475,  -6.1022], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  4.4998,   5.2407,  -3.0046,  -5.1409,  -0.6420,  13.6732,  -0.7320,
           6.5317,   4.2916,   0.8377],
        [ -4.4998,  -5.2407,   3.0047,   5.1464,   0.6420, -13.6630,   0.7322,
          -6.5316,  -4.2913,  -0.9501]], device='cuda:0'))])
xi:  [188.32353]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 1119.4012345876577
W_T_median: 429.9226871564084
W_T_pctile_5: 186.6444507340657
W_T_CVAR_5_pct: 0.8862225205371419
Average q (qsum/M+1):  49.364198746219756
Optimal xi:  [188.32353]
Observed VAR:  429.9226871564084
Expected(across Rb) median(across samples) p_equity:  0.3551593085130056
obj fun:  tensor(-1533.1333, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 3.0
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -1.8962,   0.8885],
        [ -1.9468,   0.8699],
        [ -0.3956,   7.4999],
        [ 19.9361,  -4.2059],
        [ -1.9027,   0.9529],
        [ -2.4937,   0.7088],
        [ -4.9977,  -1.5423],
        [-41.7101,  -3.1514],
        [ -7.4937,  13.4551],
        [ -2.8875,  -0.6494]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -5.6919,  -5.7178,  -9.2120, -12.5505,  -5.6258,  -5.9789,  -5.6479,
         -3.7316,  10.0946,  -5.9226], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ 1.1052e-02,  1.0996e-02,  3.9892e-02, -1.3165e-01,  1.1588e-02,
          1.0400e-02, -4.8001e-03, -5.0947e-01, -1.1285e+00,  1.3738e-02],
        [ 1.1052e-02,  1.0996e-02,  3.9892e-02, -1.3165e-01,  1.1587e-02,
          1.0400e-02, -4.8001e-03, -5.0947e-01, -1.1285e+00,  1.3738e-02],
        [-1.8546e-01, -1.9959e-01,  8.2571e+00,  1.8361e+01, -1.5319e-01,
         -3.4019e-01,  2.1614e+00,  5.5035e+00, -1.7277e+01,  1.4333e+00],
        [ 1.1052e-02,  1.0996e-02,  3.9892e-02, -1.3165e-01,  1.1588e-02,
          1.0400e-02, -4.8001e-03, -5.0947e-01, -1.1285e+00,  1.3738e-02],
        [ 1.1052e-02,  1.0996e-02,  3.9892e-02, -1.3165e-01,  1.1588e-02,
          1.0400e-02, -4.8000e-03, -5.0947e-01, -1.1285e+00,  1.3738e-02],
        [ 1.1052e-02,  1.0996e-02,  3.9892e-02, -1.3165e-01,  1.1588e-02,
          1.0400e-02, -4.8001e-03, -5.0947e-01, -1.1285e+00,  1.3738e-02],
        [ 1.7612e-01,  1.9155e-01, -6.8027e+00, -1.4236e+01,  1.7308e-01,
          3.7527e-01, -1.4571e+00, -4.9998e+00,  1.4492e+01, -7.1348e-01],
        [ 3.4193e-03,  1.0541e-02, -3.4057e+00, -9.0286e+00, -9.3851e-03,
          8.4696e-02, -5.0278e-01, -4.3536e+00,  6.2415e+00, -2.9611e-02],
        [ 1.1052e-02,  1.0996e-02,  3.9892e-02, -1.3165e-01,  1.1588e-02,
          1.0400e-02, -4.8001e-03, -5.0947e-01, -1.1285e+00,  1.3738e-02],
        [ 1.1052e-02,  1.0996e-02,  3.9892e-02, -1.3165e-01,  1.1588e-02,
          1.0400e-02, -4.8001e-03, -5.0947e-01, -1.1285e+00,  1.3738e-02]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-3.8850, -3.8850,  2.4856, -3.8850, -3.8850, -3.8850, -1.7200, -3.7851,
        -3.8850, -3.8850], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.0927,  -0.0927, -25.2735,  -0.0927,  -0.0927,  -0.0927,  13.4449,
           3.8082,  -0.0927,  -0.0927]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 2.0932e+01,  1.3429e+01],
        [-2.8629e+00,  1.4875e-01],
        [-6.5019e+00, -1.9099e+01],
        [-2.3468e+01,  2.3691e-01],
        [-1.5084e+01, -1.4383e+01],
        [-1.5432e+01,  1.0814e+01],
        [-2.8922e+00,  3.6766e-03],
        [-2.8609e+00,  1.6828e-01],
        [-1.4716e+01, -9.2113e-01],
        [-2.8751e+00,  1.1281e-01]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ 11.0875,  -6.8914, -17.9279,  18.2678, -12.7253,  10.6302,  -6.9453,
         -6.8851,   4.3527,  -6.9015], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 2.2056e-01, -7.6943e-02, -4.1820e-01, -4.4276e-01, -1.9908e+01,
          6.9539e-02, -3.0113e-01, -4.8227e-02, -5.0398e-01, -1.3559e-01],
        [-6.5376e-01,  2.5642e-01, -1.3165e+01,  5.4477e-01,  9.3208e+00,
         -3.2304e-01,  1.5508e-01,  2.6465e-01,  2.1341e-01,  2.3803e-01],
        [-4.7687e+00,  1.5889e-02, -3.9889e-01, -3.2283e+00, -2.0469e-01,
          4.5829e+00,  1.9209e-02,  1.5972e-02,  5.5005e+00,  1.7805e-02],
        [-1.2466e+01, -8.2426e-02,  5.0491e+00,  1.5951e+01,  2.0332e+00,
         -8.2959e+00, -7.6430e-02, -8.3252e-02,  3.0783e+00, -8.0810e-02],
        [-3.1612e+00, -4.3217e-02, -2.9628e+00,  7.4194e-01, -1.9238e+00,
          1.1686e+00, -5.5714e-02, -4.2080e-02,  7.1302e-01, -4.5445e-02],
        [-4.3318e+01, -3.1186e-01,  4.1767e+00,  4.4573e+00,  1.4947e+00,
         -1.4813e+01, -3.1955e-01, -3.1145e-01,  1.4862e+01, -3.1539e-01],
        [-3.2742e+00,  4.0509e-02, -2.8416e+00,  7.0489e-01, -1.9622e+00,
          1.0400e+00,  2.6374e-02,  4.1503e-02,  8.3789e-01,  3.8439e-02],
        [ 1.1338e+00,  1.4838e-01, -3.7526e+01,  6.3333e-03,  1.5273e+00,
         -1.7674e+01,  1.3377e-01,  1.4561e-01, -7.7862e-01,  1.5298e-01],
        [ 2.0867e+00, -1.0803e-01,  1.3481e+00, -1.3045e+01,  6.4246e-03,
         -2.2418e+01, -1.0868e-01, -1.0840e-01, -9.5415e+00, -1.0468e-01],
        [-4.5537e+00,  2.3203e-01, -6.8879e+00,  6.4620e+00, -1.7918e+00,
          1.1835e+00,  3.4012e-01,  2.2075e-01,  2.5552e+00,  2.5772e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -3.1409,  -4.3438,  -9.3798, -11.1797,  -5.0968, -15.8304,  -5.2315,
         -5.4373,  -6.9818,  -4.4518], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  4.8124,   6.9305,   0.5580,  -4.9400,   1.9306,  13.5032,   1.8433,
           7.5487,   4.2789,   0.7895],
        [ -4.8124,  -6.9304,  -0.5579,   4.9477,  -1.9306, -13.4822,  -1.8432,
          -7.5485,  -4.2786,  -0.9013]], device='cuda:0'))])
loaded xi:  206.36095
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -1548.201098166959
min fval:  -1548.201098166959
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -1.8962,   0.8885],
        [ -1.9468,   0.8699],
        [ -0.3956,   7.4999],
        [ 19.9361,  -4.2059],
        [ -1.9027,   0.9529],
        [ -2.4937,   0.7088],
        [ -4.9977,  -1.5423],
        [-41.7101,  -3.1514],
        [ -7.4937,  13.4551],
        [ -2.8875,  -0.6494]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -5.6919,  -5.7178,  -9.2120, -12.5505,  -5.6258,  -5.9789,  -5.6479,
         -3.7316,  10.0946,  -5.9226], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ 1.1052e-02,  1.0996e-02,  3.9892e-02, -1.3165e-01,  1.1588e-02,
          1.0400e-02, -4.8001e-03, -5.0947e-01, -1.1285e+00,  1.3738e-02],
        [ 1.1052e-02,  1.0996e-02,  3.9892e-02, -1.3165e-01,  1.1587e-02,
          1.0400e-02, -4.8001e-03, -5.0947e-01, -1.1285e+00,  1.3738e-02],
        [-1.8546e-01, -1.9959e-01,  8.2571e+00,  1.8361e+01, -1.5319e-01,
         -3.4019e-01,  2.1614e+00,  5.5035e+00, -1.7277e+01,  1.4333e+00],
        [ 1.1052e-02,  1.0996e-02,  3.9892e-02, -1.3165e-01,  1.1588e-02,
          1.0400e-02, -4.8001e-03, -5.0947e-01, -1.1285e+00,  1.3738e-02],
        [ 1.1052e-02,  1.0996e-02,  3.9892e-02, -1.3165e-01,  1.1588e-02,
          1.0400e-02, -4.8000e-03, -5.0947e-01, -1.1285e+00,  1.3738e-02],
        [ 1.1052e-02,  1.0996e-02,  3.9892e-02, -1.3165e-01,  1.1588e-02,
          1.0400e-02, -4.8001e-03, -5.0947e-01, -1.1285e+00,  1.3738e-02],
        [ 1.7612e-01,  1.9155e-01, -6.8027e+00, -1.4236e+01,  1.7308e-01,
          3.7527e-01, -1.4571e+00, -4.9998e+00,  1.4492e+01, -7.1348e-01],
        [ 3.4193e-03,  1.0541e-02, -3.4057e+00, -9.0286e+00, -9.3851e-03,
          8.4696e-02, -5.0278e-01, -4.3536e+00,  6.2415e+00, -2.9611e-02],
        [ 1.1052e-02,  1.0996e-02,  3.9892e-02, -1.3165e-01,  1.1588e-02,
          1.0400e-02, -4.8001e-03, -5.0947e-01, -1.1285e+00,  1.3738e-02],
        [ 1.1052e-02,  1.0996e-02,  3.9892e-02, -1.3165e-01,  1.1588e-02,
          1.0400e-02, -4.8001e-03, -5.0947e-01, -1.1285e+00,  1.3738e-02]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-3.8850, -3.8850,  2.4856, -3.8850, -3.8850, -3.8850, -1.7200, -3.7851,
        -3.8850, -3.8850], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.0927,  -0.0927, -25.2735,  -0.0927,  -0.0927,  -0.0927,  13.4449,
           3.8082,  -0.0927,  -0.0927]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 2.0932e+01,  1.3429e+01],
        [-2.8629e+00,  1.4875e-01],
        [-6.5019e+00, -1.9099e+01],
        [-2.3468e+01,  2.3691e-01],
        [-1.5084e+01, -1.4383e+01],
        [-1.5432e+01,  1.0814e+01],
        [-2.8922e+00,  3.6766e-03],
        [-2.8609e+00,  1.6828e-01],
        [-1.4716e+01, -9.2113e-01],
        [-2.8751e+00,  1.1281e-01]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ 11.0875,  -6.8914, -17.9279,  18.2678, -12.7253,  10.6302,  -6.9453,
         -6.8851,   4.3527,  -6.9015], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 2.2056e-01, -7.6943e-02, -4.1820e-01, -4.4276e-01, -1.9908e+01,
          6.9539e-02, -3.0113e-01, -4.8227e-02, -5.0398e-01, -1.3559e-01],
        [-6.5376e-01,  2.5642e-01, -1.3165e+01,  5.4477e-01,  9.3208e+00,
         -3.2304e-01,  1.5508e-01,  2.6465e-01,  2.1341e-01,  2.3803e-01],
        [-4.7687e+00,  1.5889e-02, -3.9889e-01, -3.2283e+00, -2.0469e-01,
          4.5829e+00,  1.9209e-02,  1.5972e-02,  5.5005e+00,  1.7805e-02],
        [-1.2466e+01, -8.2426e-02,  5.0491e+00,  1.5951e+01,  2.0332e+00,
         -8.2959e+00, -7.6430e-02, -8.3252e-02,  3.0783e+00, -8.0810e-02],
        [-3.1612e+00, -4.3217e-02, -2.9628e+00,  7.4194e-01, -1.9238e+00,
          1.1686e+00, -5.5714e-02, -4.2080e-02,  7.1302e-01, -4.5445e-02],
        [-4.3318e+01, -3.1186e-01,  4.1767e+00,  4.4573e+00,  1.4947e+00,
         -1.4813e+01, -3.1955e-01, -3.1145e-01,  1.4862e+01, -3.1539e-01],
        [-3.2742e+00,  4.0509e-02, -2.8416e+00,  7.0489e-01, -1.9622e+00,
          1.0400e+00,  2.6374e-02,  4.1503e-02,  8.3789e-01,  3.8439e-02],
        [ 1.1338e+00,  1.4838e-01, -3.7526e+01,  6.3333e-03,  1.5273e+00,
         -1.7674e+01,  1.3377e-01,  1.4561e-01, -7.7862e-01,  1.5298e-01],
        [ 2.0867e+00, -1.0803e-01,  1.3481e+00, -1.3045e+01,  6.4246e-03,
         -2.2418e+01, -1.0868e-01, -1.0840e-01, -9.5415e+00, -1.0468e-01],
        [-4.5537e+00,  2.3203e-01, -6.8879e+00,  6.4620e+00, -1.7918e+00,
          1.1835e+00,  3.4012e-01,  2.2075e-01,  2.5552e+00,  2.5772e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -3.1409,  -4.3438,  -9.3798, -11.1797,  -5.0968, -15.8304,  -5.2315,
         -5.4373,  -6.9818,  -4.4518], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  4.8124,   6.9305,   0.5580,  -4.9400,   1.9306,  13.5032,   1.8433,
           7.5487,   4.2789,   0.7895],
        [ -4.8124,  -6.9304,  -0.5579,   4.9477,  -1.9306, -13.4822,  -1.8432,
          -7.5485,  -4.2786,  -0.9013]], device='cuda:0'))])
xi:  [206.36095]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 801.2144959617249
W_T_median: 504.51047986360396
W_T_pctile_5: 208.59728561078066
W_T_CVAR_5_pct: 7.861489690413091
Average q (qsum/M+1):  48.65345419606855
Optimal xi:  [206.36095]
Observed VAR:  504.51047986360396
Expected(across Rb) median(across samples) p_equity:  0.2918656786282857
obj fun:  tensor(-1548.2011, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 5.0
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -1.0133,   0.2215],
        [ -1.0134,   0.2216],
        [ -0.4955,   6.0374],
        [ 23.6806,  -3.6386],
        [ -1.0133,   0.2215],
        [ -1.0133,   0.2215],
        [ -1.0134,   0.2216],
        [-30.2162,  -5.7676],
        [-13.3266,  13.0983],
        [ -1.0134,   0.2216]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -4.6582,  -4.6583, -13.0889, -12.8214,  -4.6582,  -4.6581,  -4.6583,
         -4.8503,   9.6628,  -4.6583], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ 1.2780e-02,  1.2781e-02, -1.5443e-01,  4.0430e-02,  1.2780e-02,
          1.2780e-02,  1.2781e-02, -1.1376e-01, -6.6382e-01,  1.2781e-02],
        [ 1.2780e-02,  1.2781e-02, -1.5443e-01,  4.0430e-02,  1.2780e-02,
          1.2780e-02,  1.2781e-02, -1.1376e-01, -6.6382e-01,  1.2781e-02],
        [ 8.7273e-03,  8.7905e-03,  1.4532e+01,  1.9971e+01,  8.7197e-03,
          8.6245e-03,  8.8003e-03,  4.2361e+00, -1.8282e+01,  8.8015e-03],
        [ 1.2780e-02,  1.2781e-02, -1.5443e-01,  4.0430e-02,  1.2780e-02,
          1.2780e-02,  1.2781e-02, -1.1376e-01, -6.6382e-01,  1.2781e-02],
        [ 1.2780e-02,  1.2781e-02, -1.5443e-01,  4.0430e-02,  1.2780e-02,
          1.2780e-02,  1.2781e-02, -1.1376e-01, -6.6382e-01,  1.2781e-02],
        [ 1.2780e-02,  1.2781e-02, -1.5443e-01,  4.0430e-02,  1.2780e-02,
          1.2780e-02,  1.2781e-02, -1.1376e-01, -6.6382e-01,  1.2781e-02],
        [-1.9378e-01, -1.9357e-01, -1.2134e+01, -1.5920e+01, -1.9380e-01,
         -1.9410e-01, -1.9354e-01, -4.1535e+00,  1.5535e+01, -1.9354e-01],
        [ 1.2780e-02,  1.2780e-02, -1.5443e-01,  4.0417e-02,  1.2780e-02,
          1.2779e-02,  1.2780e-02, -1.1376e-01, -6.6380e-01,  1.2780e-02],
        [ 1.2780e-02,  1.2781e-02, -1.5443e-01,  4.0430e-02,  1.2780e-02,
          1.2780e-02,  1.2781e-02, -1.1376e-01, -6.6382e-01,  1.2781e-02],
        [ 1.2780e-02,  1.2781e-02, -1.5443e-01,  4.0430e-02,  1.2780e-02,
          1.2780e-02,  1.2781e-02, -1.1376e-01, -6.6382e-01,  1.2781e-02]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-2.9440, -2.9440,  2.6362, -2.9440, -2.9440, -2.9440, -1.5391, -2.9440,
        -2.9440, -2.9440], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.0391,  -0.0391, -27.9279,  -0.0391,  -0.0391,  -0.0391,  13.6829,
          -0.0391,  -0.0391,  -0.0391]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 21.5911,  13.3273],
        [ -3.0337,   0.1778],
        [ -2.9615, -19.0886],
        [-24.0049,   0.0631],
        [-16.8081, -14.7095],
        [-12.1107,  13.0744],
        [ -3.0336,   0.1777],
        [ -3.0340,   0.1778],
        [-16.1331,  -2.6769],
        [ -3.0337,   0.1778]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ 10.7416,  -7.4434, -19.1229,  20.3186, -11.9012,  12.2163,  -7.4434,
         -7.4432,   3.3989,  -7.4434], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 5.5614e-02, -6.0472e-02, -1.7755e-02, -3.1374e-01, -3.4433e+01,
         -3.9594e-01, -6.0512e-02, -6.0350e-02, -4.7966e-01, -6.0464e-02],
        [-6.0729e-01,  1.5433e-01, -2.0088e+01,  7.7637e-01,  2.3514e+00,
          5.3500e-01,  1.5436e-01,  1.5424e-01,  5.2129e-01,  1.5433e-01],
        [-4.0903e+00, -1.5389e-03, -1.2668e+00, -9.8427e-01, -1.3857e+00,
         -6.5813e-01, -1.5390e-03, -1.5387e-03,  4.0008e-02, -1.5389e-03],
        [-1.1260e+01,  2.5419e-01,  5.0672e+00,  1.5978e+01,  2.2370e+00,
         -8.5082e+00,  2.5418e-01,  2.5422e-01,  3.9151e+00,  2.5419e-01],
        [-2.4097e+00,  2.3306e-01, -8.7243e-01,  3.7386e-01, -6.5676e+00,
         -2.2921e-01,  2.3298e-01,  2.3329e-01,  2.2998e+00,  2.3307e-01],
        [-5.2311e+01, -3.1976e-01,  6.4659e+00,  2.0193e+00,  7.2747e-01,
         -1.5445e+01, -3.1969e-01, -3.1996e-01,  1.9104e+01, -3.1977e-01],
        [-2.5081e+00,  1.9549e-01, -8.8973e-01,  3.7654e-01, -6.5825e+00,
         -2.8781e-01,  1.9545e-01,  1.9561e-01,  2.3763e+00,  1.9550e-01],
        [ 1.2083e+00,  3.1547e-01, -3.1787e+01, -6.9683e+00, -1.4808e-02,
         -4.1054e+00,  3.1548e-01,  3.1547e-01, -4.5888e-01,  3.1547e-01],
        [ 3.3397e+00, -2.4130e-01,  1.7390e+00, -2.3684e+01, -5.7918e-02,
         -7.8839e+00, -2.4129e-01, -2.4132e-01, -2.2807e+01, -2.4130e-01],
        [-3.4256e+00, -1.5098e-01, -2.1836e+00,  1.2343e+00, -4.8054e+00,
          9.4388e-01, -1.5092e-01, -1.5106e-01,  6.1634e-01, -1.5099e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -3.3335,  -3.7097,  -6.1191, -12.7589,  -4.2958, -21.1445,  -4.4647,
         -5.3381,  -7.4170,  -2.7609], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  5.7223,   7.8469,   0.1013,  -4.8224,   7.0181,  18.5480,   6.8534,
           9.4680,   5.7943,   3.6896],
        [ -5.7223,  -7.8469,  -0.1012,   4.8390,  -7.0181, -18.5203,  -6.8533,
          -9.4679,  -5.7940,  -3.8009]], device='cuda:0'))])
loaded xi:  236.55698
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -2401.9400656229586
min fval:  -2401.9400656229586
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -1.0133,   0.2215],
        [ -1.0134,   0.2216],
        [ -0.4955,   6.0374],
        [ 23.6806,  -3.6386],
        [ -1.0133,   0.2215],
        [ -1.0133,   0.2215],
        [ -1.0134,   0.2216],
        [-30.2162,  -5.7676],
        [-13.3266,  13.0983],
        [ -1.0134,   0.2216]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -4.6582,  -4.6583, -13.0889, -12.8214,  -4.6582,  -4.6581,  -4.6583,
         -4.8503,   9.6628,  -4.6583], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ 1.2780e-02,  1.2781e-02, -1.5443e-01,  4.0430e-02,  1.2780e-02,
          1.2780e-02,  1.2781e-02, -1.1376e-01, -6.6382e-01,  1.2781e-02],
        [ 1.2780e-02,  1.2781e-02, -1.5443e-01,  4.0430e-02,  1.2780e-02,
          1.2780e-02,  1.2781e-02, -1.1376e-01, -6.6382e-01,  1.2781e-02],
        [ 8.7273e-03,  8.7905e-03,  1.4532e+01,  1.9971e+01,  8.7197e-03,
          8.6245e-03,  8.8003e-03,  4.2361e+00, -1.8282e+01,  8.8015e-03],
        [ 1.2780e-02,  1.2781e-02, -1.5443e-01,  4.0430e-02,  1.2780e-02,
          1.2780e-02,  1.2781e-02, -1.1376e-01, -6.6382e-01,  1.2781e-02],
        [ 1.2780e-02,  1.2781e-02, -1.5443e-01,  4.0430e-02,  1.2780e-02,
          1.2780e-02,  1.2781e-02, -1.1376e-01, -6.6382e-01,  1.2781e-02],
        [ 1.2780e-02,  1.2781e-02, -1.5443e-01,  4.0430e-02,  1.2780e-02,
          1.2780e-02,  1.2781e-02, -1.1376e-01, -6.6382e-01,  1.2781e-02],
        [-1.9378e-01, -1.9357e-01, -1.2134e+01, -1.5920e+01, -1.9380e-01,
         -1.9410e-01, -1.9354e-01, -4.1535e+00,  1.5535e+01, -1.9354e-01],
        [ 1.2780e-02,  1.2780e-02, -1.5443e-01,  4.0417e-02,  1.2780e-02,
          1.2779e-02,  1.2780e-02, -1.1376e-01, -6.6380e-01,  1.2780e-02],
        [ 1.2780e-02,  1.2781e-02, -1.5443e-01,  4.0430e-02,  1.2780e-02,
          1.2780e-02,  1.2781e-02, -1.1376e-01, -6.6382e-01,  1.2781e-02],
        [ 1.2780e-02,  1.2781e-02, -1.5443e-01,  4.0430e-02,  1.2780e-02,
          1.2780e-02,  1.2781e-02, -1.1376e-01, -6.6382e-01,  1.2781e-02]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-2.9440, -2.9440,  2.6362, -2.9440, -2.9440, -2.9440, -1.5391, -2.9440,
        -2.9440, -2.9440], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.0391,  -0.0391, -27.9279,  -0.0391,  -0.0391,  -0.0391,  13.6829,
          -0.0391,  -0.0391,  -0.0391]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 21.5911,  13.3273],
        [ -3.0337,   0.1778],
        [ -2.9615, -19.0886],
        [-24.0049,   0.0631],
        [-16.8081, -14.7095],
        [-12.1107,  13.0744],
        [ -3.0336,   0.1777],
        [ -3.0340,   0.1778],
        [-16.1331,  -2.6769],
        [ -3.0337,   0.1778]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ 10.7416,  -7.4434, -19.1229,  20.3186, -11.9012,  12.2163,  -7.4434,
         -7.4432,   3.3989,  -7.4434], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 5.5614e-02, -6.0472e-02, -1.7755e-02, -3.1374e-01, -3.4433e+01,
         -3.9594e-01, -6.0512e-02, -6.0350e-02, -4.7966e-01, -6.0464e-02],
        [-6.0729e-01,  1.5433e-01, -2.0088e+01,  7.7637e-01,  2.3514e+00,
          5.3500e-01,  1.5436e-01,  1.5424e-01,  5.2129e-01,  1.5433e-01],
        [-4.0903e+00, -1.5389e-03, -1.2668e+00, -9.8427e-01, -1.3857e+00,
         -6.5813e-01, -1.5390e-03, -1.5387e-03,  4.0008e-02, -1.5389e-03],
        [-1.1260e+01,  2.5419e-01,  5.0672e+00,  1.5978e+01,  2.2370e+00,
         -8.5082e+00,  2.5418e-01,  2.5422e-01,  3.9151e+00,  2.5419e-01],
        [-2.4097e+00,  2.3306e-01, -8.7243e-01,  3.7386e-01, -6.5676e+00,
         -2.2921e-01,  2.3298e-01,  2.3329e-01,  2.2998e+00,  2.3307e-01],
        [-5.2311e+01, -3.1976e-01,  6.4659e+00,  2.0193e+00,  7.2747e-01,
         -1.5445e+01, -3.1969e-01, -3.1996e-01,  1.9104e+01, -3.1977e-01],
        [-2.5081e+00,  1.9549e-01, -8.8973e-01,  3.7654e-01, -6.5825e+00,
         -2.8781e-01,  1.9545e-01,  1.9561e-01,  2.3763e+00,  1.9550e-01],
        [ 1.2083e+00,  3.1547e-01, -3.1787e+01, -6.9683e+00, -1.4808e-02,
         -4.1054e+00,  3.1548e-01,  3.1547e-01, -4.5888e-01,  3.1547e-01],
        [ 3.3397e+00, -2.4130e-01,  1.7390e+00, -2.3684e+01, -5.7918e-02,
         -7.8839e+00, -2.4129e-01, -2.4132e-01, -2.2807e+01, -2.4130e-01],
        [-3.4256e+00, -1.5098e-01, -2.1836e+00,  1.2343e+00, -4.8054e+00,
          9.4388e-01, -1.5092e-01, -1.5106e-01,  6.1634e-01, -1.5099e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -3.3335,  -3.7097,  -6.1191, -12.7589,  -4.2958, -21.1445,  -4.4647,
         -5.3381,  -7.4170,  -2.7609], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  5.7223,   7.8469,   0.1013,  -4.8224,   7.0181,  18.5480,   6.8534,
           9.4680,   5.7943,   3.6896],
        [ -5.7223,  -7.8469,  -0.1012,   4.8390,  -7.0181, -18.5203,  -6.8533,
          -9.4679,  -5.7940,  -3.8009]], device='cuda:0'))])
xi:  [236.55698]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 825.3638571654902
W_T_median: 586.3841185391245
W_T_pctile_5: 238.60354220644686
W_T_CVAR_5_pct: 19.501455163528707
Average q (qsum/M+1):  46.034234816028224
Optimal xi:  [236.55698]
Observed VAR:  586.3841185391245
Expected(across Rb) median(across samples) p_equity:  0.241744568447272
obj fun:  tensor(-2401.9401, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 50.0
-----------------------------------------------

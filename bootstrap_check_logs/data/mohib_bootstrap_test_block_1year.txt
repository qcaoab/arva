nohup: ignoring input
Starting at: 
04-03-23_21:25

 numpy seed:  2  


 pytorch seed:  2  

Key parameters-------
paths: 256000
iterations: 1
batchsize: 1000
remove neg:  False
w constaint activation:  yy_fix_jan29


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = B10_and_VWD
timeseries_basket['basket_desc'] = CRSP data: B10 and VWD
timeseries_basket['basket_columns'] = 
['B10_real_ret', 'VWD_real_ret']
############# End: defined asset  basket #################
               CPI  CPI_nom_ret  ...  VWD_real_ret  EWD_real_ret
date                             ...                            
192512  100.000000          NaN  ...           NaN           NaN
192601  100.000000     0.000000  ...      0.000561      0.023174
192602  100.000000     0.000000  ...     -0.033046     -0.053510
192603   99.441303    -0.005587  ...     -0.058743     -0.091750
192604  100.000000     0.005618  ...      0.031235      0.027204

[5 rows x 12 columns]
                CPI  CPI_nom_ret  ...  VWD_real_ret  EWD_real_ret
date                              ...                            
202008  1452.055956     0.003153  ...      0.065084      0.035618
202009  1454.078149     0.001393  ...     -0.036399     -0.028709
202010  1454.681696     0.000415  ...     -0.020584      0.000169
202011  1453.793232    -0.000611  ...      0.124393      0.175130
202012  1455.162018     0.000942  ...      0.044065      0.071843

[5 rows x 12 columns]


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = B10_and_VWD
timeseries_basket['basket_desc'] = CRSP data: B10 and VWD
timeseries_basket['basket_columns'] = 
['B10_nom_ret', 'VWD_nom_ret']
############# End: defined asset  basket #################
        CPI_nom_ret  B10_nom_ret  VWD_nom_ret
date                                         
192601     0.000000     0.004350     0.000561
192602     0.000000     0.004338    -0.033046
192603    -0.005587     0.004327    -0.064002
192604     0.005618     0.004316     0.037029
192605    -0.005587     0.004304     0.012095
        CPI_nom_ret  B10_nom_ret  VWD_nom_ret
date                                         
202008     0.003153    -0.014709     0.068443
202009     0.001393     0.002560    -0.035057
202010     0.000415    -0.017311    -0.020178
202011    -0.000611     0.004016     0.123706
202012     0.000942    -0.004965     0.045048
Indices constructed with column names:
Index(['date_for_plt', 'CPI_nom_ret_ind', 'B10_nom_ret_ind',
       'VWD_nom_ret_ind'],
      dtype='object')
############# Updated: defined asset basket #################
timeseries_basket['data_df_mean'] = 
B10_real_ret    0.001986
VWD_real_ret    0.006974
dtype: float64


timeseries_basket['data_df_stdev'] = 
B10_real_ret    0.018939
VWD_real_ret    0.053569
dtype: float64


timeseries_basket['data_df_corr'] = 
              B10_real_ret  VWD_real_ret
B10_real_ret      1.000000      0.075353
VWD_real_ret      0.075353      1.000000


timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names', 'data_df', 'data_df_mean', 'data_df_stdev', 'data_df_corr'])
############# End: updated: defined asset basket #################
-----------------------------------------------
Dates to be REMOVED due to missing values (should be at *start* only due to trading signals):
Int64Index([], dtype='int64')
-----------------------------------------------
Dates from available data for bootstrapping:
Start: 192601
End: 202012
-----------------------------------------------
0.0% of bootstrap sample done.
5.0% of bootstrap sample done.
10.0% of bootstrap sample done.
15.0% of bootstrap sample done.
20.0% of bootstrap sample done.
25.0% of bootstrap sample done.
30.0% of bootstrap sample done.
35.0% of bootstrap sample done.
40.0% of bootstrap sample done.
45.0% of bootstrap sample done.
50.0% of bootstrap sample done.
55.00000000000001% of bootstrap sample done.
60.0% of bootstrap sample done.
65.0% of bootstrap sample done.
70.0% of bootstrap sample done.
75.0% of bootstrap sample done.
80.0% of bootstrap sample done.
85.0% of bootstrap sample done.
90.0% of bootstrap sample done.
95.0% of bootstrap sample done.
Withdrawal NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       1       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      10  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      10  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       1              none   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 10)     True          10  
2     (10, 10)     True          10  
3      (10, 1)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
Allocation NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       2       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      10  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      10  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       2           softmax   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 10)     True          10  
2     (10, 10)     True          10  
3      (10, 2)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
{'methods': ['Adam'], 'output_progress': False, 'tol': 1e-06, 'itbound_scipy_algorithms': 1000, 'check_exit_criteria': False, 'nit_running_min': 0, 'itbound_SGD_algorithms': 1, 'nit_IterateAveragingStart': 0, 'batchsize': 1000, 'SGD_learningrate': 50.0, 'Adagrad_epsilon': 1e-08, 'Adagrad_eta': 1.0, 'Adadelta_ewma': 0.9, 'Adadelta_epsilon': 1e-08, 'RMSprop_ewma': 0.8, 'RMSprop_epsilon': 1e-08, 'RMSprop_eta': 0.1, 'Adam_ewma_1': 0.9, 'Adam_ewma_2': 0.998, 'Adam_eta': 0.0, 'Adam_epsilon': 1e-08, 'Adam_weight_decay': 0.0001, 'running_min_from_avg': False, 'running_min_from_sgd': True, 'lr_schedule': True}
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.4577,  1.2653],
        [16.0850,  2.3697],
        [-2.7263,  5.1040],
        [-4.0217,  7.8175],
        [-0.4577,  1.2653],
        [-0.4577,  1.2653],
        [-0.4578,  1.2654],
        [-0.4577,  1.2653],
        [-0.4577,  1.2653],
        [-0.4577,  1.2653]])), ('0.model.hidden_layer_1.bias', tensor([-0.7873, -8.9837,  6.8428, 13.6857, -0.7873, -0.7873, -0.7875, -0.7873,
        -0.7873, -0.7873])), ('0.model.hidden_layer_2.weight', tensor([[-7.4377e-03, -2.2978e-01, -3.1465e-02, -2.0806e-01, -7.4377e-03,
         -7.4377e-03, -7.4321e-03, -7.4377e-03, -7.4377e-03, -7.4377e-03],
        [-7.4377e-03, -2.2978e-01, -3.1465e-02, -2.0806e-01, -7.4377e-03,
         -7.4377e-03, -7.4321e-03, -7.4377e-03, -7.4377e-03, -7.4377e-03],
        [ 7.3508e-02,  5.0414e+00,  1.0943e+00,  6.2456e+00,  7.3508e-02,
          7.3509e-02,  7.0200e-02,  7.3508e-02,  7.3509e-02,  7.3509e-02],
        [ 5.7226e-02, -8.0734e+00, -1.8193e+00, -9.5966e+00,  5.7226e-02,
          5.7226e-02,  5.2952e-02,  5.7226e-02,  5.7226e-02,  5.7226e-02],
        [-7.4377e-03, -2.2978e-01, -3.1465e-02, -2.0806e-01, -7.4377e-03,
         -7.4377e-03, -7.4321e-03, -7.4377e-03, -7.4377e-03, -7.4377e-03],
        [-7.4377e-03, -2.2978e-01, -3.1465e-02, -2.0806e-01, -7.4377e-03,
         -7.4377e-03, -7.4321e-03, -7.4377e-03, -7.4377e-03, -7.4377e-03],
        [-7.4377e-03, -2.2978e-01, -3.1465e-02, -2.0806e-01, -7.4377e-03,
         -7.4377e-03, -7.4321e-03, -7.4377e-03, -7.4377e-03, -7.4377e-03],
        [-7.4377e-03, -2.2978e-01, -3.1465e-02, -2.0806e-01, -7.4377e-03,
         -7.4377e-03, -7.4321e-03, -7.4377e-03, -7.4377e-03, -7.4377e-03],
        [ 5.3337e-02,  5.5206e+00,  1.1622e+00,  6.7651e+00,  5.3337e-02,
          5.3337e-02,  4.9471e-02,  5.3337e-02,  5.3337e-02,  5.3337e-02],
        [-7.4377e-03, -2.2978e-01, -3.1465e-02, -2.0806e-01, -7.4377e-03,
         -7.4377e-03, -7.4321e-03, -7.4377e-03, -7.4377e-03, -7.4377e-03]])), ('0.model.hidden_layer_2.bias', tensor([-0.8237, -0.8237, -3.5452,  5.2447, -0.8237, -0.8237, -0.8237, -0.8237,
        -3.7974, -0.8237])), ('0.model.output_layer_3.weight', tensor([[ -0.0208,  -0.0208,   6.9678, -12.6609,  -0.0208,  -0.0208,  -0.0208,
          -0.0208,   7.7604,  -0.0208]])), ('1.model.hidden_layer_1.weight', tensor([[-10.7263, -13.1469],
        [-17.7377,  -5.0206],
        [-11.1023,   0.8577],
        [ 11.6619,   8.6886],
        [-10.5392,   2.6417],
        [ -2.4395,  -0.6981],
        [ -0.4844,   2.9186],
        [  0.8597,  11.6175],
        [ 11.2700,   4.0051],
        [ -0.9265,   5.5959]])), ('1.model.hidden_layer_1.bias', tensor([-13.9266,  -0.7646,  11.5515,   4.1831,   6.7658,  -4.1519,  -2.1829,
          8.8985,  -0.7432,   2.8173])), ('1.model.hidden_layer_2.weight', tensor([[ 3.0475e+00,  1.1022e+00, -6.3736e+00, -2.5142e-01, -3.9344e+00,
          1.6201e+00, -3.1178e-02, -1.5480e-02, -9.8576e+00, -4.3613e-02],
        [-1.2498e+01,  7.0245e-01,  1.7777e+00, -5.0157e+00, -2.8531e-01,
          6.2946e-01, -1.4079e-01, -1.6630e+01, -2.0693e+00, -1.2411e+00],
        [-2.1999e+00, -1.2114e+01,  5.8741e+00, -6.9786e+00, -3.0692e+00,
          1.0144e-01, -8.9981e-02, -2.2412e+00, -1.9764e+00, -9.6344e-01],
        [ 3.1513e+00,  3.6666e+00, -2.6663e+00,  3.3714e+00,  1.2162e+00,
          5.2361e-01, -7.5250e-02,  4.0641e+00,  1.4277e+00,  6.2683e-01],
        [-4.6047e+00, -2.5371e+00, -9.5873e-01,  1.1041e+00, -6.3282e+00,
         -3.0936e+00,  7.2113e-01, -6.3383e+00,  1.7360e+00, -8.7781e-01],
        [-1.1099e+00, -1.0486e+00, -9.2523e-01, -1.0886e+00, -6.4904e-02,
         -1.0421e+00, -2.7735e-02, -5.6701e-01, -1.1340e+00, -2.7431e-01],
        [-2.1940e+00, -1.2594e+00,  6.4763e-01, -2.3597e+00, -7.8884e-01,
         -8.8805e-01,  2.9522e-02, -1.1478e+00, -1.7458e+00, -3.2159e-01],
        [-1.1098e+00, -1.0485e+00, -9.2522e-01, -1.0885e+00, -6.4893e-02,
         -1.0421e+00, -2.7735e-02, -5.6702e-01, -1.1339e+00, -2.7431e-01],
        [-1.1098e+00, -1.0485e+00, -9.2522e-01, -1.0885e+00, -6.4893e-02,
         -1.0421e+00, -2.7735e-02, -5.6702e-01, -1.1339e+00, -2.7431e-01],
        [-8.2422e+00, -5.0868e+00, -5.9050e+00, -2.1319e+00, -1.7731e+00,
         -6.6556e+00,  1.2061e+00, -4.2185e+00,  2.3940e+00, -5.2436e-01]])), ('1.model.hidden_layer_2.bias', tensor([ 1.5410,  1.4908, -0.4017,  0.3101,  5.4848, -2.2349, -1.3846, -2.2351,
        -2.2351, 14.2815])), ('1.model.output_layer_3.weight', tensor([[-4.7582, -8.0263, -6.5886,  4.6334, -0.5517,  0.0259, -0.1988,  0.0238,
          0.0239, -4.0167],
        [ 4.3899,  8.0259,  6.5914, -4.5695,  0.4899, -0.0218,  0.1972, -0.0239,
         -0.0239,  4.3113]]))])
loaded xi:  -489.0211
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1515.643443794422
W_T_median: 1153.9174919778538
W_T_pctile_5: -111.46571043684067
W_T_CVAR_5_pct: -277.22753928042437
-----------------------------------------------
new min fval from sgd:  -1746.7231340911053
min fval:  -1746.7231340911053
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.4577,  1.2653],
        [16.0850,  2.3697],
        [-2.7263,  5.1040],
        [-4.0217,  7.8175],
        [-0.4577,  1.2653],
        [-0.4577,  1.2653],
        [-0.4578,  1.2654],
        [-0.4577,  1.2653],
        [-0.4577,  1.2653],
        [-0.4577,  1.2653]])), ('0.model.hidden_layer_1.bias', tensor([-0.7873, -8.9837,  6.8428, 13.6857, -0.7873, -0.7873, -0.7875, -0.7873,
        -0.7873, -0.7873])), ('0.model.hidden_layer_2.weight', tensor([[-7.4377e-03, -2.2978e-01, -3.1465e-02, -2.0806e-01, -7.4377e-03,
         -7.4377e-03, -7.4321e-03, -7.4377e-03, -7.4377e-03, -7.4377e-03],
        [-7.4377e-03, -2.2978e-01, -3.1465e-02, -2.0806e-01, -7.4377e-03,
         -7.4377e-03, -7.4321e-03, -7.4377e-03, -7.4377e-03, -7.4377e-03],
        [ 7.3508e-02,  5.0414e+00,  1.0943e+00,  6.2456e+00,  7.3508e-02,
          7.3509e-02,  7.0200e-02,  7.3508e-02,  7.3509e-02,  7.3509e-02],
        [ 5.7226e-02, -8.0734e+00, -1.8193e+00, -9.5966e+00,  5.7226e-02,
          5.7226e-02,  5.2952e-02,  5.7226e-02,  5.7226e-02,  5.7226e-02],
        [-7.4377e-03, -2.2978e-01, -3.1465e-02, -2.0806e-01, -7.4377e-03,
         -7.4377e-03, -7.4321e-03, -7.4377e-03, -7.4377e-03, -7.4377e-03],
        [-7.4377e-03, -2.2978e-01, -3.1465e-02, -2.0806e-01, -7.4377e-03,
         -7.4377e-03, -7.4321e-03, -7.4377e-03, -7.4377e-03, -7.4377e-03],
        [-7.4377e-03, -2.2978e-01, -3.1465e-02, -2.0806e-01, -7.4377e-03,
         -7.4377e-03, -7.4321e-03, -7.4377e-03, -7.4377e-03, -7.4377e-03],
        [-7.4377e-03, -2.2978e-01, -3.1465e-02, -2.0806e-01, -7.4377e-03,
         -7.4377e-03, -7.4321e-03, -7.4377e-03, -7.4377e-03, -7.4377e-03],
        [ 5.3337e-02,  5.5206e+00,  1.1622e+00,  6.7651e+00,  5.3337e-02,
          5.3337e-02,  4.9471e-02,  5.3337e-02,  5.3337e-02,  5.3337e-02],
        [-7.4377e-03, -2.2978e-01, -3.1465e-02, -2.0806e-01, -7.4377e-03,
         -7.4377e-03, -7.4321e-03, -7.4377e-03, -7.4377e-03, -7.4377e-03]])), ('0.model.hidden_layer_2.bias', tensor([-0.8237, -0.8237, -3.5452,  5.2447, -0.8237, -0.8237, -0.8237, -0.8237,
        -3.7974, -0.8237])), ('0.model.output_layer_3.weight', tensor([[ -0.0208,  -0.0208,   6.9678, -12.6609,  -0.0208,  -0.0208,  -0.0208,
          -0.0208,   7.7604,  -0.0208]])), ('1.model.hidden_layer_1.weight', tensor([[-10.7263, -13.1469],
        [-17.7377,  -5.0206],
        [-11.1023,   0.8577],
        [ 11.6619,   8.6886],
        [-10.5392,   2.6417],
        [ -2.4395,  -0.6981],
        [ -0.4844,   2.9186],
        [  0.8597,  11.6175],
        [ 11.2700,   4.0051],
        [ -0.9265,   5.5959]])), ('1.model.hidden_layer_1.bias', tensor([-13.9266,  -0.7646,  11.5515,   4.1831,   6.7658,  -4.1519,  -2.1829,
          8.8985,  -0.7432,   2.8173])), ('1.model.hidden_layer_2.weight', tensor([[ 3.0475e+00,  1.1022e+00, -6.3736e+00, -2.5142e-01, -3.9344e+00,
          1.6201e+00, -3.1178e-02, -1.5480e-02, -9.8576e+00, -4.3613e-02],
        [-1.2498e+01,  7.0245e-01,  1.7777e+00, -5.0157e+00, -2.8531e-01,
          6.2946e-01, -1.4079e-01, -1.6630e+01, -2.0693e+00, -1.2411e+00],
        [-2.1999e+00, -1.2114e+01,  5.8741e+00, -6.9786e+00, -3.0692e+00,
          1.0144e-01, -8.9981e-02, -2.2412e+00, -1.9764e+00, -9.6344e-01],
        [ 3.1513e+00,  3.6666e+00, -2.6663e+00,  3.3714e+00,  1.2162e+00,
          5.2361e-01, -7.5250e-02,  4.0641e+00,  1.4277e+00,  6.2683e-01],
        [-4.6047e+00, -2.5371e+00, -9.5873e-01,  1.1041e+00, -6.3282e+00,
         -3.0936e+00,  7.2113e-01, -6.3383e+00,  1.7360e+00, -8.7781e-01],
        [-1.1099e+00, -1.0486e+00, -9.2523e-01, -1.0886e+00, -6.4904e-02,
         -1.0421e+00, -2.7735e-02, -5.6701e-01, -1.1340e+00, -2.7431e-01],
        [-2.1940e+00, -1.2594e+00,  6.4763e-01, -2.3597e+00, -7.8884e-01,
         -8.8805e-01,  2.9522e-02, -1.1478e+00, -1.7458e+00, -3.2159e-01],
        [-1.1098e+00, -1.0485e+00, -9.2522e-01, -1.0885e+00, -6.4893e-02,
         -1.0421e+00, -2.7735e-02, -5.6702e-01, -1.1339e+00, -2.7431e-01],
        [-1.1098e+00, -1.0485e+00, -9.2522e-01, -1.0885e+00, -6.4893e-02,
         -1.0421e+00, -2.7735e-02, -5.6702e-01, -1.1339e+00, -2.7431e-01],
        [-8.2422e+00, -5.0868e+00, -5.9050e+00, -2.1319e+00, -1.7731e+00,
         -6.6556e+00,  1.2061e+00, -4.2185e+00,  2.3940e+00, -5.2436e-01]])), ('1.model.hidden_layer_2.bias', tensor([ 1.5410,  1.4908, -0.4017,  0.3101,  5.4848, -2.2349, -1.3846, -2.2351,
        -2.2351, 14.2815])), ('1.model.output_layer_3.weight', tensor([[-4.7582, -8.0263, -6.5886,  4.6334, -0.5517,  0.0259, -0.1988,  0.0238,
          0.0239, -4.0167],
        [ 4.3899,  8.0259,  6.5914, -4.5695,  0.4899, -0.0218,  0.1972, -0.0239,
         -0.0239,  4.3113]]))])
xi:  [-489.0211]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 217.62299752713295
W_T_median: 87.56002174556934
W_T_pctile_5: -479.9373832788286
W_T_CVAR_5_pct: -587.5560454926531
Average q (qsum/M+1):  57.28712118825605
Optimal xi:  [-489.0211]
Observed VAR:  87.56002174556934
Expected(across Rb) median(across samples) p_equity:  0.28110146564625516
obj fun:  tensor(-1746.7231, dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
bond graph is mislabeled!
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 0.05
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-3.9530, -6.5935],
        [-4.2095, -7.1137],
        [-0.5164,  1.2203],
        [-4.2235, -7.0429],
        [-0.5161,  1.2205],
        [-0.5161,  1.2205],
        [-8.0767,  6.2485],
        [-0.5161,  1.2205],
        [-0.5161,  1.2205],
        [-5.5175,  6.6329]])), ('0.model.hidden_layer_1.bias', tensor([-6.3626, -6.8108, -1.0627, -6.6425, -1.0625, -1.0625, 10.0755, -1.0625,
        -1.0625,  7.5087])), ('0.model.hidden_layer_2.weight', tensor([[-3.6522, -5.0090, -0.0213, -5.7398, -0.0140, -0.0140,  7.5544, -0.0140,
         -0.0140,  3.5584],
        [-0.0877, -0.0887, -0.0167, -0.0943, -0.0167, -0.0167, -0.1064, -0.0167,
         -0.0167, -0.0279],
        [-2.4671, -3.3347,  0.0270, -3.6471,  0.0315,  0.0315,  5.2154,  0.0315,
          0.0315,  1.9645],
        [-0.0877, -0.0887, -0.0167, -0.0943, -0.0167, -0.0167, -0.1064, -0.0167,
         -0.0167, -0.0279],
        [ 2.2579,  2.9349,  0.0414,  3.2052,  0.0402,  0.0402, -3.7379,  0.0402,
          0.0402, -1.2358],
        [-0.0877, -0.0887, -0.0167, -0.0943, -0.0167, -0.0167, -0.1064, -0.0167,
         -0.0167, -0.0279],
        [ 4.2915,  5.5018,  0.0889,  6.5722,  0.0994,  0.0994, -8.2340,  0.0994,
          0.0994, -4.2372],
        [-0.0877, -0.0887, -0.0167, -0.0943, -0.0167, -0.0167, -0.1064, -0.0167,
         -0.0167, -0.0279],
        [-0.0877, -0.0887, -0.0167, -0.0943, -0.0167, -0.0167, -0.1064, -0.0167,
         -0.0167, -0.0279],
        [-2.4347, -3.2952,  0.0273, -3.6188,  0.0316,  0.0316,  5.1701,  0.0316,
          0.0316,  1.9296]])), ('0.model.hidden_layer_2.bias', tensor([ 0.8825, -0.6611,  0.3061, -0.6611, -1.2865, -0.6611, -1.3087, -0.6611,
        -0.6611,  0.2922])), ('0.model.output_layer_3.weight', tensor([[ 8.6556e+00, -1.0256e-02,  4.8116e+00, -1.0256e-02, -3.7963e+00,
         -1.0256e-02, -1.0723e+01, -1.0256e-02, -1.0256e-02,  4.7419e+00]])), ('1.model.hidden_layer_1.weight', tensor([[ -5.6567,   7.9237],
        [-10.2275,   2.5919],
        [  6.7828,   3.4934],
        [  6.1748,  -1.3434],
        [-12.4596,  -3.6344],
        [  2.6133,  -0.1700],
        [ -1.1366,  13.0466],
        [-11.2255, -15.1498],
        [ 11.6862,  -0.5650],
        [ 15.0612,   8.6661]])), ('1.model.hidden_layer_1.bias', tensor([  6.4890,   6.4381,  -3.7935, -10.7406,  -0.6264,   1.9752,  11.4260,
        -14.8960, -10.0834,   5.8228])), ('1.model.hidden_layer_2.weight', tensor([[ -1.6231,  -2.4053,  -0.2640,  -8.4041,   5.3185,   0.2654,  -1.3684,
           8.7672, -10.2807,  -8.6776],
        [ -3.9665,   5.0795,   0.1696,  -1.7930,   4.1090,  -0.8083, -10.1188,
          -9.2054,  -2.6351,  -0.6728],
        [ -0.3961,  -0.9307,  -0.3800,  -0.9658,  -0.9890,  -2.0713,  -1.4317,
          -0.4921,  -1.2113,  -0.6785],
        [ -4.8990,   3.3279,  -0.0935,  -4.2385,   8.3586,  -3.3731,  -8.5724,
           7.2564,  -8.9073, -10.0585],
        [  0.0219,  -0.0778,  -0.1180,  -0.2005,  -0.2112,  -1.7245,  -0.2512,
          -0.4026,  -0.7203,  -1.3589],
        [  0.0219,  -0.0778,  -0.1181,  -0.2005,  -0.2112,  -1.7245,  -0.2512,
          -0.4026,  -0.7203,  -1.3589],
        [  1.2566,   2.4863,   0.0544,   0.8148,   1.4905,  -3.0261,   5.0189,
           0.9466,  -2.5368,   0.9221],
        [ -0.6847,  -1.5610,  -1.0849,  -1.9966,  -1.7324,  -1.4568,  -2.5666,
          -0.1906,  -1.1604,  -0.5750],
        [ -0.9292,   0.5187,  -1.7203,  -1.0731,  -1.7741,  -1.5667,  -3.4338,
          -0.2885,  -1.1052,   0.8110],
        [ -0.4396,   1.5734,  -1.8535,   2.1121,   6.1013,  -3.9868,   4.4713,
          -6.3593,   1.8730,  -0.9565]])), ('1.model.hidden_layer_2.bias', tensor([-2.2216, -2.1385, -2.1091, -5.0481, -1.7535, -1.7535, -3.4560, -1.4954,
        -2.1527, -4.5197])), ('1.model.output_layer_3.weight', tensor([[ -5.6341,  -7.4803,  -0.9328,  13.6144,   0.0592,   0.0592,   0.7312,
          -2.5920,  -3.3989,   3.2572],
        [  5.6080,   7.3290,   0.9328, -13.6127,  -0.0592,  -0.0592,  -0.6412,
           2.5921,   3.4002,  -3.2576]]))])
loaded xi:  -244.3079
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1515.643443794422
W_T_median: 1153.9174919778538
W_T_pctile_5: -111.46571043684067
W_T_CVAR_5_pct: -277.22753928042437
-----------------------------------------------
new min fval from sgd:  -1683.3912147418819
min fval:  -1683.3912147418819
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-3.9530, -6.5935],
        [-4.2095, -7.1137],
        [-0.5164,  1.2203],
        [-4.2235, -7.0429],
        [-0.5161,  1.2205],
        [-0.5161,  1.2205],
        [-8.0767,  6.2485],
        [-0.5161,  1.2205],
        [-0.5161,  1.2205],
        [-5.5175,  6.6329]])), ('0.model.hidden_layer_1.bias', tensor([-6.3626, -6.8108, -1.0627, -6.6425, -1.0625, -1.0625, 10.0755, -1.0625,
        -1.0625,  7.5087])), ('0.model.hidden_layer_2.weight', tensor([[-3.6522, -5.0090, -0.0213, -5.7398, -0.0140, -0.0140,  7.5544, -0.0140,
         -0.0140,  3.5584],
        [-0.0877, -0.0887, -0.0167, -0.0943, -0.0167, -0.0167, -0.1064, -0.0167,
         -0.0167, -0.0279],
        [-2.4671, -3.3347,  0.0270, -3.6471,  0.0315,  0.0315,  5.2154,  0.0315,
          0.0315,  1.9645],
        [-0.0877, -0.0887, -0.0167, -0.0943, -0.0167, -0.0167, -0.1064, -0.0167,
         -0.0167, -0.0279],
        [ 2.2579,  2.9349,  0.0414,  3.2052,  0.0402,  0.0402, -3.7379,  0.0402,
          0.0402, -1.2358],
        [-0.0877, -0.0887, -0.0167, -0.0943, -0.0167, -0.0167, -0.1064, -0.0167,
         -0.0167, -0.0279],
        [ 4.2915,  5.5018,  0.0889,  6.5722,  0.0994,  0.0994, -8.2340,  0.0994,
          0.0994, -4.2372],
        [-0.0877, -0.0887, -0.0167, -0.0943, -0.0167, -0.0167, -0.1064, -0.0167,
         -0.0167, -0.0279],
        [-0.0877, -0.0887, -0.0167, -0.0943, -0.0167, -0.0167, -0.1064, -0.0167,
         -0.0167, -0.0279],
        [-2.4347, -3.2952,  0.0273, -3.6188,  0.0316,  0.0316,  5.1701,  0.0316,
          0.0316,  1.9296]])), ('0.model.hidden_layer_2.bias', tensor([ 0.8825, -0.6611,  0.3061, -0.6611, -1.2865, -0.6611, -1.3087, -0.6611,
        -0.6611,  0.2922])), ('0.model.output_layer_3.weight', tensor([[ 8.6556e+00, -1.0256e-02,  4.8116e+00, -1.0256e-02, -3.7963e+00,
         -1.0256e-02, -1.0723e+01, -1.0256e-02, -1.0256e-02,  4.7419e+00]])), ('1.model.hidden_layer_1.weight', tensor([[ -5.6567,   7.9237],
        [-10.2275,   2.5919],
        [  6.7828,   3.4934],
        [  6.1748,  -1.3434],
        [-12.4596,  -3.6344],
        [  2.6133,  -0.1700],
        [ -1.1366,  13.0466],
        [-11.2255, -15.1498],
        [ 11.6862,  -0.5650],
        [ 15.0612,   8.6661]])), ('1.model.hidden_layer_1.bias', tensor([  6.4890,   6.4381,  -3.7935, -10.7406,  -0.6264,   1.9752,  11.4260,
        -14.8960, -10.0834,   5.8228])), ('1.model.hidden_layer_2.weight', tensor([[ -1.6231,  -2.4053,  -0.2640,  -8.4041,   5.3185,   0.2654,  -1.3684,
           8.7672, -10.2807,  -8.6776],
        [ -3.9665,   5.0795,   0.1696,  -1.7930,   4.1090,  -0.8083, -10.1188,
          -9.2054,  -2.6351,  -0.6728],
        [ -0.3961,  -0.9307,  -0.3800,  -0.9658,  -0.9890,  -2.0713,  -1.4317,
          -0.4921,  -1.2113,  -0.6785],
        [ -4.8990,   3.3279,  -0.0935,  -4.2385,   8.3586,  -3.3731,  -8.5724,
           7.2564,  -8.9073, -10.0585],
        [  0.0219,  -0.0778,  -0.1180,  -0.2005,  -0.2112,  -1.7245,  -0.2512,
          -0.4026,  -0.7203,  -1.3589],
        [  0.0219,  -0.0778,  -0.1181,  -0.2005,  -0.2112,  -1.7245,  -0.2512,
          -0.4026,  -0.7203,  -1.3589],
        [  1.2566,   2.4863,   0.0544,   0.8148,   1.4905,  -3.0261,   5.0189,
           0.9466,  -2.5368,   0.9221],
        [ -0.6847,  -1.5610,  -1.0849,  -1.9966,  -1.7324,  -1.4568,  -2.5666,
          -0.1906,  -1.1604,  -0.5750],
        [ -0.9292,   0.5187,  -1.7203,  -1.0731,  -1.7741,  -1.5667,  -3.4338,
          -0.2885,  -1.1052,   0.8110],
        [ -0.4396,   1.5734,  -1.8535,   2.1121,   6.1013,  -3.9868,   4.4713,
          -6.3593,   1.8730,  -0.9565]])), ('1.model.hidden_layer_2.bias', tensor([-2.2216, -2.1385, -2.1091, -5.0481, -1.7535, -1.7535, -3.4560, -1.4954,
        -2.1527, -4.5197])), ('1.model.output_layer_3.weight', tensor([[ -5.6341,  -7.4803,  -0.9328,  13.6144,   0.0592,   0.0592,   0.7312,
          -2.5920,  -3.3989,   3.2572],
        [  5.6080,   7.3290,   0.9328, -13.6127,  -0.0592,  -0.0592,  -0.6412,
           2.5921,   3.4002,  -3.2576]]))])
xi:  [-244.3079]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 243.19939699892933
W_T_median: 62.09541704022025
W_T_pctile_5: -239.11432053614828
W_T_CVAR_5_pct: -310.2934302257669
Average q (qsum/M+1):  56.29910376764113
Optimal xi:  [-244.3079]
Observed VAR:  62.09541704022025
Expected(across Rb) median(across samples) p_equity:  0.30108538805507123
obj fun:  tensor(-1683.3912, dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
bond graph is mislabeled!
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 0.2
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[  3.6047,  -7.4220],
        [ -1.3573, -10.3820],
        [-10.1818,  -1.6791],
        [  7.7994,  -4.2249],
        [  7.2278,  -4.0491],
        [ -2.3685,   4.0330],
        [  6.7288,  -4.2840],
        [ -5.7483,   1.6286],
        [ -1.9271,   3.4546],
        [ -0.7611,   1.2675]])), ('0.model.hidden_layer_1.bias', tensor([-7.2764, -9.5770,  9.6802, -8.9838, -8.6172,  0.8839, -8.8531,  5.4692,
         0.2073, -1.6732])), ('0.model.hidden_layer_2.weight', tensor([[ 2.4012e+00,  7.7635e+00, -2.1767e+00,  3.4378e+00,  3.2429e+00,
         -3.2225e-02,  2.2607e+00, -1.9369e+00,  2.1469e-02,  1.4306e-02],
        [-3.8577e-01, -4.3400e-02, -6.0550e-01, -2.8460e-01, -2.4917e-01,
         -1.6165e-03, -1.6889e-01, -3.0348e-01, -1.9240e-03, -6.3184e-03],
        [-3.8577e-01, -4.3400e-02, -6.0550e-01, -2.8460e-01, -2.4917e-01,
         -1.6165e-03, -1.6889e-01, -3.0348e-01, -1.9240e-03, -6.3185e-03],
        [ 2.8185e+00,  1.0262e+01, -2.8036e+00,  4.3237e+00,  4.1031e+00,
         -7.5924e-02,  2.9942e+00, -2.3890e+00,  4.5086e-03,  6.8206e-03],
        [ 3.1653e+00,  7.7718e+00, -2.9909e+00,  3.3680e+00,  3.2450e+00,
         -2.0752e-02,  2.2741e+00, -1.3925e+00,  3.7884e-02,  2.1884e-02],
        [ 3.3789e+00,  1.0350e+01, -3.5647e+00,  4.1684e+00,  4.2645e+00,
         -7.4885e-02,  3.0637e+00, -1.9619e+00,  1.1568e-02,  1.4476e-02],
        [ 2.9625e+00,  1.0208e+01, -3.0404e+00,  4.3260e+00,  4.1157e+00,
         -7.1965e-02,  3.0143e+00, -2.1393e+00,  9.3760e-03,  1.0272e-02],
        [-3.8577e-01, -4.3400e-02, -6.0550e-01, -2.8460e-01, -2.4917e-01,
         -1.6165e-03, -1.6889e-01, -3.0348e-01, -1.9240e-03, -6.3184e-03],
        [-2.6260e+00, -1.7447e+01,  1.0644e+01, -4.2463e+00, -3.6043e+00,
          1.0746e+00, -4.0734e+00, -1.4817e-01,  8.0548e-01,  1.3071e-02],
        [-3.8577e-01, -4.3400e-02, -6.0550e-01, -2.8460e-01, -2.4917e-01,
         -1.6165e-03, -1.6889e-01, -3.0348e-01, -1.9240e-03, -6.3184e-03]])), ('0.model.hidden_layer_2.bias', tensor([-1.4457, -0.7023, -0.7023, -1.9794, -1.5069, -1.9321, -2.0205, -0.7023,
         0.6363, -0.7023])), ('0.model.output_layer_3.weight', tensor([[-2.4386e+00,  1.6175e-02,  1.6175e-02, -4.0245e+00, -2.6772e+00,
         -4.3228e+00, -4.0631e+00,  1.6175e-02,  1.6816e+01,  1.6175e-02]])), ('1.model.hidden_layer_1.weight', tensor([[ 12.0445,   4.3339],
        [ 10.9021,   3.2606],
        [  0.1720,   4.9713],
        [ 11.0546,  -0.9470],
        [ -1.7577,   0.9840],
        [  8.2158,  -3.0134],
        [ -8.4184,   4.6442],
        [ 13.3147,   3.7069],
        [ -4.0006, -15.2089],
        [-13.8870,  -4.1283]])), ('1.model.hidden_layer_1.bias', tensor([ -0.9947,   1.5613,   4.6805, -11.2062,  -3.4314, -16.8982,  10.3050,
         -0.5258, -14.4599,  -2.2945])), ('1.model.hidden_layer_2.weight', tensor([[-5.0679e+00, -7.8096e+00, -1.3701e+01, -1.4158e+01,  2.1456e-03,
         -1.4597e+01, -3.8456e+00, -9.2662e+00,  1.0135e+01,  1.1240e+01],
        [-8.8368e-01, -1.1921e+00, -6.8067e-01, -8.9658e-01, -2.5037e-03,
         -7.0148e-01, -7.2208e-01, -1.0496e+00, -1.0992e+00, -7.5538e-01],
        [-8.8356e-01, -1.1918e+00, -6.8048e-01, -8.9635e-01, -2.5022e-03,
         -7.0123e-01, -7.2176e-01, -1.0492e+00, -1.0987e+00, -7.5505e-01],
        [-2.3416e+00, -1.4477e+00, -5.8778e-01, -3.0381e+00,  1.5986e-01,
         -2.7104e+00,  1.6072e+00, -2.8529e+00,  5.4614e-01,  1.0880e+00],
        [-2.5223e+00, -2.1241e+00,  2.8412e+00, -8.5615e+00, -1.1457e-01,
          2.5042e-02,  6.8016e+00, -2.6333e+00, -2.4494e+01,  5.7613e-01],
        [-4.2957e+00, -8.0025e+00, -2.1785e+00,  1.7246e+00, -1.2540e-02,
          7.1917e-01, -2.9080e+00, -2.8251e+00,  8.1750e+00,  4.5708e+00],
        [ 9.9060e-01,  1.0070e+01,  3.5669e+00,  1.0178e+00,  8.1598e-02,
          9.2599e-01,  6.7723e-01,  2.7826e+00, -8.5483e+00, -6.9087e+00],
        [-2.3801e+00,  1.3370e+00, -9.8929e-01, -2.1112e+00,  8.4335e-02,
         -1.2100e+00,  7.6110e-01, -1.6485e+00, -1.0104e+01,  5.6613e+00],
        [ 5.8898e+00,  6.8627e+00,  8.2755e+00,  4.2360e+00,  2.1044e-01,
          9.3667e+00,  1.1703e+00,  7.1831e+00, -1.9289e+01, -2.2393e+00],
        [-7.1554e-02, -7.6552e+00,  3.1938e-01,  1.4059e+00,  7.3634e-02,
         -1.4762e+00, -2.3958e+00, -1.9714e+00,  3.2326e-01,  6.6110e+00]])), ('1.model.hidden_layer_2.bias', tensor([-0.2544, -2.0825, -2.0840, -1.7369, -3.1082, -2.9133,  4.6702,  0.3742,
         2.8690, -1.1093])), ('1.model.output_layer_3.weight', tensor([[ 1.0694e+01,  5.0685e-03,  4.9645e-03,  1.5434e+00,  1.9209e+00,
          2.1109e+00, -3.1863e+00, -1.9433e+00,  3.4522e+00, -2.0233e+00],
        [-1.0694e+01, -5.1069e-03, -5.2150e-03, -1.5445e+00, -2.0569e+00,
         -2.1325e+00,  3.1435e+00,  1.9080e+00, -3.2805e+00,  2.0224e+00]]))])
loaded xi:  -73.26509
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1515.643443794422
W_T_median: 1153.9174919778538
W_T_pctile_5: -111.46571043684067
W_T_CVAR_5_pct: -277.22753928042437
-----------------------------------------------
new min fval from sgd:  -1619.606793784947
min fval:  -1619.606793784947
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[  3.6047,  -7.4220],
        [ -1.3573, -10.3820],
        [-10.1818,  -1.6791],
        [  7.7994,  -4.2249],
        [  7.2278,  -4.0491],
        [ -2.3685,   4.0330],
        [  6.7288,  -4.2840],
        [ -5.7483,   1.6286],
        [ -1.9271,   3.4546],
        [ -0.7611,   1.2675]])), ('0.model.hidden_layer_1.bias', tensor([-7.2764, -9.5770,  9.6802, -8.9838, -8.6172,  0.8839, -8.8531,  5.4692,
         0.2073, -1.6732])), ('0.model.hidden_layer_2.weight', tensor([[ 2.4012e+00,  7.7635e+00, -2.1767e+00,  3.4378e+00,  3.2429e+00,
         -3.2225e-02,  2.2607e+00, -1.9369e+00,  2.1469e-02,  1.4306e-02],
        [-3.8577e-01, -4.3400e-02, -6.0550e-01, -2.8460e-01, -2.4917e-01,
         -1.6165e-03, -1.6889e-01, -3.0348e-01, -1.9240e-03, -6.3184e-03],
        [-3.8577e-01, -4.3400e-02, -6.0550e-01, -2.8460e-01, -2.4917e-01,
         -1.6165e-03, -1.6889e-01, -3.0348e-01, -1.9240e-03, -6.3185e-03],
        [ 2.8185e+00,  1.0262e+01, -2.8036e+00,  4.3237e+00,  4.1031e+00,
         -7.5924e-02,  2.9942e+00, -2.3890e+00,  4.5086e-03,  6.8206e-03],
        [ 3.1653e+00,  7.7718e+00, -2.9909e+00,  3.3680e+00,  3.2450e+00,
         -2.0752e-02,  2.2741e+00, -1.3925e+00,  3.7884e-02,  2.1884e-02],
        [ 3.3789e+00,  1.0350e+01, -3.5647e+00,  4.1684e+00,  4.2645e+00,
         -7.4885e-02,  3.0637e+00, -1.9619e+00,  1.1568e-02,  1.4476e-02],
        [ 2.9625e+00,  1.0208e+01, -3.0404e+00,  4.3260e+00,  4.1157e+00,
         -7.1965e-02,  3.0143e+00, -2.1393e+00,  9.3760e-03,  1.0272e-02],
        [-3.8577e-01, -4.3400e-02, -6.0550e-01, -2.8460e-01, -2.4917e-01,
         -1.6165e-03, -1.6889e-01, -3.0348e-01, -1.9240e-03, -6.3184e-03],
        [-2.6260e+00, -1.7447e+01,  1.0644e+01, -4.2463e+00, -3.6043e+00,
          1.0746e+00, -4.0734e+00, -1.4817e-01,  8.0548e-01,  1.3071e-02],
        [-3.8577e-01, -4.3400e-02, -6.0550e-01, -2.8460e-01, -2.4917e-01,
         -1.6165e-03, -1.6889e-01, -3.0348e-01, -1.9240e-03, -6.3184e-03]])), ('0.model.hidden_layer_2.bias', tensor([-1.4457, -0.7023, -0.7023, -1.9794, -1.5069, -1.9321, -2.0205, -0.7023,
         0.6363, -0.7023])), ('0.model.output_layer_3.weight', tensor([[-2.4386e+00,  1.6175e-02,  1.6175e-02, -4.0245e+00, -2.6772e+00,
         -4.3228e+00, -4.0631e+00,  1.6175e-02,  1.6816e+01,  1.6175e-02]])), ('1.model.hidden_layer_1.weight', tensor([[ 12.0445,   4.3339],
        [ 10.9021,   3.2606],
        [  0.1720,   4.9713],
        [ 11.0546,  -0.9470],
        [ -1.7577,   0.9840],
        [  8.2158,  -3.0134],
        [ -8.4184,   4.6442],
        [ 13.3147,   3.7069],
        [ -4.0006, -15.2089],
        [-13.8870,  -4.1283]])), ('1.model.hidden_layer_1.bias', tensor([ -0.9947,   1.5613,   4.6805, -11.2062,  -3.4314, -16.8982,  10.3050,
         -0.5258, -14.4599,  -2.2945])), ('1.model.hidden_layer_2.weight', tensor([[-5.0679e+00, -7.8096e+00, -1.3701e+01, -1.4158e+01,  2.1456e-03,
         -1.4597e+01, -3.8456e+00, -9.2662e+00,  1.0135e+01,  1.1240e+01],
        [-8.8368e-01, -1.1921e+00, -6.8067e-01, -8.9658e-01, -2.5037e-03,
         -7.0148e-01, -7.2208e-01, -1.0496e+00, -1.0992e+00, -7.5538e-01],
        [-8.8356e-01, -1.1918e+00, -6.8048e-01, -8.9635e-01, -2.5022e-03,
         -7.0123e-01, -7.2176e-01, -1.0492e+00, -1.0987e+00, -7.5505e-01],
        [-2.3416e+00, -1.4477e+00, -5.8778e-01, -3.0381e+00,  1.5986e-01,
         -2.7104e+00,  1.6072e+00, -2.8529e+00,  5.4614e-01,  1.0880e+00],
        [-2.5223e+00, -2.1241e+00,  2.8412e+00, -8.5615e+00, -1.1457e-01,
          2.5042e-02,  6.8016e+00, -2.6333e+00, -2.4494e+01,  5.7613e-01],
        [-4.2957e+00, -8.0025e+00, -2.1785e+00,  1.7246e+00, -1.2540e-02,
          7.1917e-01, -2.9080e+00, -2.8251e+00,  8.1750e+00,  4.5708e+00],
        [ 9.9060e-01,  1.0070e+01,  3.5669e+00,  1.0178e+00,  8.1598e-02,
          9.2599e-01,  6.7723e-01,  2.7826e+00, -8.5483e+00, -6.9087e+00],
        [-2.3801e+00,  1.3370e+00, -9.8929e-01, -2.1112e+00,  8.4335e-02,
         -1.2100e+00,  7.6110e-01, -1.6485e+00, -1.0104e+01,  5.6613e+00],
        [ 5.8898e+00,  6.8627e+00,  8.2755e+00,  4.2360e+00,  2.1044e-01,
          9.3667e+00,  1.1703e+00,  7.1831e+00, -1.9289e+01, -2.2393e+00],
        [-7.1554e-02, -7.6552e+00,  3.1938e-01,  1.4059e+00,  7.3634e-02,
         -1.4762e+00, -2.3958e+00, -1.9714e+00,  3.2326e-01,  6.6110e+00]])), ('1.model.hidden_layer_2.bias', tensor([-0.2544, -2.0825, -2.0840, -1.7369, -3.1082, -2.9133,  4.6702,  0.3742,
         2.8690, -1.1093])), ('1.model.output_layer_3.weight', tensor([[ 1.0694e+01,  5.0685e-03,  4.9645e-03,  1.5434e+00,  1.9209e+00,
          2.1109e+00, -3.1863e+00, -1.9433e+00,  3.4522e+00, -2.0233e+00],
        [-1.0694e+01, -5.1069e-03, -5.2150e-03, -1.5445e+00, -2.0569e+00,
         -2.1325e+00,  3.1435e+00,  1.9080e+00, -3.2805e+00,  2.0224e+00]]))])
xi:  [-73.26509]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 293.0196274333543
W_T_median: 91.23187389690979
W_T_pctile_5: -72.75969510804303
W_T_CVAR_5_pct: -143.77011167331761
Average q (qsum/M+1):  54.55516790574597
Optimal xi:  [-73.26509]
Observed VAR:  91.23187389690979
Expected(across Rb) median(across samples) p_equity:  0.307999424636364
obj fun:  tensor(-1619.6068, dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
bond graph is mislabeled!
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 0.5
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -0.9553,   1.0080],
        [-10.8614,   7.0624],
        [-12.4871,  -1.7089],
        [ -1.3744,  -9.5360],
        [ 12.5159,  -2.7972],
        [ -2.1049, -10.0500],
        [-49.9498,  -7.6964],
        [  8.9716,  -6.4039],
        [  2.6822, -10.7349],
        [ -0.9550,   1.0082]])), ('0.model.hidden_layer_1.bias', tensor([-2.6515,  3.7595, 12.4347, -8.4650, -9.7612, -8.6210, -7.4386, -9.3722,
        -9.3796, -2.6513])), ('0.model.hidden_layer_2.weight', tensor([[-4.3955e-03, -5.1370e-02, -1.0217e+00, -1.8801e-01, -3.4561e-01,
         -2.2617e-01, -1.0791e-01, -6.6659e-02, -2.2987e-01, -4.3959e-03],
        [-4.3955e-03, -5.1370e-02, -1.0217e+00, -1.8801e-01, -3.4561e-01,
         -2.2617e-01, -1.0791e-01, -6.6659e-02, -2.2987e-01, -4.3959e-03],
        [-4.3955e-03, -5.1370e-02, -1.0217e+00, -1.8801e-01, -3.4561e-01,
         -2.2617e-01, -1.0791e-01, -6.6659e-02, -2.2987e-01, -4.3959e-03],
        [-4.3955e-03, -5.1370e-02, -1.0217e+00, -1.8801e-01, -3.4561e-01,
         -2.2617e-01, -1.0791e-01, -6.6659e-02, -2.2987e-01, -4.3959e-03],
        [-3.7428e-03, -7.1506e+00, -8.9232e+00,  7.4431e+00,  1.0595e+01,
          8.6785e+00,  8.6733e+00,  5.8855e+00,  9.4683e+00, -2.9656e-03],
        [-4.3956e-03, -5.1370e-02, -1.0217e+00, -1.8801e-01, -3.4561e-01,
         -2.2617e-01, -1.0791e-01, -6.6659e-02, -2.2987e-01, -4.3959e-03],
        [-4.3955e-03, -5.1370e-02, -1.0217e+00, -1.8801e-01, -3.4561e-01,
         -2.2617e-01, -1.0791e-01, -6.6659e-02, -2.2987e-01, -4.3959e-03],
        [ 1.0166e-01, -6.0856e+00, -8.8140e+00,  6.8621e+00,  8.4896e+00,
          8.1946e+00,  7.0089e+00,  3.8004e+00,  9.3820e+00,  1.0114e-01],
        [-4.3955e-03, -5.1370e-02, -1.0217e+00, -1.8801e-01, -3.4561e-01,
         -2.2617e-01, -1.0791e-01, -6.6659e-02, -2.2987e-01, -4.3959e-03],
        [ 4.0560e-02,  1.5166e+00,  1.0292e+01, -7.4440e+00, -8.8579e+00,
         -8.0970e+00, -8.0951e+00, -1.0011e+01, -1.0933e+01,  4.0878e-02]])), ('0.model.hidden_layer_2.bias', tensor([-1.1978, -1.1978, -1.1978, -1.1978, -3.9055, -1.1978, -1.1978, -3.2988,
        -1.1978,  0.5184])), ('0.model.output_layer_3.weight', tensor([[ 1.3266e-02,  1.3266e-02,  1.3266e-02,  1.3266e-02, -1.0848e+01,
          1.3266e-02,  1.3266e-02, -7.9416e+00,  1.3266e-02,  1.5741e+01]])), ('1.model.hidden_layer_1.weight', tensor([[ 13.4805,   7.6035],
        [-12.5345,   3.0015],
        [ 13.9035,   2.7227],
        [  4.8417,   2.6225],
        [ -4.2711,   2.4017],
        [ -8.8058,   2.9486],
        [-12.9350,   7.4324],
        [ -6.9064,   7.2045],
        [ -1.6546,   0.3460],
        [  8.6300,  13.5385]])), ('1.model.hidden_layer_1.bias', tensor([ 3.4188, 13.2654, -3.9433, -3.8553, -6.5076, 14.8300,  8.3296,  8.0741,
        -3.8364, 10.8957])), ('1.model.hidden_layer_2.weight', tensor([[-4.9826e-01, -9.7229e-01, -1.1201e+00,  1.6596e+00,  6.1056e-01,
         -1.2558e+00, -4.6746e-02, -4.5508e+00, -1.9351e-01,  9.6934e-01],
        [ 9.8528e-01,  9.3675e-01,  1.3027e+00,  1.4003e-01,  8.3569e-02,
          2.0824e+00,  2.6821e-01,  4.0551e-01, -8.0092e-04,  6.3324e-01],
        [-6.5458e+00, -1.0958e+00, -4.7643e-01,  1.2700e+00,  1.5085e+00,
         -5.1117e+00,  3.4617e+00,  3.1687e+00,  7.1731e-02,  1.6790e-01],
        [-1.1016e+01,  5.7353e+00, -9.0153e+00, -3.2379e-01,  4.5142e-02,
          6.9574e+00, -5.3534e+00,  8.8213e-01,  9.6781e-02, -3.2389e+01],
        [-1.1087e+00,  6.3911e-01, -2.5974e+00,  5.3334e-01,  8.7565e-01,
         -4.2871e-01, -1.1494e+00, -4.4929e+00,  2.3809e-01,  2.4067e+00],
        [-1.7320e+00, -4.6672e-01, -2.4367e+00,  4.5303e-01,  6.3355e-01,
         -1.3885e+00,  7.0933e-01, -2.0046e+00,  1.9152e-02,  9.7596e-01],
        [ 6.7685e+00, -3.2627e+00, -1.2841e-01, -9.5673e+00, -2.7464e+00,
         -4.2618e+00,  6.1210e+00,  1.0082e+01,  5.5293e-02,  6.9224e-01],
        [-1.7696e+00, -4.2124e-01, -2.4507e+00,  4.1071e-02,  6.6775e-01,
         -9.0910e-01,  8.7740e-01, -1.5409e+00,  7.4274e-02,  4.5755e-01],
        [-4.6116e+00,  7.3086e+00, -8.0312e-01,  3.1587e+00, -1.7607e-02,
          2.6289e+00, -1.0784e+01, -7.6286e+00,  5.4661e-02, -8.4977e+00],
        [-2.1920e+01,  1.9811e+00, -9.7156e+00, -3.8452e-01,  1.0402e-02,
          2.1337e+00, -1.2178e+00,  6.3185e+00,  2.7708e-01, -2.8355e+01]])), ('1.model.hidden_layer_2.bias', tensor([-2.5459,  2.9412, -1.1326,  1.7500, -2.2012, -2.7232, -7.1768, -2.4897,
        -0.0420, -0.9855])), ('1.model.output_layer_3.weight', tensor([[  1.5789,   0.2309,   3.0535,  -7.8657,   2.5689,   1.3467,   0.3864,
           1.6854,  -0.6410,  16.4837],
        [ -1.5792,  -0.2713,  -3.0455,   8.0614,  -2.5689,  -1.3466,  -0.4456,
          -1.6855,   0.5531, -16.4705]]))])
loaded xi:  59.100292
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1515.643443794422
W_T_median: 1153.9174919778538
W_T_pctile_5: -111.46571043684067
W_T_CVAR_5_pct: -277.22753928042437
-----------------------------------------------
new min fval from sgd:  -1577.301434261755
min fval:  -1577.301434261755
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -0.9553,   1.0080],
        [-10.8614,   7.0624],
        [-12.4871,  -1.7089],
        [ -1.3744,  -9.5360],
        [ 12.5159,  -2.7972],
        [ -2.1049, -10.0500],
        [-49.9498,  -7.6964],
        [  8.9716,  -6.4039],
        [  2.6822, -10.7349],
        [ -0.9550,   1.0082]])), ('0.model.hidden_layer_1.bias', tensor([-2.6515,  3.7595, 12.4347, -8.4650, -9.7612, -8.6210, -7.4386, -9.3722,
        -9.3796, -2.6513])), ('0.model.hidden_layer_2.weight', tensor([[-4.3955e-03, -5.1370e-02, -1.0217e+00, -1.8801e-01, -3.4561e-01,
         -2.2617e-01, -1.0791e-01, -6.6659e-02, -2.2987e-01, -4.3959e-03],
        [-4.3955e-03, -5.1370e-02, -1.0217e+00, -1.8801e-01, -3.4561e-01,
         -2.2617e-01, -1.0791e-01, -6.6659e-02, -2.2987e-01, -4.3959e-03],
        [-4.3955e-03, -5.1370e-02, -1.0217e+00, -1.8801e-01, -3.4561e-01,
         -2.2617e-01, -1.0791e-01, -6.6659e-02, -2.2987e-01, -4.3959e-03],
        [-4.3955e-03, -5.1370e-02, -1.0217e+00, -1.8801e-01, -3.4561e-01,
         -2.2617e-01, -1.0791e-01, -6.6659e-02, -2.2987e-01, -4.3959e-03],
        [-3.7428e-03, -7.1506e+00, -8.9232e+00,  7.4431e+00,  1.0595e+01,
          8.6785e+00,  8.6733e+00,  5.8855e+00,  9.4683e+00, -2.9656e-03],
        [-4.3956e-03, -5.1370e-02, -1.0217e+00, -1.8801e-01, -3.4561e-01,
         -2.2617e-01, -1.0791e-01, -6.6659e-02, -2.2987e-01, -4.3959e-03],
        [-4.3955e-03, -5.1370e-02, -1.0217e+00, -1.8801e-01, -3.4561e-01,
         -2.2617e-01, -1.0791e-01, -6.6659e-02, -2.2987e-01, -4.3959e-03],
        [ 1.0166e-01, -6.0856e+00, -8.8140e+00,  6.8621e+00,  8.4896e+00,
          8.1946e+00,  7.0089e+00,  3.8004e+00,  9.3820e+00,  1.0114e-01],
        [-4.3955e-03, -5.1370e-02, -1.0217e+00, -1.8801e-01, -3.4561e-01,
         -2.2617e-01, -1.0791e-01, -6.6659e-02, -2.2987e-01, -4.3959e-03],
        [ 4.0560e-02,  1.5166e+00,  1.0292e+01, -7.4440e+00, -8.8579e+00,
         -8.0970e+00, -8.0951e+00, -1.0011e+01, -1.0933e+01,  4.0878e-02]])), ('0.model.hidden_layer_2.bias', tensor([-1.1978, -1.1978, -1.1978, -1.1978, -3.9055, -1.1978, -1.1978, -3.2988,
        -1.1978,  0.5184])), ('0.model.output_layer_3.weight', tensor([[ 1.3266e-02,  1.3266e-02,  1.3266e-02,  1.3266e-02, -1.0848e+01,
          1.3266e-02,  1.3266e-02, -7.9416e+00,  1.3266e-02,  1.5741e+01]])), ('1.model.hidden_layer_1.weight', tensor([[ 13.4805,   7.6035],
        [-12.5345,   3.0015],
        [ 13.9035,   2.7227],
        [  4.8417,   2.6225],
        [ -4.2711,   2.4017],
        [ -8.8058,   2.9486],
        [-12.9350,   7.4324],
        [ -6.9064,   7.2045],
        [ -1.6546,   0.3460],
        [  8.6300,  13.5385]])), ('1.model.hidden_layer_1.bias', tensor([ 3.4188, 13.2654, -3.9433, -3.8553, -6.5076, 14.8300,  8.3296,  8.0741,
        -3.8364, 10.8957])), ('1.model.hidden_layer_2.weight', tensor([[-4.9826e-01, -9.7229e-01, -1.1201e+00,  1.6596e+00,  6.1056e-01,
         -1.2558e+00, -4.6746e-02, -4.5508e+00, -1.9351e-01,  9.6934e-01],
        [ 9.8528e-01,  9.3675e-01,  1.3027e+00,  1.4003e-01,  8.3569e-02,
          2.0824e+00,  2.6821e-01,  4.0551e-01, -8.0092e-04,  6.3324e-01],
        [-6.5458e+00, -1.0958e+00, -4.7643e-01,  1.2700e+00,  1.5085e+00,
         -5.1117e+00,  3.4617e+00,  3.1687e+00,  7.1731e-02,  1.6790e-01],
        [-1.1016e+01,  5.7353e+00, -9.0153e+00, -3.2379e-01,  4.5142e-02,
          6.9574e+00, -5.3534e+00,  8.8213e-01,  9.6781e-02, -3.2389e+01],
        [-1.1087e+00,  6.3911e-01, -2.5974e+00,  5.3334e-01,  8.7565e-01,
         -4.2871e-01, -1.1494e+00, -4.4929e+00,  2.3809e-01,  2.4067e+00],
        [-1.7320e+00, -4.6672e-01, -2.4367e+00,  4.5303e-01,  6.3355e-01,
         -1.3885e+00,  7.0933e-01, -2.0046e+00,  1.9152e-02,  9.7596e-01],
        [ 6.7685e+00, -3.2627e+00, -1.2841e-01, -9.5673e+00, -2.7464e+00,
         -4.2618e+00,  6.1210e+00,  1.0082e+01,  5.5293e-02,  6.9224e-01],
        [-1.7696e+00, -4.2124e-01, -2.4507e+00,  4.1071e-02,  6.6775e-01,
         -9.0910e-01,  8.7740e-01, -1.5409e+00,  7.4274e-02,  4.5755e-01],
        [-4.6116e+00,  7.3086e+00, -8.0312e-01,  3.1587e+00, -1.7607e-02,
          2.6289e+00, -1.0784e+01, -7.6286e+00,  5.4661e-02, -8.4977e+00],
        [-2.1920e+01,  1.9811e+00, -9.7156e+00, -3.8452e-01,  1.0402e-02,
          2.1337e+00, -1.2178e+00,  6.3185e+00,  2.7708e-01, -2.8355e+01]])), ('1.model.hidden_layer_2.bias', tensor([-2.5459,  2.9412, -1.1326,  1.7500, -2.2012, -2.7232, -7.1768, -2.4897,
        -0.0420, -0.9855])), ('1.model.output_layer_3.weight', tensor([[  1.5789,   0.2309,   3.0535,  -7.8657,   2.5689,   1.3467,   0.3864,
           1.6854,  -0.6410,  16.4837],
        [ -1.5792,  -0.2713,  -3.0455,   8.0614,  -2.5689,  -1.3466,  -0.4456,
          -1.6855,   0.5531, -16.4705]]))])
xi:  [59.100292]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 455.54231324106314
W_T_median: 221.27077203099074
W_T_pctile_5: 59.10546291981798
W_T_CVAR_5_pct: -36.21886738787499
Average q (qsum/M+1):  52.03435294858871
Optimal xi:  [59.100292]
Observed VAR:  221.27077203099074
Expected(across Rb) median(across samples) p_equity:  0.2864123391608397
obj fun:  tensor(-1577.3014, dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
bond graph is mislabeled!
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 1.0
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -0.9215,   0.8616],
        [ -0.9218,   0.8621],
        [-15.1298,  -1.5817],
        [  1.2217, -11.8991],
        [ 16.7054,  -2.7197],
        [ -3.9348, -12.7149],
        [-47.8094,  -9.5532],
        [ 13.9379,  -6.2224],
        [  6.6439, -13.0280],
        [ -0.9215,   0.8616]])), ('0.model.hidden_layer_1.bias', tensor([ -2.9270,  -2.9268,  15.3793, -10.2912, -12.6830, -10.1735,  -8.6860,
        -11.2473, -11.1091,  -2.9270])), ('0.model.hidden_layer_2.weight', tensor([[-9.4662e-03, -9.4609e-03, -9.7162e-01, -1.0056e-01, -3.2747e-01,
         -1.6146e-01, -4.8349e-02, -2.4016e-01, -1.9658e-01, -9.4662e-03],
        [-9.4663e-03, -9.4609e-03, -9.7162e-01, -1.0056e-01, -3.2747e-01,
         -1.6146e-01, -4.8349e-02, -2.4016e-01, -1.9658e-01, -9.4662e-03],
        [-9.4662e-03, -9.4609e-03, -9.7162e-01, -1.0056e-01, -3.2747e-01,
         -1.6146e-01, -4.8349e-02, -2.4016e-01, -1.9658e-01, -9.4662e-03],
        [-9.4662e-03, -9.4609e-03, -9.7162e-01, -1.0056e-01, -3.2747e-01,
         -1.6146e-01, -4.8349e-02, -2.4016e-01, -1.9658e-01, -9.4662e-03],
        [ 4.8304e-01,  4.8332e-01, -1.1042e+01,  8.1583e+00,  1.3172e+01,
          9.8747e+00,  1.1595e+01,  6.5478e+00,  1.3811e+01,  4.8304e-01],
        [-9.4662e-03, -9.4609e-03, -9.7162e-01, -1.0056e-01, -3.2747e-01,
         -1.6146e-01, -4.8349e-02, -2.4016e-01, -1.9658e-01, -9.4662e-03],
        [-9.4662e-03, -9.4609e-03, -9.7162e-01, -1.0056e-01, -3.2747e-01,
         -1.6146e-01, -4.8349e-02, -2.4016e-01, -1.9658e-01, -9.4662e-03],
        [ 1.4195e-01,  1.4189e-01, -8.0429e+00,  4.5753e+00,  3.8018e-01,
          6.6600e+00,  6.3763e+00,  7.0929e-01,  8.3253e+00,  1.4195e-01],
        [-9.4662e-03, -9.4609e-03, -9.7162e-01, -1.0056e-01, -3.2747e-01,
         -1.6146e-01, -4.8349e-02, -2.4016e-01, -1.9658e-01, -9.4662e-03],
        [ 3.8200e-01,  3.8222e-01,  1.0920e+01, -8.3457e+00, -1.0892e+01,
         -1.0197e+01, -1.0157e+01, -1.0025e+01, -1.3676e+01,  3.8200e-01]])), ('0.model.hidden_layer_2.bias', tensor([-1.1261, -1.1261, -1.1261, -1.1261, -5.2517, -1.1261, -1.1261, -3.1568,
        -1.1261,  1.4455])), ('0.model.output_layer_3.weight', tensor([[ 1.0213e-02,  1.0213e-02,  1.0213e-02,  1.0213e-02, -1.6901e+01,
          1.0213e-02,  1.0213e-02, -4.3750e+00,  1.0213e-02,  1.6205e+01]])), ('1.model.hidden_layer_1.weight', tensor([[ 15.1296,   9.9926],
        [-17.9314,  -0.4414],
        [ 13.0987,   2.2064],
        [  8.0967,   1.2242],
        [ -0.2698,   5.1921],
        [-14.5525,   1.1727],
        [-13.3018,   9.8017],
        [ -5.8329,  12.1198],
        [ -0.2363,   4.9738],
        [  7.2713,  16.8663]])), ('1.model.hidden_layer_1.bias', tensor([ 5.4328, 13.5048, -5.2835, -7.7756, -3.5882, 15.0327,  7.7604, 10.3209,
        -3.5214, 13.5269])), ('1.model.hidden_layer_2.weight', tensor([[-2.3397e+00, -9.3439e-01, -1.9957e+00, -5.4270e-02,  6.2871e-02,
         -1.4454e+00, -2.7488e-02, -6.4440e-01,  5.8821e-02,  1.7842e-01],
        [ 5.2770e+00, -3.7226e+00, -3.3238e-01,  2.5741e+00,  8.6634e-02,
         -1.4828e+00, -1.7912e+00,  2.0692e+01,  1.1130e-01,  5.6744e+00],
        [-6.8411e+00, -5.1753e+00, -2.5777e-01,  1.8853e-01,  1.4368e-01,
         -6.3622e+00,  1.4352e-01,  7.5375e-01,  1.4259e-01,  2.9991e-01],
        [-1.7644e+01,  7.5412e+00, -7.2371e+00,  3.6107e-01, -2.8605e-02,
          5.1868e+00,  9.1094e-01,  1.8024e+00, -3.8803e-02, -3.2178e+01],
        [-4.0211e+00, -9.3176e-01, -3.6143e+00,  6.8942e-01,  7.2891e-01,
         -7.9880e-01, -1.9752e-01, -8.6820e+00,  7.0098e-01,  5.5861e+00],
        [-2.2981e+00,  1.0705e-01, -1.8385e+00, -3.2043e-01,  8.0070e-02,
         -1.3810e+00,  8.1559e-01, -2.0294e-01,  6.5038e-02, -1.1353e+00],
        [ 1.9315e+00,  6.5588e+00, -6.1841e+00, -7.5572e+00,  2.6878e+00,
         -4.2586e+00,  6.9553e+00,  1.1920e+01,  2.2972e+00, -4.5623e+00],
        [-2.8057e+00,  1.0038e+00, -2.0409e+00, -3.4249e-01,  1.0238e-01,
         -1.0371e+00,  1.6023e+00,  1.8276e-01,  7.9816e-02, -9.1241e-01],
        [-8.4186e+00,  7.9011e+00, -3.5224e+00, -2.4622e+00,  3.0464e-02,
          2.7240e+00, -1.0970e+01, -1.4862e-01,  4.3994e-02, -1.6841e+01],
        [-2.9624e+01,  2.9931e+00, -2.2733e+01, -5.3901e-01,  5.1597e-02,
          1.6204e+00,  5.2327e-01,  2.9009e+00,  4.8170e-02, -1.3295e+01]])), ('1.model.hidden_layer_2.bias', tensor([-3.2041, -2.5964, -0.9832, -0.8876, -1.7976, -2.7350, -6.8863, -2.6785,
        -0.9982, -2.3272])), ('1.model.output_layer_3.weight', tensor([[  1.1636,   0.3276,   3.4929,  -8.5499,   5.3094,   1.3020,   0.3119,
           1.6217,  -0.7461,  18.9726],
        [ -1.1636,  -0.3679,  -3.4921,   8.6390,  -5.3093,  -1.3020,  -0.3665,
          -1.6217,   0.6614, -18.9667]]))])
loaded xi:  117.02424
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1515.643443794422
W_T_median: 1153.9174919778538
W_T_pctile_5: -111.46571043684067
W_T_CVAR_5_pct: -277.22753928042437
-----------------------------------------------
new min fval from sgd:  -1564.937267718813
min fval:  -1564.937267718813
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -0.9215,   0.8616],
        [ -0.9218,   0.8621],
        [-15.1298,  -1.5817],
        [  1.2217, -11.8991],
        [ 16.7054,  -2.7197],
        [ -3.9348, -12.7149],
        [-47.8094,  -9.5532],
        [ 13.9379,  -6.2224],
        [  6.6439, -13.0280],
        [ -0.9215,   0.8616]])), ('0.model.hidden_layer_1.bias', tensor([ -2.9270,  -2.9268,  15.3793, -10.2912, -12.6830, -10.1735,  -8.6860,
        -11.2473, -11.1091,  -2.9270])), ('0.model.hidden_layer_2.weight', tensor([[-9.4662e-03, -9.4609e-03, -9.7162e-01, -1.0056e-01, -3.2747e-01,
         -1.6146e-01, -4.8349e-02, -2.4016e-01, -1.9658e-01, -9.4662e-03],
        [-9.4663e-03, -9.4609e-03, -9.7162e-01, -1.0056e-01, -3.2747e-01,
         -1.6146e-01, -4.8349e-02, -2.4016e-01, -1.9658e-01, -9.4662e-03],
        [-9.4662e-03, -9.4609e-03, -9.7162e-01, -1.0056e-01, -3.2747e-01,
         -1.6146e-01, -4.8349e-02, -2.4016e-01, -1.9658e-01, -9.4662e-03],
        [-9.4662e-03, -9.4609e-03, -9.7162e-01, -1.0056e-01, -3.2747e-01,
         -1.6146e-01, -4.8349e-02, -2.4016e-01, -1.9658e-01, -9.4662e-03],
        [ 4.8304e-01,  4.8332e-01, -1.1042e+01,  8.1583e+00,  1.3172e+01,
          9.8747e+00,  1.1595e+01,  6.5478e+00,  1.3811e+01,  4.8304e-01],
        [-9.4662e-03, -9.4609e-03, -9.7162e-01, -1.0056e-01, -3.2747e-01,
         -1.6146e-01, -4.8349e-02, -2.4016e-01, -1.9658e-01, -9.4662e-03],
        [-9.4662e-03, -9.4609e-03, -9.7162e-01, -1.0056e-01, -3.2747e-01,
         -1.6146e-01, -4.8349e-02, -2.4016e-01, -1.9658e-01, -9.4662e-03],
        [ 1.4195e-01,  1.4189e-01, -8.0429e+00,  4.5753e+00,  3.8018e-01,
          6.6600e+00,  6.3763e+00,  7.0929e-01,  8.3253e+00,  1.4195e-01],
        [-9.4662e-03, -9.4609e-03, -9.7162e-01, -1.0056e-01, -3.2747e-01,
         -1.6146e-01, -4.8349e-02, -2.4016e-01, -1.9658e-01, -9.4662e-03],
        [ 3.8200e-01,  3.8222e-01,  1.0920e+01, -8.3457e+00, -1.0892e+01,
         -1.0197e+01, -1.0157e+01, -1.0025e+01, -1.3676e+01,  3.8200e-01]])), ('0.model.hidden_layer_2.bias', tensor([-1.1261, -1.1261, -1.1261, -1.1261, -5.2517, -1.1261, -1.1261, -3.1568,
        -1.1261,  1.4455])), ('0.model.output_layer_3.weight', tensor([[ 1.0213e-02,  1.0213e-02,  1.0213e-02,  1.0213e-02, -1.6901e+01,
          1.0213e-02,  1.0213e-02, -4.3750e+00,  1.0213e-02,  1.6205e+01]])), ('1.model.hidden_layer_1.weight', tensor([[ 15.1296,   9.9926],
        [-17.9314,  -0.4414],
        [ 13.0987,   2.2064],
        [  8.0967,   1.2242],
        [ -0.2698,   5.1921],
        [-14.5525,   1.1727],
        [-13.3018,   9.8017],
        [ -5.8329,  12.1198],
        [ -0.2363,   4.9738],
        [  7.2713,  16.8663]])), ('1.model.hidden_layer_1.bias', tensor([ 5.4328, 13.5048, -5.2835, -7.7756, -3.5882, 15.0327,  7.7604, 10.3209,
        -3.5214, 13.5269])), ('1.model.hidden_layer_2.weight', tensor([[-2.3397e+00, -9.3439e-01, -1.9957e+00, -5.4270e-02,  6.2871e-02,
         -1.4454e+00, -2.7488e-02, -6.4440e-01,  5.8821e-02,  1.7842e-01],
        [ 5.2770e+00, -3.7226e+00, -3.3238e-01,  2.5741e+00,  8.6634e-02,
         -1.4828e+00, -1.7912e+00,  2.0692e+01,  1.1130e-01,  5.6744e+00],
        [-6.8411e+00, -5.1753e+00, -2.5777e-01,  1.8853e-01,  1.4368e-01,
         -6.3622e+00,  1.4352e-01,  7.5375e-01,  1.4259e-01,  2.9991e-01],
        [-1.7644e+01,  7.5412e+00, -7.2371e+00,  3.6107e-01, -2.8605e-02,
          5.1868e+00,  9.1094e-01,  1.8024e+00, -3.8803e-02, -3.2178e+01],
        [-4.0211e+00, -9.3176e-01, -3.6143e+00,  6.8942e-01,  7.2891e-01,
         -7.9880e-01, -1.9752e-01, -8.6820e+00,  7.0098e-01,  5.5861e+00],
        [-2.2981e+00,  1.0705e-01, -1.8385e+00, -3.2043e-01,  8.0070e-02,
         -1.3810e+00,  8.1559e-01, -2.0294e-01,  6.5038e-02, -1.1353e+00],
        [ 1.9315e+00,  6.5588e+00, -6.1841e+00, -7.5572e+00,  2.6878e+00,
         -4.2586e+00,  6.9553e+00,  1.1920e+01,  2.2972e+00, -4.5623e+00],
        [-2.8057e+00,  1.0038e+00, -2.0409e+00, -3.4249e-01,  1.0238e-01,
         -1.0371e+00,  1.6023e+00,  1.8276e-01,  7.9816e-02, -9.1241e-01],
        [-8.4186e+00,  7.9011e+00, -3.5224e+00, -2.4622e+00,  3.0464e-02,
          2.7240e+00, -1.0970e+01, -1.4862e-01,  4.3994e-02, -1.6841e+01],
        [-2.9624e+01,  2.9931e+00, -2.2733e+01, -5.3901e-01,  5.1597e-02,
          1.6204e+00,  5.2327e-01,  2.9009e+00,  4.8170e-02, -1.3295e+01]])), ('1.model.hidden_layer_2.bias', tensor([-3.2041, -2.5964, -0.9832, -0.8876, -1.7976, -2.7350, -6.8863, -2.6785,
        -0.9982, -2.3272])), ('1.model.output_layer_3.weight', tensor([[  1.1636,   0.3276,   3.4929,  -8.5499,   5.3094,   1.3020,   0.3119,
           1.6217,  -0.7461,  18.9726],
        [ -1.1636,  -0.3679,  -3.4921,   8.6390,  -5.3093,  -1.3020,  -0.3665,
          -1.6217,   0.6614, -18.9667]]))])
xi:  [117.02424]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 513.1727428805902
W_T_median: 298.0413347309117
W_T_pctile_5: 116.65314151745994
W_T_CVAR_5_pct: -4.331371419317174
Average q (qsum/M+1):  50.67500551285282
Optimal xi:  [117.02424]
Observed VAR:  298.0413347309117
Expected(across Rb) median(across samples) p_equity:  0.27153878038128215
obj fun:  tensor(-1564.9373, dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
bond graph is mislabeled!
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 1.5
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -0.8359,   0.3641],
        [ -0.8359,   0.3641],
        [-17.5158,  -1.7010],
        [  5.4723, -14.2955],
        [ 20.5766,  -2.7311],
        [ -6.1593, -15.6942],
        [-40.3822, -11.2493],
        [ 17.6531,  -5.9710],
        [ 12.0900, -14.0113],
        [ -0.8359,   0.3641]])), ('0.model.hidden_layer_1.bias', tensor([ -2.7036,  -2.7036,  18.1651, -11.7522, -14.9912, -11.1776,  -9.7162,
        -13.0085, -12.1809,  -2.7036])), ('0.model.hidden_layer_2.weight', tensor([[-2.9685e-02, -2.9685e-02, -1.2411e+00, -1.8402e-01, -2.8700e-01,
         -2.4530e-01, -5.5474e-02, -2.6148e-01, -4.0973e-01, -2.9685e-02],
        [-2.9685e-02, -2.9685e-02, -1.2411e+00, -1.8402e-01, -2.8700e-01,
         -2.4530e-01, -5.5474e-02, -2.6148e-01, -4.0973e-01, -2.9685e-02],
        [-2.9685e-02, -2.9685e-02, -1.2411e+00, -1.8402e-01, -2.8700e-01,
         -2.4530e-01, -5.5474e-02, -2.6148e-01, -4.0973e-01, -2.9685e-02],
        [-2.9685e-02, -2.9685e-02, -1.2411e+00, -1.8402e-01, -2.8700e-01,
         -2.4530e-01, -5.5474e-02, -2.6148e-01, -4.0973e-01, -2.9685e-02],
        [-1.3769e-02, -1.3769e-02, -1.3133e+01,  9.5057e+00,  1.7246e+01,
          1.1661e+01,  1.4015e+01,  6.3303e+00,  1.4571e+01, -1.3768e-02],
        [-2.9685e-02, -2.9685e-02, -1.2411e+00, -1.8402e-01, -2.8700e-01,
         -2.4530e-01, -5.5474e-02, -2.6148e-01, -4.0973e-01, -2.9685e-02],
        [-2.9685e-02, -2.9685e-02, -1.2411e+00, -1.8402e-01, -2.8700e-01,
         -2.4530e-01, -5.5474e-02, -2.6148e-01, -4.0973e-01, -2.9685e-02],
        [-2.9685e-02, -2.9685e-02, -1.2411e+00, -1.8402e-01, -2.8700e-01,
         -2.4530e-01, -5.5474e-02, -2.6148e-01, -4.0973e-01, -2.9685e-02],
        [-2.9685e-02, -2.9685e-02, -1.2411e+00, -1.8402e-01, -2.8700e-01,
         -2.4530e-01, -5.5474e-02, -2.6148e-01, -4.0973e-01, -2.9685e-02],
        [-8.6846e-03, -8.6846e-03,  1.2058e+01, -8.9207e+00, -1.2311e+01,
         -1.1604e+01, -9.0399e+00, -1.2951e+01, -1.4397e+01, -8.6846e-03]])), ('0.model.hidden_layer_2.bias', tensor([-1.2725, -1.2725, -1.2725, -1.2725, -5.7730, -1.2725, -1.2725, -1.2725,
        -1.2725,  1.7925])), ('0.model.output_layer_3.weight', tensor([[ -0.0214,  -0.0214,  -0.0214,  -0.0214, -18.6497,  -0.0214,  -0.0214,
          -0.0214,  -0.0214,  15.3728]])), ('1.model.hidden_layer_1.weight', tensor([[ 15.7390,  10.0090],
        [-21.8645,  -1.1391],
        [ 13.4035,   0.9411],
        [  0.6978,   5.2760],
        [  0.4981,   5.5921],
        [-17.1943,   1.3969],
        [ -7.7317,  13.6072],
        [ -3.2693,  16.3680],
        [  0.5007,   5.5892],
        [  8.1838,  19.6637]])), ('1.model.hidden_layer_1.bias', tensor([ 5.5188, 15.5513, -7.7046, -2.2956, -2.1161, 18.8004, 10.1141, 12.5274,
        -2.1209, 15.3261])), ('1.model.hidden_layer_2.weight', tensor([[-7.9540e-01, -5.1798e+00,  1.4737e-01,  2.3166e-01,  2.1255e-01,
         -7.3597e-01,  1.0711e-01, -8.5546e-02,  2.1209e-01, -9.5901e+00],
        [ 7.6790e+00, -1.4303e+00, -2.4078e-01,  1.1211e-02, -7.5046e-02,
         -2.1322e+00,  4.5485e+00,  2.1851e+01, -7.2900e-02,  2.5889e+00],
        [-2.6175e+00, -1.5367e+00, -1.7374e+00, -4.7413e-02, -3.2902e-02,
         -1.9848e+00, -9.8243e-02, -2.5365e-01, -3.3370e-02, -4.4189e-01],
        [-1.7665e+01,  8.9568e+00, -5.6403e+00, -2.3683e-02, -3.4451e-02,
          5.0117e+00,  2.2296e+00,  2.8948e-01, -3.3930e-02, -3.0696e+01],
        [-2.7979e+00,  1.6065e-01, -8.7280e+00, -3.2810e-01, -6.3762e-02,
         -1.7810e+00,  3.6119e+00, -4.1110e+00, -6.8395e-02,  5.1751e+00],
        [-3.4129e+00,  1.4286e+00,  2.6826e-01, -3.9631e-02, -1.0036e-01,
         -2.6833e-01, -9.3445e+00,  2.6645e+00, -9.9947e-02,  1.5679e+00],
        [-4.5325e+00,  6.8813e+00, -4.5915e+00,  1.4643e+00,  2.3542e+00,
         -3.7676e+00,  4.5979e+00,  3.7277e+00,  2.3369e+00, -1.5579e+00],
        [-2.7988e+00, -1.4902e+00, -1.6064e+00, -3.7701e-02, -1.8369e-02,
         -1.9819e+00, -9.1151e-02, -2.5078e-01, -1.8964e-02, -4.2652e-01],
        [-9.5168e+00,  8.7150e+00, -2.2160e+00,  3.4687e-02,  6.3670e-02,
          3.3656e+00, -4.4350e+00, -8.7123e+00,  6.3441e-02, -1.3256e+01],
        [-4.2461e+01,  3.4506e+00, -3.1601e+01, -6.4885e-01, -6.0389e-01,
          2.3158e+00, -4.8429e-01, -3.3397e+00, -6.0283e-01, -2.0442e+01]])), ('1.model.hidden_layer_2.bias', tensor([-2.4043, -5.3756, -3.2653, -2.5129, -3.6005, -4.2516, -5.6217, -3.3356,
        -2.7179, -2.4236])), ('1.model.output_layer_3.weight', tensor([[  2.9572,   0.4040,   0.5096,  -8.4944,   4.6061,   3.3208,   0.7226,
           0.6607,  -0.9424,  20.4348],
        [ -2.9572,  -0.4443,  -0.5096,   8.5345,  -4.6062,  -3.3209,  -0.7617,
          -0.6607,   0.8587, -20.4315]]))])
loaded xi:  168.78386
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1515.643443794422
W_T_median: 1153.9174919778538
W_T_pctile_5: -111.46571043684067
W_T_CVAR_5_pct: -277.22753928042437
-----------------------------------------------
new min fval from sgd:  -1570.1186783691137
min fval:  -1570.1186783691137
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -0.8359,   0.3641],
        [ -0.8359,   0.3641],
        [-17.5158,  -1.7010],
        [  5.4723, -14.2955],
        [ 20.5766,  -2.7311],
        [ -6.1593, -15.6942],
        [-40.3822, -11.2493],
        [ 17.6531,  -5.9710],
        [ 12.0900, -14.0113],
        [ -0.8359,   0.3641]])), ('0.model.hidden_layer_1.bias', tensor([ -2.7036,  -2.7036,  18.1651, -11.7522, -14.9912, -11.1776,  -9.7162,
        -13.0085, -12.1809,  -2.7036])), ('0.model.hidden_layer_2.weight', tensor([[-2.9685e-02, -2.9685e-02, -1.2411e+00, -1.8402e-01, -2.8700e-01,
         -2.4530e-01, -5.5474e-02, -2.6148e-01, -4.0973e-01, -2.9685e-02],
        [-2.9685e-02, -2.9685e-02, -1.2411e+00, -1.8402e-01, -2.8700e-01,
         -2.4530e-01, -5.5474e-02, -2.6148e-01, -4.0973e-01, -2.9685e-02],
        [-2.9685e-02, -2.9685e-02, -1.2411e+00, -1.8402e-01, -2.8700e-01,
         -2.4530e-01, -5.5474e-02, -2.6148e-01, -4.0973e-01, -2.9685e-02],
        [-2.9685e-02, -2.9685e-02, -1.2411e+00, -1.8402e-01, -2.8700e-01,
         -2.4530e-01, -5.5474e-02, -2.6148e-01, -4.0973e-01, -2.9685e-02],
        [-1.3769e-02, -1.3769e-02, -1.3133e+01,  9.5057e+00,  1.7246e+01,
          1.1661e+01,  1.4015e+01,  6.3303e+00,  1.4571e+01, -1.3768e-02],
        [-2.9685e-02, -2.9685e-02, -1.2411e+00, -1.8402e-01, -2.8700e-01,
         -2.4530e-01, -5.5474e-02, -2.6148e-01, -4.0973e-01, -2.9685e-02],
        [-2.9685e-02, -2.9685e-02, -1.2411e+00, -1.8402e-01, -2.8700e-01,
         -2.4530e-01, -5.5474e-02, -2.6148e-01, -4.0973e-01, -2.9685e-02],
        [-2.9685e-02, -2.9685e-02, -1.2411e+00, -1.8402e-01, -2.8700e-01,
         -2.4530e-01, -5.5474e-02, -2.6148e-01, -4.0973e-01, -2.9685e-02],
        [-2.9685e-02, -2.9685e-02, -1.2411e+00, -1.8402e-01, -2.8700e-01,
         -2.4530e-01, -5.5474e-02, -2.6148e-01, -4.0973e-01, -2.9685e-02],
        [-8.6846e-03, -8.6846e-03,  1.2058e+01, -8.9207e+00, -1.2311e+01,
         -1.1604e+01, -9.0399e+00, -1.2951e+01, -1.4397e+01, -8.6846e-03]])), ('0.model.hidden_layer_2.bias', tensor([-1.2725, -1.2725, -1.2725, -1.2725, -5.7730, -1.2725, -1.2725, -1.2725,
        -1.2725,  1.7925])), ('0.model.output_layer_3.weight', tensor([[ -0.0214,  -0.0214,  -0.0214,  -0.0214, -18.6497,  -0.0214,  -0.0214,
          -0.0214,  -0.0214,  15.3728]])), ('1.model.hidden_layer_1.weight', tensor([[ 15.7390,  10.0090],
        [-21.8645,  -1.1391],
        [ 13.4035,   0.9411],
        [  0.6978,   5.2760],
        [  0.4981,   5.5921],
        [-17.1943,   1.3969],
        [ -7.7317,  13.6072],
        [ -3.2693,  16.3680],
        [  0.5007,   5.5892],
        [  8.1838,  19.6637]])), ('1.model.hidden_layer_1.bias', tensor([ 5.5188, 15.5513, -7.7046, -2.2956, -2.1161, 18.8004, 10.1141, 12.5274,
        -2.1209, 15.3261])), ('1.model.hidden_layer_2.weight', tensor([[-7.9540e-01, -5.1798e+00,  1.4737e-01,  2.3166e-01,  2.1255e-01,
         -7.3597e-01,  1.0711e-01, -8.5546e-02,  2.1209e-01, -9.5901e+00],
        [ 7.6790e+00, -1.4303e+00, -2.4078e-01,  1.1211e-02, -7.5046e-02,
         -2.1322e+00,  4.5485e+00,  2.1851e+01, -7.2900e-02,  2.5889e+00],
        [-2.6175e+00, -1.5367e+00, -1.7374e+00, -4.7413e-02, -3.2902e-02,
         -1.9848e+00, -9.8243e-02, -2.5365e-01, -3.3370e-02, -4.4189e-01],
        [-1.7665e+01,  8.9568e+00, -5.6403e+00, -2.3683e-02, -3.4451e-02,
          5.0117e+00,  2.2296e+00,  2.8948e-01, -3.3930e-02, -3.0696e+01],
        [-2.7979e+00,  1.6065e-01, -8.7280e+00, -3.2810e-01, -6.3762e-02,
         -1.7810e+00,  3.6119e+00, -4.1110e+00, -6.8395e-02,  5.1751e+00],
        [-3.4129e+00,  1.4286e+00,  2.6826e-01, -3.9631e-02, -1.0036e-01,
         -2.6833e-01, -9.3445e+00,  2.6645e+00, -9.9947e-02,  1.5679e+00],
        [-4.5325e+00,  6.8813e+00, -4.5915e+00,  1.4643e+00,  2.3542e+00,
         -3.7676e+00,  4.5979e+00,  3.7277e+00,  2.3369e+00, -1.5579e+00],
        [-2.7988e+00, -1.4902e+00, -1.6064e+00, -3.7701e-02, -1.8369e-02,
         -1.9819e+00, -9.1151e-02, -2.5078e-01, -1.8964e-02, -4.2652e-01],
        [-9.5168e+00,  8.7150e+00, -2.2160e+00,  3.4687e-02,  6.3670e-02,
          3.3656e+00, -4.4350e+00, -8.7123e+00,  6.3441e-02, -1.3256e+01],
        [-4.2461e+01,  3.4506e+00, -3.1601e+01, -6.4885e-01, -6.0389e-01,
          2.3158e+00, -4.8429e-01, -3.3397e+00, -6.0283e-01, -2.0442e+01]])), ('1.model.hidden_layer_2.bias', tensor([-2.4043, -5.3756, -3.2653, -2.5129, -3.6005, -4.2516, -5.6217, -3.3356,
        -2.7179, -2.4236])), ('1.model.output_layer_3.weight', tensor([[  2.9572,   0.4040,   0.5096,  -8.4944,   4.6061,   3.3208,   0.7226,
           0.6607,  -0.9424,  20.4348],
        [ -2.9572,  -0.4443,  -0.5096,   8.5345,  -4.6062,  -3.3209,  -0.7617,
          -0.6607,   0.8587, -20.4315]]))])
xi:  [168.78386]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 549.4655989262722
W_T_median: 372.3861413445418
W_T_pctile_5: 165.0061567605361
W_T_CVAR_5_pct: 16.689694860148926
Average q (qsum/M+1):  49.031679214969756
Optimal xi:  [168.78386]
Observed VAR:  372.3861413445418
Expected(across Rb) median(across samples) p_equity:  0.25981124117970467
obj fun:  tensor(-1570.1187, dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
bond graph is mislabeled!
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 3.0
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -1.0238,   0.2926],
        [ -1.0238,   0.2926],
        [-18.8886,  -1.6564],
        [  9.7305, -16.0244],
        [ 23.6773,  -2.5759],
        [ -4.3793, -18.0315],
        [-35.4348, -12.9739],
        [ 20.6385,  -6.3566],
        [ 15.2289, -13.9715],
        [ -1.0238,   0.2926]])), ('0.model.hidden_layer_1.bias', tensor([ -3.1572,  -3.1572,  20.0711, -13.1040, -17.4391, -12.8278, -10.6865,
        -13.6007, -12.2356,  -3.1572])), ('0.model.hidden_layer_2.weight', tensor([[-1.7291e-02, -1.7291e-02, -1.1403e+00, -2.1477e-01, -1.5590e-01,
         -2.4867e-01, -1.5493e-02, -1.7924e-01, -3.6729e-01, -1.7291e-02],
        [-1.7291e-02, -1.7291e-02, -1.1403e+00, -2.1477e-01, -1.5590e-01,
         -2.4867e-01, -1.5493e-02, -1.7924e-01, -3.6729e-01, -1.7291e-02],
        [-1.7291e-02, -1.7291e-02, -1.1403e+00, -2.1477e-01, -1.5590e-01,
         -2.4867e-01, -1.5493e-02, -1.7924e-01, -3.6729e-01, -1.7291e-02],
        [-1.7291e-02, -1.7291e-02, -1.1403e+00, -2.1477e-01, -1.5590e-01,
         -2.4867e-01, -1.5493e-02, -1.7924e-01, -3.6729e-01, -1.7291e-02],
        [-1.0003e-01, -1.0003e-01, -1.4241e+01,  1.0273e+01,  1.9173e+01,
          1.4525e+01,  1.3689e+01,  7.9603e+00,  1.3594e+01, -1.0003e-01],
        [-1.7291e-02, -1.7291e-02, -1.1403e+00, -2.1477e-01, -1.5590e-01,
         -2.4867e-01, -1.5493e-02, -1.7924e-01, -3.6729e-01, -1.7291e-02],
        [-1.7291e-02, -1.7291e-02, -1.1403e+00, -2.1477e-01, -1.5590e-01,
         -2.4867e-01, -1.5493e-02, -1.7924e-01, -3.6729e-01, -1.7291e-02],
        [-1.7291e-02, -1.7291e-02, -1.1403e+00, -2.1477e-01, -1.5590e-01,
         -2.4867e-01, -1.5493e-02, -1.7924e-01, -3.6729e-01, -1.7291e-02],
        [-1.7291e-02, -1.7291e-02, -1.1403e+00, -2.1477e-01, -1.5590e-01,
         -2.4867e-01, -1.5493e-02, -1.7924e-01, -3.6729e-01, -1.7291e-02],
        [-1.5197e-01, -1.5197e-01,  1.2988e+01, -1.0051e+01, -1.4686e+01,
         -1.4413e+01, -8.4530e+00, -9.5035e+00, -1.2549e+01, -1.5197e-01]])), ('0.model.hidden_layer_2.bias', tensor([-1.1922, -1.1922, -1.1922, -1.1922, -6.0731, -1.1922, -1.1922, -1.1922,
        -1.1922,  1.8220])), ('0.model.output_layer_3.weight', tensor([[  0.0195,   0.0195,   0.0195,   0.0195, -18.5423,   0.0195,   0.0195,
           0.0195,   0.0195,  14.3708]])), ('1.model.hidden_layer_1.weight', tensor([[ 16.4424,   9.7148],
        [-24.8214,  -1.9611],
        [  9.8473,  -1.3117],
        [ -4.0486,   9.3379],
        [ -4.1071,   9.4499],
        [-19.8843,   1.6331],
        [ -8.1509,  11.7099],
        [ -1.6562,   2.2547],
        [ -3.9839,   9.9281],
        [  8.9919,  21.8283]])), ('1.model.hidden_layer_1.bias', tensor([  4.6881,  16.4318, -10.4079,   3.8346,   6.4796,  21.1091,   8.3454,
         -4.5927,   5.5298,  17.2000])), ('1.model.hidden_layer_2.weight', tensor([[-2.0121e+00, -2.9787e+00, -1.1123e+00,  5.6896e-01,  4.3052e-01,
         -1.1035e+00,  1.4846e+00, -3.3242e+00,  3.1354e-01, -1.0842e+00],
        [ 8.6897e+00, -1.3175e+00,  2.9611e-01,  1.0827e+01,  2.3871e+01,
         -2.0452e+00,  1.3928e+01,  4.9597e-01,  2.1299e+01,  1.9288e+00],
        [-2.4216e+00, -1.4452e+00, -1.5382e+00,  2.7795e-01,  1.4699e-01,
         -1.5179e+00,  1.3018e+00, -2.6127e+00, -1.0571e-01, -3.4367e-01],
        [-1.7489e+01,  1.0779e+01, -3.9544e+00,  1.2519e+00,  2.4128e+00,
          3.8898e+00,  7.0814e+00,  1.2664e-01,  2.1681e+00, -2.9399e+01],
        [-3.5744e+00,  1.2186e+00, -1.1619e+01, -2.8241e+00, -7.7854e-01,
         -1.8820e+00, -5.7416e+00,  4.8959e-01, -1.6507e+00,  4.2313e+00],
        [-3.6671e+00,  2.1981e+00, -3.9075e+00, -7.3000e-01, -2.0503e+00,
         -1.8657e+00, -2.4611e+00,  1.2821e-02, -2.4369e+00,  3.7389e+00],
        [-2.7668e+00,  5.3642e+00, -4.5424e+00,  6.2185e-02, -2.0289e+00,
         -4.8299e+00,  5.5345e+00, -3.2253e+00, -1.1799e+00,  2.8407e+00],
        [-2.5275e+00, -1.5933e+00, -1.2146e+00,  5.6285e-01,  6.3679e-01,
         -1.3662e+00,  1.5862e+00, -3.6566e+00,  3.8781e-01,  3.6202e-02],
        [-9.0817e+00,  8.7123e+00, -9.6122e-01, -1.8547e+00, -3.3003e+00,
          2.9416e+00, -9.4633e+00,  2.8762e-01, -3.2452e+00, -1.0886e+01],
        [-5.4265e+01,  3.6975e+00, -3.6286e+01, -5.4405e-01, -1.7976e+00,
          2.4681e+00,  5.5841e+00, -3.8708e-01, -1.1236e+00, -3.4395e+01]])), ('1.model.hidden_layer_2.bias', tensor([-3.6985, -6.9758, -4.0898, -3.9120, -3.9474, -6.6076, -6.5272, -3.6866,
        -3.5229, -2.9805])), ('1.model.output_layer_3.weight', tensor([[  1.5527,   0.4458,   1.0557,  -9.4157,   6.0281,   4.7268,   4.9316,
           1.6442,  -1.1524,  23.0428],
        [ -1.5527,  -0.4860,  -1.0557,   9.4377,  -6.0281,  -4.7269,  -4.9441,
          -1.6442,   1.0700, -23.0401]]))])
loaded xi:  189.21964
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1515.643443794422
W_T_median: 1153.9174919778538
W_T_pctile_5: -111.46571043684067
W_T_CVAR_5_pct: -277.22753928042437
-----------------------------------------------
new min fval from sgd:  -1604.8814471192145
min fval:  -1604.8814471192145
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -1.0238,   0.2926],
        [ -1.0238,   0.2926],
        [-18.8886,  -1.6564],
        [  9.7305, -16.0244],
        [ 23.6773,  -2.5759],
        [ -4.3793, -18.0315],
        [-35.4348, -12.9739],
        [ 20.6385,  -6.3566],
        [ 15.2289, -13.9715],
        [ -1.0238,   0.2926]])), ('0.model.hidden_layer_1.bias', tensor([ -3.1572,  -3.1572,  20.0711, -13.1040, -17.4391, -12.8278, -10.6865,
        -13.6007, -12.2356,  -3.1572])), ('0.model.hidden_layer_2.weight', tensor([[-1.7291e-02, -1.7291e-02, -1.1403e+00, -2.1477e-01, -1.5590e-01,
         -2.4867e-01, -1.5493e-02, -1.7924e-01, -3.6729e-01, -1.7291e-02],
        [-1.7291e-02, -1.7291e-02, -1.1403e+00, -2.1477e-01, -1.5590e-01,
         -2.4867e-01, -1.5493e-02, -1.7924e-01, -3.6729e-01, -1.7291e-02],
        [-1.7291e-02, -1.7291e-02, -1.1403e+00, -2.1477e-01, -1.5590e-01,
         -2.4867e-01, -1.5493e-02, -1.7924e-01, -3.6729e-01, -1.7291e-02],
        [-1.7291e-02, -1.7291e-02, -1.1403e+00, -2.1477e-01, -1.5590e-01,
         -2.4867e-01, -1.5493e-02, -1.7924e-01, -3.6729e-01, -1.7291e-02],
        [-1.0003e-01, -1.0003e-01, -1.4241e+01,  1.0273e+01,  1.9173e+01,
          1.4525e+01,  1.3689e+01,  7.9603e+00,  1.3594e+01, -1.0003e-01],
        [-1.7291e-02, -1.7291e-02, -1.1403e+00, -2.1477e-01, -1.5590e-01,
         -2.4867e-01, -1.5493e-02, -1.7924e-01, -3.6729e-01, -1.7291e-02],
        [-1.7291e-02, -1.7291e-02, -1.1403e+00, -2.1477e-01, -1.5590e-01,
         -2.4867e-01, -1.5493e-02, -1.7924e-01, -3.6729e-01, -1.7291e-02],
        [-1.7291e-02, -1.7291e-02, -1.1403e+00, -2.1477e-01, -1.5590e-01,
         -2.4867e-01, -1.5493e-02, -1.7924e-01, -3.6729e-01, -1.7291e-02],
        [-1.7291e-02, -1.7291e-02, -1.1403e+00, -2.1477e-01, -1.5590e-01,
         -2.4867e-01, -1.5493e-02, -1.7924e-01, -3.6729e-01, -1.7291e-02],
        [-1.5197e-01, -1.5197e-01,  1.2988e+01, -1.0051e+01, -1.4686e+01,
         -1.4413e+01, -8.4530e+00, -9.5035e+00, -1.2549e+01, -1.5197e-01]])), ('0.model.hidden_layer_2.bias', tensor([-1.1922, -1.1922, -1.1922, -1.1922, -6.0731, -1.1922, -1.1922, -1.1922,
        -1.1922,  1.8220])), ('0.model.output_layer_3.weight', tensor([[  0.0195,   0.0195,   0.0195,   0.0195, -18.5423,   0.0195,   0.0195,
           0.0195,   0.0195,  14.3708]])), ('1.model.hidden_layer_1.weight', tensor([[ 16.4424,   9.7148],
        [-24.8214,  -1.9611],
        [  9.8473,  -1.3117],
        [ -4.0486,   9.3379],
        [ -4.1071,   9.4499],
        [-19.8843,   1.6331],
        [ -8.1509,  11.7099],
        [ -1.6562,   2.2547],
        [ -3.9839,   9.9281],
        [  8.9919,  21.8283]])), ('1.model.hidden_layer_1.bias', tensor([  4.6881,  16.4318, -10.4079,   3.8346,   6.4796,  21.1091,   8.3454,
         -4.5927,   5.5298,  17.2000])), ('1.model.hidden_layer_2.weight', tensor([[-2.0121e+00, -2.9787e+00, -1.1123e+00,  5.6896e-01,  4.3052e-01,
         -1.1035e+00,  1.4846e+00, -3.3242e+00,  3.1354e-01, -1.0842e+00],
        [ 8.6897e+00, -1.3175e+00,  2.9611e-01,  1.0827e+01,  2.3871e+01,
         -2.0452e+00,  1.3928e+01,  4.9597e-01,  2.1299e+01,  1.9288e+00],
        [-2.4216e+00, -1.4452e+00, -1.5382e+00,  2.7795e-01,  1.4699e-01,
         -1.5179e+00,  1.3018e+00, -2.6127e+00, -1.0571e-01, -3.4367e-01],
        [-1.7489e+01,  1.0779e+01, -3.9544e+00,  1.2519e+00,  2.4128e+00,
          3.8898e+00,  7.0814e+00,  1.2664e-01,  2.1681e+00, -2.9399e+01],
        [-3.5744e+00,  1.2186e+00, -1.1619e+01, -2.8241e+00, -7.7854e-01,
         -1.8820e+00, -5.7416e+00,  4.8959e-01, -1.6507e+00,  4.2313e+00],
        [-3.6671e+00,  2.1981e+00, -3.9075e+00, -7.3000e-01, -2.0503e+00,
         -1.8657e+00, -2.4611e+00,  1.2821e-02, -2.4369e+00,  3.7389e+00],
        [-2.7668e+00,  5.3642e+00, -4.5424e+00,  6.2185e-02, -2.0289e+00,
         -4.8299e+00,  5.5345e+00, -3.2253e+00, -1.1799e+00,  2.8407e+00],
        [-2.5275e+00, -1.5933e+00, -1.2146e+00,  5.6285e-01,  6.3679e-01,
         -1.3662e+00,  1.5862e+00, -3.6566e+00,  3.8781e-01,  3.6202e-02],
        [-9.0817e+00,  8.7123e+00, -9.6122e-01, -1.8547e+00, -3.3003e+00,
          2.9416e+00, -9.4633e+00,  2.8762e-01, -3.2452e+00, -1.0886e+01],
        [-5.4265e+01,  3.6975e+00, -3.6286e+01, -5.4405e-01, -1.7976e+00,
          2.4681e+00,  5.5841e+00, -3.8708e-01, -1.1236e+00, -3.4395e+01]])), ('1.model.hidden_layer_2.bias', tensor([-3.6985, -6.9758, -4.0898, -3.9120, -3.9474, -6.6076, -6.5272, -3.6866,
        -3.5229, -2.9805])), ('1.model.output_layer_3.weight', tensor([[  1.5527,   0.4458,   1.0557,  -9.4157,   6.0281,   4.7268,   4.9316,
           1.6442,  -1.1524,  23.0428],
        [ -1.5527,  -0.4860,  -1.0557,   9.4377,  -6.0281,  -4.7269,  -4.9441,
          -1.6442,   1.0700, -23.0401]]))])
xi:  [189.21964]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 644.8659990858207
W_T_median: 426.17248310105424
W_T_pctile_5: 184.40740181175104
W_T_CVAR_5_pct: 22.618212490885877
Average q (qsum/M+1):  48.132635301159276
Optimal xi:  [189.21964]
Observed VAR:  426.17248310105424
Expected(across Rb) median(across samples) p_equity:  0.2562675399084886
obj fun:  tensor(-1604.8814, dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
bond graph is mislabeled!
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 5.0
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-1.2734e+00,  4.8709e-01],
        [-2.0934e+00,  2.5409e+00],
        [-2.2876e+01,  1.6497e-02],
        [ 1.1707e+01, -1.9355e+01],
        [ 2.7174e+01, -2.8451e+00],
        [ 5.2974e-01, -2.0164e+01],
        [-1.4523e+01, -1.4006e+01],
        [ 2.5252e+01, -6.6165e+00],
        [ 2.1479e+01, -1.2247e+01],
        [ 1.4506e+00,  1.0643e+01]])), ('0.model.hidden_layer_1.bias', tensor([ -3.8504,  -4.9451,  19.2859, -14.5092, -18.2183, -14.7456, -12.5980,
        -15.0216, -12.3807,  -2.9477])), ('0.model.hidden_layer_2.weight', tensor([[ 7.7663e-03,  5.1054e-02, -1.6077e+00, -3.6082e-01, -6.8995e-02,
         -2.2112e-01, -4.0013e-02, -1.5366e-01, -4.8100e-01, -2.2317e-01],
        [ 7.7667e-03,  5.1052e-02, -1.6077e+00, -3.6081e-01, -6.8996e-02,
         -2.2111e-01, -4.0013e-02, -1.5366e-01, -4.8100e-01, -2.2316e-01],
        [ 7.7593e-03,  5.1074e-02, -1.6075e+00, -3.6085e-01, -6.8988e-02,
         -2.2113e-01, -4.0012e-02, -1.5365e-01, -4.8096e-01, -2.2318e-01],
        [ 7.6082e-03,  5.1231e-02, -1.5976e+00, -3.5942e-01, -6.9857e-02,
         -2.2033e-01, -3.9888e-02, -1.5423e-01, -4.7853e-01, -2.1877e-01],
        [ 2.9546e-01, -7.0587e-01, -1.4249e+01,  1.5561e+01,  2.1216e+01,
          1.5625e+01,  9.1560e+00,  1.3380e+01,  1.4731e+01, -5.4137e-01],
        [ 7.5223e-03,  5.1595e-02, -1.5973e+00, -3.6067e-01, -6.9622e-02,
         -2.2059e-01, -3.9908e-02, -1.5389e-01, -4.7752e-01, -2.2053e-01],
        [ 7.5219e-03,  5.1596e-02, -1.5972e+00, -3.6067e-01, -6.9623e-02,
         -2.2059e-01, -3.9907e-02, -1.5389e-01, -4.7752e-01, -2.2053e-01],
        [ 7.6052e-03,  5.1337e-02, -1.5997e+00, -3.6001e-01, -6.9697e-02,
         -2.2043e-01, -3.9915e-02, -1.5401e-01, -4.7806e-01, -2.2001e-01],
        [ 7.7425e-03,  5.1127e-02, -1.6069e+00, -3.6098e-01, -6.8970e-02,
         -2.2117e-01, -4.0010e-02, -1.5363e-01, -4.8091e-01, -2.2327e-01],
        [ 2.0968e-01,  5.7453e-01,  1.2352e+01, -1.5429e+01, -1.5342e+01,
         -1.3502e+01, -1.4275e+00, -1.1646e+01, -1.2296e+01,  1.0666e+00]])), ('0.model.hidden_layer_2.bias', tensor([-1.6527, -1.6527, -1.6529, -1.6660, -4.2043, -1.6636, -1.6636, -1.6626,
        -1.6532,  0.4355])), ('0.model.output_layer_3.weight', tensor([[ -0.0579,  -0.0579,  -0.0579,  -0.0577, -19.8162,  -0.0575,  -0.0575,
          -0.0577,  -0.0579,  13.0785]])), ('1.model.hidden_layer_1.weight', tensor([[ 16.5454,  10.1505],
        [-27.7295,  -3.4493],
        [ 12.0052,  -2.8082],
        [ -7.3754,   2.4268],
        [-15.6389,   6.7443],
        [-22.1360,   2.1224],
        [ -5.7880,  13.9104],
        [ -7.6202,   5.0118],
        [-13.9450,   4.8303],
        [ 10.1323,  23.6041]])), ('1.model.hidden_layer_1.bias', tensor([  5.3889,  16.1790, -13.2207,  -3.5134,   1.1029,  24.0271,  10.9445,
         -8.9956,   0.0942,  18.2169])), ('1.model.hidden_layer_2.weight', tensor([[-2.5210e+00,  2.8651e+00, -8.2776e+00, -2.5787e+00, -2.1681e-02,
         -2.7665e+00,  1.5492e+00, -2.4621e+00, -2.3149e+00,  2.5708e+00],
        [ 9.2009e+00, -9.2805e-01,  1.4710e-01,  1.1929e+00,  1.9313e+01,
         -2.2385e+00,  2.0543e+01,  1.7633e-02,  8.2694e+00,  2.2845e+00],
        [-1.7957e+00,  5.8038e-01, -1.7285e+01, -1.5858e+00, -2.2805e+00,
         -2.5971e+00,  1.0729e+00, -8.8275e-01, -2.9741e+00,  2.8343e+00],
        [-1.7300e+01,  1.2026e+01, -7.3663e+00,  8.1434e-01,  3.3758e+00,
          5.4412e+00,  2.3406e+00, -4.6183e-02,  1.2460e+00, -3.0484e+01],
        [-2.7516e+00,  5.2446e-02, -2.1913e+01, -1.2601e+00, -1.3140e+00,
         -2.0667e+00,  6.3349e-01, -4.2871e+00, -3.1028e+00,  5.1743e+00],
        [-3.1050e+00,  3.8474e-02, -1.8430e+01, -1.1562e+00, -1.0966e+00,
         -1.7040e+00,  6.8963e-01, -1.5615e+00, -4.1952e+00,  4.5244e+00],
        [-2.9802e+00,  2.0621e+00, -5.9482e+00, -8.5396e-01, -1.3693e+00,
         -5.0158e+00,  7.8727e-01, -9.7172e-01, -1.5423e+00,  3.8791e+00],
        [-5.2476e-01, -1.5870e+01,  8.7069e-01, -4.4496e-01, -5.1603e-01,
          1.6685e+00, -3.4716e-01, -5.3196e-01, -5.1674e-01, -9.1086e+00],
        [-8.3235e+00,  6.3334e+00, -8.6171e-01, -7.5219e-01, -2.3934e+00,
          4.6890e+00, -7.6771e+00, -1.5385e-02, -1.9552e+00, -8.6234e+00],
        [-8.7035e+01,  4.5951e+00, -4.8541e+01, -2.4205e+00,  1.6555e+00,
          3.3116e+00, -1.1850e+00,  3.9256e-04,  7.4916e-01, -7.9892e+01]])), ('1.model.hidden_layer_2.bias', tensor([-6.1122, -7.9929, -6.3331, -4.7742, -5.0293, -7.2396, -6.8996, -4.5070,
        -3.3346, -2.3465])), ('1.model.output_layer_3.weight', tensor([[  4.9421,   0.4776,   5.4848,  -9.4060,   7.3509,   7.5357,   6.4729,
           4.4710,  -0.8656,  31.1138],
        [ -4.9421,  -0.5178,  -5.4848,   9.4228,  -7.3509,  -7.5358,  -6.4819,
          -4.4711,   0.7832, -31.1109]]))])
loaded xi:  214.20367
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1515.643443794422
W_T_median: 1153.9174919778538
W_T_pctile_5: -111.46571043684067
W_T_CVAR_5_pct: -277.22753928042437
-----------------------------------------------
new min fval from sgd:  -2739.921472613856
min fval:  -2739.921472613856
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-1.2734e+00,  4.8709e-01],
        [-2.0934e+00,  2.5409e+00],
        [-2.2876e+01,  1.6497e-02],
        [ 1.1707e+01, -1.9355e+01],
        [ 2.7174e+01, -2.8451e+00],
        [ 5.2974e-01, -2.0164e+01],
        [-1.4523e+01, -1.4006e+01],
        [ 2.5252e+01, -6.6165e+00],
        [ 2.1479e+01, -1.2247e+01],
        [ 1.4506e+00,  1.0643e+01]])), ('0.model.hidden_layer_1.bias', tensor([ -3.8504,  -4.9451,  19.2859, -14.5092, -18.2183, -14.7456, -12.5980,
        -15.0216, -12.3807,  -2.9477])), ('0.model.hidden_layer_2.weight', tensor([[ 7.7663e-03,  5.1054e-02, -1.6077e+00, -3.6082e-01, -6.8995e-02,
         -2.2112e-01, -4.0013e-02, -1.5366e-01, -4.8100e-01, -2.2317e-01],
        [ 7.7667e-03,  5.1052e-02, -1.6077e+00, -3.6081e-01, -6.8996e-02,
         -2.2111e-01, -4.0013e-02, -1.5366e-01, -4.8100e-01, -2.2316e-01],
        [ 7.7593e-03,  5.1074e-02, -1.6075e+00, -3.6085e-01, -6.8988e-02,
         -2.2113e-01, -4.0012e-02, -1.5365e-01, -4.8096e-01, -2.2318e-01],
        [ 7.6082e-03,  5.1231e-02, -1.5976e+00, -3.5942e-01, -6.9857e-02,
         -2.2033e-01, -3.9888e-02, -1.5423e-01, -4.7853e-01, -2.1877e-01],
        [ 2.9546e-01, -7.0587e-01, -1.4249e+01,  1.5561e+01,  2.1216e+01,
          1.5625e+01,  9.1560e+00,  1.3380e+01,  1.4731e+01, -5.4137e-01],
        [ 7.5223e-03,  5.1595e-02, -1.5973e+00, -3.6067e-01, -6.9622e-02,
         -2.2059e-01, -3.9908e-02, -1.5389e-01, -4.7752e-01, -2.2053e-01],
        [ 7.5219e-03,  5.1596e-02, -1.5972e+00, -3.6067e-01, -6.9623e-02,
         -2.2059e-01, -3.9907e-02, -1.5389e-01, -4.7752e-01, -2.2053e-01],
        [ 7.6052e-03,  5.1337e-02, -1.5997e+00, -3.6001e-01, -6.9697e-02,
         -2.2043e-01, -3.9915e-02, -1.5401e-01, -4.7806e-01, -2.2001e-01],
        [ 7.7425e-03,  5.1127e-02, -1.6069e+00, -3.6098e-01, -6.8970e-02,
         -2.2117e-01, -4.0010e-02, -1.5363e-01, -4.8091e-01, -2.2327e-01],
        [ 2.0968e-01,  5.7453e-01,  1.2352e+01, -1.5429e+01, -1.5342e+01,
         -1.3502e+01, -1.4275e+00, -1.1646e+01, -1.2296e+01,  1.0666e+00]])), ('0.model.hidden_layer_2.bias', tensor([-1.6527, -1.6527, -1.6529, -1.6660, -4.2043, -1.6636, -1.6636, -1.6626,
        -1.6532,  0.4355])), ('0.model.output_layer_3.weight', tensor([[ -0.0579,  -0.0579,  -0.0579,  -0.0577, -19.8162,  -0.0575,  -0.0575,
          -0.0577,  -0.0579,  13.0785]])), ('1.model.hidden_layer_1.weight', tensor([[ 16.5454,  10.1505],
        [-27.7295,  -3.4493],
        [ 12.0052,  -2.8082],
        [ -7.3754,   2.4268],
        [-15.6389,   6.7443],
        [-22.1360,   2.1224],
        [ -5.7880,  13.9104],
        [ -7.6202,   5.0118],
        [-13.9450,   4.8303],
        [ 10.1323,  23.6041]])), ('1.model.hidden_layer_1.bias', tensor([  5.3889,  16.1790, -13.2207,  -3.5134,   1.1029,  24.0271,  10.9445,
         -8.9956,   0.0942,  18.2169])), ('1.model.hidden_layer_2.weight', tensor([[-2.5210e+00,  2.8651e+00, -8.2776e+00, -2.5787e+00, -2.1681e-02,
         -2.7665e+00,  1.5492e+00, -2.4621e+00, -2.3149e+00,  2.5708e+00],
        [ 9.2009e+00, -9.2805e-01,  1.4710e-01,  1.1929e+00,  1.9313e+01,
         -2.2385e+00,  2.0543e+01,  1.7633e-02,  8.2694e+00,  2.2845e+00],
        [-1.7957e+00,  5.8038e-01, -1.7285e+01, -1.5858e+00, -2.2805e+00,
         -2.5971e+00,  1.0729e+00, -8.8275e-01, -2.9741e+00,  2.8343e+00],
        [-1.7300e+01,  1.2026e+01, -7.3663e+00,  8.1434e-01,  3.3758e+00,
          5.4412e+00,  2.3406e+00, -4.6183e-02,  1.2460e+00, -3.0484e+01],
        [-2.7516e+00,  5.2446e-02, -2.1913e+01, -1.2601e+00, -1.3140e+00,
         -2.0667e+00,  6.3349e-01, -4.2871e+00, -3.1028e+00,  5.1743e+00],
        [-3.1050e+00,  3.8474e-02, -1.8430e+01, -1.1562e+00, -1.0966e+00,
         -1.7040e+00,  6.8963e-01, -1.5615e+00, -4.1952e+00,  4.5244e+00],
        [-2.9802e+00,  2.0621e+00, -5.9482e+00, -8.5396e-01, -1.3693e+00,
         -5.0158e+00,  7.8727e-01, -9.7172e-01, -1.5423e+00,  3.8791e+00],
        [-5.2476e-01, -1.5870e+01,  8.7069e-01, -4.4496e-01, -5.1603e-01,
          1.6685e+00, -3.4716e-01, -5.3196e-01, -5.1674e-01, -9.1086e+00],
        [-8.3235e+00,  6.3334e+00, -8.6171e-01, -7.5219e-01, -2.3934e+00,
          4.6890e+00, -7.6771e+00, -1.5385e-02, -1.9552e+00, -8.6234e+00],
        [-8.7035e+01,  4.5951e+00, -4.8541e+01, -2.4205e+00,  1.6555e+00,
          3.3116e+00, -1.1850e+00,  3.9256e-04,  7.4916e-01, -7.9892e+01]])), ('1.model.hidden_layer_2.bias', tensor([-6.1122, -7.9929, -6.3331, -4.7742, -5.0293, -7.2396, -6.8996, -4.5070,
        -3.3346, -2.3465])), ('1.model.output_layer_3.weight', tensor([[  4.9421,   0.4776,   5.4848,  -9.4060,   7.3509,   7.5357,   6.4729,
           4.4710,  -0.8656,  31.1138],
        [ -4.9421,  -0.5178,  -5.4848,   9.4228,  -7.3509,  -7.5358,  -6.4819,
          -4.4711,   0.7832, -31.1109]]))])
xi:  [214.20367]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 705.4152915045314
W_T_median: 496.0458844646436
W_T_pctile_5: 206.01305571909117
W_T_CVAR_5_pct: 26.885092594216633
Average q (qsum/M+1):  45.652324061239916
Optimal xi:  [214.20367]
Observed VAR:  496.0458844646436
Expected(across Rb) median(across samples) p_equity:  0.2158099303642909
obj fun:  tensor(-2739.9215, dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
bond graph is mislabeled!
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 50.0
-----------------------------------------------
Starting at: 
09-01-23_13:36

 Random seed:  2  

Key parameters-------
paths: 256000
iterations: 50000
batchsize: 1000


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = B10_and_VWD
timeseries_basket['basket_desc'] = CRSP data: B10 and VWD
timeseries_basket['basket_columns'] = 
['B10_real_ret', 'VWD_real_ret']
############# End: defined asset  basket #################
-----------------------------------------------
No need to read market data.
-----------------------------------------------
3.3333333333333335% of MC simulations done.
6.666666666666667% of MC simulations done.
10.0% of MC simulations done.
13.333333333333334% of MC simulations done.
16.666666666666664% of MC simulations done.
20.0% of MC simulations done.
23.333333333333332% of MC simulations done.
26.666666666666668% of MC simulations done.
30.0% of MC simulations done.
33.33333333333333% of MC simulations done.
36.666666666666664% of MC simulations done.
40.0% of MC simulations done.
43.333333333333336% of MC simulations done.
46.666666666666664% of MC simulations done.
50.0% of MC simulations done.
53.333333333333336% of MC simulations done.
56.666666666666664% of MC simulations done.
60.0% of MC simulations done.
63.33333333333333% of MC simulations done.
66.66666666666666% of MC simulations done.
70.0% of MC simulations done.
73.33333333333333% of MC simulations done.
76.66666666666667% of MC simulations done.
80.0% of MC simulations done.
83.33333333333334% of MC simulations done.
86.66666666666667% of MC simulations done.
90.0% of MC simulations done.
93.33333333333333% of MC simulations done.
96.66666666666667% of MC simulations done.
100.0% of MC simulations done.
Withdrawal NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       1       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      10  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      10  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       1  logistic_sigmoid   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 10)    False        None  
2     (10, 10)    False        None  
3      (10, 1)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
Allocation NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       2       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      10  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      10  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       2           softmax   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 10)    False        None  
2     (10, 10)    False        None  
3      (10, 2)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1  logistic_sigmoid   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)     False        None  
0     (10, 10)     False        None  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)     False        None  
0     (10, 10)     False        None  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1576.8182150775267
W_T_median: 1136.7449346433505
W_T_pctile_5: -127.64084552288806
W_T_CVAR_5_pct: -295.72244238283764
-----------------------------------------------
2.0% of gradient descent iterations done. Method = Adam
new min fval:  -1736.5780194369927
Current xi:  [-176.32094]
objective value function right now is: -1736.5780194369927
4.0% of gradient descent iterations done. Method = Adam
new min fval:  -1763.8764575078205
Current xi:  [-345.57196]
objective value function right now is: -1763.8764575078205
6.0% of gradient descent iterations done. Method = Adam
new min fval:  -1783.290113623469
Current xi:  [-497.27606]
objective value function right now is: -1783.290113623469
8.0% of gradient descent iterations done. Method = Adam
new min fval:  -1793.3658756482725
Current xi:  [-627.69073]
objective value function right now is: -1793.3658756482725
10.0% of gradient descent iterations done. Method = Adam
new min fval:  -1799.4426217420446
Current xi:  [-740.44794]
objective value function right now is: -1799.4426217420446
12.0% of gradient descent iterations done. Method = Adam
new min fval:  -1801.682802420272
Current xi:  [-828.9831]
objective value function right now is: -1801.682802420272
14.000000000000002% of gradient descent iterations done. Method = Adam
new min fval:  -1802.3707531797083
Current xi:  [-887.8936]
objective value function right now is: -1802.3707531797083
16.0% of gradient descent iterations done. Method = Adam
new min fval:  -1802.523940016992
Current xi:  [-917.9925]
objective value function right now is: -1802.523940016992
18.0% of gradient descent iterations done. Method = Adam
Current xi:  [-928.0549]
objective value function right now is: -1802.5107135572696
20.0% of gradient descent iterations done. Method = Adam
new min fval:  -1802.5673302405871
Current xi:  [-928.4768]
objective value function right now is: -1802.5673302405871
22.0% of gradient descent iterations done. Method = Adam
new min fval:  -1802.6497691728823
Current xi:  [-928.3459]
objective value function right now is: -1802.6497691728823
24.0% of gradient descent iterations done. Method = Adam
Current xi:  [-926.35297]
objective value function right now is: -1802.4487732626103
26.0% of gradient descent iterations done. Method = Adam
Current xi:  [-925.10156]
objective value function right now is: -1802.5469554346168
28.000000000000004% of gradient descent iterations done. Method = Adam
Current xi:  [-926.2615]
objective value function right now is: -1802.3189992405125
30.0% of gradient descent iterations done. Method = Adam
Current xi:  [-925.8059]
objective value function right now is: -1802.534725497639
32.0% of gradient descent iterations done. Method = Adam
Current xi:  [-925.0321]
objective value function right now is: -1802.1351000210977
34.0% of gradient descent iterations done. Method = Adam
Current xi:  [-929.1656]
objective value function right now is: -1802.3648749258114
36.0% of gradient descent iterations done. Method = Adam
Current xi:  [-927.64044]
objective value function right now is: -1802.398521499838
38.0% of gradient descent iterations done. Method = Adam
Current xi:  [-925.9829]
objective value function right now is: -1802.129543124247
40.0% of gradient descent iterations done. Method = Adam
Current xi:  [-924.7185]
objective value function right now is: -1802.4517525610445
42.0% of gradient descent iterations done. Method = Adam
Current xi:  [-926.6633]
objective value function right now is: -1802.4691888946088
44.0% of gradient descent iterations done. Method = Adam
Current xi:  [-923.8536]
objective value function right now is: -1802.5984541421897
46.0% of gradient descent iterations done. Method = Adam
Current xi:  [-928.2495]
objective value function right now is: -1802.3120390938843
48.0% of gradient descent iterations done. Method = Adam
Current xi:  [-928.5976]
objective value function right now is: -1802.115619871221
50.0% of gradient descent iterations done. Method = Adam
Current xi:  [-931.6449]
objective value function right now is: -1801.3932223125023
52.0% of gradient descent iterations done. Method = Adam
Current xi:  [-929.81775]
objective value function right now is: -1802.6002197278244
54.0% of gradient descent iterations done. Method = Adam
Current xi:  [-926.8532]
objective value function right now is: -1802.4177582053594
56.00000000000001% of gradient descent iterations done. Method = Adam
Current xi:  [-921.5506]
objective value function right now is: -1802.5933279356157
57.99999999999999% of gradient descent iterations done. Method = Adam
Current xi:  [-924.6511]
objective value function right now is: -1802.5210712576074
60.0% of gradient descent iterations done. Method = Adam
Current xi:  [-926.13916]
objective value function right now is: -1802.569674479408
62.0% of gradient descent iterations done. Method = Adam
Current xi:  [-928.58093]
objective value function right now is: -1801.6077080754485
64.0% of gradient descent iterations done. Method = Adam
Current xi:  [-926.20044]
objective value function right now is: -1802.1120308044315
66.0% of gradient descent iterations done. Method = Adam
new min fval:  -1802.653873065162
Current xi:  [-922.16925]
objective value function right now is: -1802.653873065162
68.0% of gradient descent iterations done. Method = Adam
Current xi:  [-927.3972]
objective value function right now is: -1802.6125998042212
70.0% of gradient descent iterations done. Method = Adam
Current xi:  [-925.5878]
objective value function right now is: -1802.631947995021
72.0% of gradient descent iterations done. Method = Adam
Current xi:  [-921.42114]
objective value function right now is: -1801.9745553099956
74.0% of gradient descent iterations done. Method = Adam
Current xi:  [-925.76324]
objective value function right now is: -1802.556022564788
76.0% of gradient descent iterations done. Method = Adam
Current xi:  [-919.5499]
objective value function right now is: -1802.4216400799583
78.0% of gradient descent iterations done. Method = Adam
Current xi:  [-924.7122]
objective value function right now is: -1802.3333323951797
80.0% of gradient descent iterations done. Method = Adam
Current xi:  [-924.7446]
objective value function right now is: -1802.510378556469
82.0% of gradient descent iterations done. Method = Adam
new min fval:  -1802.7471086735989
Current xi:  [-924.89374]
objective value function right now is: -1802.7471086735989
84.0% of gradient descent iterations done. Method = Adam
Current xi:  [-927.40424]
objective value function right now is: -1802.633757580285
86.0% of gradient descent iterations done. Method = Adam
Current xi:  [-927.0126]
objective value function right now is: -1802.6237834053613
88.0% of gradient descent iterations done. Method = Adam
new min fval:  -1802.7585658230123
Current xi:  [-924.83405]
objective value function right now is: -1802.7585658230123
90.0% of gradient descent iterations done. Method = Adam
Current xi:  [-924.6589]
objective value function right now is: -1802.6317400422045
new min fval from sgd:  -1802.7599233631697
new min fval from sgd:  -1802.7709189791678
new min fval from sgd:  -1802.7843968956197
new min fval from sgd:  -1802.7902038734794
new min fval from sgd:  -1802.790475749414
new min fval from sgd:  -1802.8072476080993
92.0% of gradient descent iterations done. Method = Adam
Current xi:  [-924.97675]
objective value function right now is: -1802.5811551589677
94.0% of gradient descent iterations done. Method = Adam
Current xi:  [-924.9668]
objective value function right now is: -1802.5956957880494
96.0% of gradient descent iterations done. Method = Adam
Current xi:  [-922.5438]
objective value function right now is: -1802.6395539618636
98.0% of gradient descent iterations done. Method = Adam
Current xi:  [-926.16785]
objective value function right now is: -1802.4903173832777
100.0% of gradient descent iterations done. Method = Adam
Current xi:  [-928.04755]
objective value function right now is: -1802.5668708763453
min fval:  -1802.8072476080993
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ 0.7586,  3.7366],
        [ 0.7596,  3.7362],
        [ 0.7612,  3.7356],
        [ 0.7591,  3.7367],
        [ 0.7650,  3.7345],
        [ 0.7596,  3.7363],
        [ 0.7581,  3.7358],
        [29.4998, 10.7042],
        [ 0.7592,  3.7344],
        [-0.2226, -3.5445]], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-80.1310, -80.7868, -80.1583, -80.4451, -78.8607, -80.8244, -81.2083,
          -7.8698, -80.0335,   3.2853],
        [-80.5283, -81.2267, -80.6765, -80.7216, -79.4855, -80.9542, -81.2141,
          -8.4267, -80.5044,   3.5872],
        [ 92.3618,  92.5993,  91.9918,  92.7640,  88.9857,  92.4605,  91.4958,
          -2.4439,  88.7451,  -5.7133],
        [-79.6129, -80.4388, -80.1101, -80.2795, -78.7373, -79.9940, -80.8060,
          -7.3881, -80.0192,   2.9321],
        [ 83.3755,  84.4409,  84.2946,  84.0646,  83.6504,  84.2744,  83.5738,
         -55.2444,  81.9520,  -1.4233],
        [ 15.5331,  15.2571,  14.3562,  15.8903,  11.5071,  15.1892,  14.1569,
          16.4726,  11.5083, -14.1826],
        [ 40.6915,  42.2139,  42.3519,  41.7145,  41.9795,  42.2906,  41.5869,
          -3.8621,  39.8774, -17.4757],
        [ 92.4509,  93.0250,  92.6848,  93.1843,  89.9789,  92.4695,  91.6522,
          -4.0035,  89.7245,  -2.5966],
        [ 90.8849,  91.7266,  91.2232,  91.4861,  89.4714,  91.6001,  90.8074,
          -4.1117,  88.7728,  -2.5463],
        [ 49.8542,  51.2723,  51.2998,  50.6385,  51.0997,  51.0299,  50.3197,
         -22.4156,  49.1044, -15.1621]], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-17.8139, -18.8816,  23.1872, -16.6467,  30.5795,  17.8066,   5.6238,
          25.0593,  24.8470,   9.1452]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[-36.4261,  -8.8709],
        [ -4.4395,   1.5660],
        [ -4.1673,   2.2051],
        [ -4.1342,   2.2605],
        [ 19.7013,  10.4196],
        [ -5.7286,   0.6017],
        [ -4.0450,   2.8372],
        [ -4.0571,   2.8357],
        [ -4.0808,   2.8075],
        [ 28.9399,  11.2572]], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-168.3537,  -15.8823,  -55.8441,  -56.1250,   -9.3103,   -3.8327,
         -105.3218, -106.4596, -105.8322,   -3.4442],
        [ -20.2202,   22.3332,   20.0064,   16.8988,  -77.8940,   23.1850,
            7.6952,    7.4786,    7.4222,  -37.5630],
        [  -5.2607,   63.9865,   43.5133,   35.9357,  -41.2274,   78.9224,
            9.0900,    8.9827,   10.5917,  -60.1714],
        [   0.9522,  107.0918,  128.5542,  109.5008,    2.8767,   87.2735,
           77.5414,   78.0699,   79.6302,   -3.3211],
        [ -66.6118,  -69.6520, -107.4783, -106.8646, -120.8102,  -48.1912,
         -145.1876, -144.0199, -142.0026,  -10.3604],
        [ -57.1929,  -56.6422,  -78.5372,  -81.9130, -167.1444,  -34.1665,
          -94.0465,  -92.2714,  -85.5648,  -10.6942],
        [ -56.7587,  -54.8539,  -73.4201,  -75.9949, -169.6657,  -33.3419,
          -97.2577,  -95.8727,  -93.4699,  -10.7266],
        [ -90.1972,  -22.2354,  -31.3363,  -43.9722,    2.8962,  -11.4444,
          -81.6455,  -82.7486,  -85.5044,  -14.1122],
        [ -63.7183,  -66.9907,  -85.8125,  -97.5694, -143.3052,  -44.4831,
         -129.1811, -129.2847, -130.2891,  -10.6975],
        [ -58.1025,  -58.1472,  -83.0238,  -84.2413, -163.6506,  -36.2292,
          -95.9337,  -94.4338,  -86.3811,  -10.7139]], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-12.1728, -20.0402,   5.3906,   0.6396, -20.0611, -21.4003, -20.7511,
          20.9497, -20.5362, -21.7644],
        [ 11.9353,  19.9829,  -5.6570,  -0.6880,  19.8358,  21.6320,  20.8675,
         -21.1614,  20.0415,  21.8889]], device='cuda:0'))])
xi:  [-922.8454]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: -267.2534067983025
W_T_median: -411.6283368142728
W_T_pctile_5: -917.9913331338174
W_T_CVAR_5_pct: -1031.8789256379628
Average q (qsum/M+1):  59.81952888734879
Optimal xi:  [-922.8454]
Expected(across Rb) median(across samples) p_equity:  0.1447528209133528
obj fun:  tensor(-1802.8072, device='cuda:0', dtype=torch.float64,
       grad_fn=<MeanBackward0>)
-----------------------------------------------
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 0.05
-----------------------------------------------

Starting at: 
13-11-22_22:13

 Random seed:  1  



############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = B10_and_VWD
timeseries_basket['basket_desc'] = CRSP data: B10 and VWD
timeseries_basket['basket_columns'] = 
['B10_real_ret', 'VWD_real_ret']
############# End: defined asset  basket #################
-----------------------------------------------
No need to read market data.
-----------------------------------------------
3.3333333333333335% of MC simulations done.
6.666666666666667% of MC simulations done.
10.0% of MC simulations done.
13.333333333333334% of MC simulations done.
16.666666666666664% of MC simulations done.
20.0% of MC simulations done.
23.333333333333332% of MC simulations done.
26.666666666666668% of MC simulations done.
30.0% of MC simulations done.
33.33333333333333% of MC simulations done.
36.666666666666664% of MC simulations done.
40.0% of MC simulations done.
43.333333333333336% of MC simulations done.
46.666666666666664% of MC simulations done.
50.0% of MC simulations done.
53.333333333333336% of MC simulations done.
56.666666666666664% of MC simulations done.
60.0% of MC simulations done.
63.33333333333333% of MC simulations done.
66.66666666666666% of MC simulations done.
70.0% of MC simulations done.
73.33333333333333% of MC simulations done.
76.66666666666667% of MC simulations done.
80.0% of MC simulations done.
83.33333333333334% of MC simulations done.
86.66666666666667% of MC simulations done.
90.0% of MC simulations done.
93.33333333333333% of MC simulations done.
96.66666666666667% of MC simulations done.
100.0% of MC simulations done.
Withdrawal NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       1       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer       8  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer       8  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       1  logistic_sigmoid   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1       (2, 8)    False        None  
2       (8, 8)    False        None  
3       (8, 1)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
Allocation NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       2       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer       8  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer       8  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       2           softmax   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1       (2, 8)    False        None  
2       (8, 8)    False        None  
3       (8, 2)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer        8  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer        8  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1  logistic_sigmoid   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0       (2, 8)     False        None  
0       (8, 8)     False        None  
0       (8, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer        8  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer        8  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0       (2, 8)     False        None  
0       (8, 8)     False        None  
0       (8, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-3.0424,  0.4559],
        [ 3.1735, -0.7966],
        [-3.0266,  0.4285],
        [ 2.9143, -0.6044],
        [-8.2348,  3.0725],
        [ 5.4397,  2.3963],
        [-3.1803,  0.6262],
        [ 2.8274, -0.5226]], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ 2.3690e+00, -1.0985e+02,  2.7245e+00, -1.8588e+02,  2.0587e+00,
         -7.1569e+00,  2.4329e+00, -1.3750e+02],
        [ 2.5728e+00, -1.1045e+02,  2.4761e+00, -1.8825e+02,  2.4337e+00,
         -7.3911e+00,  2.3613e+00, -1.3793e+02],
        [ 1.2279e+01, -2.9247e-01,  1.2442e+01, -2.7902e+00,  8.7562e-01,
         -3.7148e+01,  1.1145e+01, -3.4308e+00],
        [ 1.9629e+00, -5.4346e+00,  1.6658e+00, -4.0532e+00,  2.0483e+01,
          2.1728e+01,  3.2588e+00, -3.5834e+00],
        [ 1.3168e+01,  1.7390e+00,  1.3573e+01, -7.7237e-01, -1.6736e+00,
         -2.9574e+01,  1.1432e+01, -1.4827e+00],
        [ 9.6411e+00,  3.0650e+00,  9.5031e+00, -2.0153e-01, -4.4115e+00,
         -3.0804e+01,  8.9136e+00, -1.7851e+00],
        [-1.4267e+01,  1.0517e+01, -1.3648e+01,  8.3628e+00, -1.1393e+01,
         -2.0587e+01, -1.4648e+01,  7.9548e+00],
        [ 3.2457e+00, -1.2841e+02,  3.2229e+00, -2.1039e+02,  3.3577e+00,
         -1.0661e+01,  3.5872e+00, -1.5608e+02]], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-19.6342, -19.6637, -13.6856,  54.5337,  -9.6719, -11.9431, -70.8695,
         -45.4216]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -5.4447,   1.3553],
        [-55.5569,  -7.2398],
        [-10.6279,  -0.2126],
        [ -5.4324,   1.3569],
        [  8.6033,   5.0094],
        [ -7.2244,   0.8057],
        [-16.1615,  -5.9725],
        [ -5.4299,   1.3537]], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ -48.9636,  -48.6917,  -70.8634,  -48.3495,  -30.6394,  -57.8604,
          -14.4989,  -50.5502],
        [ -22.6755,    5.0249,  -63.5068,  -21.4974,   -4.4264,  -30.7957,
           14.0667,  -22.1691],
        [ -21.9551,  -22.5057,  -17.5511,  -20.6647,  -51.0551,   -3.5063,
           16.3050,  -21.4417],
        [ -81.8160,  -67.6238, -119.6489,  -72.8144,   -8.3635,  -98.3456,
            6.4506,  -74.2883],
        [ -87.1039,  -77.1212, -137.2119,  -87.0939,   -4.5283, -114.8878,
            7.0812,  -89.2533],
        [  30.6382,    8.6685,    6.7909,   47.9606,   37.6954,    2.3124,
           -2.5510,   50.0883],
        [ -42.1909,  -45.4509,  -60.2038,  -40.8406,  -32.5923,  -51.7829,
          -17.2673,  -42.8538],
        [ -39.2678,  -33.5461,  -19.9055,  -65.9963,  -29.2657,  -15.2423,
           -8.8810,  -66.2178]], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  1.2665, -11.3477, -14.7141,   6.6161,   9.7641,   0.9250,   0.1294,
           2.7350],
        [ -0.2979,  11.8921,  14.9669,  -5.7136, -10.0588,   0.1116,  -0.4168,
          -2.3564]], device='cuda:0'))])
loaded xi:  14.2
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.4 0.6]
W_T_mean: 2868.901581870188
W_T_median: 1766.0030338959873
W_T_pctile_5: -227.11540476467852
W_T_CVAR_5_pct: -434.2600137480577
-----------------------------------------------
2.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1560.7263166648997
4.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1559.3147852385607
6.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1538.1784169791965
8.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1563.437873809969
10.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1564.16360354678
12.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1565.561543372645
14.000000000000002% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1557.2474538938989
16.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1561.9610973453039
18.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1556.7683344843729
20.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1565.7485777096988
22.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1559.4748624397228
24.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1564.2887305619483
26.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1565.736283474314
28.000000000000004% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1565.3837946537355
30.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1566.2473190423932
32.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1566.919737368271
34.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1561.6603560330916
36.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1564.933341509733
38.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1566.081361874038
40.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1558.1571795795537
42.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1564.4645718336524
44.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1550.6194660650656
46.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1564.8892303923067
48.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1565.2560284896847
50.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1561.2026951229907
52.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1564.879418557464
54.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1559.502501970472
56.00000000000001% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1562.935781554076
57.99999999999999% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1566.4968894266729
60.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1565.0897802018992
62.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1547.7949928279977
64.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1560.8305239675065
66.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1559.3580155585282
68.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1561.9051626214884
70.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1558.9564694417488
72.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1562.5797126108275
74.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1564.2136818934457
76.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1567.0590060589393
78.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1564.7417186299892
80.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1549.4161100605606
82.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1565.2383950773306
84.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1565.1067816000934
86.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1562.14013946057
88.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1566.4192765276316
new min fval:  -1565.1647810441489
90.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1563.752242628714
new min fval:  -1566.9939166337956
new min fval:  -1567.827311819315
new min fval:  -1568.3028764609467
new min fval:  -1568.3490740656205
new min fval:  -1569.095487113445
new min fval:  -1569.6413615241981
new min fval:  -1569.9161210716
new min fval:  -1570.002504167206
new min fval:  -1570.0184845522185
new min fval:  -1570.0670085691506
new min fval:  -1570.1618110859642
92.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1566.8417163027943
94.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1566.577622753066
96.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1567.8558817288333
98.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1566.5558198338115
new min fval:  -1570.1627232345231
new min fval:  -1570.1637404485812
new min fval:  -1570.1638253905276
new min fval:  -1570.1645434768527
new min fval:  -1570.1650008099787
new min fval:  -1570.1650927093938
new min fval:  -1570.1657701168251
100.0% of gradient descent iterations done. Method = A
Current xi:  [14.2]
objective value function right now is: -1565.7093262659291
min fval:  -1570.164052515183
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 765.4331935973717
W_T_median: 460.83472804676796
W_T_pctile_5: 183.95896562919913
W_T_CVAR_5_pct: 18.615964627539185
Average q (qsum/M+1):  50.119317823840724
(xi held constant!)
Optimal xi:  [14.2]
Expected(across Rb) median(across samples) p_equity:  0.31700442532698314
-----------------------------------------------
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 1.0
-----------------------------------------------

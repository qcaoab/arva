Starting at: 
04-02-23_14:36

 Random seed:  2  

Key parameters-------
paths: 2560000
iterations: 10000
batchsize: 1000
remove neg:  False


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = B10_and_VWD
timeseries_basket['basket_desc'] = CRSP data: B10 and VWD
timeseries_basket['basket_columns'] = 
['B10_real_ret', 'VWD_real_ret']
############# End: defined asset  basket #################
-----------------------------------------------
No need to read market data.
-----------------------------------------------
3.3333333333333335% of MC simulations done.
6.666666666666667% of MC simulations done.
10.0% of MC simulations done.
13.333333333333334% of MC simulations done.
16.666666666666664% of MC simulations done.
20.0% of MC simulations done.
23.333333333333332% of MC simulations done.
26.666666666666668% of MC simulations done.
30.0% of MC simulations done.
33.33333333333333% of MC simulations done.
36.666666666666664% of MC simulations done.
40.0% of MC simulations done.
43.333333333333336% of MC simulations done.
46.666666666666664% of MC simulations done.
50.0% of MC simulations done.
53.333333333333336% of MC simulations done.
56.666666666666664% of MC simulations done.
60.0% of MC simulations done.
63.33333333333333% of MC simulations done.
66.66666666666666% of MC simulations done.
70.0% of MC simulations done.
73.33333333333333% of MC simulations done.
76.66666666666667% of MC simulations done.
80.0% of MC simulations done.
83.33333333333334% of MC simulations done.
86.66666666666667% of MC simulations done.
90.0% of MC simulations done.
93.33333333333333% of MC simulations done.
96.66666666666667% of MC simulations done.
100.0% of MC simulations done.
Withdrawal NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       1       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      10  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      10  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       1              none   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 10)     True          10  
2     (10, 10)     True          10  
3      (10, 1)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
Allocation NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       2       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      10  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      10  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       2           softmax   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 10)     True          10  
2     (10, 10)     True          10  
3      (10, 2)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
{'methods': ['Adam'], 'output_progress': False, 'tol': 1e-06, 'itbound_scipy_algorithms': 1000, 'check_exit_criteria': False, 'nit_running_min': 1000, 'itbound_SGD_algorithms': 10000, 'nit_IterateAveragingStart': 9000, 'batchsize': 1000, 'SGD_learningrate': 50.0, 'Adagrad_epsilon': 1e-08, 'Adagrad_eta': 1.0, 'Adadelta_ewma': 0.9, 'Adadelta_epsilon': 1e-08, 'RMSprop_ewma': 0.8, 'RMSprop_epsilon': 1e-08, 'RMSprop_eta': 0.1, 'Adam_ewma_1': 0.9, 'Adam_ewma_2': 0.998, 'Adam_eta': 0.05, 'Adam_epsilon': 1e-08, 'Adam_weight_decay': 0.0001, 'running_min_from_avg': False, 'running_min_from_sgd': True, 'lr_schedule': True}
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[  9.1256,   2.0675],
        [-25.6476, -10.3124],
        [ 10.5577,  -4.8650],
        [  9.7799,   1.7489],
        [ -9.3351,   6.7992],
        [ -1.4185,   1.3648],
        [ -1.0031,   0.9739],
        [  2.8028,   0.1038],
        [ -3.2369, -10.5050],
        [ -6.4701,   6.1016]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-8.7823, -9.2623, -8.4550, -9.2644,  2.8863, -3.0038, -2.8216, -6.6351,
        -8.7943,  6.5613], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-2.7209e-02, -1.0609e-01, -1.5529e-01, -2.7723e-02, -8.5100e-03,
         -4.4857e-04, -3.1922e-03,  8.9604e-03, -2.5212e-01, -6.9762e-01],
        [ 5.8442e+00,  8.3581e+00,  2.1676e+00,  7.2629e+00, -3.3982e+00,
          2.6390e-01,  4.6658e-01,  4.8270e-02,  1.0595e+01, -9.1926e+00],
        [-4.8876e-02, -4.1450e+00,  7.0631e-02, -1.5017e-01,  3.0764e+00,
         -2.5627e-01, -1.6657e-01,  2.7019e-02, -1.0750e+01,  7.9669e+00],
        [-1.9891e-01, -1.7387e+01, -1.0517e-01, -2.1109e-01, -4.4192e+00,
          5.0329e-02,  2.4688e-01, -4.2699e-02,  1.4364e+01, -6.7653e+00],
        [-2.7209e-02, -1.0609e-01, -1.5529e-01, -2.7723e-02, -8.5100e-03,
         -4.4857e-04, -3.1922e-03,  8.9604e-03, -2.5212e-01, -6.9762e-01],
        [-2.7209e-02, -1.0609e-01, -1.5529e-01, -2.7723e-02, -8.5100e-03,
         -4.4857e-04, -3.1922e-03,  8.9604e-03, -2.5212e-01, -6.9762e-01],
        [-2.7209e-02, -1.0609e-01, -1.5529e-01, -2.7723e-02, -8.5100e-03,
         -4.4857e-04, -3.1922e-03,  8.9604e-03, -2.5212e-01, -6.9762e-01],
        [ 7.2019e+00,  1.4820e+01,  4.5682e+00,  8.8095e+00, -4.6793e+00,
         -2.3437e-01, -3.0656e-02,  6.2998e-01,  1.1389e+01, -1.1449e+01],
        [-5.7307e+00, -1.0086e+01, -2.6280e+00, -6.9939e+00,  4.4830e+00,
          5.1845e-01,  3.8194e-01,  2.8656e-01, -1.3472e+01,  7.6766e+00],
        [-2.7209e-02, -1.0609e-01, -1.5529e-01, -2.7723e-02, -8.5100e-03,
         -4.4858e-04, -3.1922e-03,  8.9604e-03, -2.5212e-01, -6.9762e-01]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.1336, -1.5095,  0.8452,  0.3186, -1.1336, -1.1336, -1.1336, -1.3478,
         0.8389, -1.1336], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 8.2084e-03, -6.7145e+00,  5.8544e+00, -1.1191e+01,  8.2084e-03,
          8.2084e-03,  8.2084e-03, -1.3866e+01,  1.3214e+01,  8.2084e-03]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 1.0683e+01,  8.9636e+00],
        [-1.4098e-01,  5.1529e+00],
        [ 1.1842e+01, -2.7001e-01],
        [ 4.2815e+00,  1.4223e+01],
        [ 1.3718e+01,  1.2069e-03],
        [-1.2104e+01, -4.2176e+00],
        [-1.2024e+01, -2.4216e+00],
        [ 1.3696e+01,  4.3836e+00],
        [-1.5418e-01,  4.5785e+00],
        [-8.3502e-01,  3.6976e+00]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([  6.7872,   2.4272, -11.1241,  11.5582, -10.7574,  -1.5473,   1.3327,
         -5.1294,   1.8218,  12.1015], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ -1.2676,  -0.0381,  -1.2467, -11.5499,  -2.2451,  -0.2622,   2.4556,
          -2.2411,  -0.0713,   2.0355],
        [-21.5950,  -1.4516,  -5.9541, -17.8067,  -8.2364,   6.9359,   6.9196,
          -0.3412,  -1.2180,   0.1335],
        [ -1.2813,  -0.0549,  -1.2452, -11.5084,  -2.2427,  -0.2961,   2.4123,
          -2.2250,  -0.0882,   2.0144],
        [ -1.2853,  -0.0599,  -1.2447, -11.4962,  -2.2418,  -0.3062,   2.3995,
          -2.2198,  -0.0931,   2.0081],
        [  3.0456,  -0.9004,   0.9218,  -0.8556,   1.6029,   1.1090,   0.6004,
          -1.1328,  -0.5385,   5.0665],
        [ -1.2803,  -0.0536,  -1.2453, -11.5115,  -2.2429,  -0.2936,   2.4155,
          -2.2264,  -0.0869,   2.0160],
        [ -7.1255,  -0.2879,  -3.6222, -32.5715,  -5.1214,   6.6551,   5.6168,
          -1.3575,  -0.2752,  -0.4249],
        [ -5.3973,  -0.5031,  -0.2973,  -7.9359,  -2.2007,   2.9579,   6.9582,
          -0.3806,  -0.3831,  -6.0306],
        [  0.1976,   3.7184,  -2.8971,  -0.1381,  -3.1483,  -1.4485,   1.2384,
          -2.8806,   3.1140,  -0.7113],
        [  0.2915,   2.3847,  -0.8517,  -1.4091,  -1.6990,  -1.4593,  -0.6997,
          -0.8237,   2.2745,   8.8277]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-3.3274, -3.8051, -3.3475, -3.3534, -0.9952, -3.3460,  1.5537,  2.1202,
        -2.9814, -3.0780], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ -2.4562,  17.4035,  -2.4408,  -2.4362,   1.3719,  -2.4420,  -7.3981,
           1.2799,   1.3667,  -1.2427],
        [  2.4562, -17.4178,   2.4408,   2.4362,  -1.4506,   2.4419,   7.6793,
          -1.2275,  -1.2822,   1.0281]], device='cuda:0'))])
loaded xi:  56.452183
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1579.8088921591966
W_T_median: 1137.3149081751399
W_T_pctile_5: -129.57910035187072
W_T_CVAR_5_pct: -296.09225597438984
-----------------------------------------------
2.0% of gradient descent iterations done. Method = Adam
new min fval:  -1560.403778757363
Current xi:  [55.940258]
objective value function right now is: -1560.403778757363
4.0% of gradient descent iterations done. Method = Adam
Current xi:  [57.07201]
objective value function right now is: -1558.7272493037487
6.0% of gradient descent iterations done. Method = Adam
Current xi:  [58.11632]
objective value function right now is: -1559.9668815981913
8.0% of gradient descent iterations done. Method = Adam
new min fval:  -1562.1816688786882
Current xi:  [58.14593]
objective value function right now is: -1562.1816688786882
10.0% of gradient descent iterations done. Method = Adam
Current xi:  [58.113564]
objective value function right now is: -1561.3450910557435
12.0% of gradient descent iterations done. Method = Adam
Current xi:  [58.365646]
objective value function right now is: -1560.207405261072
14.000000000000002% of gradient descent iterations done. Method = Adam
new min fval:  -1563.164265927805
Current xi:  [58.331757]
objective value function right now is: -1563.164265927805
16.0% of gradient descent iterations done. Method = Adam
Current xi:  [58.274117]
objective value function right now is: -1558.2765806655304
18.0% of gradient descent iterations done. Method = Adam
Current xi:  [58.247974]
objective value function right now is: -1562.844183845193
20.0% of gradient descent iterations done. Method = Adam
Current xi:  [58.272484]
objective value function right now is: -1560.5925891374802
Traceback (most recent call last):
  File "/home/marcchen/Documents/testing_pyt_decum/researchcode/decumulation_driver.py", line 929, in <module>
    fun_RUN__wrapper.RUN__wrapper_ONE_stage_optimization(
  File "/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_RUN__wrapper.py", line 116, in RUN__wrapper_ONE_stage_optimization
    RUN__wrapper_training_testing_NN(
  File "/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_RUN__wrapper.py", line 216, in RUN__wrapper_training_testing_NN
    params_TRAIN, res_adam = fun_train_NN.train_NN( theta0 = theta0,
  File "/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_train_NN.py", line 196, in train_NN
    result_pyt_adam = run_Gradient_Descent_pytorch(NN_list= NN_list,
  File "/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_train_NN_SGD_algorithms.py", line 159, in run_Gradient_Descent_pytorch
    params_it = copy.deepcopy(params)  # Create a copy of input data for this iteration
  File "/usr/lib/python3.10/copy.py", line 146, in deepcopy
    y = copier(x, memo)
  File "/usr/lib/python3.10/copy.py", line 231, in _deepcopy_dict
    y[deepcopy(key, memo)] = deepcopy(value, memo)
  File "/usr/lib/python3.10/copy.py", line 153, in deepcopy
    y = copier(memo)
KeyboardInterrupt

Starting at: 
16-11-22_15:23

 Random seed:  2  



############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = B10_and_VWD
timeseries_basket['basket_desc'] = CRSP data: B10 and VWD
timeseries_basket['basket_columns'] = 
['B10_real_ret', 'VWD_real_ret']
############# End: defined asset  basket #################
-----------------------------------------------
No need to read market data.
-----------------------------------------------
3.3333333333333335% of MC simulations done.
6.666666666666667% of MC simulations done.
10.0% of MC simulations done.
13.333333333333334% of MC simulations done.
16.666666666666664% of MC simulations done.
20.0% of MC simulations done.
23.333333333333332% of MC simulations done.
26.666666666666668% of MC simulations done.
30.0% of MC simulations done.
33.33333333333333% of MC simulations done.
36.666666666666664% of MC simulations done.
40.0% of MC simulations done.
43.333333333333336% of MC simulations done.
46.666666666666664% of MC simulations done.
50.0% of MC simulations done.
53.333333333333336% of MC simulations done.
56.666666666666664% of MC simulations done.
60.0% of MC simulations done.
63.33333333333333% of MC simulations done.
66.66666666666666% of MC simulations done.
70.0% of MC simulations done.
73.33333333333333% of MC simulations done.
76.66666666666667% of MC simulations done.
80.0% of MC simulations done.
83.33333333333334% of MC simulations done.
86.66666666666667% of MC simulations done.
90.0% of MC simulations done.
93.33333333333333% of MC simulations done.
96.66666666666667% of MC simulations done.
100.0% of MC simulations done.
Withdrawal NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       1       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer       4  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer       4  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       1  logistic_sigmoid   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1       (2, 4)    False        None  
2       (4, 4)    False        None  
3       (4, 1)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
Allocation NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       2       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer       4  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer       4  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       2           softmax   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1       (2, 4)    False        None  
2       (4, 4)    False        None  
3       (4, 2)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer        4  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer        4  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1  logistic_sigmoid   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0       (2, 4)     False        None  
0       (4, 4)     False        None  
0       (4, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer        4  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer        4  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0       (2, 4)     False        None  
0       (4, 4)     False        None  
0       (4, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1576.8182150775267
W_T_median: 1136.7449346433505
W_T_pctile_5: -127.64084552288806
W_T_CVAR_5_pct: -295.72244238283764
-----------------------------------------------
2.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053000432
4.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053189602
6.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053344924
8.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053438458
10.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053478847
12.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053506154
14.000000000000002% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053514915
16.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053515015
18.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053515063
20.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053515047
22.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053515113
24.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053514783
26.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.999505351488
28.000000000000004% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053514865
30.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053514785
32.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053514792
34.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053514838
36.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.999505351475
38.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053514588
40.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053514745
42.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.999505351484
44.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053514765
46.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053514754
48.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.999505351462
50.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053514704
52.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053514663
54.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053514792
56.00000000000001% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.999505351461
57.99999999999999% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053514933
60.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053514635
62.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.999505351474
64.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053514738
66.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.999505351482
68.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053514988
70.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053514574
72.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053514715
74.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053514906
76.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053514383
78.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053514747
80.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.999505351473
82.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053514729
84.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053514835
86.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053514706
88.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053514801
new min fval:  -1084.9981895554295
90.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053514874
new min fval:  -1084.9995053514883
92.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053514835
94.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.999505351466
96.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.999505351478
98.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.999505351454
100.0% of gradient descent iterations done. Method = Adam
Current xi:  [16.]
objective value function right now is: -1084.9995053514745
min fval:  -1084.9995053514883
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 494.6485117452498
W_T_median: 378.012666679477
W_T_pctile_5: -146.67577820487023
W_T_CVAR_5_pct: -242.17908539268257
Average q (qsum/M+1):  35.0
Optimal xi:  [16.]
Expected(across Rb) median(across samples) p_equity:  2.0888378742256465e-07
obj fun:  tensor(-1084.9995, device='cuda:0', dtype=torch.float64,
       grad_fn=<MeanBackward0>)
-----------------------------------------------
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 9999.0
-----------------------------------------------

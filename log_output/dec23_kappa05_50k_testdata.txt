Starting at: 
23-12-22_11:18

 Random seed:  2  



############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = B10_and_VWD
timeseries_basket['basket_desc'] = CRSP data: B10 and VWD
timeseries_basket['basket_columns'] = 
['B10_real_ret', 'VWD_real_ret']
############# End: defined asset  basket #################
-----------------------------------------------
No need to read market data.
-----------------------------------------------
3.3333333333333335% of MC simulations done.
6.666666666666667% of MC simulations done.
10.0% of MC simulations done.
13.333333333333334% of MC simulations done.
16.666666666666664% of MC simulations done.
20.0% of MC simulations done.
23.333333333333332% of MC simulations done.
26.666666666666668% of MC simulations done.
30.0% of MC simulations done.
33.33333333333333% of MC simulations done.
36.666666666666664% of MC simulations done.
40.0% of MC simulations done.
43.333333333333336% of MC simulations done.
46.666666666666664% of MC simulations done.
50.0% of MC simulations done.
53.333333333333336% of MC simulations done.
56.666666666666664% of MC simulations done.
60.0% of MC simulations done.
63.33333333333333% of MC simulations done.
66.66666666666666% of MC simulations done.
70.0% of MC simulations done.
73.33333333333333% of MC simulations done.
76.66666666666667% of MC simulations done.
80.0% of MC simulations done.
83.33333333333334% of MC simulations done.
86.66666666666667% of MC simulations done.
90.0% of MC simulations done.
93.33333333333333% of MC simulations done.
96.66666666666667% of MC simulations done.
100.0% of MC simulations done.
Withdrawal NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       1       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      10  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      10  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       1  logistic_sigmoid   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 10)    False        None  
2     (10, 10)    False        None  
3      (10, 1)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
Allocation NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       2       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      10  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      10  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       2           softmax   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 10)    False        None  
2     (10, 10)    False        None  
3      (10, 2)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1  logistic_sigmoid   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)     False        None  
0     (10, 10)     False        None  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)     False        None  
0     (10, 10)     False        None  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1576.8182150775267
W_T_median: 1136.7449346433505
W_T_pctile_5: -127.64084552288806
W_T_CVAR_5_pct: -295.72244238283764
-----------------------------------------------
2.0% of gradient descent iterations done. Method = Adam
new min fval:  -1578.3465804833809
Current xi:  [-63.843204]
objective value function right now is: -1578.3465804833809
4.0% of gradient descent iterations done. Method = Adam
Current xi:  [-103.116516]
objective value function right now is: -1569.8644358935967
6.0% of gradient descent iterations done. Method = Adam
new min fval:  -1590.6705106739994
Current xi:  [-124.8064]
objective value function right now is: -1590.6705106739994
8.0% of gradient descent iterations done. Method = Adam
new min fval:  -1594.965673252914
Current xi:  [-141.26216]
objective value function right now is: -1594.965673252914
10.0% of gradient descent iterations done. Method = Adam
new min fval:  -1597.035914071503
Current xi:  [-152.87291]
objective value function right now is: -1597.035914071503
12.0% of gradient descent iterations done. Method = Adam
Current xi:  [-163.51955]
objective value function right now is: -1584.0851476700063
14.000000000000002% of gradient descent iterations done. Method = Adam
Current xi:  [-172.97322]
objective value function right now is: -1577.9909115139503
16.0% of gradient descent iterations done. Method = Adam
Current xi:  [-179.80441]
objective value function right now is: -1594.126702979165
18.0% of gradient descent iterations done. Method = Adam
Current xi:  [-182.75117]
objective value function right now is: -1592.9247744426136
20.0% of gradient descent iterations done. Method = Adam
Current xi:  [-190.84367]
objective value function right now is: -1576.8750322767391
22.0% of gradient descent iterations done. Method = Adam
Current xi:  [-195.14352]
objective value function right now is: -1586.77024596091
24.0% of gradient descent iterations done. Method = Adam
Current xi:  [-194.33179]
objective value function right now is: -1586.5370384819792
26.0% of gradient descent iterations done. Method = Adam
Current xi:  [-190.34483]
objective value function right now is: -1586.7576972908992
28.000000000000004% of gradient descent iterations done. Method = Adam
Current xi:  [-194.98358]
objective value function right now is: -1587.8525204271928
30.0% of gradient descent iterations done. Method = Adam
Current xi:  [-195.60863]
objective value function right now is: -1588.4874106395353
32.0% of gradient descent iterations done. Method = Adam
Current xi:  [-195.96967]
objective value function right now is: -1596.4065515967325
34.0% of gradient descent iterations done. Method = Adam
Current xi:  [-195.9717]
objective value function right now is: -1588.199289372426
36.0% of gradient descent iterations done. Method = Adam
Current xi:  [-197.48584]
objective value function right now is: -1585.1451178921727
38.0% of gradient descent iterations done. Method = Adam
Current xi:  [-197.77408]
objective value function right now is: -1588.0420892977795
40.0% of gradient descent iterations done. Method = Adam
Current xi:  [-207.37198]
objective value function right now is: -1555.003357595923
42.0% of gradient descent iterations done. Method = Adam
Current xi:  [-222.2059]
objective value function right now is: -1552.8120465311315
44.0% of gradient descent iterations done. Method = Adam
Current xi:  [-227.10892]
objective value function right now is: -1558.3857295315518
46.0% of gradient descent iterations done. Method = Adam
Current xi:  [-222.96584]
objective value function right now is: -1586.2031879648575
48.0% of gradient descent iterations done. Method = Adam
Current xi:  [-216.78609]
objective value function right now is: -1576.562017673873
50.0% of gradient descent iterations done. Method = Adam
Current xi:  [-212.63402]
objective value function right now is: -1583.748400570227
52.0% of gradient descent iterations done. Method = Adam
Current xi:  [-211.83447]
objective value function right now is: -1587.6190209782553
54.0% of gradient descent iterations done. Method = Adam
Current xi:  [-203.73022]
objective value function right now is: -1586.5485693248804
56.00000000000001% of gradient descent iterations done. Method = Adam
Current xi:  [-201.78178]
objective value function right now is: -1587.0061580576419
57.99999999999999% of gradient descent iterations done. Method = Adam
Current xi:  [-203.51176]
objective value function right now is: -1587.8257396845017
60.0% of gradient descent iterations done. Method = Adam
Current xi:  [-206.80443]
objective value function right now is: -1586.748353808099
62.0% of gradient descent iterations done. Method = Adam
Current xi:  [-224.66074]
objective value function right now is: -1548.6467113446388
64.0% of gradient descent iterations done. Method = Adam
Current xi:  [-213.24365]
objective value function right now is: -1582.6084222241157
66.0% of gradient descent iterations done. Method = Adam
Current xi:  [-205.80867]
objective value function right now is: -1582.2192651383393
68.0% of gradient descent iterations done. Method = Adam
Current xi:  [-202.8167]
objective value function right now is: -1572.913735998586
70.0% of gradient descent iterations done. Method = Adam
Current xi:  [-207.05841]
objective value function right now is: -1566.6986901418609
72.0% of gradient descent iterations done. Method = Adam
Current xi:  [-207.98657]
objective value function right now is: -1575.1227332004357
74.0% of gradient descent iterations done. Method = Adam
Current xi:  [-208.4619]
objective value function right now is: -1578.2579486423779
76.0% of gradient descent iterations done. Method = Adam
Current xi:  [-207.99991]
objective value function right now is: -1578.8622719647344
78.0% of gradient descent iterations done. Method = Adam
Current xi:  [-211.46106]
objective value function right now is: -1580.9972672673007
80.0% of gradient descent iterations done. Method = Adam
Current xi:  [-208.32268]
objective value function right now is: -1578.6437286417984
82.0% of gradient descent iterations done. Method = Adam
Current xi:  [-209.38277]
objective value function right now is: -1579.872792922123
84.0% of gradient descent iterations done. Method = Adam
Current xi:  [-206.49358]
objective value function right now is: -1577.1237013708205
86.0% of gradient descent iterations done. Method = Adam
Current xi:  [-207.92781]
objective value function right now is: -1580.3310448674672
88.0% of gradient descent iterations done. Method = Adam
Current xi:  [-201.30669]
objective value function right now is: -1582.0647158161103
90.0% of gradient descent iterations done. Method = Adam
Current xi:  [-200.8619]
objective value function right now is: -1580.6478819544127
92.0% of gradient descent iterations done. Method = Adam
Current xi:  [-194.93628]
objective value function right now is: -1584.33339742334
new min fval from sgd:  -1597.660598335967
new min fval from sgd:  -1599.2396601995517
94.0% of gradient descent iterations done. Method = Adam
Current xi:  [-209.84859]
objective value function right now is: -1564.3148790722848
96.0% of gradient descent iterations done. Method = Adam
Current xi:  [-205.9045]
objective value function right now is: -1580.340355116779
98.0% of gradient descent iterations done. Method = Adam
Current xi:  [-203.00558]
objective value function right now is: -1580.6716044603581
100.0% of gradient descent iterations done. Method = Adam
Current xi:  [-198.73302]
objective value function right now is: -1503.5624691263122
min fval:  -1599.2396601995517
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.1515, -2.5510],
        [ 0.2543,  3.9997],
        [ 0.2545,  4.0018],
        [-0.1912, -3.1464],
        [ 0.2545,  4.0015],
        [ 0.2543,  4.0010],
        [ 0.2546,  4.0038],
        [-0.1790, -2.9810],
        [ 0.2543,  3.9992],
        [ 0.2899,  4.4658]], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ -0.6520, -44.2825, -42.3565,  -0.2669, -42.8688, -42.7481, -39.7947,
          -0.7066, -45.0353,  -8.9962],
        [ -7.0067,  -5.6324,  -4.1515,  -6.4127,  -4.1390,  -4.2138,  -3.2893,
          -7.1429,  -5.1537,  -6.0964],
        [ -6.7074,  -6.0770,  -3.8666,  -6.7899,  -4.1407,  -4.0724,  -3.6581,
          -7.0566,  -4.6729,  -6.1547],
        [ -6.8156,  -5.1206,  -4.6022,  -6.6686,  -4.3131,  -4.6135,  -4.0119,
          -7.0176,  -5.0205,  -6.3644],
        [ -7.2152,  -4.4911,  -2.8051,  -6.8083,  -2.6244,  -2.9157,  -2.8092,
          -6.7504,  -3.5384,  -6.0204],
        [  1.4674, -48.4804, -46.1223,   1.9835, -46.4994, -46.9125, -44.0807,
           1.6240, -49.0159,  -6.9621],
        [  5.2976,   7.9939,   8.4604,   5.4245,   8.4267,   8.3741,   8.8814,
           5.3142,   8.8490,   9.3481],
        [  1.2581, -50.6955, -48.1517,   2.5107, -48.3587, -49.3823, -46.3133,
           2.1076, -51.2672,  -6.3957],
        [ -6.7736,  -5.7146,  -3.5412,  -6.9588,  -3.9447,  -4.3067,  -3.5547,
          -6.8659,  -4.5033,  -5.9503],
        [  6.3909,   2.9715,   4.0986,   5.8437,   3.9600,   3.9322,   4.0364,
           6.2074,   3.6236,   5.5780]], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -8.8765,  -0.6922,  -0.6785,  -0.6815,  -0.5638, -28.0279,  13.5572,
         -41.4302,  -0.6801,  14.1432]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[  4.1242,   3.5566],
        [-53.7110, -21.4325],
        [  1.8944,   2.8273],
        [  1.7041,   2.8739],
        [ 16.4207,   4.9751],
        [-13.2609,  -4.6478],
        [ 34.0464,  -2.9434],
        [  1.3707,   2.7709],
        [  6.3658,   4.8328],
        [  2.1237,   2.9555]], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-4.8498e+00, -3.5411e+00, -4.4133e+00,  2.2518e+00, -2.5666e-01,
         -6.8998e-01, -2.4680e+01, -1.0967e+01, -8.1357e+00, -3.1932e+00],
        [ 7.2986e+01, -2.1044e+00, -3.3328e+00,  7.7390e+01, -1.0931e+01,
         -2.6985e+01,  1.7750e+02,  5.3787e+01,  1.2000e+01,  3.7265e+01],
        [-4.8618e+01, -2.1214e+02, -3.8036e-01, -4.5803e+01, -4.7677e+00,
         -5.1989e+00, -3.0175e+02, -3.9234e+01, -3.1295e+00, -2.7444e+01],
        [-6.4085e+01,  4.6229e+01, -1.5237e+02, -8.1455e+01, -6.2701e+01,
          1.5503e+01, -2.6575e+01, -9.8185e+01, -2.2538e+02, -8.0791e+01],
        [-4.0149e+01,  3.6918e+00, -2.6029e+01, -4.0449e+01, -1.9846e+01,
         -1.5978e+01, -1.4443e+01, -3.5905e+01, -2.3441e+01, -2.4390e+01],
        [-6.9517e+01,  9.3868e+00, -7.5726e+01, -6.6851e+01, -6.4950e+00,
          9.8712e+00, -4.9400e+01, -8.0927e+01, -1.3047e+01, -6.2504e+01],
        [-5.2541e+00,  5.8643e+00, -2.2126e+01, -1.1743e+01,  1.2024e+00,
          6.7551e+00, -9.3682e+00, -1.8471e+01, -4.1059e+00, -1.1358e+01],
        [-8.1904e+01,  9.5899e+00, -7.7477e+01, -7.9662e+01, -4.6854e+00,
          7.8314e+00, -2.0447e+01, -8.4966e+01, -6.1535e+01, -6.9420e+01],
        [-4.9742e+01,  2.3864e+01, -9.1788e+01, -4.5392e+01, -2.6518e+01,
         -9.8389e+00, -3.3395e+01, -5.2624e+01, -4.7598e+01, -2.7463e+01],
        [-5.9462e+01,  1.6548e+01,  1.3709e+01, -4.8641e+01, -3.3983e+01,
          9.6528e+00, -4.8881e+01, -4.8759e+01, -3.2239e+01, -5.2945e+01]],
       device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-10.1911,   0.1016,   6.8977,  18.6840,   0.2172,  -8.4463, -18.3600,
         -16.1492,   0.6103,  25.6302],
        [  9.9302,  -0.2174,  -6.8352, -18.2918,  -0.6249,   8.5552,  18.4784,
          16.1572,  -0.7781, -25.2720]], device='cuda:0'))])
xi:  [-194.9486]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 545.0234688888711
W_T_median: 57.26956856289779
W_T_pctile_5: -195.87612663884946
W_T_CVAR_5_pct: -254.7890336975459
Average q (qsum/M+1):  55.69839969758065
Optimal xi:  [-194.9486]
Expected(across Rb) median(across samples) p_equity:  0.42377198686202366
obj fun:  tensor(-1599.2397, device='cuda:0', dtype=torch.float64,
       grad_fn=<MeanBackward0>)
-----------------------------------------------
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 0.5
-----------------------------------------------

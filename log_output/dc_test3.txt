Starting at: 
2022-11-05 09:34:12


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = B10_and_VWD
timeseries_basket['basket_desc'] = CRSP data: B10 and VWD
timeseries_basket['basket_columns'] = 
['B10_real_ret', 'VWD_real_ret']
############# End: defined asset  basket #################
-----------------------------------------------
No need to read market data.
-----------------------------------------------
3.3333333333333335% of MC simulations done.
6.666666666666667% of MC simulations done.
10.0% of MC simulations done.
13.333333333333334% of MC simulations done.
16.666666666666664% of MC simulations done.
20.0% of MC simulations done.
23.333333333333332% of MC simulations done.
26.666666666666668% of MC simulations done.
30.0% of MC simulations done.
33.33333333333333% of MC simulations done.
36.666666666666664% of MC simulations done.
40.0% of MC simulations done.
43.333333333333336% of MC simulations done.
46.666666666666664% of MC simulations done.
50.0% of MC simulations done.
53.333333333333336% of MC simulations done.
56.666666666666664% of MC simulations done.
60.0% of MC simulations done.
63.33333333333333% of MC simulations done.
66.66666666666666% of MC simulations done.
70.0% of MC simulations done.
73.33333333333333% of MC simulations done.
76.66666666666667% of MC simulations done.
80.0% of MC simulations done.
83.33333333333334% of MC simulations done.
86.66666666666667% of MC simulations done.
90.0% of MC simulations done.
93.33333333333333% of MC simulations done.
96.66666666666667% of MC simulations done.
100.0% of MC simulations done.
Withdrawal NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       1       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer       4  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer       4  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       1  logistic_sigmoid   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1       (2, 4)    False        None  
2       (4, 4)    False        None  
3       (4, 1)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
Allocation NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       2       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer       4  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer       4  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       2           softmax   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1       (2, 4)    False        None  
2       (4, 4)    False        None  
3       (4, 2)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer        4  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer        4  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1  logistic_sigmoid   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0       (2, 4)     False        None  
0       (4, 4)     False        None  
0       (4, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer        4  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer        4  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0       (2, 4)     False        None  
0       (4, 4)     False        None  
0       (4, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.4 0.6]
W_T_mean: 2862.871453413873
W_T_median: 1756.956432499226
W_T_pctile_5: -227.9931833333953
W_T_CVAR_5_pct: -436.37789615524946
-----------------------------------------------
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/fun_construct_Feature_vector.py:82: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  wealth_n = torch.tensor(wealth_n, device=params["device"])
2.0% of gradient descent iterations done. Method = A
objective value function right now is: -996.2464824503296
4.0% of gradient descent iterations done. Method = A
objective value function right now is: -1045.2036100829644
6.0% of gradient descent iterations done. Method = A
objective value function right now is: -1058.6451681779963
8.0% of gradient descent iterations done. Method = A
objective value function right now is: -1064.7308480652832
10.0% of gradient descent iterations done. Method = A
objective value function right now is: -1068.4835742832724
12.0% of gradient descent iterations done. Method = A
objective value function right now is: -1070.8667530096916
14.000000000000002% of gradient descent iterations done. Method = A
objective value function right now is: -1073.1848385443666
16.0% of gradient descent iterations done. Method = A
objective value function right now is: -1075.4228520683955
18.0% of gradient descent iterations done. Method = A
objective value function right now is: -1077.9483426353531
20.0% of gradient descent iterations done. Method = A
objective value function right now is: -1081.1809029865294
22.0% of gradient descent iterations done. Method = A
objective value function right now is: -1087.890877876468
24.0% of gradient descent iterations done. Method = A
objective value function right now is: -1078.6761193608866
26.0% of gradient descent iterations done. Method = A
objective value function right now is: -1126.9180106363906
28.000000000000004% of gradient descent iterations done. Method = A
objective value function right now is: -1149.4881723091175
30.0% of gradient descent iterations done. Method = A
objective value function right now is: -1170.8701594322063
32.0% of gradient descent iterations done. Method = A
objective value function right now is: -1190.5885033478485
34.0% of gradient descent iterations done. Method = A
objective value function right now is: -1221.1349042024735
36.0% of gradient descent iterations done. Method = A
objective value function right now is: -1257.1218707130777
38.0% of gradient descent iterations done. Method = A
objective value function right now is: -1293.018589345891
40.0% of gradient descent iterations done. Method = A
objective value function right now is: -1320.2339145060428
42.0% of gradient descent iterations done. Method = A
objective value function right now is: -1340.8638564244443
44.0% of gradient descent iterations done. Method = A
objective value function right now is: -1358.1714631676205
46.0% of gradient descent iterations done. Method = A
objective value function right now is: -1374.463361382056
48.0% of gradient descent iterations done. Method = A
objective value function right now is: -1384.8352658878957
50.0% of gradient descent iterations done. Method = A
objective value function right now is: -1394.715158995636
52.0% of gradient descent iterations done. Method = A
objective value function right now is: -1402.2358914468546
54.0% of gradient descent iterations done. Method = A
objective value function right now is: -1411.8331543754152
56.00000000000001% of gradient descent iterations done. Method = A
objective value function right now is: -1415.1384563083404
57.99999999999999% of gradient descent iterations done. Method = A
objective value function right now is: -1422.7495962350747
60.0% of gradient descent iterations done. Method = A
objective value function right now is: -1424.2514620475993
62.0% of gradient descent iterations done. Method = A
objective value function right now is: -1430.3552125345543
64.0% of gradient descent iterations done. Method = A
objective value function right now is: -1435.567529427652
66.0% of gradient descent iterations done. Method = A
objective value function right now is: -1435.8455369557705
68.0% of gradient descent iterations done. Method = A
objective value function right now is: -1437.6617841722052
70.0% of gradient descent iterations done. Method = A
objective value function right now is: -1440.111588927777
72.0% of gradient descent iterations done. Method = A
objective value function right now is: -1444.2119231285062
74.0% of gradient descent iterations done. Method = A
objective value function right now is: -1445.8935225854054
76.0% of gradient descent iterations done. Method = A
objective value function right now is: -1449.3176726762424
78.0% of gradient descent iterations done. Method = A
objective value function right now is: -1450.8406495760532
80.0% of gradient descent iterations done. Method = A
objective value function right now is: -1451.4768596391148
82.0% of gradient descent iterations done. Method = A
objective value function right now is: -1455.068810308431
84.0% of gradient descent iterations done. Method = A
objective value function right now is: -1454.9616902724497
86.0% of gradient descent iterations done. Method = A
objective value function right now is: -1458.604787746353
88.0% of gradient descent iterations done. Method = A
objective value function right now is: -1458.5716089277716
90.0% of gradient descent iterations done. Method = A
objective value function right now is: -1460.1921787051745
92.0% of gradient descent iterations done. Method = A
objective value function right now is: -1461.730914271895
94.0% of gradient descent iterations done. Method = A
objective value function right now is: -1462.057832746731
96.0% of gradient descent iterations done. Method = A
objective value function right now is: -1461.9286999154697
98.0% of gradient descent iterations done. Method = A
objective value function right now is: -1463.906516302595
100.0% of gradient descent iterations done. Method = A
objective value function right now is: -1464.2449683621535
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 341.7942006215838
W_T_median: 158.38005295131447
W_T_pctile_5: -35.79060045103358
W_T_CVAR_5_pct: -154.18804468293936
Average q (qsum/M+1):  52.48584771925403
Final xi value (not averaged):  [0.00156626]
Expected(across Rb) median(across samples) p_equity:  0.30343609948952993
-----------------------------------------------
Traceback (most recent call last):
  File "/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/decumulation_driver.py", line 807, in <module>
    fun_RUN__wrapper.RUN__wrapper_ONE_stage_optimization(
  File "/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/fun_RUN__wrapper.py", line 115, in RUN__wrapper_ONE_stage_optimization
    RUN__wrapper_training_testing_NN(
  File "/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/fun_RUN__wrapper.py", line 194, in RUN__wrapper_training_testing_NN
    params_TRAIN, res_BEST, _, res_ALL_dataframe = fun_train_NN.train_NN( theta0 = theta0,
  File "/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/fun_train_NN.py", line 196, in train_NN
    result_pyt_adam = run_Gradient_Descent_pytorch(NN_list= NN_list,
  File "/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/fun_train_NN_SGD_algorithms.py", line 243, in run_Gradient_Descent_pytorch
    F_theta = np.append(NN_object.theta, xi_np)    
NameError: name 'NN_object' is not defined. Did you mean: 'object'?

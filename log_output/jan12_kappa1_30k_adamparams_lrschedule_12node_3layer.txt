Starting at: 
12-01-23_15:34

 Random seed:  2  

Key parameters-------
paths: 256000
iterations: 30000
batchsize: 1000


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = B10_and_VWD
timeseries_basket['basket_desc'] = CRSP data: B10 and VWD
timeseries_basket['basket_columns'] = 
['B10_real_ret', 'VWD_real_ret']
############# End: defined asset  basket #################
-----------------------------------------------
No need to read market data.
-----------------------------------------------
3.3333333333333335% of MC simulations done.
6.666666666666667% of MC simulations done.
10.0% of MC simulations done.
13.333333333333334% of MC simulations done.
16.666666666666664% of MC simulations done.
20.0% of MC simulations done.
23.333333333333332% of MC simulations done.
26.666666666666668% of MC simulations done.
30.0% of MC simulations done.
33.33333333333333% of MC simulations done.
36.666666666666664% of MC simulations done.
40.0% of MC simulations done.
43.333333333333336% of MC simulations done.
46.666666666666664% of MC simulations done.
50.0% of MC simulations done.
53.333333333333336% of MC simulations done.
56.666666666666664% of MC simulations done.
60.0% of MC simulations done.
63.33333333333333% of MC simulations done.
66.66666666666666% of MC simulations done.
70.0% of MC simulations done.
73.33333333333333% of MC simulations done.
76.66666666666667% of MC simulations done.
80.0% of MC simulations done.
83.33333333333334% of MC simulations done.
86.66666666666667% of MC simulations done.
90.0% of MC simulations done.
93.33333333333333% of MC simulations done.
96.66666666666667% of MC simulations done.
100.0% of MC simulations done.
Withdrawal NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  hidden_layer    None       None         None   
4        obj.layers[4]        4  output_layer       1       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  
4    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      14  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      14  logistic_sigmoid   
3        obj.layers[3]        3  hidden_layer      14  logistic_sigmoid   
4        obj.layers[4]        4  output_layer       1  logistic_sigmoid   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 14)    False        None  
2     (14, 14)    False        None  
3     (14, 14)    False        None  
4      (14, 1)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
Allocation NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  hidden_layer    None       None         None   
4        obj.layers[4]        4  output_layer       2       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  
4    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      14  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      14  logistic_sigmoid   
3        obj.layers[3]        3  hidden_layer      14  logistic_sigmoid   
4        obj.layers[4]        4  output_layer       2           softmax   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 14)    False        None  
2     (14, 14)    False        None  
3     (14, 14)    False        None  
4      (14, 2)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       14  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       14  logistic_sigmoid   
0        obj.layers[3]         3  hidden_layer       14  logistic_sigmoid   
0        obj.layers[4]         4  output_layer        1  logistic_sigmoid   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 14)     False        None  
0     (14, 14)     False        None  
0     (14, 14)     False        None  
0      (14, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       14  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       14  logistic_sigmoid   
0        obj.layers[3]         3  hidden_layer       14  logistic_sigmoid   
0        obj.layers[4]         4  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 14)     False        None  
0     (14, 14)     False        None  
0     (14, 14)     False        None  
0      (14, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
{'methods': ['Adam'], 'output_progress': False, 'tol': 1e-06, 'itbound_scipy_algorithms': 1000, 'check_exit_criteria': False, 'nit_running_min': 3000, 'itbound_SGD_algorithms': 30000, 'nit_IterateAveragingStart': 27000, 'batchsize': 1000, 'SGD_learningrate': 50.0, 'Adagrad_epsilon': 1e-08, 'Adagrad_eta': 1.0, 'Adadelta_ewma': 0.9, 'Adadelta_epsilon': 1e-08, 'RMSprop_ewma': 0.8, 'RMSprop_epsilon': 1e-08, 'RMSprop_eta': 0.1, 'Adam_ewma_1': 0.9, 'Adam_ewma_2': 0.998, 'Adam_eta': 0.05, 'Adam_epsilon': 1e-08, 'Adam_weight_decay': 0.0001, 'running_min_from_avg': False, 'running_min_from_sgd': True, 'lr_schedule': True}
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1576.8182150775267
W_T_median: 1136.7449346433505
W_T_pctile_5: -127.64084552288806
W_T_CVAR_5_pct: -295.72244238283764
-----------------------------------------------
Adjusting learning rate of group 0 to 5.0000e-02.
Adjusting learning rate of group 1 to 5.0000e-02.
2.0% of gradient descent iterations done. Method = Adam
new min fval:  -1455.5404285664163
Current xi:  [55.492996]
objective value function right now is: -1455.5404285664163
4.0% of gradient descent iterations done. Method = Adam
new min fval:  -1532.261483517815
Current xi:  [48.465755]
objective value function right now is: -1532.261483517815
6.0% of gradient descent iterations done. Method = Adam
new min fval:  -1533.6471257202766
Current xi:  [46.745228]
objective value function right now is: -1533.6471257202766
8.0% of gradient descent iterations done. Method = Adam
Current xi:  [46.346107]
objective value function right now is: -1316.84040959069
10.0% of gradient descent iterations done. Method = Adam
Current xi:  [37.306328]
objective value function right now is: -1486.56389680875
12.0% of gradient descent iterations done. Method = Adam
Current xi:  [24.08706]
objective value function right now is: -1522.3656932724655
14.000000000000002% of gradient descent iterations done. Method = Adam
new min fval:  -1539.5301404366387
Current xi:  [22.373528]
objective value function right now is: -1539.5301404366387
16.0% of gradient descent iterations done. Method = Adam
Current xi:  [21.244553]
objective value function right now is: -1530.4942284610436
18.0% of gradient descent iterations done. Method = Adam
new min fval:  -1543.449324565821
Current xi:  [20.083433]
objective value function right now is: -1543.449324565821
20.0% of gradient descent iterations done. Method = Adam
new min fval:  -1548.9468375075828
Current xi:  [24.414871]
objective value function right now is: -1548.9468375075828
22.0% of gradient descent iterations done. Method = Adam
new min fval:  -1552.8111465660897
Current xi:  [28.390318]
objective value function right now is: -1552.8111465660897
24.0% of gradient descent iterations done. Method = Adam
Current xi:  [32.087376]
objective value function right now is: -1551.003277259098
26.0% of gradient descent iterations done. Method = Adam
Current xi:  [32.676414]
objective value function right now is: -1539.7458745626975
28.000000000000004% of gradient descent iterations done. Method = Adam
Current xi:  [33.28369]
objective value function right now is: -1539.8250904440179
30.0% of gradient descent iterations done. Method = Adam
Current xi:  [23.34321]
objective value function right now is: -1516.771477040114
32.0% of gradient descent iterations done. Method = Adam
Current xi:  [18.335356]
objective value function right now is: -1525.6484419089682
34.0% of gradient descent iterations done. Method = Adam
Current xi:  [18.148298]
objective value function right now is: -1517.7950196908623
36.0% of gradient descent iterations done. Method = Adam
Current xi:  [14.177846]
objective value function right now is: -1522.8456779642806
38.0% of gradient descent iterations done. Method = Adam
Current xi:  [11.152025]
objective value function right now is: -1522.9663178864755
40.0% of gradient descent iterations done. Method = Adam
Current xi:  [8.724903]
objective value function right now is: -1531.9111719277594
42.0% of gradient descent iterations done. Method = Adam
Current xi:  [8.609641]
objective value function right now is: -1505.7831261338877
44.0% of gradient descent iterations done. Method = Adam
Current xi:  [9.681716]
objective value function right now is: -1533.038952958208
46.0% of gradient descent iterations done. Method = Adam
Current xi:  [13.7290325]
objective value function right now is: -1548.9227196618149
48.0% of gradient descent iterations done. Method = Adam
Current xi:  [17.867474]
objective value function right now is: -1551.7039380727824
50.0% of gradient descent iterations done. Method = Adam
Current xi:  [19.594397]
objective value function right now is: -1542.6188939398858
52.0% of gradient descent iterations done. Method = Adam
Current xi:  [18.57813]
objective value function right now is: -1517.4577923207949
54.0% of gradient descent iterations done. Method = Adam
Current xi:  [14.4707365]
objective value function right now is: -1515.7298528299943
56.00000000000001% of gradient descent iterations done. Method = Adam
Current xi:  [12.213243]
objective value function right now is: -1543.3511288413167
57.99999999999999% of gradient descent iterations done. Method = Adam
Current xi:  [14.987712]
objective value function right now is: -1545.3987506390715
60.0% of gradient descent iterations done. Method = Adam
Current xi:  [11.774313]
objective value function right now is: -1518.0246268131286
62.0% of gradient descent iterations done. Method = Adam
Current xi:  [10.915546]
objective value function right now is: -1535.3085586951609
64.0% of gradient descent iterations done. Method = Adam
Current xi:  [10.875616]
objective value function right now is: -1521.4888037930466
66.0% of gradient descent iterations done. Method = Adam
Current xi:  [8.052209]
objective value function right now is: -1522.3200882464253
68.0% of gradient descent iterations done. Method = Adam
Current xi:  [5.919998]
objective value function right now is: -1513.6201281257477
70.0% of gradient descent iterations done. Method = Adam
Current xi:  [5.7926497]
objective value function right now is: -1502.3802731367193
72.0% of gradient descent iterations done. Method = Adam
Current xi:  [7.6981053]
objective value function right now is: -1539.7541240593755
74.0% of gradient descent iterations done. Method = Adam
Current xi:  [10.468018]
objective value function right now is: -1533.3829180590478
76.0% of gradient descent iterations done. Method = Adam
Current xi:  [9.779176]
objective value function right now is: -1518.790438998642
78.0% of gradient descent iterations done. Method = Adam
Current xi:  [7.190025]
objective value function right now is: -1520.5916908135964
80.0% of gradient descent iterations done. Method = Adam
Current xi:  [5.079444]
objective value function right now is: -1524.6182049241056
82.0% of gradient descent iterations done. Method = Adam
Current xi:  [4.2123694]
objective value function right now is: -1527.5687033927438
84.0% of gradient descent iterations done. Method = Adam
Current xi:  [-25.40595]
objective value function right now is: -1513.5896907964072
86.0% of gradient descent iterations done. Method = Adam
Current xi:  [-24.414091]
objective value function right now is: -1514.044510315517
88.0% of gradient descent iterations done. Method = Adam
Current xi:  [-23.314049]
objective value function right now is: -1520.6380640991842
90.0% of gradient descent iterations done. Method = Adam
Current xi:  [-22.424526]
objective value function right now is: -1509.653083874199
92.0% of gradient descent iterations done. Method = Adam
Current xi:  [-20.670238]
objective value function right now is: -1532.2061438152455
94.0% of gradient descent iterations done. Method = Adam
Current xi:  [-18.265343]
objective value function right now is: -1530.6044028566491
96.0% of gradient descent iterations done. Method = Adam
Current xi:  [-16.570904]
objective value function right now is: -1532.5115835304516
98.0% of gradient descent iterations done. Method = Adam
Current xi:  [-14.840437]
objective value function right now is: -1522.531936729354
100.0% of gradient descent iterations done. Method = Adam
Current xi:  [-11.57769]
objective value function right now is: -1534.1437228437514
min fval:  -1529.9517577500803
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ 1.2434,  7.7374],
        [-2.3275,  2.5436],
        [ 1.4074, -1.3696],
        [-2.1911,  2.3687],
        [-1.2951,  2.2445],
        [ 0.8634, -0.8598],
        [ 1.0728, -1.0442],
        [-0.7689,  0.9695],
        [-7.4465,  0.2045],
        [-2.1684,  2.3384],
        [-2.1689,  2.3399],
        [-2.1601,  2.3262],
        [-2.1972,  2.3755],
        [-1.1696,  1.7901]], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ 4.3257e+00, -4.0314e+00,  8.5125e-01, -5.6053e+00, -3.2245e-01,
          5.3285e-01,  4.9183e-01,  6.1071e-02,  5.5416e+00, -6.5775e+00,
         -6.5073e+00, -7.9925e+00, -5.7510e+00, -2.8136e-01],
        [-4.6207e+00,  3.2131e+00, -1.4093e+00,  7.0219e+00, -3.7748e-02,
         -8.8899e-01, -8.6558e-01,  4.8809e-03, -6.8881e+00,  8.9604e+00,
          8.2452e+00,  1.0996e+01,  6.5315e+00, -1.8823e-01],
        [-4.1650e+00,  3.8943e+00, -1.2944e+00,  5.2309e+00, -2.2389e-01,
         -4.8252e-01, -1.0604e+00, -2.7545e-01, -5.8920e+00,  6.8312e+00,
          6.4182e+00,  7.8808e+00,  5.5959e+00,  1.5567e-03],
        [ 3.0191e-01,  2.0025e-01,  2.6250e+00,  2.5028e-01,  8.6854e-01,
          2.4013e+00,  2.4939e+00,  1.3896e+00,  1.0325e+00,  2.5758e-01,
          2.5756e-01,  2.6054e-01,  2.4821e-01,  1.0864e+00],
        [ 2.9737e-01,  1.9949e-01,  2.5662e+00,  2.4644e-01,  8.1268e-01,
          2.3292e+00,  2.4181e+00,  1.4413e+00,  9.8652e-01,  2.5408e-01,
          2.5362e-01,  2.5763e-01,  2.4775e-01,  1.0483e+00],
        [ 3.2982e-01,  2.0581e-01,  2.6627e+00,  2.5688e-01,  9.5286e-01,
          2.3279e+00,  2.4995e+00,  1.3910e+00,  1.0364e+00,  2.6171e-01,
          2.5977e-01,  2.6266e-01,  2.5510e-01,  1.0817e+00],
        [ 3.9847e+00, -4.3225e+00,  7.9023e-01, -5.1625e+00, -6.1006e-01,
         -1.3882e-01,  4.9572e-01, -5.1744e-03,  5.2082e+00, -5.8487e+00,
         -5.7898e+00, -6.8671e+00, -5.1538e+00, -7.0891e-01],
        [ 1.2080e+00, -3.0958e+00, -4.1168e-01, -3.7875e+00, -1.2061e+00,
         -7.7960e-01, -6.1319e-01, -7.4729e-01,  5.4355e+00, -4.3390e+00,
         -4.2781e+00, -4.8738e+00, -3.7342e+00, -8.2746e-01],
        [ 3.9861e-01,  2.1935e-01,  2.6110e+00,  2.6122e-01,  9.9187e-01,
          2.2910e+00,  2.4520e+00,  1.5650e+00,  1.0508e+00,  2.7347e-01,
          2.7139e-01,  2.6813e-01,  2.6518e-01,  1.2705e+00],
        [-4.3443e+00,  3.7989e+00, -1.2518e+00,  5.3408e+00,  6.9910e-02,
         -7.4774e-01, -9.9820e-01, -3.9207e-03, -5.9851e+00,  7.0940e+00,
          6.6944e+00,  8.5207e+00,  5.7130e+00, -5.8709e-02],
        [ 2.7761e-01,  1.9924e-01,  2.6543e+00,  2.4748e-01,  7.9106e-01,
          2.3822e+00,  2.4140e+00,  1.3690e+00,  1.0020e+00,  2.5560e-01,
          2.5453e-01,  2.5808e-01,  2.4588e-01,  9.9619e-01],
        [-1.2676e+00, -3.1194e-02, -1.7766e+00,  1.3245e-01, -1.2211e+00,
         -1.5394e+00, -1.3840e+00, -1.5970e+00, -2.5335e+00,  2.7422e-01,
          3.8904e-01,  5.3670e-01,  2.1343e-01, -1.3779e+00],
        [-4.8254e+00,  3.1081e+00, -9.8178e-01,  6.8191e+00,  2.3485e-01,
         -1.0939e+00, -1.0420e+00, -2.1860e-01, -6.7204e+00,  8.6771e+00,
          7.5229e+00,  1.0454e+01,  6.5154e+00,  3.9359e-02],
        [ 2.9804e-01,  2.0453e-01,  2.6349e+00,  2.5397e-01,  8.5043e-01,
          2.3524e+00,  2.5526e+00,  1.4138e+00,  1.0526e+00,  2.6242e-01,
          2.6204e-01,  2.6558e-01,  2.5221e-01,  1.1103e+00]], device='cuda:0')), ('0.model.hidden_layer_3.weight', tensor([[-0.0813, -0.9314, -0.5465, -0.4510, -0.6705, -0.5115, -0.1590, -0.0257,
         -0.5697, -0.5943, -0.6712, -0.0865, -0.8677, -0.6051],
        [ 0.3371,  0.7900,  0.5400,  1.0247,  0.8994,  0.9957,  0.2620,  0.1112,
          0.9729,  0.6122,  0.8768,  0.0330,  0.8079,  0.8898],
        [ 3.4732, -6.5023, -3.5383,  0.8116,  0.7428,  0.5458,  2.6310,  0.9418,
          0.5435, -3.7758,  0.4126,  0.0093, -5.5409,  0.4244],
        [ 0.2749,  0.8168,  0.5126,  0.8331,  0.9203,  0.9750,  0.2660,  0.2425,
          0.9009,  0.6687,  0.9725,  0.0953,  0.7540,  0.8373],
        [ 6.0278, -8.8078, -5.1682,  1.5908,  1.5575,  1.6009,  4.0126,  2.5340,
          1.5830, -5.7232,  1.5219,  0.1289, -8.1905,  1.8674],
        [ 3.3102, -4.1496, -2.3467,  1.1210,  0.8776,  1.0829,  2.4516,  1.3002,
          1.0782, -2.0947,  1.1521,  0.0453, -3.6470,  0.8959],
        [ 0.4239,  0.8403,  0.6897,  0.8995,  0.8366,  0.8228,  0.2918,  0.2886,
          1.0190,  0.6981,  0.7428,  0.1037,  0.8356,  0.7903],
        [ 5.1226, -8.7440, -5.0865,  1.3827,  1.0352,  1.4393,  3.8129,  1.9559,
          1.3975, -5.1401,  1.1255,  0.2890, -8.1127,  1.1861],
        [-0.1061, -0.6190, -0.3969, -0.7112, -0.5063, -0.6800, -0.2406, -0.1527,
         -0.6306, -0.5459, -0.5832, -0.1097, -0.5851, -0.5215],
        [-0.1833, -0.5283, -0.3494, -0.6211, -0.6711, -0.5891, -0.1950, -0.0649,
         -0.6937, -0.3830, -0.6939, -0.0727, -0.5609, -0.7053],
        [ 0.2700,  0.9281,  0.6863,  0.8195,  0.9521,  0.8549,  0.3495,  0.1303,
          0.9077,  0.6748,  0.9782,  0.1345,  0.8727,  0.8053],
        [ 5.3180, -8.6329, -4.9863,  1.2374,  1.0172,  1.2731,  3.6880,  2.2279,
          1.5201, -5.6884,  1.1944,  0.3606, -8.0452,  1.3038],
        [-0.1392, -0.5221, -0.3361, -0.5458, -0.6517, -0.6817, -0.1627, -0.2031,
         -0.6647, -0.3709, -0.5770, -0.0772, -0.4585, -0.6948],
        [-0.0703,  1.4687,  0.7658,  0.8027,  0.8079,  0.7670,  0.1111,  0.1288,
          0.6880,  0.9072,  0.6334,  0.0121,  1.4204,  0.8469]],
       device='cuda:0')), ('0.model.output_layer_4.weight', tensor([[-0.1882,  2.2003, -2.9100,  2.0629, -7.5168, -1.4291,  2.0976, -6.8410,
         -0.1145, -0.1113,  2.3637, -6.2051, -0.0870,  2.1405]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[-1.0769,  2.0416],
        [ 4.5342,  3.4612],
        [-0.4976,  1.9415],
        [ 7.4930,  3.0981],
        [-1.2537,  0.8410],
        [ 0.7310,  2.5749],
        [ 7.8667,  2.9879],
        [ 1.5934, -2.2223],
        [ 6.1366,  3.2759],
        [-2.6086,  1.2085],
        [-0.8757,  1.4761],
        [-1.2148,  0.9626],
        [-1.2803,  0.9844],
        [ 7.0911,  3.0258]], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[  0.4969,  -8.6292,  -7.5430,  -9.3688,  -0.5239,  -9.1784, -10.0293,
           5.5477,  -7.3746,   2.0995,  -4.1382,  -0.9158,  -1.1848,  -8.7868],
        [ -3.2300,  -3.8703,  -2.2830,  -3.4712,  -2.7397,  -1.6164,  -4.1229,
          -4.6368,  -2.5256,   5.7312,  -2.4202,  -2.6174,  -2.5202,  -3.8422],
        [ -1.2612,  -2.9239,  -0.8500,  -3.7119,  -1.1702,  -0.5819,  -3.6574,
          -4.1580,  -2.5678,   4.1345,  -0.9450,  -1.1093,  -1.0726,  -3.4161],
        [ -3.3956,  -3.4809,  -2.4588,  -4.2029,  -2.9549,  -1.7810,  -4.1442,
          -4.5952,  -2.5365,   5.6431,  -2.6263,  -2.8453,  -2.6967,  -3.6327],
        [ -1.4789,  -2.8973,  -1.0357,  -3.7065,  -1.4378,  -0.6638,  -4.1416,
          -4.2732,  -2.5225,   4.6325,  -1.1727,  -1.3385,  -1.2694,  -3.5791],
        [  0.4944,  -6.1121,  -9.2440,  -3.7998,  -5.4077,  -9.4938,  -3.6582,
           4.2748,  -4.4918,   0.2815,  -7.0465,  -5.2810,  -4.8793,  -4.2241],
        [ -5.0964,  -5.2189, -15.0159,   2.3733, -10.4861, -12.0560,   3.0073,
          -0.8927,  -0.8905,  -2.8697, -14.5084, -11.1422, -12.1906,   1.9662],
        [  2.9195,   4.0265,   1.5743,   3.3875,   0.1333,   2.3625,   3.0795,
          -5.7391,   4.4358,   1.2009,   0.9029,   0.3020,   0.4145,   3.1361],
        [ -2.6285,  -3.5744,  -1.8947,  -4.0868,  -2.3124,  -1.3446,  -4.3019,
          -4.3793,  -2.5822,   5.5581,  -2.0432,  -2.2963,  -2.1603,  -3.7365],
        [-13.9563,  -0.6765, -11.7651,  -2.8823, -13.3913,  -7.0435,  -3.2895,
         -14.8133,  -1.4732,   7.5621, -12.5903, -12.9669, -12.4077,  -2.3659],
        [ -4.9491, -13.7353,  -6.0155, -12.9751,   0.7877, -12.4099, -12.7417,
           5.1685, -12.8369,   1.6183,  -2.0760,   0.4278,   0.4003, -12.3814],
        [ -0.8510,  -1.6008,  -0.3826,  -3.0774,  -0.4024,  -0.7446,  -3.3284,
          -2.7431,  -2.2528,   0.2136,  -0.3192,  -0.3624,  -0.2833,  -3.0698],
        [  3.1210,   7.6400,   8.2395,   2.8044,   2.9174,   9.9793,   1.5219,
          -9.9715,   5.2890,   4.5543,   6.1541,   3.4053,   4.1653,   2.8470],
        [  0.8824,   1.4459,   0.8428,   0.9472,   0.9557,   0.9075,   1.0705,
           3.9350,   1.7505,   3.6699,   0.9301,   0.9359,   0.9968,   1.2590]],
       device='cuda:0')), ('1.model.hidden_layer_3.weight', tensor([[-2.9024e+00, -6.9006e-02,  2.0560e-01, -7.7730e-02,  9.1510e-02,
          1.2885e+00, -4.8954e+00, -3.4017e+00, -8.6826e-02, -4.9457e-01,
         -4.8875e+00, -1.7505e-01, -3.4381e+00, -1.5777e-01],
        [ 2.7568e-01,  2.3770e-03,  4.9980e-02,  1.2779e-03,  3.0559e-02,
         -9.6191e-01, -1.8257e+00, -5.3475e+00,  2.2682e-03, -2.9241e-03,
          7.3790e-01,  9.5123e-02, -2.5107e-01, -3.0242e+00],
        [-3.1668e+00, -8.9390e-02,  9.0287e-02, -7.3956e-02, -2.5831e-02,
         -3.4044e-01, -4.2136e+00, -4.1738e+00, -9.2093e-02, -3.8488e-01,
         -1.2911e+00, -1.5237e-02, -2.4868e+00, -1.0098e+00],
        [ 4.4739e+00, -4.0502e+00, -3.3168e+00, -4.3602e+00, -3.2482e+00,
          4.2977e+00, -1.8146e+00, -4.1392e+00, -3.8295e+00,  9.6852e+00,
         -7.8170e+00,  6.3560e-01,  1.4100e-01, -3.5191e+00],
        [ 4.5641e+00, -3.3187e+00, -3.1221e+00, -4.3444e+00, -3.0807e+00,
          3.7644e+00, -2.8698e+00, -3.3666e+00, -3.8704e+00,  9.5005e+00,
         -7.9810e+00, -1.4293e-01, -3.8505e-01, -4.4503e+00],
        [-2.7721e+00,  4.1097e-02,  6.0079e-01,  2.9547e-02,  4.9688e-01,
          1.5292e+00, -5.5659e+00, -2.9667e+00,  1.3710e-01, -1.7032e-01,
         -8.0596e+00,  3.6823e-01, -4.3839e+00,  7.7532e-01],
        [-2.2024e+00, -6.1855e-02,  1.3217e-01, -6.0394e-02,  6.5100e-02,
         -1.2447e+00, -3.4384e+00, -5.0248e+00, -4.4168e-02, -1.8873e-01,
          1.3394e+00,  2.5914e-01, -1.3004e+00, -1.4599e+00],
        [ 1.4535e+00, -1.3834e-03, -1.7683e-02, -4.8588e-04, -1.3432e-02,
         -6.6486e-01, -2.0670e+00, -4.7867e+00, -3.4584e-03, -2.2356e-03,
          2.2562e-01, -3.0242e-02, -2.0357e+00, -3.1492e+00],
        [ 2.9663e+00,  4.5139e+00,  2.3182e+00,  4.4289e+00,  2.3990e+00,
         -9.9649e-01,  6.5112e-01, -3.2311e+00,  3.7275e+00, -1.9830e+00,
          1.2283e+01,  3.7418e-01,  4.3675e+00, -1.3813e+00],
        [ 1.0054e+00, -1.4529e-03, -1.3835e-02, -5.0458e-04, -9.8798e-03,
         -4.4489e-01, -1.9027e+00, -4.7776e+00, -5.5561e-03, -2.3492e-03,
          1.2265e-01, -2.8700e-02, -1.7953e+00, -3.1798e+00],
        [ 7.6550e+00, -1.7684e-01,  6.9553e-01, -1.7074e-01,  4.8222e-01,
          9.1585e-01, -1.5753e+00, -6.6849e+00, -3.4981e-02, -2.5836e-05,
          1.9387e+01,  3.2224e+00, -1.1253e+01, -6.2916e-01],
        [-2.7511e+00,  1.0222e-01,  1.6662e+00,  1.1398e-01,  1.1219e+00,
          2.7294e+00, -6.3222e+00, -2.5784e+00,  2.7102e-01, -4.7151e-01,
         -5.8648e+00,  1.3095e+00, -4.7267e+00,  1.4482e+00],
        [-3.3396e+00,  1.5724e-02,  2.7197e-01,  9.4208e-03,  2.2375e-01,
         -1.1106e+00, -4.0445e+00, -4.4580e+00,  3.6457e-02, -9.2816e-02,
          1.1043e+00,  6.9876e-01, -2.0088e+00, -1.0803e+00],
        [ 8.1089e-01, -1.7908e-01,  2.4896e-01, -1.0076e-01,  4.5473e-02,
          2.4515e+00, -2.4387e+00, -3.1511e+00, -1.7002e-01, -3.4387e+00,
         -4.7025e+00,  8.5700e-01, -1.7023e+00, -8.4973e-01]], device='cuda:0')), ('1.model.output_layer_4.weight', tensor([[-1.5690, -0.4064, -0.9936, -2.2570, -1.6529, -2.5200, -0.9353,  0.1831,
          0.6589,  0.1664,  3.9591, -3.7333, -1.2013, -0.8060],
        [ 1.7936,  0.4970,  1.2052,  2.0268,  1.4345,  2.2868,  0.7458,  0.0448,
         -0.8532,  0.1094, -4.1558,  3.8333,  0.7365,  0.8335]],
       device='cuda:0'))])
xi:  [-22.424526]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 647.1667061837516
W_T_median: 281.3546318621717
W_T_pctile_5: 27.00275188913833
W_T_CVAR_5_pct: -62.32381836074108
Average q (qsum/M+1):  52.10820548765121
Optimal xi:  [-22.424526]
Expected(across Rb) median(across samples) p_equity:  0.3493901660044988
obj fun:  tensor(-1529.9518, device='cuda:0', dtype=torch.float64,
       grad_fn=<MeanBackward0>)
-----------------------------------------------
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 1.0
-----------------------------------------------

Starting at: 
07-02-23_18:32

 Random seed:  2  

Key parameters-------
paths: 256000
iterations: 10
batchsize: 1000
remove neg:  False
yy_fix_feb3


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = B10_and_VWD
timeseries_basket['basket_desc'] = CRSP data: B10 and VWD
timeseries_basket['basket_columns'] = 
['B10_real_ret', 'VWD_real_ret']
############# End: defined asset  basket #################
-----------------------------------------------
No need to read market data.
-----------------------------------------------
3.3333333333333335% of MC simulations done.
6.666666666666667% of MC simulations done.
10.0% of MC simulations done.
13.333333333333334% of MC simulations done.
16.666666666666664% of MC simulations done.
20.0% of MC simulations done.
23.333333333333332% of MC simulations done.
26.666666666666668% of MC simulations done.
30.0% of MC simulations done.
33.33333333333333% of MC simulations done.
36.666666666666664% of MC simulations done.
40.0% of MC simulations done.
43.333333333333336% of MC simulations done.
46.666666666666664% of MC simulations done.
50.0% of MC simulations done.
53.333333333333336% of MC simulations done.
56.666666666666664% of MC simulations done.
60.0% of MC simulations done.
63.33333333333333% of MC simulations done.
66.66666666666666% of MC simulations done.
70.0% of MC simulations done.
73.33333333333333% of MC simulations done.
76.66666666666667% of MC simulations done.
80.0% of MC simulations done.
83.33333333333334% of MC simulations done.
86.66666666666667% of MC simulations done.
90.0% of MC simulations done.
93.33333333333333% of MC simulations done.
96.66666666666667% of MC simulations done.
100.0% of MC simulations done.
Withdrawal NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       1       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      10  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      10  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       1              none   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 10)     True          10  
2     (10, 10)     True          10  
3      (10, 1)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
Allocation NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       2       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      10  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      10  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       2           softmax   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 10)     True          10  
2     (10, 10)     True          10  
3      (10, 2)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
{'methods': ['Adam'], 'output_progress': False, 'tol': 1e-06, 'itbound_scipy_algorithms': 1000, 'check_exit_criteria': False, 'nit_running_min': 1, 'itbound_SGD_algorithms': 10, 'nit_IterateAveragingStart': 9, 'batchsize': 1000, 'SGD_learningrate': 50.0, 'Adagrad_epsilon': 1e-08, 'Adagrad_eta': 1.0, 'Adadelta_ewma': 0.9, 'Adadelta_epsilon': 1e-08, 'RMSprop_ewma': 0.8, 'RMSprop_epsilon': 1e-08, 'RMSprop_eta': 0.1, 'Adam_ewma_1': 0.9, 'Adam_ewma_2': 0.998, 'Adam_eta': 0.0, 'Adam_epsilon': 1e-08, 'Adam_weight_decay': 0.0001, 'running_min_from_avg': False, 'running_min_from_sgd': True, 'lr_schedule': True}
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[  9.8056,   0.3702],
        [ -4.3465,   8.7513],
        [ 11.6827,  -4.5826],
        [  0.3149,  11.8025],
        [ -0.7516,   1.0731],
        [ -0.7516,   1.0731],
        [-33.7974,  -9.1431],
        [  5.3946,  -4.5009],
        [ -0.7516,   1.0731],
        [ 10.9840,   1.5848]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -8.5826,   5.8637,  -9.1605,   9.5059,  -2.6000,  -2.6001,  -8.5071,
          1.6323,  -2.6001, -10.2237], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-4.3069e-02, -1.1202e-01, -5.1012e-02, -2.7575e-01, -1.3719e-02,
         -1.3719e-02, -9.8452e-02, -7.2462e-01, -1.3718e-02, -3.4693e-02],
        [-4.3069e-02, -1.1202e-01, -5.1012e-02, -2.7575e-01, -1.3719e-02,
         -1.3719e-02, -9.8452e-02, -7.2462e-01, -1.3718e-02, -3.4693e-02],
        [-4.3069e-02, -1.1202e-01, -5.1012e-02, -2.7575e-01, -1.3719e-02,
         -1.3719e-02, -9.8452e-02, -7.2462e-01, -1.3718e-02, -3.4693e-02],
        [ 5.2973e+00, -1.0926e+01,  1.1810e+01, -1.5601e+01, -4.0905e-02,
         -4.0919e-02,  1.3139e+01,  2.8679e+00, -4.0979e-02,  1.7610e+01],
        [-4.3069e-02, -1.1202e-01, -5.1012e-02, -2.7575e-01, -1.3719e-02,
         -1.3719e-02, -9.8452e-02, -7.2462e-01, -1.3718e-02, -3.4693e-02],
        [-4.3069e-02, -1.1202e-01, -5.1012e-02, -2.7575e-01, -1.3719e-02,
         -1.3719e-02, -9.8452e-02, -7.2462e-01, -1.3718e-02, -3.4693e-02],
        [-4.3069e-02, -1.1202e-01, -5.1012e-02, -2.7575e-01, -1.3719e-02,
         -1.3719e-02, -9.8452e-02, -7.2462e-01, -1.3718e-02, -3.4693e-02],
        [-1.6569e-01,  3.5122e+00,  1.2751e+00,  1.6088e+01, -9.9319e-02,
         -9.9316e-02,  1.2755e+01, -4.1160e+00, -9.9300e-02, -6.4273e-02],
        [ 4.1958e+00, -1.0778e+01,  1.2722e+01, -1.4714e+01,  8.3874e-02,
          8.3891e-02,  1.2004e+01,  3.9389e+00,  8.3961e-02,  1.5171e+01],
        [-4.3069e-02, -1.1202e-01, -5.1012e-02, -2.7575e-01, -1.3719e-02,
         -1.3719e-02, -9.8452e-02, -7.2462e-01, -1.3718e-02, -3.4693e-02]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.7286, -0.7286, -0.7286,  1.5126, -0.7286, -0.7286, -0.7286, -2.8475,
         2.4285, -0.7286], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 8.8609e-03,  8.8609e-03,  8.8609e-03, -1.4825e+01,  8.8609e-03,
          8.8609e-03,  8.8609e-03,  1.2082e+01, -1.0963e+01,  8.8609e-03]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 17.5169,   2.4047],
        [-11.9075,  -5.4174],
        [ -2.9792,  -0.9803],
        [ -9.7518,  -4.0833],
        [ 11.3921,   5.1641],
        [ 13.7315,  -0.0707],
        [ -8.8519,  10.6386],
        [  7.6684,  14.1374],
        [-16.4605,  -4.5943],
        [ 14.0679,   5.0107]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([-10.0398,  -4.7415,  -4.9321,  -4.8020,   4.9201, -12.9012,  10.5438,
         11.8370,   0.8090,  -3.9403], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-1.8323e+00,  4.5980e+00,  3.9185e-01,  3.6615e+00, -2.6056e+00,
         -5.2731e-02, -2.9941e+00,  7.1657e-01,  1.9169e+00, -3.9848e+00],
        [ 9.5454e+00,  1.7276e+00, -6.8431e-02,  9.5238e-03, -2.5478e+00,
          5.6171e+00,  1.4304e+01,  1.7821e+01, -1.7394e+00,  4.0096e+00],
        [-6.9749e-01, -1.6425e-01,  1.4400e-02, -9.4509e-02, -2.5979e+00,
         -2.4345e-01, -1.8580e-01, -1.0674e+00, -4.0907e-01, -8.7679e-01],
        [-1.5408e+00,  1.3537e+00,  1.1014e-01,  6.5129e-01, -2.6476e+00,
         -2.6944e-01, -5.7968e+00,  1.5919e+00,  1.8653e+00, -2.8750e+00],
        [ 1.5086e+00,  9.7123e+00,  5.2281e-01,  4.8078e+00, -1.4468e+01,
          2.2508e+00,  6.0173e-01, -3.3019e+01,  1.0199e+01, -2.1604e+00],
        [-3.3438e+00,  1.9099e+00, -1.5542e-01,  1.1551e+00, -1.7673e+00,
         -7.1039e+00,  1.1353e+01,  2.7938e+00, -3.5859e+00, -3.1004e+00],
        [-5.8361e+00,  4.0316e+00,  4.1967e-01,  1.6997e+00, -2.4723e+00,
         -6.8854e+00, -5.0376e+00, -3.2686e+01,  1.5702e+01, -6.0404e+00],
        [-7.3342e-01, -1.6558e-01,  1.4866e-02, -9.5380e-02, -2.5807e+00,
         -2.4601e-01, -1.7490e-01, -1.0871e+00, -4.0997e-01, -8.5503e-01],
        [-7.4823e+00,  3.6824e+00,  2.7743e-01,  3.3016e+00,  7.7796e-01,
          6.7700e-01, -9.1973e+00, -5.8992e+00,  3.2522e+00, -2.3277e+00],
        [-2.7056e-02,  1.0243e+00,  2.5504e-01,  9.7638e-01, -2.4098e+00,
          2.7460e-01, -9.3762e+00,  2.3750e+00,  2.9668e+00, -3.1138e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-2.3811, -8.4615, -2.6506, -2.6500,  3.0872, -5.6053,  1.2951, -2.6386,
        -1.2181, -2.5183], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  1.7230,   0.1490,  -0.2400,   1.4434,  14.4126,   0.3764,  -7.1038,
          -0.2402,  -2.2275,   1.6248],
        [ -1.7230,  -0.3536,   0.2400,  -1.4433, -14.4142,  -0.5248,   7.1825,
           0.2402,   2.2745,  -1.6251]], device='cuda:0'))])
loaded xi:  58.6305
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1576.8182150775267
W_T_median: 1136.7449346433505
W_T_pctile_5: -127.64084552288806
W_T_CVAR_5_pct: -295.72244238283764
-----------------------------------------------
new min fval from sgd:  -1492.1848068467664
min fval:  -1492.1848068467664
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[  9.8056,   0.3702],
        [ -4.3465,   8.7513],
        [ 11.6827,  -4.5826],
        [  0.3149,  11.8025],
        [ -0.7516,   1.0731],
        [ -0.7516,   1.0731],
        [-33.7974,  -9.1431],
        [  5.3946,  -4.5009],
        [ -0.7516,   1.0731],
        [ 10.9840,   1.5848]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -8.5826,   5.8637,  -9.1605,   9.5059,  -2.6000,  -2.6001,  -8.5071,
          1.6323,  -2.6001, -10.2237], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-4.3069e-02, -1.1202e-01, -5.1012e-02, -2.7575e-01, -1.3719e-02,
         -1.3719e-02, -9.8452e-02, -7.2462e-01, -1.3718e-02, -3.4693e-02],
        [-4.3069e-02, -1.1202e-01, -5.1012e-02, -2.7575e-01, -1.3719e-02,
         -1.3719e-02, -9.8452e-02, -7.2462e-01, -1.3718e-02, -3.4693e-02],
        [-4.3069e-02, -1.1202e-01, -5.1012e-02, -2.7575e-01, -1.3719e-02,
         -1.3719e-02, -9.8452e-02, -7.2462e-01, -1.3718e-02, -3.4693e-02],
        [ 5.2973e+00, -1.0926e+01,  1.1810e+01, -1.5601e+01, -4.0905e-02,
         -4.0919e-02,  1.3139e+01,  2.8679e+00, -4.0979e-02,  1.7610e+01],
        [-4.3069e-02, -1.1202e-01, -5.1012e-02, -2.7575e-01, -1.3719e-02,
         -1.3719e-02, -9.8452e-02, -7.2462e-01, -1.3718e-02, -3.4693e-02],
        [-4.3069e-02, -1.1202e-01, -5.1012e-02, -2.7575e-01, -1.3719e-02,
         -1.3719e-02, -9.8452e-02, -7.2462e-01, -1.3718e-02, -3.4693e-02],
        [-4.3069e-02, -1.1202e-01, -5.1012e-02, -2.7575e-01, -1.3719e-02,
         -1.3719e-02, -9.8452e-02, -7.2462e-01, -1.3718e-02, -3.4693e-02],
        [-1.6569e-01,  3.5122e+00,  1.2751e+00,  1.6088e+01, -9.9319e-02,
         -9.9316e-02,  1.2755e+01, -4.1160e+00, -9.9300e-02, -6.4273e-02],
        [ 4.1958e+00, -1.0778e+01,  1.2722e+01, -1.4714e+01,  8.3874e-02,
          8.3891e-02,  1.2004e+01,  3.9389e+00,  8.3961e-02,  1.5171e+01],
        [-4.3069e-02, -1.1202e-01, -5.1012e-02, -2.7575e-01, -1.3719e-02,
         -1.3719e-02, -9.8452e-02, -7.2462e-01, -1.3718e-02, -3.4693e-02]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.7286, -0.7286, -0.7286,  1.5126, -0.7286, -0.7286, -0.7286, -2.8475,
         2.4285, -0.7286], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 8.8609e-03,  8.8609e-03,  8.8609e-03, -1.4825e+01,  8.8609e-03,
          8.8609e-03,  8.8609e-03,  1.2082e+01, -1.0963e+01,  8.8609e-03]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 17.5169,   2.4047],
        [-11.9075,  -5.4174],
        [ -2.9792,  -0.9803],
        [ -9.7518,  -4.0833],
        [ 11.3921,   5.1641],
        [ 13.7315,  -0.0707],
        [ -8.8519,  10.6386],
        [  7.6684,  14.1374],
        [-16.4605,  -4.5943],
        [ 14.0679,   5.0107]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([-10.0398,  -4.7415,  -4.9321,  -4.8020,   4.9201, -12.9012,  10.5438,
         11.8370,   0.8090,  -3.9403], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-1.8323e+00,  4.5980e+00,  3.9185e-01,  3.6615e+00, -2.6056e+00,
         -5.2731e-02, -2.9941e+00,  7.1657e-01,  1.9169e+00, -3.9848e+00],
        [ 9.5454e+00,  1.7276e+00, -6.8431e-02,  9.5238e-03, -2.5478e+00,
          5.6171e+00,  1.4304e+01,  1.7821e+01, -1.7394e+00,  4.0096e+00],
        [-6.9749e-01, -1.6425e-01,  1.4400e-02, -9.4509e-02, -2.5979e+00,
         -2.4345e-01, -1.8580e-01, -1.0674e+00, -4.0907e-01, -8.7679e-01],
        [-1.5408e+00,  1.3537e+00,  1.1014e-01,  6.5129e-01, -2.6476e+00,
         -2.6944e-01, -5.7968e+00,  1.5919e+00,  1.8653e+00, -2.8750e+00],
        [ 1.5086e+00,  9.7123e+00,  5.2281e-01,  4.8078e+00, -1.4468e+01,
          2.2508e+00,  6.0173e-01, -3.3019e+01,  1.0199e+01, -2.1604e+00],
        [-3.3438e+00,  1.9099e+00, -1.5542e-01,  1.1551e+00, -1.7673e+00,
         -7.1039e+00,  1.1353e+01,  2.7938e+00, -3.5859e+00, -3.1004e+00],
        [-5.8361e+00,  4.0316e+00,  4.1967e-01,  1.6997e+00, -2.4723e+00,
         -6.8854e+00, -5.0376e+00, -3.2686e+01,  1.5702e+01, -6.0404e+00],
        [-7.3342e-01, -1.6558e-01,  1.4866e-02, -9.5380e-02, -2.5807e+00,
         -2.4601e-01, -1.7490e-01, -1.0871e+00, -4.0997e-01, -8.5503e-01],
        [-7.4823e+00,  3.6824e+00,  2.7743e-01,  3.3016e+00,  7.7796e-01,
          6.7700e-01, -9.1973e+00, -5.8992e+00,  3.2522e+00, -2.3277e+00],
        [-2.7056e-02,  1.0243e+00,  2.5504e-01,  9.7638e-01, -2.4098e+00,
          2.7460e-01, -9.3762e+00,  2.3750e+00,  2.9668e+00, -3.1138e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-2.3811, -8.4615, -2.6506, -2.6500,  3.0872, -5.6053,  1.2951, -2.6386,
        -1.2181, -2.5183], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  1.7230,   0.1490,  -0.2400,   1.4434,  14.4126,   0.3764,  -7.1038,
          -0.2402,  -2.2275,   1.6248],
        [ -1.7230,  -0.3536,   0.2400,  -1.4433, -14.4142,  -0.5248,   7.1825,
           0.2402,   2.2745,  -1.6251]], device='cuda:0'))])
xi:  [58.6305]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 464.30835958553087
W_T_median: 205.01386557418658
W_T_pctile_5: 37.18270787877248
W_T_CVAR_5_pct: -58.006266219677066
Average q (qsum/M+1):  52.32782966859879
Optimal xi:  [58.6305]
Observed VAR:  205.01386557418658
Expected(across Rb) median(across samples) p_equity:  0.28651109461983043
obj fun:  tensor(-1492.1848, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
[0.0, 100.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 1000.0, 1100.0, 1200.0, 1300.0, 1400.0, 1500.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0]
[0.0, 100.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 1000.0, 1100.0, 1200.0, 1300.0, 1400.0, 1500.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0]
[0.0, 100.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 1000.0, 1100.0, 1200.0, 1300.0, 1400.0, 1500.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0]
256000
255888
255763
255574
255271
254965
254563
254198
253767
253250
252756
252279
251720
251235
250721
250169
249709
249199
248677
248207
247838
247346
246855
246293
245772
245251
244582
243928
243116
242217
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 1.0
-----------------------------------------------

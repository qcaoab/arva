Starting at: 
20-03-23_20:22

 numpy seed:  3  


 pytorch seed:  3  

Key parameters-------
paths: 256000
iterations: 100000
batchsize: 1000
remove neg:  False
w constaint activation:  yy_fix_jan29


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = B10_and_VWD
timeseries_basket['basket_desc'] = CRSP data: B10 and VWD
timeseries_basket['basket_columns'] = 
['B10_real_ret', 'VWD_real_ret']
############# End: defined asset  basket #################
-----------------------------------------------
No need to read market data.
-----------------------------------------------
3.3333333333333335% of MC simulations done.
6.666666666666667% of MC simulations done.
10.0% of MC simulations done.
13.333333333333334% of MC simulations done.
16.666666666666664% of MC simulations done.
20.0% of MC simulations done.
23.333333333333332% of MC simulations done.
26.666666666666668% of MC simulations done.
30.0% of MC simulations done.
33.33333333333333% of MC simulations done.
36.666666666666664% of MC simulations done.
40.0% of MC simulations done.
43.333333333333336% of MC simulations done.
46.666666666666664% of MC simulations done.
50.0% of MC simulations done.
53.333333333333336% of MC simulations done.
56.666666666666664% of MC simulations done.
60.0% of MC simulations done.
63.33333333333333% of MC simulations done.
66.66666666666666% of MC simulations done.
70.0% of MC simulations done.
73.33333333333333% of MC simulations done.
76.66666666666667% of MC simulations done.
80.0% of MC simulations done.
83.33333333333334% of MC simulations done.
86.66666666666667% of MC simulations done.
90.0% of MC simulations done.
93.33333333333333% of MC simulations done.
96.66666666666667% of MC simulations done.
100.0% of MC simulations done.
Withdrawal NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       1       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      10  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      10  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       1              none   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 10)     True          10  
2     (10, 10)     True          10  
3      (10, 1)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
Allocation NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  hidden_layer    None       None         None   
4        obj.layers[4]        4  output_layer       2       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  
4    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      10  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      10  logistic_sigmoid   
3        obj.layers[3]        3  hidden_layer      10  logistic_sigmoid   
4        obj.layers[4]        4  output_layer       2           softmax   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 10)     True          10  
2     (10, 10)     True          10  
3     (10, 10)     True          10  
4      (10, 2)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  hidden_layer       10  logistic_sigmoid   
0        obj.layers[4]         4  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
{'methods': ['Adam'], 'output_progress': False, 'tol': 1e-06, 'itbound_scipy_algorithms': 1000, 'check_exit_criteria': False, 'nit_running_min': 10000, 'itbound_SGD_algorithms': 100000, 'nit_IterateAveragingStart': 90000, 'batchsize': 1000, 'SGD_learningrate': 50.0, 'Adagrad_epsilon': 1e-08, 'Adagrad_eta': 1.0, 'Adadelta_ewma': 0.9, 'Adadelta_epsilon': 1e-08, 'RMSprop_ewma': 0.8, 'RMSprop_epsilon': 1e-08, 'RMSprop_eta': 0.1, 'Adam_ewma_1': 0.9, 'Adam_ewma_2': 0.998, 'Adam_eta': 0.05, 'Adam_epsilon': 1e-08, 'Adam_weight_decay': 0.0001, 'running_min_from_avg': False, 'running_min_from_sgd': True, 'lr_schedule': True}
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  hidden_layer       10  logistic_sigmoid   
0        obj.layers[4]         4  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
2.0% of gradient descent iterations done. Method = Adam
new min fval:  -1545.7891650198799
Current xi:  [76.73684]
objective value function right now is: -1545.7891650198799
4.0% of gradient descent iterations done. Method = Adam
new min fval:  -1552.61401197555
Current xi:  [66.77115]
objective value function right now is: -1552.61401197555
6.0% of gradient descent iterations done. Method = Adam
new min fval:  -1557.0404556713568
Current xi:  [63.28794]
objective value function right now is: -1557.0404556713568
8.0% of gradient descent iterations done. Method = Adam
new min fval:  -1559.1294760060218
Current xi:  [61.71033]
objective value function right now is: -1559.1294760060218
10.0% of gradient descent iterations done. Method = Adam
Current xi:  [60.84614]
objective value function right now is: -1539.742258109532
12.0% of gradient descent iterations done. Method = Adam
Current xi:  [60.438213]
objective value function right now is: -1556.0840758947772
14.000000000000002% of gradient descent iterations done. Method = Adam
new min fval:  -1563.8652238535194
Current xi:  [60.282257]
objective value function right now is: -1563.8652238535194
16.0% of gradient descent iterations done. Method = Adam
Current xi:  [60.587826]
objective value function right now is: -1560.0853602446598
18.0% of gradient descent iterations done. Method = Adam
Current xi:  [48.98594]
objective value function right now is: -1555.0094576389915
20.0% of gradient descent iterations done. Method = Adam
Current xi:  [50.684883]
objective value function right now is: -1556.9899170100732
22.0% of gradient descent iterations done. Method = Adam
Current xi:  [50.222076]
objective value function right now is: -1550.219803547765
24.0% of gradient descent iterations done. Method = Adam
Current xi:  [52.33259]
objective value function right now is: -1556.5829442684424
26.0% of gradient descent iterations done. Method = Adam
Current xi:  [54.54823]
objective value function right now is: -1554.0600145960025
28.000000000000004% of gradient descent iterations done. Method = Adam
Current xi:  [55.993187]
objective value function right now is: -1558.062216449209
30.0% of gradient descent iterations done. Method = Adam
Current xi:  [57.312622]
objective value function right now is: -1562.6313060451234
32.0% of gradient descent iterations done. Method = Adam
Current xi:  [57.73156]
objective value function right now is: -1554.578904714536
34.0% of gradient descent iterations done. Method = Adam
Current xi:  [57.8352]
objective value function right now is: -1556.9539757412847
36.0% of gradient descent iterations done. Method = Adam
Current xi:  [58.43691]
objective value function right now is: -1560.2864204868624
38.0% of gradient descent iterations done. Method = Adam
Current xi:  [58.986263]
objective value function right now is: -1558.4072840828117
40.0% of gradient descent iterations done. Method = Adam
Current xi:  [59.07229]
objective value function right now is: -1559.1742485284
42.0% of gradient descent iterations done. Method = Adam
Current xi:  [57.871906]
objective value function right now is: -1559.2092334717643
44.0% of gradient descent iterations done. Method = Adam
Current xi:  [58.65603]
objective value function right now is: -1557.32191831196
46.0% of gradient descent iterations done. Method = Adam
Current xi:  [58.694477]
objective value function right now is: -1561.687001896268
48.0% of gradient descent iterations done. Method = Adam
Current xi:  [58.848072]
objective value function right now is: -1563.6999546585992
50.0% of gradient descent iterations done. Method = Adam
Current xi:  [59.644123]
objective value function right now is: -1563.5999327261604
52.0% of gradient descent iterations done. Method = Adam
Current xi:  [59.25666]
objective value function right now is: -1558.0666902349485
54.0% of gradient descent iterations done. Method = Adam
Current xi:  [56.409676]
objective value function right now is: -1469.2903467483125
56.00000000000001% of gradient descent iterations done. Method = Adam
Current xi:  [34.971783]
objective value function right now is: -1534.0145409922077
57.99999999999999% of gradient descent iterations done. Method = Adam
Current xi:  [25.417387]
objective value function right now is: -1520.633769963308
60.0% of gradient descent iterations done. Method = Adam
Current xi:  [8.911031]
objective value function right now is: -1532.742196207074
62.0% of gradient descent iterations done. Method = Adam
Current xi:  [7.8542886]
objective value function right now is: -1553.3450713489344
64.0% of gradient descent iterations done. Method = Adam
Current xi:  [-0.06044115]
objective value function right now is: -1555.684007833595
66.0% of gradient descent iterations done. Method = Adam
Current xi:  [-0.00980079]
objective value function right now is: -1555.1598037974927
68.0% of gradient descent iterations done. Method = Adam
Current xi:  [-0.00366791]
objective value function right now is: -1556.3095100210721
70.0% of gradient descent iterations done. Method = Adam
Current xi:  [-0.00779737]
objective value function right now is: -1546.693845820002
72.0% of gradient descent iterations done. Method = Adam
Current xi:  [-0.00307401]
objective value function right now is: -1558.4405522156087
74.0% of gradient descent iterations done. Method = Adam
Current xi:  [-0.00814355]
objective value function right now is: -1557.3490386056337
76.0% of gradient descent iterations done. Method = Adam
Current xi:  [-0.00664124]
objective value function right now is: -1559.883414491806
78.0% of gradient descent iterations done. Method = Adam
Current xi:  [-0.00983304]
objective value function right now is: -1561.058446549511
80.0% of gradient descent iterations done. Method = Adam
Current xi:  [0.00146006]
objective value function right now is: -1560.8296470007087
82.0% of gradient descent iterations done. Method = Adam
Current xi:  [-0.00155267]
objective value function right now is: -1561.2297652814425
84.0% of gradient descent iterations done. Method = Adam
Current xi:  [0.00026709]
objective value function right now is: -1560.9341409195233
86.0% of gradient descent iterations done. Method = Adam
Current xi:  [-0.00418771]
objective value function right now is: -1561.5595083213695
88.0% of gradient descent iterations done. Method = Adam
Current xi:  [-0.00081033]
objective value function right now is: -1560.9096392922806
90.0% of gradient descent iterations done. Method = Adam
Current xi:  [0.00033915]
objective value function right now is: -1560.8400895112866
92.0% of gradient descent iterations done. Method = Adam
Current xi:  [-0.00279388]
objective value function right now is: -1561.615227669198
94.0% of gradient descent iterations done. Method = Adam
Current xi:  [-0.01349095]
objective value function right now is: -1561.2941434383922
96.0% of gradient descent iterations done. Method = Adam
Current xi:  [-0.01218124]
objective value function right now is: -1561.413933122516
98.0% of gradient descent iterations done. Method = Adam
Current xi:  [-3.3402495e-05]
objective value function right now is: -1562.4295091602335
100.0% of gradient descent iterations done. Method = Adam
Current xi:  [-0.00091038]
objective value function right now is: -1562.5318199087308
min fval:  -1534.982133931674
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -8.5260,   8.0102],
        [ -1.5681,   1.9296],
        [ 10.6889,   4.7218],
        [  2.7345,  -6.7698],
        [ -1.9683,   2.1809],
        [ -7.6924,  -8.2364],
        [ -6.2499,  -7.0668],
        [  9.1744,  -1.6006],
        [-60.4988,  -5.7031],
        [  8.5426,  -1.4236]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ 7.0294, -4.7263, -9.7119, -6.2710, -4.4005, -6.3803, -5.8946, -8.4010,
        -5.6735, -8.2748], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-1.1258e+00, -5.0775e-03, -1.0299e-01, -1.2441e+00,  6.2102e-03,
         -9.7866e-01, -8.3775e-01, -2.5943e-01, -4.6073e-01, -1.8448e-01],
        [-1.4237e+01,  3.6303e-02,  1.3742e+01,  5.4961e+00, -1.0440e-01,
          9.6513e+00,  6.4629e+00,  5.8943e+00,  8.1485e+00,  4.5762e+00],
        [-1.4676e+01,  3.8340e-02,  1.3960e+01,  5.3800e+00, -4.6726e-02,
          8.9733e+00,  6.4098e+00,  5.5983e+00,  9.0684e+00,  4.8276e+00],
        [-1.4946e+01, -3.7037e-02, -1.0153e-01,  5.4347e+00,  2.6040e-02,
          8.6734e+00,  5.3281e+00,  1.9032e-01,  6.7676e+00,  1.5701e-02],
        [-1.1255e+00, -6.1569e-03, -1.0320e-01, -1.2457e+00,  3.9496e-03,
         -9.7799e-01, -8.3690e-01, -2.6017e-01, -4.6017e-01, -1.8516e-01],
        [-1.1258e+00, -5.1334e-03, -1.0299e-01, -1.2441e+00,  6.0536e-03,
         -9.7866e-01, -8.3775e-01, -2.5943e-01, -4.6073e-01, -1.8448e-01],
        [ 9.7141e+00,  2.7070e-01, -9.4516e+00, -4.0749e+00,  4.6320e-01,
         -6.0092e+00, -2.5194e+00, -6.3292e+00, -3.9717e+00, -4.6536e+00],
        [-1.3533e+01, -4.1606e-02,  9.7842e-03,  4.2600e+00, -4.4519e-03,
          6.7850e+00,  4.4601e+00,  6.1902e-01,  6.6022e+00,  2.4228e-01],
        [-1.1254e+00, -5.6883e-03, -1.0335e-01, -1.2468e+00,  5.8955e-03,
         -9.7767e-01, -8.3640e-01, -2.6069e-01, -4.6010e-01, -1.8564e-01],
        [-1.1258e+00, -5.6166e-03, -1.0299e-01, -1.2442e+00,  4.6455e-03,
         -9.7866e-01, -8.3775e-01, -2.5943e-01, -4.6073e-01, -1.8448e-01]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-3.3195, -3.0810, -2.9860, -2.7951, -3.3217, -3.3195,  4.0452, -2.8461,
        -3.3230, -3.3195], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-0.0698, -8.2760, -7.8863, -5.5136, -0.0697, -0.0698, 12.9116, -4.5649,
         -0.0697, -0.0698]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 1.0034, 10.1229],
        [10.3445,  0.5852],
        [ 0.5380,  6.9429],
        [ 9.8606,  1.5359],
        [ 3.5978,  9.3286],
        [10.3416,  2.7519],
        [ 6.5392,  7.7891],
        [ 3.5516,  8.2419],
        [-8.9091, -2.1388],
        [ 8.7344,  7.3687]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ 8.5798, -6.9196,  1.0943, -5.7828,  7.2072, -0.4169,  3.8863,  3.5667,
         0.9438,  4.6394], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-3.5270e+00, -2.1233e+00, -1.1817e+00, -1.5591e+00, -2.5519e+00,
         -3.3921e+00,  5.1663e-01,  1.0701e+00, -7.1153e-01, -4.7099e-01],
        [-3.1605e+00,  1.9054e-01, -2.9229e+00,  1.2180e-01, -1.0822e+00,
         -4.4165e+00,  6.6411e-01, -1.2950e+00, -1.3237e+00, -6.6337e-01],
        [-3.8956e+00, -1.0919e+00, -1.0527e-02, -8.4141e-01, -3.1832e+00,
         -4.5290e+00, -5.0021e-01, -1.4708e-01,  2.8375e+00, -2.4306e+00],
        [-2.1199e+00,  4.6141e-01, -2.5505e-01,  4.3455e-01, -1.2022e+00,
         -3.6781e+00,  1.7122e-01,  1.5839e-02,  4.5341e-02, -6.7869e-01],
        [ 1.6180e-01, -6.7747e+00,  6.8846e+00, -4.3629e+00,  2.5514e-02,
         -3.4051e+00,  2.1503e+00,  5.1008e+00,  1.3962e+00,  6.7794e-02],
        [-1.4816e+01, -6.1823e+00, -1.3191e+00, -4.5371e+00, -1.2674e+01,
         -4.2071e+00, -6.5276e+00, -6.7548e+00,  8.6449e+00, -4.8899e+00],
        [-1.3278e+00, -2.7333e+00,  1.1840e+00, -2.6303e+00, -2.9165e-01,
         -4.2291e+00,  9.9392e-01,  1.8825e+00,  1.3247e-01, -9.4341e-02],
        [-6.3207e+00, -9.1369e+00, -4.1345e-01, -7.8162e+00, -1.2258e+01,
         -1.2659e+01, -1.3818e+01, -9.0872e+00,  9.1203e+00, -1.8911e+01],
        [-2.2659e+01, -5.0681e+00, -1.5622e+00, -3.0138e+00, -8.7370e+00,
         -1.6111e+00, -5.0415e-01, -6.7585e-01,  8.4668e+00, -1.6999e+00],
        [-3.3931e+00, -1.9990e+00, -8.7992e-01, -1.9349e+00, -1.2458e+00,
         -3.4709e+00,  1.8218e-01,  6.0989e-01, -3.1732e-02, -4.1539e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-2.5006, -3.6749, -3.2590, -3.1865, -2.8945,  4.9994, -2.9531,  0.9503,
         4.9061, -2.6073], device='cuda:0')), ('1.model.hidden_layer_3.weight', tensor([[ 1.7198e+00,  7.5935e-01,  2.2784e+00,  8.8528e-01,  1.1693e+00,
          2.2847e+00,  1.9156e+00,  1.2727e+01, -6.6365e+00,  1.6910e+00],
        [-1.0200e-03, -1.6343e-03,  3.6979e-02,  2.5959e-02, -6.6671e-02,
         -8.9610e-02,  2.0494e-02,  6.9997e-03, -1.2514e+00,  2.2771e-02],
        [-9.6582e-03, -4.4083e-02,  3.1393e-02, -1.7485e-02,  3.2731e-02,
         -1.3152e-01, -9.0880e-05,  3.6060e-02, -1.9413e+00,  7.2852e-04],
        [-4.4195e-03, -1.9649e-03,  3.3457e-02,  1.8972e-02, -4.6856e-02,
         -1.0026e-01,  9.4992e-03,  1.5631e-02, -1.3785e+00,  1.7806e-02],
        [-1.0342e-02, -1.1177e-01,  2.9739e-02, -2.6291e-02,  7.3792e-02,
         -1.4742e-01,  1.1581e-02,  5.6471e-02, -2.2205e+00, -1.1192e-04],
        [-1.9843e-03, -1.6665e-03,  3.6610e-02,  2.4431e-02, -6.1644e-02,
         -9.2328e-02,  1.7495e-02,  9.2375e-03, -1.2830e+00,  2.1592e-02],
        [-9.5229e-04, -1.6329e-03,  3.6922e-02,  2.6004e-02, -6.6991e-02,
         -8.9447e-02,  2.0662e-02,  6.9837e-03, -1.2496e+00,  2.2856e-02],
        [-9.1744e-03, -1.9521e-02,  2.8878e-02, -8.2445e-03,  9.1821e-03,
         -1.2369e-01, -3.1499e-03,  2.8381e-02, -1.7728e+00,  3.8928e-03],
        [-1.0078e-02, -8.6709e-02,  3.1497e-02, -2.4247e-02,  6.0544e-02,
         -1.4182e-01,  7.1895e-03,  4.9201e-02, -2.1301e+00, -3.7232e-04],
        [ 2.1295e+00,  9.4232e-01,  1.0736e+00,  8.1093e-01,  2.6290e+00,
          8.7366e+00,  1.8468e+00, -1.4417e+01,  3.8892e+00,  1.7011e+00]],
       device='cuda:0')), ('1.model.hidden_layer_3.bias', tensor([-2.6105, -7.9082, -7.5059, -7.8602, -7.2908, -7.8960, -7.9080, -7.6287,
        -7.3658, -7.2027], device='cuda:0')), ('1.model.output_layer_4.weight', tensor([[ 4.9642,  0.6524,  1.1954,  0.7442,  1.3307,  0.5251,  0.6136,  1.2017,
          1.2869, -5.0761],
        [-4.5567, -0.5253, -1.1872, -0.6770, -1.4541, -0.7106, -0.5598, -0.9205,
         -1.3849,  4.6271]], device='cuda:0'))])
xi:  [0.00033915]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 468.5361213109187
W_T_median: 263.654318697934
W_T_pctile_5: 60.933247115456204
W_T_CVAR_5_pct: -38.73597120492567
Average q (qsum/M+1):  51.71505245085685
Optimal xi:  [0.00033915]
Expected(across Rb) median(across samples) p_equity:  0.3137448767820994
obj fun:  tensor(-1534.9821, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 1.0
-----------------------------------------------

Starting at: 
2022-11-05 12:51:40


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = B10_and_VWD
timeseries_basket['basket_desc'] = CRSP data: B10 and VWD
timeseries_basket['basket_columns'] = 
['B10_real_ret', 'VWD_real_ret']
############# End: defined asset  basket #################
-----------------------------------------------
No need to read market data.
-----------------------------------------------
3.3333333333333335% of MC simulations done.
6.666666666666667% of MC simulations done.
10.0% of MC simulations done.
13.333333333333334% of MC simulations done.
16.666666666666664% of MC simulations done.
20.0% of MC simulations done.
23.333333333333332% of MC simulations done.
26.666666666666668% of MC simulations done.
30.0% of MC simulations done.
33.33333333333333% of MC simulations done.
36.666666666666664% of MC simulations done.
40.0% of MC simulations done.
43.333333333333336% of MC simulations done.
46.666666666666664% of MC simulations done.
50.0% of MC simulations done.
53.333333333333336% of MC simulations done.
56.666666666666664% of MC simulations done.
60.0% of MC simulations done.
63.33333333333333% of MC simulations done.
66.66666666666666% of MC simulations done.
70.0% of MC simulations done.
73.33333333333333% of MC simulations done.
76.66666666666667% of MC simulations done.
80.0% of MC simulations done.
83.33333333333334% of MC simulations done.
86.66666666666667% of MC simulations done.
90.0% of MC simulations done.
93.33333333333333% of MC simulations done.
96.66666666666667% of MC simulations done.
100.0% of MC simulations done.
Withdrawal NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       1       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer       4  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer       4  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       1  logistic_sigmoid   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1       (2, 4)    False        None  
2       (4, 4)    False        None  
3       (4, 1)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
Allocation NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       2       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer       4  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer       4  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       2           softmax   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1       (2, 4)    False        None  
2       (4, 4)    False        None  
3       (4, 2)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer        4  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer        4  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1  logistic_sigmoid   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0       (2, 4)     False        None  
0       (4, 4)     False        None  
0       (4, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer        4  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer        4  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0       (2, 4)     False        None  
0       (4, 4)     False        None  
0       (4, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.4 0.6]
W_T_mean: 2863.036954357454
W_T_median: 1763.1775421203392
W_T_pctile_5: -229.45460148521377
W_T_CVAR_5_pct: -436.20258253384776
-----------------------------------------------
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/fun_construct_Feature_vector.py:82: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  wealth_n = torch.tensor(wealth_n, device=params["device"])
2.0% of gradient descent iterations done. Method = A
objective value function right now is: -956.9288598171512
4.0% of gradient descent iterations done. Method = A
objective value function right now is: -1025.7581773177062
6.0% of gradient descent iterations done. Method = A
objective value function right now is: -1037.1265790792852
8.0% of gradient descent iterations done. Method = A
objective value function right now is: -1041.1845011364271
10.0% of gradient descent iterations done. Method = A
objective value function right now is: -1043.6204194872644
12.0% of gradient descent iterations done. Method = A
objective value function right now is: -1047.7221760567736
14.000000000000002% of gradient descent iterations done. Method = A
objective value function right now is: -1058.544272417615
16.0% of gradient descent iterations done. Method = A
objective value function right now is: -1139.3108120896422
18.0% of gradient descent iterations done. Method = A
objective value function right now is: -1188.7466995873347
20.0% of gradient descent iterations done. Method = A
objective value function right now is: -1236.8179171077527
22.0% of gradient descent iterations done. Method = A
objective value function right now is: -1309.9268395936597
24.0% of gradient descent iterations done. Method = A
objective value function right now is: -1359.459905494887
26.0% of gradient descent iterations done. Method = A
objective value function right now is: -1386.6595505882162
28.000000000000004% of gradient descent iterations done. Method = A
objective value function right now is: -1406.3455564960177
30.0% of gradient descent iterations done. Method = A
objective value function right now is: -1418.300351009893
32.0% of gradient descent iterations done. Method = A
objective value function right now is: -1429.3475926062868
34.0% of gradient descent iterations done. Method = A
objective value function right now is: -1437.1933737997776
36.0% of gradient descent iterations done. Method = A
objective value function right now is: -1440.1660984962152
38.0% of gradient descent iterations done. Method = A
objective value function right now is: -1447.6671484142316
40.0% of gradient descent iterations done. Method = A
objective value function right now is: -1452.9009663525467
42.0% of gradient descent iterations done. Method = A
objective value function right now is: -1454.8475151417626
44.0% of gradient descent iterations done. Method = A
objective value function right now is: -1456.49479699153
46.0% of gradient descent iterations done. Method = A
objective value function right now is: -1462.359544935663
48.0% of gradient descent iterations done. Method = A
objective value function right now is: -1462.9322046186353
50.0% of gradient descent iterations done. Method = A
objective value function right now is: -1465.5964828073909
52.0% of gradient descent iterations done. Method = A
objective value function right now is: -1464.8898006584338
54.0% of gradient descent iterations done. Method = A
objective value function right now is: -1466.1925921919674
56.00000000000001% of gradient descent iterations done. Method = A
objective value function right now is: -1469.2510281422049
57.99999999999999% of gradient descent iterations done. Method = A
objective value function right now is: -1471.0647250830446
60.0% of gradient descent iterations done. Method = A
objective value function right now is: -1473.0385300840728
62.0% of gradient descent iterations done. Method = A
objective value function right now is: -1471.868191233084
64.0% of gradient descent iterations done. Method = A
objective value function right now is: -1472.918634116523
66.0% of gradient descent iterations done. Method = A
objective value function right now is: -1474.6546869332956
68.0% of gradient descent iterations done. Method = A
objective value function right now is: -1474.519388112979
70.0% of gradient descent iterations done. Method = A
objective value function right now is: -1475.457347134693
72.0% of gradient descent iterations done. Method = A
objective value function right now is: -1476.719559536977
74.0% of gradient descent iterations done. Method = A
objective value function right now is: -1477.2289230175122
76.0% of gradient descent iterations done. Method = A
objective value function right now is: -1478.4119960385724
78.0% of gradient descent iterations done. Method = A
objective value function right now is: -1478.046411451897
80.0% of gradient descent iterations done. Method = A
objective value function right now is: -1478.1069147358892
82.0% of gradient descent iterations done. Method = A
objective value function right now is: -1480.3588364330187
84.0% of gradient descent iterations done. Method = A
objective value function right now is: -1479.5233967698089
86.0% of gradient descent iterations done. Method = A
objective value function right now is: -1480.253578642962
88.0% of gradient descent iterations done. Method = A
objective value function right now is: -1482.4710862894926
90.0% of gradient descent iterations done. Method = A
objective value function right now is: -1481.852146404561
92.0% of gradient descent iterations done. Method = A
objective value function right now is: -1483.732716137401
94.0% of gradient descent iterations done. Method = A
objective value function right now is: -1483.3268117912748
96.0% of gradient descent iterations done. Method = A
objective value function right now is: -1485.0357542065262
98.0% of gradient descent iterations done. Method = A
objective value function right now is: -1485.4094346631541
100.0% of gradient descent iterations done. Method = A
objective value function right now is: -1485.6002455525208
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 284.60275712595507
W_T_median: 88.23898260909746
W_T_pctile_5: -28.2168080453864
W_T_CVAR_5_pct: -152.4556567976125
Average q (qsum/M+1):  53.071430821572584
Final xi value (not averaged):  [0.]
Expected(across Rb) median(across samples) p_equity:  0.27117954989274345
-----------------------------------------------
Traceback (most recent call last):
  File "/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/decumulation_driver.py", line 807, in <module>
    fun_RUN__wrapper.RUN__wrapper_ONE_stage_optimization(
  File "/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/fun_RUN__wrapper.py", line 115, in RUN__wrapper_ONE_stage_optimization
    RUN__wrapper_training_testing_NN(
  File "/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/fun_RUN__wrapper.py", line 194, in RUN__wrapper_training_testing_NN
    params_TRAIN, res_BEST, _, res_ALL_dataframe = fun_train_NN.train_NN( theta0 = theta0,
  File "/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/fun_train_NN.py", line 196, in train_NN
    result_pyt_adam = run_Gradient_Descent_pytorch(NN_list= NN_list,
  File "/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/fun_train_NN_SGD_algorithms.py", line 243, in run_Gradient_Descent_pytorch
    F_theta = np.append(NN_object.theta, xi_np)    
NameError: name 'NN_object' is not defined. Did you mean: 'object'?

Starting at: 
30-05-23_13:57

 numpy seed:  3  


 pytorch seed:  3  

Key parameters-------
paths: 256000
iterations: 10
batchsize: 1000
remove neg:  False
w constaint activation:  yy_fix_jan29


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = B10_and_VWD
timeseries_basket['basket_desc'] = CRSP data: B10 and VWD
timeseries_basket['basket_columns'] = 
['B10_real_ret', 'VWD_real_ret']
############# End: defined asset  basket #################
               CPI  CPI_nom_ret  ...  VWD_real_ret  EWD_real_ret
date                             ...                            
192512  100.000000          NaN  ...           NaN           NaN
192601  100.000000     0.000000  ...      0.000561      0.023174
192602  100.000000     0.000000  ...     -0.033046     -0.053510
192603   99.441303    -0.005587  ...     -0.058743     -0.091750
192604  100.000000     0.005618  ...      0.031235      0.027204

[5 rows x 12 columns]
                CPI  CPI_nom_ret  ...  VWD_real_ret  EWD_real_ret
date                              ...                            
202008  1452.055956     0.003153  ...      0.065084      0.035618
202009  1454.078149     0.001393  ...     -0.036399     -0.028709
202010  1454.681696     0.000415  ...     -0.020584      0.000169
202011  1453.793232    -0.000611  ...      0.124393      0.175130
202012  1455.162018     0.000942  ...      0.044065      0.071843

[5 rows x 12 columns]


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = B10_and_VWD
timeseries_basket['basket_desc'] = CRSP data: B10 and VWD
timeseries_basket['basket_columns'] = 
['B10_nom_ret', 'VWD_nom_ret']
############# End: defined asset  basket #################
        CPI_nom_ret  B10_nom_ret  VWD_nom_ret
date                                         
192601     0.000000     0.004350     0.000561
192602     0.000000     0.004338    -0.033046
192603    -0.005587     0.004327    -0.064002
192604     0.005618     0.004316     0.037029
192605    -0.005587     0.004304     0.012095
        CPI_nom_ret  B10_nom_ret  VWD_nom_ret
date                                         
202008     0.003153    -0.014709     0.068443
202009     0.001393     0.002560    -0.035057
202010     0.000415    -0.017311    -0.020178
202011    -0.000611     0.004016     0.123706
202012     0.000942    -0.004965     0.045048
Indices constructed with column names:
Index(['date_for_plt', 'CPI_nom_ret_ind', 'B10_nom_ret_ind',
       'VWD_nom_ret_ind'],
      dtype='object')
############# Updated: defined asset basket #################
timeseries_basket['data_df_mean'] = 
B10_real_ret    0.001986
VWD_real_ret    0.006974
dtype: float64


timeseries_basket['data_df_stdev'] = 
B10_real_ret    0.018939
VWD_real_ret    0.053569
dtype: float64


timeseries_basket['data_df_corr'] = 
              B10_real_ret  VWD_real_ret
B10_real_ret      1.000000      0.075353
VWD_real_ret      0.075353      1.000000


timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names', 'data_df', 'data_df_mean', 'data_df_stdev', 'data_df_corr'])
############# End: updated: defined asset basket #################
-----------------------------------------------
Dates to be REMOVED due to missing values (should be at *start* only due to trading signals):
Int64Index([], dtype='int64')
-----------------------------------------------
Dates from available data for bootstrapping:
Start: 192601
End: 202012
-----------------------------------------------
Bootstrap block size: 12
-----------------------------------------------
Dates USED bootstrapping:
Start: 192601
End: 201912
-----------------------------------------------
0.0% of bootstrap sample done.
5.0% of bootstrap sample done.
10.0% of bootstrap sample done.
15.0% of bootstrap sample done.
20.0% of bootstrap sample done.
25.0% of bootstrap sample done.
30.0% of bootstrap sample done.
35.0% of bootstrap sample done.
40.0% of bootstrap sample done.
45.0% of bootstrap sample done.
50.0% of bootstrap sample done.
55.00000000000001% of bootstrap sample done.
60.0% of bootstrap sample done.
65.0% of bootstrap sample done.
70.0% of bootstrap sample done.
75.0% of bootstrap sample done.
80.0% of bootstrap sample done.
85.0% of bootstrap sample done.
90.0% of bootstrap sample done.
95.0% of bootstrap sample done.
Withdrawal NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       1       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      10  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      10  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       1              none   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 10)     True          10  
2     (10, 10)     True          10  
3      (10, 1)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
Allocation NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       2       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      10  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      10  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       2           softmax   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 10)     True          10  
2     (10, 10)     True          10  
3      (10, 2)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
{'methods': ['Adam'], 'output_progress': False, 'tol': 1e-06, 'itbound_scipy_algorithms': 1000, 'check_exit_criteria': False, 'nit_running_min': 1, 'itbound_SGD_algorithms': 10, 'nit_IterateAveragingStart': 9, 'batchsize': 1000, 'SGD_learningrate': 50.0, 'Adagrad_epsilon': 1e-08, 'Adagrad_eta': 1.0, 'Adadelta_ewma': 0.9, 'Adadelta_epsilon': 1e-08, 'RMSprop_ewma': 0.8, 'RMSprop_epsilon': 1e-08, 'RMSprop_eta': 0.1, 'Adam_ewma_1': 0.9, 'Adam_ewma_2': 0.998, 'Adam_eta': 0.0, 'Adam_epsilon': 1e-08, 'Adam_weight_decay': 0.0001, 'running_min_from_avg': False, 'running_min_from_sgd': True, 'lr_schedule': True}
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.7 0.3]
W_T_mean: 1053.404569767976
W_T_median: 810.8629866929932
W_T_pctile_5: -151.03629060954032
W_T_CVAR_5_pct: -291.36088374984024
-----------------------------------------------
new min fval from sgd:  -1369.8331584299829
min fval:  -1369.8331584299829
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ 0.0493,  0.4159],
        [ 0.3335,  0.1292],
        [-0.5205, -0.0849],
        [-0.0501,  0.5228],
        [ 0.1216,  0.4282],
        [ 0.6122, -0.0855],
        [-0.5679, -0.5431],
        [ 0.5591, -0.2915],
        [ 0.0272,  0.2585],
        [-0.0216, -0.6510]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-0.1073,  0.1448, -0.3140,  0.0497,  0.1212,  0.2768, -0.3068,  0.6329,
         0.6093,  0.4450], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-0.2114, -0.1858,  0.0324, -0.1660, -0.0004, -0.1556, -0.1337,  0.0370,
         -0.2541,  0.0804],
        [-0.0221, -0.1326, -0.1584, -0.1877,  0.2480,  0.0113, -0.0685, -0.0463,
         -0.2567, -0.2854],
        [-0.2434, -0.0729, -0.1499,  0.1158,  0.2100, -0.2063,  0.2043, -0.0894,
         -0.1069,  0.3057],
        [-0.2001,  0.0817,  0.0932,  0.0990, -0.1618,  0.2709, -0.2272, -0.1095,
          0.3161, -0.0721],
        [-0.1285, -0.2867, -0.3142, -0.2564, -0.0912, -0.2092,  0.1292, -0.1069,
         -0.1744, -0.2015],
        [ 0.2869,  0.0152,  0.0647,  0.0616,  0.2805, -0.0396, -0.0849, -0.1135,
         -0.2356, -0.0831],
        [ 0.0309,  0.0787,  0.0525,  0.0006,  0.2725,  0.0558, -0.0980, -0.1833,
         -0.2873, -0.1971],
        [ 0.1312,  0.3066, -0.0428,  0.2382, -0.1089,  0.0909,  0.2221, -0.2538,
         -0.0381, -0.1241],
        [-0.0654,  0.2676, -0.1552,  0.2396,  0.0191, -0.2730, -0.0178, -0.0439,
         -0.1955,  0.2550],
        [-0.2083,  0.2643, -0.1882, -0.0524,  0.1606, -0.1484, -0.1955, -0.1219,
          0.1643, -0.2340]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.2174,  0.2230,  0.0666, -0.0621,  0.2862, -0.1681,  0.0458, -0.0489,
        -0.3100, -0.1949], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 0.2276,  0.2662, -0.2623, -0.0073,  0.2225, -0.1458, -0.0051, -0.0504,
         -0.1727,  0.0400]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 0.4707,  0.4965],
        [-0.1982, -0.5790],
        [-0.2906, -0.1673],
        [ 0.1192,  0.3170],
        [ 0.2366, -0.2241],
        [-0.6477,  0.3030],
        [ 0.1540, -0.5338],
        [ 0.0586, -0.6299],
        [-0.4324,  0.2912],
        [ 0.3071,  0.5632]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([-0.4681, -0.1323,  0.0962,  0.5129,  0.3676,  0.0334,  0.4530, -0.0197,
        -0.5767,  0.3506], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-0.2447, -0.0048,  0.1584, -0.2814,  0.1609, -0.3070, -0.0370,  0.1640,
          0.2889,  0.1333],
        [ 0.0840,  0.1798, -0.0932,  0.0634, -0.1028, -0.2034,  0.2909, -0.2908,
         -0.1787,  0.0614],
        [-0.0575,  0.0322, -0.2121, -0.2311, -0.2665, -0.3118,  0.1706, -0.1301,
          0.2784,  0.2273],
        [-0.2814, -0.2721, -0.2188, -0.2296,  0.2669, -0.0337,  0.2241,  0.0012,
          0.1144, -0.2371],
        [-0.2899,  0.2963, -0.2604,  0.3122, -0.2521,  0.2657, -0.0332,  0.0390,
         -0.0594,  0.2940],
        [-0.0037,  0.1567, -0.0460,  0.2491, -0.0301,  0.2273,  0.0376,  0.0813,
         -0.3093,  0.0251],
        [-0.2585, -0.1427, -0.1625,  0.3133, -0.2306,  0.1113, -0.2247, -0.0198,
          0.2504, -0.2648],
        [-0.0859,  0.0781,  0.0519,  0.0909, -0.1837, -0.1033,  0.2790, -0.0122,
         -0.1206, -0.1679],
        [-0.2856, -0.2751, -0.0164,  0.0541,  0.2068, -0.2467,  0.0366,  0.0096,
         -0.0740, -0.1851],
        [-0.0489,  0.3114, -0.2519,  0.1096, -0.0977,  0.0938,  0.1025, -0.0810,
         -0.0835,  0.0719]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ 0.1055, -0.2923,  0.2600,  0.0284,  0.1569, -0.2292,  0.1590,  0.1699,
        -0.0261,  0.3058], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ 0.0430,  0.1945,  0.0156,  0.0620,  0.0571,  0.2722,  0.1300, -0.1830,
          0.0407,  0.1574],
        [-0.2821, -0.1297,  0.1177, -0.0674, -0.0949, -0.1889,  0.1360,  0.2050,
          0.2870, -0.3108]], device='cuda:0'))])
xi:  [100.]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 789.624318227651
W_T_median: 505.63568278904825
W_T_pctile_5: -364.5422512631483
W_T_CVAR_5_pct: -504.7618508330896
Average q (qsum/M+1):  46.73941926033266
Optimal xi:  [100.]
Expected(across Rb) median(across samples) p_equity:  0.3531373212734858
obj fun:  tensor(-1369.8332, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Traceback (most recent call last):
  File "/home/marcchen/Documents/testing_pyt_decum/researchcode/decumulation_driver.py", line 973, in <module>
    fun_RUN__wrapper.RUN__wrapper_ONE_stage_optimization(
  File "/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_RUN__wrapper.py", line 129, in RUN__wrapper_ONE_stage_optimization
    RUN__wrapper_output(
  File "/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_RUN__wrapper.py", line 392, in RUN__wrapper_output
    params_TRAIN = fun_output_results_Pctiles.get_df_Pctile_paths(params_TRAIN)
  File "/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py", line 27, in get_df_Pctile_paths
    df_pctiles_ALL = output_Pctile_paths(params = params)   #use defaults to get just dataframe
  File "/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py", line 88, in output_Pctile_paths
    pctiles_asset = get_dict_pctiles(data_set=params["NN_asset_prop_paths"][:,:,node_index],  # data for pctile calc on each *column*
  File "/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py", line 216, in get_dict_pctiles
    timeseries_pctile[n_index] = np.percentile(data_set[:,n_index], pctile) #get pctile
  File "<__array_function__ internals>", line 180, in percentile
  File "/home/marcchen/.local/lib/python3.10/site-packages/numpy/lib/function_base.py", line 4166, in percentile
    return _quantile_unchecked(
  File "/home/marcchen/.local/lib/python3.10/site-packages/numpy/lib/function_base.py", line 4424, in _quantile_unchecked
    r, k = _ureduce(a,
  File "/home/marcchen/.local/lib/python3.10/site-packages/numpy/lib/function_base.py", line 3725, in _ureduce
    r = func(a, **kwargs)
  File "/home/marcchen/.local/lib/python3.10/site-packages/numpy/lib/function_base.py", line 4590, in _quantile_ureduce_func
    arr = a.flatten()
KeyboardInterrupt

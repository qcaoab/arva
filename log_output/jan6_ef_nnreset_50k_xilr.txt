Starting at: 
06-01-23_12:00

 Random seed:  2  



############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = B10_and_VWD
timeseries_basket['basket_desc'] = CRSP data: B10 and VWD
timeseries_basket['basket_columns'] = 
['B10_real_ret', 'VWD_real_ret']
############# End: defined asset  basket #################
-----------------------------------------------
No need to read market data.
-----------------------------------------------
20.0% of MC simulations done.
40.0% of MC simulations done.
60.0% of MC simulations done.
80.0% of MC simulations done.
100.0% of MC simulations done.
Withdrawal NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       1       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      10  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      10  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       1  logistic_sigmoid   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 10)    False        None  
2     (10, 10)    False        None  
3      (10, 1)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
Allocation NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       2       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/pytorch_decumulation_mc/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      10  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      10  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       2           softmax   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 10)    False        None  
2     (10, 10)    False        None  
3      (10, 2)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1  logistic_sigmoid   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)     False        None  
0     (10, 10)     False        None  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)     False        None  
0     (10, 10)     False        None  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1  logistic_sigmoid   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)     False        None  
0     (10, 10)     False        None  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)     False        None  
0     (10, 10)     False        None  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 994.7118051747042
W_T_median: 977.9139386175377
W_T_pctile_5: 680.6827035289488
W_T_CVAR_5_pct: 615.0997975734186
-----------------------------------------------
new min fval from sgd:  -658.8654360845322
min fval:  -658.8654360845322
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ 0.9307, -0.0901],
        [ 0.4502, -1.0416],
        [ 0.0346, -0.5557],
        [ 0.7108,  0.1713],
        [ 1.1096, -0.4593],
        [ 0.5833,  0.5689],
        [ 0.9491, -1.0141],
        [ 0.7598,  0.2723],
        [ 0.8400, -0.3014],
        [-0.0854, -0.0291]], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ 0.6321,  0.5181,  0.4161,  0.7625,  0.3953,  0.5246,  0.4149,  0.6579,
          0.2363,  0.6843],
        [ 0.6064,  0.4412,  0.4851,  0.6045,  0.4644,  0.1355,  0.7096,  0.6660,
          0.6622,  0.5734],
        [ 0.5617,  0.5296,  0.4812,  0.1536,  0.4589,  0.4892,  0.2371,  0.4884,
          0.6975,  0.7616],
        [ 0.2602,  0.5475,  0.3105,  0.5347,  0.6388,  0.5725,  0.4719,  0.3673,
          0.4859,  0.5109],
        [ 0.1513,  0.0589,  0.2213,  0.1700,  0.3725,  0.3443,  0.2678,  0.0152,
          0.1860,  0.2370],
        [ 0.3950,  0.7520,  0.6927,  0.7749,  0.2657,  0.6497,  0.7005,  0.7733,
          0.4499,  0.6441],
        [-0.3635,  0.0805, -0.2726,  0.1369, -0.2363, -0.0932,  0.1582,  0.1766,
         -0.3645, -0.3461],
        [ 0.1182,  0.2299,  0.2700,  0.6582,  0.1256,  0.3104,  0.4423,  0.1595,
          0.5157,  0.3480],
        [-0.0820, -0.1105, -0.0192,  0.2115,  0.5086,  0.4641, -0.1008,  0.3321,
          0.1615,  0.5086],
        [ 0.1839,  0.5374,  0.2834,  0.4832,  0.6134,  0.1751,  0.6823,  0.6458,
          0.4030,  0.5673]], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[0.7474, 0.7446, 0.5128, 0.5427, 0.4134, 0.5361, 0.3460, 0.4744, 0.4204,
         0.7482]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[-0.1905, -0.7086],
        [-0.8491,  0.5792],
        [ 0.7661, -0.1746],
        [-0.7287, -0.7262],
        [ 0.1339,  0.8109],
        [-0.4191, -0.3020],
        [-0.3368,  0.3572],
        [-0.1460, -0.1972],
        [-0.1800, -0.3466],
        [-0.9865, -0.9264]], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-0.1173,  0.1450, -0.1621,  0.1986,  0.4829, -0.2991, -0.0346, -0.1518,
          0.0642,  0.1349],
        [ 0.1554, -0.1384,  0.1420,  0.2291, -0.0975, -0.2016,  0.1957, -0.2682,
         -0.1184,  0.2439],
        [-0.0155,  0.0941,  0.3633, -0.2155,  0.4668,  0.2171,  0.1267, -0.1710,
          0.3664, -0.0572],
        [-0.1399, -0.2096, -0.3825, -0.5009, -0.1533, -0.5350, -0.1817, -0.5769,
         -0.3385, -0.4048],
        [-0.0421,  0.0747,  0.1128, -0.1405,  0.2135,  0.1795, -0.0083,  0.3741,
          0.1614, -0.1342],
        [ 0.0160,  0.4289, -0.1589, -0.1491,  0.4071, -0.1251, -0.0231, -0.0217,
          0.0956, -0.2634],
        [ 0.1550,  0.0006,  0.2814,  0.2931,  0.5060,  0.3634,  0.3141,  0.1380,
          0.0076, -0.0197],
        [ 0.1407,  0.3449, -0.0326,  0.2064,  0.0145,  0.2932,  0.1557,  0.0508,
         -0.2077,  0.2300],
        [-0.2127, -0.5757, -0.3236, -0.0039, -0.1193, -0.2360, -0.5092, -0.1991,
         -0.0102, -0.0421],
        [ 0.0478,  0.1621, -0.0008, -0.0430, -0.0230,  0.3072,  0.1602,  0.0199,
          0.2974, -0.0953]], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ 0.0295,  0.0936,  0.4414,  0.2768,  0.4173,  0.1854,  0.1978,  0.0989,
         -0.0103,  0.4361],
        [-0.2896, -0.1872, -0.0310, -0.0186, -0.2399, -0.3409, -0.4428, -0.3629,
         -0.0503, -0.0613]], device='cuda:0'))])
xi:  [6.]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 760.5097059813764
W_T_median: 751.5197637431843
W_T_pctile_5: 544.9190857451147
W_T_CVAR_5_pct: 518.4078229407261
Average q (qsum/M+1):  59.81103515625
Optimal xi:  [6.]
Expected(across Rb) median(across samples) p_equity:  0.08715813532471657
obj fun:  tensor(-658.8654, device='cuda:0', dtype=torch.float64,
       grad_fn=<MeanBackward0>)
-----------------------------------------------
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 50.0
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1  logistic_sigmoid   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)     False        None  
0     (10, 10)     False        None  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)     False        None  
0     (10, 10)     False        None  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 994.7118051747042
W_T_median: 977.9139386175377
W_T_pctile_5: 680.6827035289488
W_T_CVAR_5_pct: 615.0997975734186
-----------------------------------------------
new min fval from sgd:  -387.96098474620186
min fval:  -387.96098474620186
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.1980,  0.9066],
        [-0.3995, -0.5721],
        [ 0.6196,  0.6900],
        [ 0.8459,  0.6258],
        [ 0.6065,  0.0834],
        [ 0.3694, -0.2828],
        [-0.1990, -0.3834],
        [ 0.1302,  0.3365],
        [ 0.5575,  0.6728],
        [ 0.5643, -0.4909]], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ 0.6194,  0.4350,  0.5786,  0.3537,  0.6563,  0.4493,  0.2212,  0.3840,
          0.7026,  0.4606],
        [ 0.1948,  0.6472,  0.2490,  0.3560,  0.5248,  0.1807,  0.3521,  0.2970,
          0.2555,  0.4980],
        [ 0.5625,  0.5746,  0.2049,  0.7262,  0.3189,  0.7655,  0.1928,  0.5994,
          0.3090,  0.2036],
        [ 0.1159, -0.2440, -0.0204,  0.2960,  0.1519, -0.2505,  0.2805, -0.3138,
         -0.3111, -0.0464],
        [ 0.3855,  0.7072,  0.2864,  0.6896,  0.7645,  0.1704,  0.4332,  0.7794,
          0.4701,  0.5732],
        [ 0.5944,  0.2122,  0.5393,  0.3969,  0.2666,  0.1540,  0.4903,  0.5174,
          0.4151,  0.6273],
        [-0.4996, -0.4249, -0.5191, -0.4387, -0.5750, -0.3560, -0.4660, -0.1243,
         -0.0885, -0.2151],
        [ 0.2377,  0.4101,  0.3039,  0.6660,  0.3471,  0.6545,  0.3949,  0.3855,
          0.5216,  0.6841],
        [-0.0330, -0.0895,  0.1574,  0.2595,  0.1969,  0.0969,  0.3934,  0.4079,
         -0.1727,  0.1004],
        [ 0.4604,  0.2300,  0.7251,  0.6284,  0.2942,  0.5132,  0.4759,  0.6480,
          0.2698,  0.2088]], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[0.5690, 0.5069, 0.5799, 0.3786, 0.5495, 0.7672, 0.1494, 0.5088, 0.4089,
         0.6609]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 1.0776,  0.1102],
        [-0.6481, -0.8650],
        [ 0.7065, -0.9906],
        [ 0.2284,  0.1689],
        [ 0.4774, -0.2045],
        [-0.0585,  0.6578],
        [ 0.7446,  0.0203],
        [-0.9700, -0.7917],
        [ 0.0470, -0.7358],
        [ 1.0249, -0.9346]], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 0.2788,  0.2422, -0.0065,  0.0499, -0.1715,  0.0670,  0.3857,  0.2297,
          0.3466,  0.2904],
        [ 0.1380,  0.2258,  0.5783,  0.5505,  0.1708,  0.4277,  0.1483,  0.2893,
          0.5452,  0.3168],
        [ 0.5756,  0.0650,  0.4904,  0.4596,  0.0938,  0.1356,  0.3593,  0.5990,
          0.6369,  0.1335],
        [ 0.6166,  0.4585,  0.1323,  0.1075,  0.5849,  0.6425,  0.3094,  0.3825,
          0.0997,  0.6073],
        [-0.2950, -0.5945, -0.3308, -0.3837, -0.1051, -0.4095, -0.1881,  0.0129,
         -0.1928, -0.2528],
        [ 0.6034,  0.3403,  0.6088,  0.2803,  0.3232,  0.2138,  0.3885,  0.1186,
          0.2806,  0.6905],
        [-0.2060, -0.2668, -0.5354, -0.3111, -0.5945, -0.0425, -0.5115, -0.1859,
         -0.2918, -0.4631],
        [-0.1008,  0.2909,  0.0309, -0.4514, -0.2886, -0.0959, -0.4557,  0.2145,
         -0.1617, -0.1100],
        [ 0.6502,  0.5397,  0.2162,  0.6417,  0.5172,  0.1339,  0.1504,  0.1662,
          0.4806,  0.2182],
        [-0.2852,  0.1230,  0.1579, -0.5588,  0.1079, -0.2223, -0.1881,  0.3496,
          0.0080,  0.1467]], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-0.2450, -0.3222, -0.2839, -0.4239, -0.2202, -0.6809, -0.0872, -0.4533,
         -0.6562, -0.4136],
        [ 0.5272,  0.6395,  0.6407,  0.6556,  0.3448,  0.6039,  0.1027,  0.2041,
          0.4949,  0.2750]], device='cuda:0'))])
xi:  [6.]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 1065.7298723398828
W_T_median: 942.5543539880332
W_T_pctile_5: 322.2088139104489
W_T_CVAR_5_pct: 221.91565279937967
Average q (qsum/M+1):  59.66033935546875
Optimal xi:  [6.]
Expected(across Rb) median(across samples) p_equity:  0.9977719783782959
obj fun:  tensor(-387.9610, device='cuda:0', dtype=torch.float64,
       grad_fn=<MeanBackward0>)
-----------------------------------------------
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 5.0
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1  logistic_sigmoid   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)     False        None  
0     (10, 10)     False        None  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)     False        None  
0     (10, 10)     False        None  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 994.7118051747042
W_T_median: 977.9139386175377
W_T_pctile_5: 680.6827035289488
W_T_CVAR_5_pct: 615.0997975734186
-----------------------------------------------
new min fval from sgd:  -376.58190000180815
min fval:  -376.58190000180815
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ 0.5040, -0.7737],
        [ 0.5753,  0.1327],
        [ 0.1896,  0.4547],
        [-0.0553, -0.0934],
        [ 0.0437, -0.5661],
        [ 0.9320,  0.2029],
        [ 0.4640,  0.4017],
        [-0.0731,  0.8223],
        [ 0.4896,  0.5468],
        [ 0.3976, -0.0121]], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ 0.5111,  0.5053,  0.6297,  0.6941,  0.5227,  0.5297,  0.2606,  0.7109,
          0.5084,  0.4014],
        [ 0.2468,  0.4576,  0.4472,  0.2322,  0.3106,  0.4021,  0.2200,  0.5079,
          0.3018,  0.6573],
        [ 0.2059,  0.3204,  0.2880,  0.5116,  0.4532,  0.5859,  0.6944,  0.5189,
          0.3587,  0.6234],
        [ 0.3577,  0.2462,  0.4256,  0.5289,  0.4892,  0.6939,  0.4038,  0.4469,
          0.7202,  0.6268],
        [-0.5423, -0.1234, -0.6339, -0.1818, -0.1514, -0.6593, -0.2620, -0.6057,
         -0.4614, -0.6905],
        [ 0.3516,  0.3490, -0.0255, -0.1171,  0.3069,  0.2998,  0.4446,  0.0733,
          0.4027,  0.4063],
        [ 0.4262,  0.5135,  0.5309,  0.2402,  0.3153,  0.5487,  0.3253,  0.7833,
          0.5935,  0.7490],
        [ 0.2161,  0.3647,  0.3746,  0.4425,  0.1763,  0.4461,  0.7173,  0.6561,
          0.1960,  0.5175],
        [ 0.6628,  0.3529,  0.3212,  0.3364,  0.2468,  0.2260,  0.6140,  0.4224,
          0.3931,  0.7374],
        [-0.0230,  0.3089, -0.0501,  0.2624,  0.0713, -0.0575,  0.2116, -0.2127,
         -0.1831, -0.1784]], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[0.6206, 0.5978, 0.6699, 0.6930, 0.1290, 0.4256, 0.5658, 0.6431, 0.6179,
         0.3821]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 0.3639, -0.4834],
        [-0.9857,  0.2152],
        [ 0.4863, -0.5890],
        [ 0.4100, -0.4727],
        [-0.1872, -0.0951],
        [-0.2560, -0.0419],
        [-0.1340,  0.0591],
        [-0.0213,  0.2160],
        [-0.1998, -0.4998],
        [ 0.1416, -0.1920]], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-0.4251, -0.0188, -0.0374, -0.4055, -0.4184, -0.3657, -0.5805,  0.1300,
          0.1030,  0.0775],
        [ 0.0634,  0.0607, -0.2626, -0.0430, -0.0370, -0.2862, -0.2535, -0.2622,
         -0.1009,  0.1449],
        [-0.3828, -0.6761, -0.4722, -0.5862, -0.0777, -0.2847, -0.4887, -0.2819,
         -0.2844, -0.1236],
        [-0.1115,  0.0217, -0.1302, -0.2629,  0.0614, -0.3288,  0.1142,  0.0741,
          0.1757,  0.1157],
        [-0.4337, -0.1332,  0.0160, -0.4119, -0.1554, -0.1327, -0.3689,  0.0667,
         -0.3685, -0.0986],
        [-0.0164, -0.1030,  0.1163, -0.3332,  0.1378,  0.1686, -0.3547, -0.2853,
         -0.1345, -0.2465],
        [-0.0655,  0.2522,  0.2399,  0.0635,  0.2772,  0.1498,  0.1027,  0.2610,
         -0.2347,  0.2896],
        [-0.5628, -0.3538, -0.5228, -0.1605, -0.3540, -0.2959, -0.5711, -0.2124,
         -0.0742, -0.2653],
        [-0.2155, -0.2825, -0.0757, -0.4932, -0.1656, -0.0429, -0.1801, -0.1962,
         -0.2148, -0.5313],
        [-0.3064, -0.2151, -0.2868, -0.1027, -0.3781,  0.1226,  0.0767,  0.2465,
         -0.1845, -0.2988]], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ 0.0255, -0.1825, -0.2208, -0.3773,  0.0145, -0.2196, -0.4140,  0.0391,
         -0.1369, -0.2776],
        [ 0.0960,  0.0714,  0.0674, -0.1559,  0.0119, -0.1526,  0.3805,  0.2594,
          0.2257,  0.1869]], device='cuda:0'))])
xi:  [6.]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 974.7540512206928
W_T_median: 905.9539603979217
W_T_pctile_5: 462.12109191892773
W_T_CVAR_5_pct: 357.6942048198892
Average q (qsum/M+1):  59.763814290364586
Optimal xi:  [6.]
Expected(across Rb) median(across samples) p_equity:  0.7386637091636657
obj fun:  tensor(-376.5819, device='cuda:0', dtype=torch.float64,
       grad_fn=<MeanBackward0>)
-----------------------------------------------
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 3.0
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1  logistic_sigmoid   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)     False        None  
0     (10, 10)     False        None  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)     False        None  
0     (10, 10)     False        None  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 994.7118051747042
W_T_median: 977.9139386175377
W_T_pctile_5: 680.6827035289488
W_T_CVAR_5_pct: 615.0997975734186
-----------------------------------------------
new min fval from sgd:  -363.5290459113117
min fval:  -363.5290459113117
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ 0.4877,  0.1711],
        [ 0.3255,  0.5622],
        [ 0.1321, -0.1097],
        [-0.0867, -0.6763],
        [-0.3574, -0.6932],
        [ 0.1962,  0.8417],
        [ 0.7586,  0.2041],
        [-0.6746, -0.0036],
        [-0.3486, -0.3457],
        [-0.1496, -0.9167]], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ 0.6246,  0.7299,  0.7337,  0.2878,  0.5028,  0.6684,  0.6401,  0.7642,
          0.6673,  0.3059],
        [-0.4730, -0.5559, -0.4187, -0.1820, -0.0829, -0.6651, -0.0838, -0.2361,
         -0.1159, -0.3103],
        [ 0.7642,  0.6518,  0.3109,  0.3700,  0.5576,  0.4334,  0.2970,  0.3053,
          0.4120,  0.4507],
        [-0.3689, -0.1318, -0.4984, -0.0747, -0.4429, -0.4857, -0.5079, -0.2199,
         -0.2043,  0.0539],
        [-0.1706, -0.2545,  0.1951, -0.2073, -0.1141,  0.0470, -0.2664,  0.2415,
          0.1071, -0.0596],
        [ 0.7326,  0.7471,  0.6171,  0.7567,  0.3736,  0.3096,  0.4421,  0.2732,
          0.1877,  0.7449],
        [-0.0379,  0.3502,  0.1252,  0.4020,  0.3177,  0.0386,  0.0830,  0.1879,
          0.2507,  0.2010],
        [ 0.4056,  0.2435,  0.4073, -0.0823, -0.0855,  0.0961,  0.2243,  0.2228,
          0.0153,  0.2312],
        [ 0.2258,  0.6577,  0.4523,  0.5723,  0.6085,  0.6187,  0.7142,  0.3168,
          0.7131,  0.5743],
        [-0.2039,  0.0060, -0.3519, -0.0392, -0.2299, -0.3312, -0.1934, -0.1665,
         -0.2589,  0.1151]], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[0.4996, 0.2024, 0.6137, 0.3149, 0.3994, 0.6299, 0.4163, 0.4284, 0.7230,
         0.3698]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 0.8711,  0.2878],
        [-0.2626,  0.3683],
        [ 0.4801, -0.6017],
        [-0.3006, -0.4304],
        [ 0.5724, -0.5118],
        [ 0.3436, -1.0708],
        [ 0.8268, -0.5641],
        [ 0.0454,  0.2837],
        [ 0.1458,  0.3845],
        [ 0.3276,  0.2339]], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-0.0526,  0.1740, -0.2038,  0.1733, -0.2492,  0.0913,  0.2312,  0.1524,
          0.0518,  0.1999],
        [-0.5527, -0.3977, -0.6076, -0.6440, -0.3508, -0.6316, -0.3424, -0.4593,
         -0.1781, -0.4269],
        [-0.1279, -0.4710, -0.1230, -0.5439, -0.4745, -0.5438, -0.3907, -0.5798,
         -0.0504, -0.5430],
        [ 0.6422,  0.2429,  0.4544,  0.3624,  0.3143,  0.5584,  0.5386,  0.0624,
          0.5157,  0.3404],
        [-0.6199, -0.4089, -0.4591, -0.3079, -0.5638, -0.4101, -0.2696, -0.4807,
         -0.1685, -0.1392],
        [ 0.1025, -0.1631,  0.0113, -0.1056,  0.2457,  0.1208, -0.1147, -0.1032,
          0.2279, -0.1168],
        [-0.3537, -0.0689, -0.4680, -0.6388, -0.6278, -0.4127, -0.4231, -0.5072,
         -0.2558, -0.2426],
        [ 0.3488,  0.7079,  0.3541,  0.3940,  0.6776,  0.4926,  0.5021,  0.6233,
          0.1901,  0.4343],
        [ 0.6964,  0.5187,  0.2925,  0.0974,  0.6359,  0.3115,  0.5703,  0.3212,
          0.6900,  0.2747],
        [ 0.3494,  0.5508,  0.6267,  0.0931,  0.1021,  0.3125,  0.4962,  0.1884,
          0.6920,  0.4199]], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-0.1471, -0.1482, -0.2994, -0.3446, -0.0842, -0.4049, -0.3840, -0.3593,
         -0.6684, -0.5159],
        [ 0.5642,  0.1748,  0.1058,  0.4334,  0.3058,  0.2992,  0.0629,  0.5985,
          0.6295,  0.5370]], device='cuda:0'))])
xi:  [6.]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 1067.308903167746
W_T_median: 945.2246410604388
W_T_pctile_5: 330.6944934268805
W_T_CVAR_5_pct: 228.52779455341064
Average q (qsum/M+1):  59.0883534749349
Optimal xi:  [6.]
Expected(across Rb) median(across samples) p_equity:  0.9904126822948456
obj fun:  tensor(-363.5290, device='cuda:0', dtype=torch.float64,
       grad_fn=<MeanBackward0>)
-----------------------------------------------
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 1.5
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1  logistic_sigmoid   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)     False        None  
0     (10, 10)     False        None  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)     False        None  
0     (10, 10)     False        None  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 994.7118051747042
W_T_median: 977.9139386175377
W_T_pctile_5: 680.6827035289488
W_T_CVAR_5_pct: 615.0997975734186
-----------------------------------------------
new min fval from sgd:  -362.4684595076389
min fval:  -362.4684595076389
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.2103, -0.3298],
        [ 1.0301,  0.1142],
        [ 0.1795, -0.3952],
        [-0.0054,  0.1731],
        [ 0.8641,  0.1666],
        [ 0.9391,  0.3042],
        [-0.3631,  0.1615],
        [ 0.9152,  0.2633],
        [ 0.3633, -0.5087],
        [ 0.8602, -0.6809]], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-4.6194e-01, -2.3667e-01, -4.9676e-01, -6.1121e-01, -6.2288e-01,
         -6.4063e-01, -3.2800e-01, -4.0457e-01, -6.6704e-01, -3.4676e-01],
        [ 4.9319e-01,  5.3789e-01,  3.0265e-01,  7.1822e-01,  3.4811e-01,
          2.7910e-01,  5.8460e-01,  3.5365e-01,  2.5844e-01,  2.6616e-01],
        [ 3.7939e-01,  7.2388e-01,  4.0338e-01,  2.5419e-01,  7.2258e-01,
          5.2728e-01,  5.2833e-01,  6.9453e-01,  7.5530e-01,  5.9370e-01],
        [-1.6419e-04, -2.7156e-01, -5.9722e-02,  5.8937e-02, -2.6555e-01,
         -4.2478e-01, -4.6308e-02, -4.2687e-01, -3.3263e-01, -1.8392e-01],
        [-1.6283e-01,  3.1303e-01, -1.2210e-02,  1.5644e-01,  1.3968e-02,
          3.4084e-01,  9.3864e-02,  5.5172e-02,  1.5589e-01,  1.6530e-01],
        [ 2.0933e-01,  5.2860e-01,  4.9914e-01,  7.5381e-01,  7.7414e-01,
          6.0416e-01,  4.5292e-01,  7.4176e-01,  3.7835e-01,  6.9118e-01],
        [ 2.8920e-01,  2.4729e-01, -1.0811e-01, -5.4519e-02,  2.1069e-01,
         -9.8041e-02,  2.1058e-01,  1.7296e-01, -2.1829e-02, -1.3733e-02],
        [ 5.0634e-01,  4.1846e-01,  5.3959e-01,  3.4691e-01,  2.1519e-01,
          4.5794e-01,  3.4538e-01,  5.9713e-01,  3.9918e-01,  5.7886e-01],
        [ 2.0913e-01,  5.5941e-01,  3.7917e-01,  3.4560e-01,  5.6497e-01,
          2.1525e-01,  3.0507e-01,  3.6855e-01,  3.8901e-01,  7.6233e-01],
        [-4.5180e-01, -2.6297e-01, -6.0224e-01, -5.0579e-01, -3.9113e-01,
         -4.1948e-01, -4.9406e-01, -2.5743e-01, -5.0509e-01, -1.7370e-01]],
       device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[0.2057, 0.5933, 0.7825, 0.3294, 0.3875, 0.6608, 0.3874, 0.6399, 0.6274,
         0.1914]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[-0.7576,  0.6911],
        [-0.9440,  0.0857],
        [ 0.0407,  0.2105],
        [ 0.3279, -0.3734],
        [-0.2338,  0.2062],
        [-0.9418,  0.6621],
        [ 0.0275,  0.7823],
        [ 0.3944,  0.3451],
        [-1.0510,  0.9058],
        [-0.4452,  0.2911]], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-0.1591, -0.3996, -0.1764,  0.0255, -0.0480,  0.1071,  0.1163, -0.4368,
         -0.1319, -0.2468],
        [ 0.1182, -0.4585, -0.6328, -0.3449, -0.4586, -0.1858,  0.0247, -0.3387,
          0.1580, -0.1918],
        [ 0.0554,  0.1556, -0.1552, -0.1006,  0.0411,  0.0630, -0.3249, -0.3509,
          0.0667,  0.0823],
        [ 0.3195,  0.1423, -0.1527, -0.2047, -0.2805, -0.1530,  0.0508,  0.0873,
         -0.0014, -0.2902],
        [-0.2599,  0.4354,  0.2234, -0.0327,  0.2171, -0.0293,  0.0211, -0.0435,
          0.0582, -0.1144],
        [-0.1785, -0.0866, -0.2540, -0.0997, -0.0027, -0.1686, -0.1878, -0.1191,
         -0.1545,  0.1071],
        [ 0.0632, -0.2073, -0.1749, -0.4344, -0.3452, -0.2741,  0.0669, -0.5092,
          0.2702, -0.3128],
        [-0.2546, -0.1254, -0.3599, -0.6283, -0.5681, -0.2634, -0.4087, -0.4758,
         -0.0383, -0.1231],
        [ 0.0936, -0.3850, -0.0057,  0.0057, -0.0755,  0.4199,  0.2202,  0.0384,
          0.4049, -0.1843],
        [-0.0581, -0.0698, -0.4774, -0.4486, -0.4999,  0.0653,  0.1712, -0.1962,
          0.1831, -0.5978]], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-0.1497,  0.1111,  0.1434, -0.0223,  0.2810,  0.0049,  0.2881,  0.3106,
          0.0767,  0.4264],
        [-0.2621, -0.1927, -0.3350, -0.0341, -0.3826,  0.1577, -0.0875, -0.0076,
          0.1558,  0.0665]], device='cuda:0'))])
xi:  [6.]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 826.6862086813862
W_T_median: 806.34808458379
W_T_pctile_5: 573.4232967883215
W_T_CVAR_5_pct: 532.9942410722556
Average q (qsum/M+1):  59.41154988606771
Optimal xi:  [6.]
Expected(across Rb) median(across samples) p_equity:  0.2918766051530838
obj fun:  tensor(-362.4685, device='cuda:0', dtype=torch.float64,
       grad_fn=<MeanBackward0>)
-----------------------------------------------
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 1.0
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1  logistic_sigmoid   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)     False        None  
0     (10, 10)     False        None  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)     False        None  
0     (10, 10)     False        None  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 994.7118051747042
W_T_median: 977.9139386175377
W_T_pctile_5: 680.6827035289488
W_T_CVAR_5_pct: 615.0997975734186
-----------------------------------------------
new min fval from sgd:  -360.9435821084716
min fval:  -360.9435821084716
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ 0.5054, -0.4874],
        [ 0.2710, -0.7628],
        [ 0.5669, -0.7092],
        [ 0.6418, -0.9718],
        [ 0.6866, -0.0423],
        [ 0.0688,  0.3725],
        [-0.2083, -0.5199],
        [ 0.3109, -0.5492],
        [ 0.9557, -0.4689],
        [ 0.7701,  0.0727]], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-0.1107, -0.3444, -0.2897, -0.3371, -0.3215, -0.5988, -0.5878, -0.4448,
         -0.5413, -0.6927],
        [ 0.6266,  0.3326,  0.7497,  0.5054,  0.5414,  0.3719,  0.3488,  0.7260,
          0.7539,  0.7318],
        [ 0.4013,  0.2454,  0.2049,  0.1735,  0.4340,  0.7256,  0.2173,  0.3735,
          0.7183,  0.5267],
        [-0.5303, -0.5057, -0.0966, -0.1705, -0.6580, -0.4324, -0.6791, -0.3541,
         -0.6566, -0.5731],
        [ 0.4197,  0.5777,  0.2215,  0.5270,  0.7138,  0.4962,  0.5625,  0.5934,
          0.2122,  0.4108],
        [ 0.4011,  0.3673,  0.6006,  0.2512,  0.4908,  0.7416,  0.5313,  0.5062,
          0.7608,  0.6343],
        [ 0.4546,  0.6465,  0.3641,  0.7494,  0.2249,  0.3300,  0.3403,  0.1600,
          0.7308,  0.2411],
        [ 0.4770,  0.3289,  0.4662,  0.0578,  0.0600,  0.3434, -0.0984,  0.1368,
          0.2057,  0.2014],
        [-0.0151,  0.1024,  0.0491, -0.2077,  0.0621, -0.0254,  0.1734, -0.3143,
          0.0183, -0.1658],
        [ 0.6005,  0.7384,  0.2384,  0.3284,  0.6791,  0.2029,  0.4144,  0.5007,
          0.4274,  0.5285]], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[0.1270, 0.7017, 0.5084, 0.1043, 0.7187, 0.6303, 0.7840, 0.4337, 0.3513,
         0.6024]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 0.2372, -0.7038],
        [-0.4247,  0.2189],
        [-0.7336,  0.7372],
        [ 0.4246, -0.9453],
        [ 0.5715, -0.1468],
        [ 0.1669, -0.1177],
        [ 0.1222, -0.6665],
        [-0.4612, -1.0293],
        [ 1.0370, -0.7046],
        [ 0.0648, -0.3575]], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 0.4057,  0.3053,  0.1450,  0.7028,  0.3640,  0.3285,  0.6144,  0.7263,
          0.2838,  0.5136],
        [-0.2040,  0.6568,  0.5689,  0.0228,  0.1265,  0.0480, -0.2007, -0.2590,
          0.1481, -0.1592],
        [-0.1983,  0.6288,  0.4846,  0.1664,  0.1978, -0.1707,  0.0175,  0.0949,
          0.2412,  0.0036],
        [-0.2720, -0.3286,  0.2608, -0.5164, -0.3200, -0.2896, -0.2276, -0.4348,
         -0.5797, -0.6500],
        [-0.3808, -0.0532,  0.3013, -0.3429, -0.3655, -0.1212, -0.5562,  0.0094,
         -0.2673,  0.0071],
        [-0.3525,  0.1238,  0.3447, -0.0362, -0.0010, -0.3691, -0.2779, -0.2072,
         -0.0729,  0.0033],
        [ 0.0320,  0.0853,  0.3017,  0.2039,  0.1470,  0.1986,  0.4136,  0.4976,
          0.4506,  0.3869],
        [ 0.3272,  0.4114,  0.2103,  0.3272,  0.3400,  0.1148,  0.3310, -0.0320,
          0.0486,  0.0242],
        [-0.1372,  0.2894,  0.4629,  0.0156, -0.0325,  0.2201,  0.0403,  0.3090,
          0.2162,  0.3185],
        [ 0.3862, -0.1516, -0.0358,  0.6349,  0.1554,  0.2879,  0.3071,  0.4583,
          0.5282,  0.2613]], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ 0.6035,  0.2375,  0.2987,  0.0699,  0.2284,  0.4683,  0.3974,  0.5241,
          0.4715,  0.4124],
        [-0.6778, -0.3967, -0.3404, -0.3832, -0.3352, -0.1025, -0.4094, -0.2277,
         -0.2827, -0.6101]], device='cuda:0'))])
xi:  [6.]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 736.4340088665678
W_T_median: 733.2090656182706
W_T_pctile_5: 531.3953502335252
W_T_CVAR_5_pct: 494.2132325633585
Average q (qsum/M+1):  59.657379150390625
Optimal xi:  [6.]
Expected(across Rb) median(across samples) p_equity:  0.006925470661371946
obj fun:  tensor(-360.9436, device='cuda:0', dtype=torch.float64,
       grad_fn=<MeanBackward0>)
-----------------------------------------------
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 0.5
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1  logistic_sigmoid   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)     False        None  
0     (10, 10)     False        None  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)     False        None  
0     (10, 10)     False        None  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 994.7118051747042
W_T_median: 977.9139386175377
W_T_pctile_5: 680.6827035289488
W_T_CVAR_5_pct: 615.0997975734186
-----------------------------------------------
new min fval from sgd:  -358.423035446161
min fval:  -358.423035446161
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.4894,  0.4577],
        [ 0.5044,  0.2285],
        [-0.2317,  0.1852],
        [ 0.1093,  0.5293],
        [-0.0226,  0.8439],
        [ 1.0934,  0.1416],
        [-0.1012,  0.2924],
        [ 0.1933, -0.5248],
        [ 0.4816,  0.3474],
        [ 0.6705,  0.0647]], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ 0.3287,  0.0139,  0.1014,  0.0118,  0.3786,  0.4103,  0.2800, -0.0791,
          0.2049,  0.1957],
        [ 0.6776,  0.4972,  0.3263,  0.6874,  0.5909,  0.2726,  0.6835,  0.3832,
          0.7493,  0.3759],
        [ 0.5034,  0.7372,  0.4715,  0.7042,  0.2951,  0.7324,  0.4609,  0.2904,
          0.5240,  0.5544],
        [ 0.4611,  0.0507,  0.3240,  0.3963,  0.2899,  0.1196,  0.2295,  0.3863,
          0.2030, -0.1198],
        [ 0.0594, -0.5096,  0.0176, -0.0251, -0.3268, -0.0070, -0.3865, -0.0211,
          0.0391, -0.3508],
        [ 0.3855,  0.5589,  0.5061,  0.7220,  0.3142,  0.6634,  0.4085,  0.2775,
          0.7394,  0.6055],
        [ 0.3392,  0.6374,  0.2157,  0.4713,  0.4152,  0.7255,  0.4978,  0.2979,
          0.4394,  0.4899],
        [ 0.1595,  0.1788,  0.2965,  0.7327,  0.2302,  0.2826,  0.7590,  0.3770,
          0.2036,  0.6299],
        [-0.1661, -0.1745, -0.1119,  0.0502, -0.2624, -0.2015, -0.4277,  0.0421,
         -0.1493,  0.0390],
        [-0.3929, -0.2064, -0.1248, -0.4249, -0.5222, -0.4353, -0.1236, -0.5997,
         -0.2498, -0.5077]], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[0.4156, 0.6734, 0.7435, 0.4277, 0.3179, 0.6014, 0.7902, 0.5394, 0.3292,
         0.1993]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 4.5629e-01, -2.6241e-02],
        [-2.8730e-01,  2.0642e-02],
        [ 6.9655e-04, -7.8297e-02],
        [ 8.3276e-01, -8.1972e-01],
        [-8.9944e-01,  3.0826e-01],
        [ 5.5961e-01, -1.4049e-01],
        [-2.8541e-02,  9.6256e-02],
        [-1.8058e-01, -9.0618e-01],
        [-2.4193e-01,  5.6943e-01],
        [-1.7276e-01, -6.3931e-02]], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 1.5236e-01,  1.9502e-01,  5.7798e-01,  7.1602e-01,  1.2866e-01,
          6.5003e-02,  2.4832e-01,  6.6578e-01,  1.5814e-01,  2.3944e-01],
        [-2.6919e-01,  4.4527e-01,  1.2051e-01,  2.6266e-01, -1.7282e-01,
         -1.8469e-01, -1.5003e-01,  1.9469e-01, -2.9178e-01,  9.6300e-02],
        [-3.3815e-02, -3.5456e-03,  3.4652e-01,  6.7762e-02,  3.0648e-03,
         -2.0496e-01,  5.4381e-02,  8.2134e-03,  3.5978e-02, -2.0002e-01],
        [ 2.0913e-01,  3.2209e-01, -1.4457e-01,  7.3953e-02,  2.5223e-01,
         -2.1387e-01, -1.7526e-01, -9.8030e-02, -2.5356e-02,  1.1381e-01],
        [ 1.7273e-01,  3.1660e-01,  5.6954e-01,  2.4930e-01,  1.7349e-01,
          2.2874e-01,  1.6005e-01,  1.4595e-01, -1.0290e-01, -8.2720e-02],
        [ 1.2958e-01, -6.3489e-04, -6.8416e-02,  9.0497e-02,  7.1460e-02,
         -3.1724e-01, -5.7478e-02,  1.2969e-01,  6.8799e-02,  6.3966e-02],
        [-1.4296e-01,  2.3613e-01, -1.9665e-01,  1.4761e-01,  2.3058e-01,
         -3.8211e-02,  9.2232e-02, -3.6244e-01, -7.8688e-03,  5.3558e-02],
        [ 1.7170e-01,  9.6264e-02,  6.3847e-01,  5.6244e-01,  6.2379e-02,
          3.8063e-01,  4.4059e-01,  5.1866e-01, -2.3262e-02,  1.2916e-01],
        [ 1.7473e-01,  3.3652e-01,  3.4503e-01,  5.4817e-01,  3.8495e-01,
          2.1165e-01,  2.1445e-01,  2.3757e-01,  4.5075e-01,  2.7347e-02],
        [ 2.7956e-01,  6.5365e-01,  4.1691e-01,  6.9771e-01, -7.3900e-02,
          4.2443e-01,  9.8790e-02,  3.0924e-01,  1.1177e-01,  5.1638e-01]],
       device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-0.7090, -0.4306, -0.2134, -0.2684, -0.7382, -0.2640, -0.2057, -0.2618,
         -0.4101, -0.5831],
        [ 0.4869,  0.3242,  0.6563,  0.6014,  0.2263,  0.5097,  0.4951,  0.6349,
          0.5169,  0.4672]], device='cuda:0'))])
xi:  [6.]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 1066.7266905178114
W_T_median: 943.4747573845113
W_T_pctile_5: 323.56486999663787
W_T_CVAR_5_pct: 222.69068336766082
Average q (qsum/M+1):  59.53734842936198
Optimal xi:  [6.]
Expected(across Rb) median(across samples) p_equity:  0.9979712426662445
obj fun:  tensor(-358.4230, device='cuda:0', dtype=torch.float64,
       grad_fn=<MeanBackward0>)
-----------------------------------------------
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 0.2
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1  logistic_sigmoid   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)     False        None  
0     (10, 10)     False        None  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)     False        None  
0     (10, 10)     False        None  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 994.7118051747042
W_T_median: 977.9139386175377
W_T_pctile_5: 680.6827035289488
W_T_CVAR_5_pct: 615.0997975734186
-----------------------------------------------
new min fval from sgd:  -354.9491240862992
min fval:  -354.9491240862992
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.1088, -0.1256],
        [ 0.6384,  0.1337],
        [-0.1511, -0.0678],
        [-0.2541, -0.6903],
        [ 1.0740, -0.6803],
        [ 0.7431, -0.8411],
        [ 0.4198,  0.4387],
        [ 0.1772, -0.7389],
        [ 0.7962, -0.7632],
        [ 0.9571,  0.2282]], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ 0.7941,  0.3410,  0.3119,  0.4557,  0.4522,  0.5184,  0.5437,  0.1795,
          0.4873,  0.7124],
        [-0.3408, -0.5787, -0.0771, -0.3423, -0.1480, -0.2935, -0.5204, -0.3259,
         -0.3067,  0.0103],
        [-0.0140, -0.4362, -0.5264, -0.2023, -0.3812, -0.0035, -0.1726, -0.0882,
         -0.3398, -0.3915],
        [-0.1759, -0.5697, -0.1059, -0.1051, -0.7162, -0.1723, -0.0895, -0.6863,
         -0.4871, -0.2926],
        [ 0.3842,  0.7583,  0.4886,  0.4073,  0.1737,  0.6985,  0.3293,  0.4914,
          0.6543,  0.5133],
        [ 0.3044,  0.4532,  0.7843,  0.4253,  0.4110,  0.7594,  0.5065,  0.3771,
          0.4807,  0.5268],
        [ 0.7506,  0.2895,  0.6155,  0.7594,  0.3693,  0.1745,  0.1663,  0.6531,
          0.1708,  0.3097],
        [-0.4830, -0.5435, -0.4467, -0.1561, -0.3445, -0.4137, -0.1410, -0.2219,
         -0.1729, -0.4413],
        [ 0.4344,  0.3177,  0.2851,  0.7955,  0.3738,  0.7488,  0.1881,  0.6929,
          0.7088,  0.5872],
        [ 0.1676, -0.3306,  0.2492, -0.1725, -0.2470,  0.2805,  0.2232, -0.3274,
          0.0546,  0.0632]], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[0.7915, 0.2833, 0.3276, 0.1576, 0.6070, 0.5315, 0.5463, 0.1864, 0.6674,
         0.3717]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[-0.1251, -0.8926],
        [ 0.5717, -0.7029],
        [-0.4262,  0.1201],
        [ 0.7475, -0.4077],
        [-0.2844,  0.8448],
        [-0.0396, -0.3791],
        [-0.0965,  0.1255],
        [ 0.2087, -0.4813],
        [-0.0139,  0.1086],
        [-0.0558, -0.8046]], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 0.5181,  0.4716,  0.3983,  0.5379,  0.6674,  0.3046,  0.4229,  0.3659,
          0.5764,  0.5107],
        [-0.1384,  0.0391, -0.3892, -0.3638, -0.5178, -0.4291, -0.4847, -0.4031,
         -0.2487,  0.0612],
        [ 0.3703,  0.3723,  0.2835,  0.2632,  0.3508,  0.2913,  0.1412, -0.1330,
          0.4094,  0.1867],
        [-0.0724, -0.2347, -0.1449,  0.0544, -0.1482,  0.1147,  0.2642, -0.2063,
         -0.0319,  0.0250],
        [-0.3850, -0.4966, -0.2490, -0.4066, -0.3257, -0.3998, -0.0714, -0.3956,
         -0.2701, -0.0813],
        [ 0.4953,  0.3817,  0.1091,  0.3564,  0.0978,  0.2670,  0.3641,  0.3603,
          0.1090,  0.3734],
        [ 0.6330,  0.3549,  0.3604,  0.2563,  0.1002,  0.6916,  0.6159,  0.4149,
          0.4437,  0.6769],
        [ 0.0881,  0.4763,  0.1234,  0.4584,  0.3170,  0.4549,  0.6864,  0.2585,
          0.6854,  0.2015],
        [-0.1224, -0.4886, -0.4767, -0.3803, -0.5419, -0.2632, -0.1228, -0.0303,
         -0.2753, -0.5816],
        [ 0.2957,  0.6368,  0.2882,  0.4133,  0.0462,  0.1130,  0.3519,  0.2994,
          0.5022,  0.3580]], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ 0.2655,  0.2822,  0.2766,  0.3752,  0.4017,  0.6764,  0.6666,  0.6225,
          0.2167,  0.6023],
        [-0.5385, -0.2241, -0.3532, -0.1981, -0.0907, -0.3120, -0.3613, -0.3916,
         -0.2376, -0.4804]], device='cuda:0'))])
xi:  [5.9999986]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 739.1234252547491
W_T_median: 734.353801581464
W_T_pctile_5: 534.0986632153163
W_T_CVAR_5_pct: 496.272282612906
Average q (qsum/M+1):  59.10831197102865
Optimal xi:  [5.9999986]
Expected(across Rb) median(across samples) p_equity:  0.004486592207103968
obj fun:  tensor(-354.9491, device='cuda:0', dtype=torch.float64,
       grad_fn=<MeanBackward0>)
-----------------------------------------------
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 0.05
-----------------------------------------------

/home/marcchen/Documents/constrain_factor/researchcode/exp_config_json_files/multi_portfolio_TEST4_kappa3.json
Starting at: 
17-07-23_14:34

 numpy seed:  2  


 pytorch seed:  2  

Key parameters-------
paths: 2560
iterations: 5
batchsize: 5
remove neg:  False
w constaint activation:  yy_fix_jan29


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = 3factor_mc
timeseries_basket['basket_desc'] = 3 factors : Basic, size, value, mom
timeseries_basket['basket_columns'] = 
['T30_real_ret', 'B10_real_ret', 'VWD_real_ret', 'Size_Lo30_real_ret', 'Value_Hi30_real_ret', 'Mom_Hi30_real_ret']
############# End: defined asset  basket #################
               Cash_nom_ret  Size_Lo30_nom_ret  ...  VWD_nom_ret  EWD_nom_ret
My identifier                                   ...                          
192601                  0.0                NaN  ...     0.000561     0.023174
192602                  0.0                NaN  ...    -0.033046    -0.053510
192603                  0.0                NaN  ...    -0.064002    -0.096824
192604                  0.0                NaN  ...     0.037029     0.032975
192605                  0.0                NaN  ...     0.012095     0.001035

[5 rows x 16 columns]
               Cash_nom_ret  Size_Lo30_nom_ret  ...  VWD_nom_ret  EWD_nom_ret
My identifier                                   ...                          
202208                  NaN            -0.0020  ...    -0.036240    -0.011556
202209                  NaN            -0.0955  ...    -0.091324    -0.099903
202210                  NaN             0.0883  ...     0.077403     0.049863
202211                  NaN            -0.0076  ...     0.052365     0.028123
202212                  NaN            -0.0457  ...    -0.057116    -0.047241

[5 rows x 16 columns]


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = 3factor_mc
timeseries_basket['basket_desc'] = 3 factors : Basic, size, value, mom
timeseries_basket['basket_columns'] = 
['T30_nom_ret', 'B10_nom_ret', 'VWD_nom_ret', 'Size_Lo30_nom_ret', 'Value_Hi30_nom_ret', 'Mom_Hi30_nom_ret']
############# End: defined asset  basket #################
               Size_Lo30_nom_ret  Value_Hi30_nom_ret  ...  B10_nom_ret  VWD_nom_ret
My identifier                                         ...                          
192607                    0.0014              0.0154  ...     0.005383     0.031411
192608                    0.0319              0.0561  ...     0.005363     0.028647
192609                   -0.0173             -0.0071  ...     0.005343     0.005787
192610                   -0.0294             -0.0355  ...     0.005323    -0.028996
192611                   -0.0038              0.0294  ...     0.005303     0.028554

[5 rows x 7 columns]
               Size_Lo30_nom_ret  Value_Hi30_nom_ret  ...  B10_nom_ret  VWD_nom_ret
My identifier                                         ...                          
202208                   -0.0020             -0.0164  ...    -0.043289    -0.036240
202209                   -0.0955             -0.0871  ...    -0.050056    -0.091324
202210                    0.0883              0.1486  ...    -0.014968     0.077403
202211                   -0.0076              0.0462  ...     0.040789     0.052365
202212                   -0.0457             -0.0499  ...    -0.018566    -0.057116

[5 rows x 7 columns]
Indices constructed with column names:
Index(['date_for_plt', 'Size_Lo30_nom_ret_ind', 'Value_Hi30_nom_ret_ind',
       'Mom_Hi30_nom_ret_ind', 'CPI_nom_ret_ind', 'T30_nom_ret_ind',
       'B10_nom_ret_ind', 'VWD_nom_ret_ind'],
      dtype='object')
############# Updated: defined asset basket #################
timeseries_basket['data_df_mean'] = 
T30_real_ret           0.000229
B10_real_ret           0.001637
VWD_real_ret           0.006759
Size_Lo30_real_ret     0.009939
Value_Hi30_real_ret    0.010052
Mom_Hi30_real_ret      0.011386
dtype: float64


timeseries_basket['data_df_stdev'] = 
T30_real_ret           0.005227
B10_real_ret           0.019258
VWD_real_ret           0.053610
Size_Lo30_real_ret     0.082598
Value_Hi30_real_ret    0.072063
Mom_Hi30_real_ret      0.061421
dtype: float64


timeseries_basket['data_df_corr'] = 
                     T30_real_ret  ...  Mom_Hi30_real_ret
T30_real_ret             1.000000  ...           0.055142
B10_real_ret             0.351722  ...           0.066570
VWD_real_ret             0.068448  ...           0.936115
Size_Lo30_real_ret       0.014412  ...           0.903222
Value_Hi30_real_ret      0.018239  ...           0.869469
Mom_Hi30_real_ret        0.055142  ...           1.000000

[6 rows x 6 columns]


timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names', 'data_df', 'data_df_mean', 'data_df_stdev', 'data_df_corr'])
############# End: updated: defined asset basket #################
-----------------------------------------------
Dates to be REMOVED due to missing values (should be at *start* only due to trading signals):
Int64Index([], dtype='int64')
-----------------------------------------------
Dates from available data for bootstrapping:
Start: 192607
End: 202212
-----------------------------------------------
Bootstrap block size: 6
-----------------------------------------------
Dates USED bootstrapping:
Start: 199201
End: 202212
-----------------------------------------------
0.0% of bootstrap sample done.
5.0% of bootstrap sample done.
10.0% of bootstrap sample done.
15.0% of bootstrap sample done.
20.0% of bootstrap sample done.
25.0% of bootstrap sample done.
30.0% of bootstrap sample done.
35.0% of bootstrap sample done.
40.0% of bootstrap sample done.
45.0% of bootstrap sample done.
50.0% of bootstrap sample done.
55.00000000000001% of bootstrap sample done.
60.0% of bootstrap sample done.
65.0% of bootstrap sample done.
70.0% of bootstrap sample done.
75.0% of bootstrap sample done.
80.0% of bootstrap sample done.
85.0% of bootstrap sample done.
90.0% of bootstrap sample done.
95.0% of bootstrap sample done.
Withdrawal NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       1       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      14  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      14  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       1              none   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 14)     True          14  
2     (14, 14)     True          14  
3      (14, 1)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
Allocation NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       7       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      14  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      14  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       7              none   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 14)     True          14  
2     (14, 14)     True          14  
3      (14, 7)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       14  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       14  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 14)      True          14  
0     (14, 14)      True          14  
0      (14, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       14  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       14  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        7              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 14)      True          14  
0     (14, 14)      True          14  
0      (14, 7)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
{'methods': ['Adam'], 'output_progress': False, 'tol': 1e-06, 'itbound_scipy_algorithms': 1000, 'check_exit_criteria': False, 'nit_running_min': 0, 'itbound_SGD_algorithms': 5, 'nit_IterateAveragingStart': 4, 'batchsize': 5, 'SGD_learningrate': 50.0, 'Adagrad_epsilon': 1e-08, 'Adagrad_eta': 1.0, 'Adadelta_ewma': 0.9, 'Adadelta_epsilon': 1e-08, 'RMSprop_ewma': 0.8, 'RMSprop_epsilon': 1e-08, 'RMSprop_eta': 0.1, 'Adam_ewma_1': 0.9, 'Adam_ewma_2': 0.998, 'Adam_eta': 0.0, 'Adam_epsilon': 1e-08, 'Adam_weight_decay': 0.0001, 'running_min_from_avg': False, 'running_min_from_sgd': True, 'lr_schedule': True}
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       14  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       14  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 14)      True          14  
0     (14, 14)      True          14  
0      (14, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       14  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       14  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        7              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 14)      True          14  
0     (14, 14)      True          14  
0      (14, 7)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ 12.0558,  -1.1777],
        [  4.7658,   5.5153],
        [ 12.5031,  -1.1768],
        [-16.3692,   5.2330],
        [ 10.1358,  -1.6168],
        [ -8.6886,  10.4756],
        [-16.3742,   5.2386],
        [ 13.0340,  -1.3010],
        [ -0.1190, -17.1320],
        [  8.0070, -17.6677],
        [ 12.1029,  -1.1953],
        [ 12.1903,  -1.0276],
        [ 10.8186,  22.9468],
        [ -0.8392,  -0.2291]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -9.8324, -12.9648,  -9.9818,   0.5514,  -9.9458,   2.5212,   0.5619,
        -10.2069,  -2.2020,  -2.9888,  -9.8209,  -9.9444,  -3.6014,  -2.7499],
       device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-1.2490e-01,  2.8733e-02, -1.4953e-01, -1.9889e-02, -1.3575e-02,
         -5.1998e-01, -2.0187e-02, -1.6713e-01, -3.0660e-01, -7.4242e-01,
         -1.3004e-01, -1.3132e-01, -6.7575e-01, -2.8091e-02],
        [ 2.0621e-01, -9.7465e-02,  2.3216e-01,  2.0523e-01,  5.7198e-02,
          1.8286e+00,  2.0601e-01,  2.4832e-01,  6.1666e-01,  1.1999e+00,
          2.1261e-01,  2.1088e-01,  1.1377e+00,  1.0116e-01],
        [-1.2490e-01,  2.8733e-02, -1.4953e-01, -1.9889e-02, -1.3575e-02,
         -5.1998e-01, -2.0187e-02, -1.6713e-01, -3.0660e-01, -7.4242e-01,
         -1.3004e-01, -1.3132e-01, -6.7575e-01, -2.8091e-02],
        [-1.2490e-01,  2.8733e-02, -1.4953e-01, -1.9889e-02, -1.3575e-02,
         -5.1998e-01, -2.0187e-02, -1.6713e-01, -3.0660e-01, -7.4242e-01,
         -1.3004e-01, -1.3132e-01, -6.7575e-01, -2.8091e-02],
        [-1.2490e-01,  2.8733e-02, -1.4953e-01, -1.9889e-02, -1.3575e-02,
         -5.1998e-01, -2.0187e-02, -1.6713e-01, -3.0660e-01, -7.4242e-01,
         -1.3004e-01, -1.3132e-01, -6.7575e-01, -2.8091e-02],
        [ 7.8384e+00,  4.0037e+00,  9.5834e+00, -6.1714e+00,  4.0678e+00,
         -6.7163e+00, -5.9137e+00,  1.0969e+01,  9.0417e+00,  4.3156e+00,
          7.9517e+00,  8.6282e+00, -1.2788e+01, -1.1112e-01],
        [ 6.9042e+00,  3.8608e+00,  8.5866e+00, -8.3804e+00,  3.0953e+00,
         -5.9277e+00, -8.5474e+00,  9.8578e+00,  9.0267e+00,  7.7578e+00,
          7.4743e+00,  7.4672e+00, -1.2806e+01,  8.3368e-02],
        [ 5.7560e+00,  2.4150e+00,  6.9947e+00, -4.2028e+00,  1.6506e+00,
         -5.1709e+00, -4.2510e+00,  8.3297e+00,  6.8955e+00,  3.9976e+00,
          6.2109e+00,  6.1031e+00, -1.0540e+01, -2.8632e-03],
        [-1.2490e-01,  2.8733e-02, -1.4953e-01, -1.9889e-02, -1.3575e-02,
         -5.1998e-01, -2.0187e-02, -1.6713e-01, -3.0660e-01, -7.4242e-01,
         -1.3004e-01, -1.3132e-01, -6.7575e-01, -2.8091e-02],
        [-1.2490e-01,  2.8733e-02, -1.4953e-01, -1.9889e-02, -1.3575e-02,
         -5.1998e-01, -2.0187e-02, -1.6713e-01, -3.0660e-01, -7.4242e-01,
         -1.3004e-01, -1.3132e-01, -6.7575e-01, -2.8091e-02],
        [-1.2490e-01,  2.8733e-02, -1.4953e-01, -1.9889e-02, -1.3575e-02,
         -5.1999e-01, -2.0187e-02, -1.6713e-01, -3.0660e-01, -7.4242e-01,
         -1.3004e-01, -1.3132e-01, -6.7576e-01, -2.8091e-02],
        [-1.2490e-01,  2.8733e-02, -1.4953e-01, -1.9889e-02, -1.3575e-02,
         -5.1998e-01, -2.0187e-02, -1.6713e-01, -3.0660e-01, -7.4242e-01,
         -1.3004e-01, -1.3132e-01, -6.7575e-01, -2.8091e-02],
        [-1.2490e-01,  2.8733e-02, -1.4953e-01, -1.9889e-02, -1.3575e-02,
         -5.1998e-01, -2.0187e-02, -1.6713e-01, -3.0660e-01, -7.4242e-01,
         -1.3004e-01, -1.3132e-01, -6.7575e-01, -2.8091e-02],
        [-1.2490e-01,  2.8733e-02, -1.4953e-01, -1.9889e-02, -1.3575e-02,
         -5.1998e-01, -2.0187e-02, -1.6713e-01, -3.0660e-01, -7.4242e-01,
         -1.3004e-01, -1.3132e-01, -6.7575e-01, -2.8091e-02]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.4788,  3.8863, -1.4788, -1.4788, -1.4788, -1.8560,  0.2677, -2.5505,
        -1.4788, -1.4788, -1.4788, -1.4788, -1.4788, -1.4788], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[  0.0138,  11.8260,   0.0138,   0.0138,   0.0138, -10.6316, -11.1510,
          -6.7669,   0.0138,   0.0138,   0.0138,   0.0138,   0.0138,   0.0138]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -1.6289,   0.3109],
        [  6.0230,  15.1676],
        [  8.5574,   8.8681],
        [  3.8048,   0.3493],
        [ -1.6431,   0.3400],
        [-15.4985,   9.0568],
        [ 11.7431,   0.6708],
        [ -5.2152,   4.3917],
        [ -7.4588,  12.0437],
        [ -1.6760,   0.3099],
        [ -1.6480,   0.3200],
        [-11.4321,  -8.3757],
        [ -1.6489,   0.3438],
        [ 11.0197,   6.8567]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -4.8558,   3.4149,  -0.2630,  -9.5151,  -4.7973,   2.6776, -10.6534,
         -4.9885,   1.4391,  -4.8062,  -4.8183,  -2.4193,  -4.7993,  -2.8156],
       device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 6.1599e-01, -7.9992e+00, -6.0721e+00, -3.1116e-01,  6.7459e-01,
         -4.9160e+00, -1.3176e+01, -2.4348e-01, -6.4272e+00,  6.9750e-01,
          6.6638e-01,  6.0942e+00,  6.3892e-01, -1.2008e+01],
        [ 1.7212e-02, -5.0174e+00,  5.4307e-01, -7.9006e-02,  2.1436e-02,
         -3.2462e-01, -6.9175e-01, -4.6889e-02, -8.0871e-01,  2.0051e-02,
          1.8942e-02,  1.6527e+00,  1.9976e-02, -6.1669e+00],
        [ 1.6148e-01,  6.4412e-01,  1.0944e+00, -1.5535e-02,  1.6809e-01,
         -1.7451e+00, -2.6404e+00,  4.3690e-02, -2.3998e+00,  1.7221e-01,
          1.6691e-01, -2.1492e+00,  1.6639e-01, -9.5718e-01],
        [-7.9265e-02,  3.7496e+00, -2.2951e-01, -8.2138e-01, -2.0860e-02,
          6.0665e+00, -1.6505e+01,  3.8130e+00,  2.8187e+00, -6.5653e-02,
         -5.1856e-02,  5.0573e+00, -1.5147e-02, -1.7614e+00],
        [ 4.1270e-02,  8.8293e-02,  7.1299e-01, -2.8106e-03,  4.4995e-02,
         -1.1547e+00,  1.2881e+00, -2.6056e-01,  5.8243e-01,  4.2407e-02,
          4.3511e-02,  6.1904e-02,  4.4608e-02,  2.2264e+00],
        [ 4.7232e-02, -8.8549e-01,  1.4393e+00, -3.2742e-01,  9.7305e-02,
         -2.9627e+00, -3.4423e+00, -4.9435e-02, -4.3554e+00,  5.9551e-02,
          5.7960e-02, -4.6651e-01,  1.0925e-01,  9.0146e-01],
        [-3.7394e-02, -5.3679e+00, -4.5480e-01, -1.1363e+00, -4.4941e-02,
          2.0709e+00, -3.6309e+00, -1.3630e-01, -8.4750e+00, -1.6852e-02,
         -3.9735e-02,  7.0559e+00, -3.5576e-02,  2.8549e-01],
        [-9.3361e-03, -6.1635e-01,  1.4000e+00, -8.3646e-02,  4.2386e-03,
         -2.5243e+00, -3.0676e+00, -2.6367e-02, -3.2597e+00, -6.7959e-03,
         -8.4020e-03, -7.3737e-01,  4.7853e-03,  3.4818e-01],
        [ 1.7946e-01,  7.4452e-01,  1.0885e+00, -2.5197e-02,  1.8634e-01,
         -1.6848e+00, -2.6616e+00,  6.5616e-02, -2.5126e+00,  1.9185e-01,
          1.8496e-01, -2.2486e+00,  1.8479e-01, -9.5786e-01],
        [-3.5287e-01, -1.1082e+01, -1.5867e+01,  5.2144e-01, -4.2004e-01,
         -5.4368e+00,  1.0277e+00, -9.7706e-02, -3.4543e+00, -4.3361e-01,
         -3.9026e-01,  7.7811e+00, -4.1270e-01, -6.6252e+00],
        [ 1.2098e-01, -2.0349e-01,  1.2771e+00, -2.9300e-02,  1.3940e-01,
         -2.9735e+00, -2.7589e+00, -5.1291e-02, -1.4607e+00,  1.2950e-01,
          1.2623e-01, -1.3681e+00,  1.3759e-01, -5.6991e-01],
        [-1.3556e-01, -1.0788e+01,  1.8697e-01,  1.0628e-01, -1.2451e-01,
         -4.3773e-01,  2.1078e+00, -8.7108e-02, -2.9792e-01, -1.0549e-01,
         -1.2136e-01, -8.9300e-02, -1.2521e-01,  1.9271e+00],
        [ 4.1159e-02,  4.9492e-01, -2.5492e+00,  1.2183e-01, -2.2038e-02,
          5.7390e+00, -5.3885e+00,  3.6980e-01,  2.8173e+00,  3.4017e-02,
          1.0737e-02,  4.2573e+00, -2.4259e-02, -1.5816e+00],
        [ 2.1067e-01, -5.1881e+00, -2.4950e-01,  1.6530e-02,  2.2327e-01,
         -3.7515e+00, -4.8156e+00, -8.5321e-02, -1.6730e+00,  2.1771e-01,
          2.1564e-01,  2.4350e+00,  2.1929e-01, -8.2605e+00]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ 0.8629, -3.6059, -4.1667, -2.9520,  5.1897, -4.8124, -1.0509, -5.0248,
        -4.1030, -1.6737, -4.4996, -4.4046, -5.3503, -2.0645], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-4.6030e-01, -2.8171e+00, -2.4101e+00,  1.8852e+00,  2.1011e+00,
         -4.3528e+00, -1.5541e+00, -3.5650e+00, -2.4638e+00, -6.8881e+00,
         -3.3979e+00, -4.2853e+00,  1.5127e+00, -2.6153e+00],
        [ 1.1531e+00,  3.0455e+00,  2.4733e+00,  4.6326e-02,  1.2253e+00,
          4.3856e+00,  1.8407e+00,  3.6176e+00,  2.4737e+00,  7.2873e+00,
          3.4283e+00,  5.2124e+00, -6.5493e-01,  2.9161e+00],
        [-1.3623e-01, -1.4625e-02, -1.1948e-01, -5.8421e-01, -1.1518e+01,
         -1.1621e-01, -7.2989e-01, -7.4413e-02, -1.3450e-01, -4.9255e-02,
         -7.9535e-02, -1.6171e-01, -2.8435e-02, -2.8923e-02],
        [-3.2465e-01, -2.0719e-02, -5.6186e-02, -3.8526e-01, -5.3163e+00,
         -5.0650e-02, -5.9660e-01, -3.4785e-02, -6.2494e-02, -1.9358e-01,
         -3.8752e-02, -6.7769e-02, -2.0930e-02, -6.4101e-02],
        [-3.6885e-01, -2.3366e-02, -4.1802e-02, -3.6388e-01, -4.3035e+00,
         -3.7964e-02, -5.5754e-01, -2.4394e-02, -4.6654e-02, -2.3390e-01,
         -2.8607e-02, -6.3597e-02, -2.6151e-02, -8.9257e-02],
        [ 4.4166e-01, -1.4334e-02,  7.9905e-02,  1.0779e-01,  9.3761e+00,
          6.3421e-02,  9.2256e-01,  4.3962e-02,  8.7724e-02,  2.2021e-01,
          5.4726e-02,  1.3713e-01, -1.0689e-01, -1.2041e-01],
        [ 1.4823e+01,  1.4618e+00,  1.5795e-01, -1.8162e+00,  1.3019e+00,
          8.1721e-01,  5.1270e+00,  3.3489e-01,  1.0971e-01,  7.9407e-01,
          1.0293e+00, -3.0584e+00, -4.7250e+00,  4.0030e+00]], device='cuda:0'))])
loaded xi:  641.77704
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.0, 0.6, 0.1, 0.1, 0.1, 0.1]
W_T_mean: 1380.5368698915129
W_T_median: 1187.9564065185045
W_T_pctile_5: 132.29126394320096
W_T_CVAR_5_pct: -45.94535423508964
-----------------------------------------------
new min fval from sgd:  -2743.4688305131035
min fval:  -2743.4688305131035
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ 12.0558,  -1.1777],
        [  4.7658,   5.5153],
        [ 12.5031,  -1.1768],
        [-16.3692,   5.2330],
        [ 10.1358,  -1.6168],
        [ -8.6886,  10.4756],
        [-16.3742,   5.2386],
        [ 13.0340,  -1.3010],
        [ -0.1190, -17.1320],
        [  8.0070, -17.6677],
        [ 12.1029,  -1.1953],
        [ 12.1903,  -1.0276],
        [ 10.8186,  22.9468],
        [ -0.8392,  -0.2291]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -9.8324, -12.9648,  -9.9818,   0.5514,  -9.9458,   2.5212,   0.5619,
        -10.2069,  -2.2020,  -2.9888,  -9.8209,  -9.9444,  -3.6014,  -2.7499],
       device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-1.2490e-01,  2.8733e-02, -1.4953e-01, -1.9889e-02, -1.3575e-02,
         -5.1998e-01, -2.0187e-02, -1.6713e-01, -3.0660e-01, -7.4242e-01,
         -1.3004e-01, -1.3132e-01, -6.7575e-01, -2.8091e-02],
        [ 2.0621e-01, -9.7465e-02,  2.3216e-01,  2.0523e-01,  5.7198e-02,
          1.8286e+00,  2.0601e-01,  2.4832e-01,  6.1666e-01,  1.1999e+00,
          2.1261e-01,  2.1088e-01,  1.1377e+00,  1.0116e-01],
        [-1.2490e-01,  2.8733e-02, -1.4953e-01, -1.9889e-02, -1.3575e-02,
         -5.1998e-01, -2.0187e-02, -1.6713e-01, -3.0660e-01, -7.4242e-01,
         -1.3004e-01, -1.3132e-01, -6.7575e-01, -2.8091e-02],
        [-1.2490e-01,  2.8733e-02, -1.4953e-01, -1.9889e-02, -1.3575e-02,
         -5.1998e-01, -2.0187e-02, -1.6713e-01, -3.0660e-01, -7.4242e-01,
         -1.3004e-01, -1.3132e-01, -6.7575e-01, -2.8091e-02],
        [-1.2490e-01,  2.8733e-02, -1.4953e-01, -1.9889e-02, -1.3575e-02,
         -5.1998e-01, -2.0187e-02, -1.6713e-01, -3.0660e-01, -7.4242e-01,
         -1.3004e-01, -1.3132e-01, -6.7575e-01, -2.8091e-02],
        [ 7.8384e+00,  4.0037e+00,  9.5834e+00, -6.1714e+00,  4.0678e+00,
         -6.7163e+00, -5.9137e+00,  1.0969e+01,  9.0417e+00,  4.3156e+00,
          7.9517e+00,  8.6282e+00, -1.2788e+01, -1.1112e-01],
        [ 6.9042e+00,  3.8608e+00,  8.5866e+00, -8.3804e+00,  3.0953e+00,
         -5.9277e+00, -8.5474e+00,  9.8578e+00,  9.0267e+00,  7.7578e+00,
          7.4743e+00,  7.4672e+00, -1.2806e+01,  8.3368e-02],
        [ 5.7560e+00,  2.4150e+00,  6.9947e+00, -4.2028e+00,  1.6506e+00,
         -5.1709e+00, -4.2510e+00,  8.3297e+00,  6.8955e+00,  3.9976e+00,
          6.2109e+00,  6.1031e+00, -1.0540e+01, -2.8632e-03],
        [-1.2490e-01,  2.8733e-02, -1.4953e-01, -1.9889e-02, -1.3575e-02,
         -5.1998e-01, -2.0187e-02, -1.6713e-01, -3.0660e-01, -7.4242e-01,
         -1.3004e-01, -1.3132e-01, -6.7575e-01, -2.8091e-02],
        [-1.2490e-01,  2.8733e-02, -1.4953e-01, -1.9889e-02, -1.3575e-02,
         -5.1998e-01, -2.0187e-02, -1.6713e-01, -3.0660e-01, -7.4242e-01,
         -1.3004e-01, -1.3132e-01, -6.7575e-01, -2.8091e-02],
        [-1.2490e-01,  2.8733e-02, -1.4953e-01, -1.9889e-02, -1.3575e-02,
         -5.1999e-01, -2.0187e-02, -1.6713e-01, -3.0660e-01, -7.4242e-01,
         -1.3004e-01, -1.3132e-01, -6.7576e-01, -2.8091e-02],
        [-1.2490e-01,  2.8733e-02, -1.4953e-01, -1.9889e-02, -1.3575e-02,
         -5.1998e-01, -2.0187e-02, -1.6713e-01, -3.0660e-01, -7.4242e-01,
         -1.3004e-01, -1.3132e-01, -6.7575e-01, -2.8091e-02],
        [-1.2490e-01,  2.8733e-02, -1.4953e-01, -1.9889e-02, -1.3575e-02,
         -5.1998e-01, -2.0187e-02, -1.6713e-01, -3.0660e-01, -7.4242e-01,
         -1.3004e-01, -1.3132e-01, -6.7575e-01, -2.8091e-02],
        [-1.2490e-01,  2.8733e-02, -1.4953e-01, -1.9889e-02, -1.3575e-02,
         -5.1998e-01, -2.0187e-02, -1.6713e-01, -3.0660e-01, -7.4242e-01,
         -1.3004e-01, -1.3132e-01, -6.7575e-01, -2.8091e-02]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.4788,  3.8863, -1.4788, -1.4788, -1.4788, -1.8560,  0.2677, -2.5505,
        -1.4788, -1.4788, -1.4788, -1.4788, -1.4788, -1.4788], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[  0.0138,  11.8260,   0.0138,   0.0138,   0.0138, -10.6316, -11.1510,
          -6.7669,   0.0138,   0.0138,   0.0138,   0.0138,   0.0138,   0.0138]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -1.6289,   0.3109],
        [  6.0230,  15.1676],
        [  8.5574,   8.8681],
        [  3.8048,   0.3493],
        [ -1.6431,   0.3400],
        [-15.4985,   9.0568],
        [ 11.7431,   0.6708],
        [ -5.2152,   4.3917],
        [ -7.4588,  12.0437],
        [ -1.6760,   0.3099],
        [ -1.6480,   0.3200],
        [-11.4321,  -8.3757],
        [ -1.6489,   0.3438],
        [ 11.0197,   6.8567]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -4.8558,   3.4149,  -0.2630,  -9.5151,  -4.7973,   2.6776, -10.6534,
         -4.9885,   1.4391,  -4.8062,  -4.8183,  -2.4193,  -4.7993,  -2.8156],
       device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 6.1599e-01, -7.9992e+00, -6.0721e+00, -3.1116e-01,  6.7459e-01,
         -4.9160e+00, -1.3176e+01, -2.4348e-01, -6.4272e+00,  6.9750e-01,
          6.6638e-01,  6.0942e+00,  6.3892e-01, -1.2008e+01],
        [ 1.7212e-02, -5.0174e+00,  5.4307e-01, -7.9006e-02,  2.1436e-02,
         -3.2462e-01, -6.9175e-01, -4.6889e-02, -8.0871e-01,  2.0051e-02,
          1.8942e-02,  1.6527e+00,  1.9976e-02, -6.1669e+00],
        [ 1.6148e-01,  6.4412e-01,  1.0944e+00, -1.5535e-02,  1.6809e-01,
         -1.7451e+00, -2.6404e+00,  4.3690e-02, -2.3998e+00,  1.7221e-01,
          1.6691e-01, -2.1492e+00,  1.6639e-01, -9.5718e-01],
        [-7.9265e-02,  3.7496e+00, -2.2951e-01, -8.2138e-01, -2.0860e-02,
          6.0665e+00, -1.6505e+01,  3.8130e+00,  2.8187e+00, -6.5653e-02,
         -5.1856e-02,  5.0573e+00, -1.5147e-02, -1.7614e+00],
        [ 4.1270e-02,  8.8293e-02,  7.1299e-01, -2.8106e-03,  4.4995e-02,
         -1.1547e+00,  1.2881e+00, -2.6056e-01,  5.8243e-01,  4.2407e-02,
          4.3511e-02,  6.1904e-02,  4.4608e-02,  2.2264e+00],
        [ 4.7232e-02, -8.8549e-01,  1.4393e+00, -3.2742e-01,  9.7305e-02,
         -2.9627e+00, -3.4423e+00, -4.9435e-02, -4.3554e+00,  5.9551e-02,
          5.7960e-02, -4.6651e-01,  1.0925e-01,  9.0146e-01],
        [-3.7394e-02, -5.3679e+00, -4.5480e-01, -1.1363e+00, -4.4941e-02,
          2.0709e+00, -3.6309e+00, -1.3630e-01, -8.4750e+00, -1.6852e-02,
         -3.9735e-02,  7.0559e+00, -3.5576e-02,  2.8549e-01],
        [-9.3361e-03, -6.1635e-01,  1.4000e+00, -8.3646e-02,  4.2386e-03,
         -2.5243e+00, -3.0676e+00, -2.6367e-02, -3.2597e+00, -6.7959e-03,
         -8.4020e-03, -7.3737e-01,  4.7853e-03,  3.4818e-01],
        [ 1.7946e-01,  7.4452e-01,  1.0885e+00, -2.5197e-02,  1.8634e-01,
         -1.6848e+00, -2.6616e+00,  6.5616e-02, -2.5126e+00,  1.9185e-01,
          1.8496e-01, -2.2486e+00,  1.8479e-01, -9.5786e-01],
        [-3.5287e-01, -1.1082e+01, -1.5867e+01,  5.2144e-01, -4.2004e-01,
         -5.4368e+00,  1.0277e+00, -9.7706e-02, -3.4543e+00, -4.3361e-01,
         -3.9026e-01,  7.7811e+00, -4.1270e-01, -6.6252e+00],
        [ 1.2098e-01, -2.0349e-01,  1.2771e+00, -2.9300e-02,  1.3940e-01,
         -2.9735e+00, -2.7589e+00, -5.1291e-02, -1.4607e+00,  1.2950e-01,
          1.2623e-01, -1.3681e+00,  1.3759e-01, -5.6991e-01],
        [-1.3556e-01, -1.0788e+01,  1.8697e-01,  1.0628e-01, -1.2451e-01,
         -4.3773e-01,  2.1078e+00, -8.7108e-02, -2.9792e-01, -1.0549e-01,
         -1.2136e-01, -8.9300e-02, -1.2521e-01,  1.9271e+00],
        [ 4.1159e-02,  4.9492e-01, -2.5492e+00,  1.2183e-01, -2.2038e-02,
          5.7390e+00, -5.3885e+00,  3.6980e-01,  2.8173e+00,  3.4017e-02,
          1.0737e-02,  4.2573e+00, -2.4259e-02, -1.5816e+00],
        [ 2.1067e-01, -5.1881e+00, -2.4950e-01,  1.6530e-02,  2.2327e-01,
         -3.7515e+00, -4.8156e+00, -8.5321e-02, -1.6730e+00,  2.1771e-01,
          2.1564e-01,  2.4350e+00,  2.1929e-01, -8.2605e+00]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ 0.8629, -3.6059, -4.1667, -2.9520,  5.1897, -4.8124, -1.0509, -5.0248,
        -4.1030, -1.6737, -4.4996, -4.4046, -5.3503, -2.0645], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-4.6030e-01, -2.8171e+00, -2.4101e+00,  1.8852e+00,  2.1011e+00,
         -4.3528e+00, -1.5541e+00, -3.5650e+00, -2.4638e+00, -6.8881e+00,
         -3.3979e+00, -4.2853e+00,  1.5127e+00, -2.6153e+00],
        [ 1.1531e+00,  3.0455e+00,  2.4733e+00,  4.6326e-02,  1.2253e+00,
          4.3856e+00,  1.8407e+00,  3.6176e+00,  2.4737e+00,  7.2873e+00,
          3.4283e+00,  5.2124e+00, -6.5493e-01,  2.9161e+00],
        [-1.3623e-01, -1.4625e-02, -1.1948e-01, -5.8421e-01, -1.1518e+01,
         -1.1621e-01, -7.2989e-01, -7.4413e-02, -1.3450e-01, -4.9255e-02,
         -7.9535e-02, -1.6171e-01, -2.8435e-02, -2.8923e-02],
        [-3.2465e-01, -2.0719e-02, -5.6186e-02, -3.8526e-01, -5.3163e+00,
         -5.0650e-02, -5.9660e-01, -3.4785e-02, -6.2494e-02, -1.9358e-01,
         -3.8752e-02, -6.7769e-02, -2.0930e-02, -6.4101e-02],
        [-3.6885e-01, -2.3366e-02, -4.1802e-02, -3.6388e-01, -4.3035e+00,
         -3.7964e-02, -5.5754e-01, -2.4394e-02, -4.6654e-02, -2.3390e-01,
         -2.8607e-02, -6.3597e-02, -2.6151e-02, -8.9257e-02],
        [ 4.4166e-01, -1.4334e-02,  7.9905e-02,  1.0779e-01,  9.3761e+00,
          6.3421e-02,  9.2256e-01,  4.3962e-02,  8.7724e-02,  2.2021e-01,
          5.4726e-02,  1.3713e-01, -1.0689e-01, -1.2041e-01],
        [ 1.4823e+01,  1.4618e+00,  1.5795e-01, -1.8162e+00,  1.3019e+00,
          8.1721e-01,  5.1270e+00,  3.3489e-01,  1.0971e-01,  7.9407e-01,
          1.0293e+00, -3.0584e+00, -4.7250e+00,  4.0030e+00]], device='cuda:0'))])
xi:  [641.77704]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 1131.841308715971
W_T_median: 1162.4819469931128
W_T_pctile_5: 790.9866147603799
W_T_CVAR_5_pct: 494.0441118689113
Average q (qsum/M+1):  43.24755465599798
Optimal xi:  [641.77704]
Expected(across Rb) median(across samples) p_equity:  0.180512930577
obj fun:  tensor(-2743.4688, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
/home/marcchen/Documents/constrain_factor/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/constrain_factor/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: 3factor_mc
Objective function: mean_cvar_single_level
Tracing param: 3.0
-----------------------------------------------

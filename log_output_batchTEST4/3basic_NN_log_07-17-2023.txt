/home/marcchen/Documents/constrain_factor/researchcode/exp_config_json_files/multi_portfolio_TEST4_kappa3.json
Starting at: 
17-07-23_14:10

 numpy seed:  2  


 pytorch seed:  2  

Key parameters-------
paths: 256000
iterations: 10
batchsize: 10
remove neg:  False
w constaint activation:  yy_fix_jan29


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = Paper_FactorInv_Basic
timeseries_basket['basket_desc'] = Basic portfolio for paper: T30, B10 and VWD
timeseries_basket['basket_columns'] = 
['T30_real_ret', 'B10_real_ret', 'VWD_real_ret']
############# End: defined asset  basket #################
               Cash_nom_ret  Size_Lo30_nom_ret  ...  VWD_nom_ret  EWD_nom_ret
My identifier                                   ...                          
192601                  0.0                NaN  ...     0.000561     0.023174
192602                  0.0                NaN  ...    -0.033046    -0.053510
192603                  0.0                NaN  ...    -0.064002    -0.096824
192604                  0.0                NaN  ...     0.037029     0.032975
192605                  0.0                NaN  ...     0.012095     0.001035

[5 rows x 16 columns]
               Cash_nom_ret  Size_Lo30_nom_ret  ...  VWD_nom_ret  EWD_nom_ret
My identifier                                   ...                          
202208                  NaN            -0.0020  ...    -0.036240    -0.011556
202209                  NaN            -0.0955  ...    -0.091324    -0.099903
202210                  NaN             0.0883  ...     0.077403     0.049863
202211                  NaN            -0.0076  ...     0.052365     0.028123
202212                  NaN            -0.0457  ...    -0.057116    -0.047241

[5 rows x 16 columns]


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = Paper_FactorInv_Basic
timeseries_basket['basket_desc'] = Basic portfolio for paper: T30, B10 and VWD
timeseries_basket['basket_columns'] = 
['T30_nom_ret', 'B10_nom_ret', 'VWD_nom_ret']
############# End: defined asset  basket #################
               CPI_nom_ret  T30_nom_ret  B10_nom_ret  VWD_nom_ret
My identifier                                                    
192607           -0.011299     0.002243     0.005383     0.031411
192608           -0.005714     0.002536     0.005363     0.028647
192609            0.005747     0.002273     0.005343     0.005787
192610            0.005714     0.003195     0.005323    -0.028996
192611            0.005682     0.003093     0.005303     0.028554
               CPI_nom_ret  T30_nom_ret  B10_nom_ret  VWD_nom_ret
My identifier                                                    
202208           -0.000354     0.001901    -0.043289    -0.036240
202209            0.002151     0.001929    -0.050056    -0.091324
202210            0.004056     0.002327    -0.014968     0.077403
202211           -0.001010     0.002856     0.040789     0.052365
202212           -0.003070     0.003379    -0.018566    -0.057116
Indices constructed with column names:
Index(['date_for_plt', 'CPI_nom_ret_ind', 'T30_nom_ret_ind', 'B10_nom_ret_ind',
       'VWD_nom_ret_ind'],
      dtype='object')
############# Updated: defined asset basket #################
timeseries_basket['data_df_mean'] = 
T30_real_ret    0.000229
B10_real_ret    0.001637
VWD_real_ret    0.006759
dtype: float64


timeseries_basket['data_df_stdev'] = 
T30_real_ret    0.005227
B10_real_ret    0.019258
VWD_real_ret    0.053610
dtype: float64


timeseries_basket['data_df_corr'] = 
              T30_real_ret  B10_real_ret  VWD_real_ret
T30_real_ret      1.000000      0.351722      0.068448
B10_real_ret      0.351722      1.000000      0.090987
VWD_real_ret      0.068448      0.090987      1.000000


timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names', 'data_df', 'data_df_mean', 'data_df_stdev', 'data_df_corr'])
############# End: updated: defined asset basket #################
-----------------------------------------------
Dates to be REMOVED due to missing values (should be at *start* only due to trading signals):
Int64Index([], dtype='int64')
-----------------------------------------------
Dates from available data for bootstrapping:
Start: 192607
End: 202212
-----------------------------------------------
Bootstrap block size: 6
-----------------------------------------------
Dates USED bootstrapping:
Start: 199201
End: 202212
-----------------------------------------------
0.0% of bootstrap sample done.
5.0% of bootstrap sample done.
10.0% of bootstrap sample done.
15.0% of bootstrap sample done.
20.0% of bootstrap sample done.
25.0% of bootstrap sample done.
30.0% of bootstrap sample done.
35.0% of bootstrap sample done.
40.0% of bootstrap sample done.
45.0% of bootstrap sample done.
50.0% of bootstrap sample done.
55.00000000000001% of bootstrap sample done.
60.0% of bootstrap sample done.
Traceback (most recent call last):
  File "/home/marcchen/Documents/constrain_factor/researchcode/bash_driver_factordecum.py", line 628, in <module>
    params = fun_Data__bootstrap_wrapper.wrap_run_bootstrap(
  File "/home/marcchen/Documents/constrain_factor/researchcode/fun_Data__bootstrap_wrapper.py", line 77, in wrap_run_bootstrap
    params = fun_Data_bootstrap.run_bootstrap(df_all = params["bootstrap_source_data"],
  File "/home/marcchen/Documents/constrain_factor/researchcode/fun_Data_bootstrap.py", line 156, in run_bootstrap
    df_out_array_assets = df_out_array[column_names_assets].copy()
  File "/home/marcchen/.local/lib/python3.10/site-packages/pandas/core/frame.py", line 3511, in __getitem__
    indexer = self.columns._get_indexer_strict(key, "columns")[1]
  File "/home/marcchen/.local/lib/python3.10/site-packages/pandas/core/indexes/base.py", line 5791, in _get_indexer_strict
    indexer = self.get_indexer_for(keyarr)
  File "/home/marcchen/.local/lib/python3.10/site-packages/pandas/core/indexes/base.py", line 5778, in get_indexer_for
    return self.get_indexer(target)
  File "/home/marcchen/.local/lib/python3.10/site-packages/pandas/core/indexes/base.py", line 3776, in get_indexer
    if is_dtype_equal(self.dtype, target.dtype) and self.equals(target):
  File "/home/marcchen/.local/lib/python3.10/site-packages/pandas/core/indexes/base.py", line 5277, in equals
    return array_equivalent(self._values, other._values)
  File "/home/marcchen/.local/lib/python3.10/site-packages/pandas/core/dtypes/missing.py", line 458, in array_equivalent
    return _array_equivalent_object(left, right, strict_nan)
  File "/home/marcchen/.local/lib/python3.10/site-packages/pandas/core/dtypes/missing.py", line 503, in _array_equivalent_object
    left = left.ravel("K")
KeyboardInterrupt

/home/marcchen/Documents/constrain_factor/researchcode/exp_config_json_files/multi_portfolio_TEST4_kappa3.json
Starting at: 
17-07-23_14:43

 numpy seed:  2  


 pytorch seed:  2  

Key parameters-------
paths: 256000
iterations: 10
batchsize: 10
remove neg:  False
w constaint activation:  yy_fix_jan29


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = 3factor_mc
timeseries_basket['basket_desc'] = 3 factors : Basic, size, value, mom
timeseries_basket['basket_columns'] = 
['T30_real_ret', 'B10_real_ret', 'VWD_real_ret', 'Size_Lo30_real_ret', 'Value_Hi30_real_ret', 'Mom_Hi30_real_ret']
############# End: defined asset  basket #################
               Cash_nom_ret  Size_Lo30_nom_ret  ...  VWD_nom_ret  EWD_nom_ret
My identifier                                   ...                          
192601                  0.0                NaN  ...     0.000561     0.023174
192602                  0.0                NaN  ...    -0.033046    -0.053510
192603                  0.0                NaN  ...    -0.064002    -0.096824
192604                  0.0                NaN  ...     0.037029     0.032975
192605                  0.0                NaN  ...     0.012095     0.001035

[5 rows x 16 columns]
               Cash_nom_ret  Size_Lo30_nom_ret  ...  VWD_nom_ret  EWD_nom_ret
My identifier                                   ...                          
202208                  NaN            -0.0020  ...    -0.036240    -0.011556
202209                  NaN            -0.0955  ...    -0.091324    -0.099903
202210                  NaN             0.0883  ...     0.077403     0.049863
202211                  NaN            -0.0076  ...     0.052365     0.028123
202212                  NaN            -0.0457  ...    -0.057116    -0.047241

[5 rows x 16 columns]


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = 3factor_mc
timeseries_basket['basket_desc'] = 3 factors : Basic, size, value, mom
timeseries_basket['basket_columns'] = 
['T30_nom_ret', 'B10_nom_ret', 'VWD_nom_ret', 'Size_Lo30_nom_ret', 'Value_Hi30_nom_ret', 'Mom_Hi30_nom_ret']
############# End: defined asset  basket #################
               Size_Lo30_nom_ret  Value_Hi30_nom_ret  ...  B10_nom_ret  VWD_nom_ret
My identifier                                         ...                          
192607                    0.0014              0.0154  ...     0.005383     0.031411
192608                    0.0319              0.0561  ...     0.005363     0.028647
192609                   -0.0173             -0.0071  ...     0.005343     0.005787
192610                   -0.0294             -0.0355  ...     0.005323    -0.028996
192611                   -0.0038              0.0294  ...     0.005303     0.028554

[5 rows x 7 columns]
               Size_Lo30_nom_ret  Value_Hi30_nom_ret  ...  B10_nom_ret  VWD_nom_ret
My identifier                                         ...                          
202208                   -0.0020             -0.0164  ...    -0.043289    -0.036240
202209                   -0.0955             -0.0871  ...    -0.050056    -0.091324
202210                    0.0883              0.1486  ...    -0.014968     0.077403
202211                   -0.0076              0.0462  ...     0.040789     0.052365
202212                   -0.0457             -0.0499  ...    -0.018566    -0.057116

[5 rows x 7 columns]
Indices constructed with column names:
Index(['date_for_plt', 'Size_Lo30_nom_ret_ind', 'Value_Hi30_nom_ret_ind',
       'Mom_Hi30_nom_ret_ind', 'CPI_nom_ret_ind', 'T30_nom_ret_ind',
       'B10_nom_ret_ind', 'VWD_nom_ret_ind'],
      dtype='object')
############# Updated: defined asset basket #################
timeseries_basket['data_df_mean'] = 
T30_real_ret           0.000229
B10_real_ret           0.001637
VWD_real_ret           0.006759
Size_Lo30_real_ret     0.009939
Value_Hi30_real_ret    0.010052
Mom_Hi30_real_ret      0.011386
dtype: float64


timeseries_basket['data_df_stdev'] = 
T30_real_ret           0.005227
B10_real_ret           0.019258
VWD_real_ret           0.053610
Size_Lo30_real_ret     0.082598
Value_Hi30_real_ret    0.072063
Mom_Hi30_real_ret      0.061421
dtype: float64


timeseries_basket['data_df_corr'] = 
                     T30_real_ret  ...  Mom_Hi30_real_ret
T30_real_ret             1.000000  ...           0.055142
B10_real_ret             0.351722  ...           0.066570
VWD_real_ret             0.068448  ...           0.936115
Size_Lo30_real_ret       0.014412  ...           0.903222
Value_Hi30_real_ret      0.018239  ...           0.869469
Mom_Hi30_real_ret        0.055142  ...           1.000000

[6 rows x 6 columns]


timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names', 'data_df', 'data_df_mean', 'data_df_stdev', 'data_df_corr'])
############# End: updated: defined asset basket #################
-----------------------------------------------
Dates to be REMOVED due to missing values (should be at *start* only due to trading signals):
Int64Index([], dtype='int64')
-----------------------------------------------
Dates from available data for bootstrapping:
Start: 192607
End: 202212
-----------------------------------------------
Bootstrap block size: 6
-----------------------------------------------
Dates USED bootstrapping:
Start: 199201
End: 202212
-----------------------------------------------
0.0% of bootstrap sample done.
5.0% of bootstrap sample done.
10.0% of bootstrap sample done.
15.0% of bootstrap sample done.
20.0% of bootstrap sample done.
25.0% of bootstrap sample done.
30.0% of bootstrap sample done.
35.0% of bootstrap sample done.
40.0% of bootstrap sample done.
45.0% of bootstrap sample done.
50.0% of bootstrap sample done.
55.00000000000001% of bootstrap sample done.
60.0% of bootstrap sample done.
65.0% of bootstrap sample done.
70.0% of bootstrap sample done.
75.0% of bootstrap sample done.
80.0% of bootstrap sample done.
85.0% of bootstrap sample done.
90.0% of bootstrap sample done.
95.0% of bootstrap sample done.
Withdrawal NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       1       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      14  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      14  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       1              none   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 14)     True          14  
2     (14, 14)     True          14  
3      (14, 1)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
Allocation NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       7       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      14  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      14  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       7              none   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 14)     True          14  
2     (14, 14)     True          14  
3      (14, 7)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       14  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       14  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 14)      True          14  
0     (14, 14)      True          14  
0      (14, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       14  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       14  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        7              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 14)      True          14  
0     (14, 14)      True          14  
0      (14, 7)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
{'methods': ['Adam'], 'output_progress': False, 'tol': 1e-06, 'itbound_scipy_algorithms': 1000, 'check_exit_criteria': False, 'nit_running_min': 0, 'itbound_SGD_algorithms': 10, 'nit_IterateAveragingStart': 9, 'batchsize': 10, 'SGD_learningrate': 50.0, 'Adagrad_epsilon': 1e-08, 'Adagrad_eta': 1.0, 'Adadelta_ewma': 0.9, 'Adadelta_epsilon': 1e-08, 'RMSprop_ewma': 0.8, 'RMSprop_epsilon': 1e-08, 'RMSprop_eta': 0.1, 'Adam_ewma_1': 0.9, 'Adam_ewma_2': 0.998, 'Adam_eta': 0.0, 'Adam_epsilon': 1e-08, 'Adam_weight_decay': 0.0001, 'running_min_from_avg': False, 'running_min_from_sgd': True, 'lr_schedule': True}
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       14  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       14  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 14)      True          14  
0     (14, 14)      True          14  
0      (14, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       14  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       14  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        7              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 14)      True          14  
0     (14, 14)      True          14  
0      (14, 7)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ 0.1116, -0.1417],
        [ 0.1116, -0.1417],
        [ 0.1116, -0.1417],
        [ 0.1116, -0.1417],
        [ 0.1116, -0.1417],
        [ 0.1116, -0.1417],
        [ 0.1116, -0.1417],
        [ 0.1116, -0.1417],
        [ 0.1116, -0.1417],
        [ 0.1116, -0.1417],
        [ 0.1116, -0.1417],
        [ 0.1116, -0.1417],
        [ 0.1116, -0.1417],
        [ 0.1116, -0.1417]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([0.1954, 0.1954, 0.1954, 0.1954, 0.1954, 0.1954, 0.1954, 0.1954, 0.1954,
        0.1954, 0.1954, 0.1954, 0.1954, 0.1954], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849,
         0.1849, 0.1849, 0.1849, 0.1849, 0.1849],
        [0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849,
         0.1849, 0.1849, 0.1849, 0.1849, 0.1849],
        [0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849,
         0.1849, 0.1849, 0.1849, 0.1849, 0.1849],
        [0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849,
         0.1849, 0.1849, 0.1849, 0.1849, 0.1849],
        [0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849,
         0.1849, 0.1849, 0.1849, 0.1849, 0.1849],
        [0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849,
         0.1849, 0.1849, 0.1849, 0.1849, 0.1849],
        [0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849,
         0.1849, 0.1849, 0.1849, 0.1849, 0.1849],
        [0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849,
         0.1849, 0.1849, 0.1849, 0.1849, 0.1849],
        [0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849,
         0.1849, 0.1849, 0.1849, 0.1849, 0.1849],
        [0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849,
         0.1849, 0.1849, 0.1849, 0.1849, 0.1849],
        [0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849,
         0.1849, 0.1849, 0.1849, 0.1849, 0.1849],
        [0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849,
         0.1849, 0.1849, 0.1849, 0.1849, 0.1849],
        [0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849,
         0.1849, 0.1849, 0.1849, 0.1849, 0.1849],
        [0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849, 0.1849,
         0.1849, 0.1849, 0.1849, 0.1849, 0.1849]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([0.3133, 0.3133, 0.3133, 0.3133, 0.3133, 0.3133, 0.3133, 0.3133, 0.3133,
        0.3133, 0.3133, 0.3133, 0.3133, 0.3133], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-1.5070, -1.5070, -1.5070, -1.5070, -1.5070, -1.5070, -1.5070, -1.5070,
         -1.5070, -1.5070, -1.5070, -1.5070, -1.5070, -1.5070]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[-13.5796,   7.5828],
        [  6.7553,  11.2646],
        [ -1.6422,  14.5011],
        [-12.3148,  -8.6958],
        [ -2.3427,   0.6041],
        [ -1.8723,   0.3626],
        [ -7.9652,  11.5110],
        [ -1.8704,   0.3681],
        [  8.1409,   0.5822],
        [  8.3376,   0.5688],
        [ -7.6138,  18.2288],
        [-25.0427,   8.1181],
        [ 10.5524,   6.9529],
        [ -6.9821,   3.8707]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ 3.2340,  2.1797,  3.9374, -1.0955, -5.7884, -5.7018, -7.1791, -5.7090,
        -8.8183, -8.0712,  0.1587,  0.7478, -2.5374, -9.3793], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 3.0002e-01, -1.9403e+00,  3.8058e-01, -2.8586e-01, -1.3486e-02,
         -1.3408e-02, -1.2761e-02, -1.3337e-02, -6.9150e-01, -1.2447e+00,
         -6.2323e-01, -8.4957e-02, -1.9965e+00, -1.1116e-01],
        [-7.8942e-02, -2.0288e+00,  9.0808e-02, -6.8469e-01, -1.2414e-02,
         -1.3387e-02, -3.5271e-02, -1.3254e-02, -8.7512e-01, -1.4741e+00,
         -6.6820e-01, -1.0227e-01, -2.1319e+00, -6.8416e-02],
        [ 2.9859e+00,  6.6868e-01,  2.8327e+00,  1.8095e+00, -6.4300e-01,
         -2.7005e-01, -5.1779e-01, -2.7340e-01, -2.5308e+00, -1.9250e+00,
          2.2233e+00,  5.7506e+00, -3.0246e+00, -4.7169e+00],
        [-3.3015e+00, -6.6615e+00, -7.5143e+00,  9.7946e+00,  3.1303e-01,
          4.9006e-01, -9.4479e-03,  4.8203e-01, -1.7039e+01, -1.8114e+01,
         -1.0446e+01,  3.4012e+00, -1.1906e+01, -1.5517e-02],
        [ 4.5556e-01, -3.0074e+00, -1.8761e+00,  5.3894e+00,  8.9869e-02,
          7.1241e-02,  9.0006e-03,  7.1625e-02, -1.6044e+00, -4.2903e+00,
         -3.4381e-01,  1.5942e+00, -6.2225e+00,  1.1000e-02],
        [ 2.0214e+00, -8.1221e+00, -4.2520e+00,  8.4005e+00,  3.1122e-01,
          2.7987e-01,  1.3391e-02,  2.8119e-01, -4.0740e+00, -5.9884e+00,
          7.5954e-01,  5.9765e+00, -1.0099e+01,  1.4676e-02],
        [-1.0829e+00, -8.1417e-01,  7.6226e-01, -4.0955e-01, -2.8935e-01,
         -1.7619e-01,  5.0975e+00, -1.6592e-01, -4.0143e+00, -5.2321e+00,
          1.5846e+00,  1.3173e+01, -2.4598e+00,  6.9997e+00],
        [ 7.6822e+00,  3.9349e+00,  2.3036e+00, -7.2880e+00,  8.5614e-01,
         -7.5056e-02, -6.9927e+00, -1.2816e-01, -2.4968e+00, -3.8594e+00,
          4.1510e+00,  3.2322e+00, -1.2904e+00, -1.0494e+01],
        [ 3.0011e-01, -1.9403e+00,  3.8068e-01, -2.8580e-01, -1.3487e-02,
         -1.3410e-02, -1.2755e-02, -1.3339e-02, -6.9150e-01, -1.2447e+00,
         -6.2325e-01, -8.4958e-02, -1.9965e+00, -1.1118e-01],
        [-5.1379e+00,  5.2336e-01, -2.0797e+00,  9.9175e+00, -7.5849e-01,
         -2.5227e-01,  2.6403e+00, -3.0252e-01,  8.0837e+00,  8.0321e+00,
          1.2338e-01, -1.5341e+01, -1.5004e+00, -2.5304e+00],
        [ 3.1397e+00, -1.6601e+01, -2.4606e+00,  9.1754e+00, -8.4198e-02,
         -1.5018e-01,  1.6778e-01, -1.3917e-01,  3.8297e+00,  3.3770e+00,
          1.5563e+00,  4.4636e+00, -4.9335e+00,  1.7906e-01],
        [-9.4261e+00, -2.1116e+00, -1.5598e+01,  7.3867e+00, -5.0609e-01,
         -2.3988e-01,  2.4016e-03, -2.6199e-01, -4.1343e+00, -3.3681e+00,
          4.8850e-02, -5.2023e-02,  6.4412e-01,  7.3259e-03],
        [ 2.9165e-01, -1.9520e+00,  3.9259e-01, -2.9775e-01, -1.4312e-02,
         -1.4392e-02, -1.1329e-02, -1.4305e-02, -7.3003e-01, -1.2983e+00,
         -6.5854e-01, -7.8389e-02, -2.0161e+00, -1.1185e-01],
        [-5.9049e+00,  1.6377e+00, -3.8594e-02,  2.1128e+00,  3.3671e-01,
          3.9250e-01, -1.1017e-02,  3.8992e-01, -3.7535e+00, -4.5704e+00,
         -1.1294e+00, -7.1522e-01, -6.3946e+00,  1.8866e-03]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-5.6030, -5.3966, -7.4637,  0.3252, -4.8541, -3.9632, -9.3966, -4.3167,
        -5.6030,  1.9458, -3.6258, -0.2532, -5.5470, -3.5910], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ 6.9874e-01,  1.2459e+00,  1.9631e+00,  6.1573e-02, -6.0453e-01,
         -1.9404e+00,  2.6425e+00,  2.2406e+00,  6.9871e-01,  1.7112e+00,
         -6.2909e+00,  4.2045e-01,  8.0134e-01, -6.3809e-01],
        [-6.9160e-01, -9.3796e-01, -1.9269e+00,  9.2507e-01,  1.1803e+00,
          2.5632e+00,  1.3411e+00,  5.5192e-02, -6.9160e-01,  1.1286e+00,
          6.6473e+00,  2.6792e+00, -7.1289e-01,  9.8998e-01],
        [-3.4585e-03, -3.1530e-03, -5.1667e-01, -5.9832e-02, -3.2109e-03,
         -4.4450e-03, -1.0312e+01, -8.7809e+00, -3.4593e-03, -1.2812e+01,
         -1.5008e-02, -1.4086e+00, -3.7013e-03, -3.1330e-02],
        [-6.1914e-03, -5.8955e-03, -1.6933e-01, -6.7133e-01, -1.3956e-01,
         -3.9887e-01, -4.8425e+00, -3.7079e+00, -6.1917e-03, -5.3610e+00,
         -4.9545e-01, -1.2633e+00, -6.3546e-03, -5.7566e-02],
        [-3.8612e-03, -3.4849e-03, -1.0984e-01, -7.6967e-01, -1.9742e-01,
         -5.1121e-01, -3.8627e+00, -2.5950e+00, -3.8616e-03, -4.3699e+00,
         -5.9660e-01, -1.2069e+00, -4.0249e-03, -7.3492e-02],
        [ 2.8150e-03,  3.2998e-03,  2.7229e-01, -8.5090e-01, -1.6257e-01,
         -5.7488e-01,  8.9110e+00,  6.3118e+00,  2.8147e-03,  1.0958e+01,
         -7.2624e-01,  3.6907e-01,  2.6284e-03, -1.5697e-01],
        [ 4.3125e-01,  1.1403e+00, -4.3834e+00,  1.5633e+01,  3.9332e+00,
          5.2601e+00,  9.9877e-01, -7.6474e-01,  4.3118e-01,  1.0593e+00,
         -1.6681e-01,  2.9374e+00,  4.7487e-01,  7.3538e+00]], device='cuda:0'))])
loaded xi:  682.8397
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.0, 0.6, 0.1, 0.1, 0.1, 0.1]
W_T_mean: 1011.5336873625768
W_T_median: 846.3315480446447
W_T_pctile_5: -19.171513607574234
W_T_CVAR_5_pct: -160.48826639580275
-----------------------------------------------
new min fval from sgd:  -5733.7293880587
min fval:  -5733.7293880587
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 939.4752359462447
W_T_median: 940.9534794215137
W_T_pctile_5: 717.629543960657
W_T_CVAR_5_pct: 467.0994260493788
Average q (qsum/M+1):  35.0
Optimal xi:  [682.8397]
Expected(across Rb) median(across samples) p_equity:  0.12222478630331655
obj fun:  tensor(-5733.7294, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
/home/marcchen/Documents/constrain_factor/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/constrain_factor/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: 3factor_mc
Objective function: mean_cvar_single_level
Tracing param: 10.0
-----------------------------------------------

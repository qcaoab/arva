/home/marcchen/Documents/constrain_factor/researchcode/exp_config_json_files/multi_portfolio_TEST3_split_1991.json
Starting at: 
12-08-23_21:07

 numpy seed:  2  


 pytorch seed:  2  

Key parameters-------
paths: 256000
iterations: 10
batchsize: 10
remove neg:  False
w constaint activation:  yy_fix_jan29


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = Paper_FactorInv_Factor2
timeseries_basket['basket_desc'] = Factor2 portfolio for paper: Basic, size and value
timeseries_basket['basket_columns'] = 
['T30_real_ret', 'B10_real_ret', 'VWD_real_ret', 'Size_Lo30_real_ret', 'Value_Hi30_real_ret']
############# End: defined asset  basket #################
               Cash_nom_ret  Size_Lo30_nom_ret  ...  VWD_nom_ret  EWD_nom_ret
My identifier                                   ...                          
192601                  0.0                NaN  ...     0.000561     0.023174
192602                  0.0                NaN  ...    -0.033046    -0.053510
192603                  0.0                NaN  ...    -0.064002    -0.096824
192604                  0.0                NaN  ...     0.037029     0.032975
192605                  0.0                NaN  ...     0.012095     0.001035

[5 rows x 16 columns]
               Cash_nom_ret  Size_Lo30_nom_ret  ...  VWD_nom_ret  EWD_nom_ret
My identifier                                   ...                          
202208                  NaN            -0.0020  ...    -0.036240    -0.011556
202209                  NaN            -0.0955  ...    -0.091324    -0.099903
202210                  NaN             0.0883  ...     0.077403     0.049863
202211                  NaN            -0.0076  ...     0.052365     0.028123
202212                  NaN            -0.0457  ...    -0.057116    -0.047241

[5 rows x 16 columns]


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = Paper_FactorInv_Factor2
timeseries_basket['basket_desc'] = Factor2 portfolio for paper: Basic, size and value
timeseries_basket['basket_columns'] = 
['T30_nom_ret', 'B10_nom_ret', 'VWD_nom_ret', 'Size_Lo30_nom_ret', 'Value_Hi30_nom_ret']
############# End: defined asset  basket #################
               Size_Lo30_nom_ret  Value_Hi30_nom_ret  ...  B10_nom_ret  VWD_nom_ret
My identifier                                         ...                          
192607                    0.0014              0.0154  ...     0.005383     0.031411
192608                    0.0319              0.0561  ...     0.005363     0.028647
192609                   -0.0173             -0.0071  ...     0.005343     0.005787
192610                   -0.0294             -0.0355  ...     0.005323    -0.028996
192611                   -0.0038              0.0294  ...     0.005303     0.028554

[5 rows x 6 columns]
               Size_Lo30_nom_ret  Value_Hi30_nom_ret  ...  B10_nom_ret  VWD_nom_ret
My identifier                                         ...                          
202208                   -0.0020             -0.0164  ...    -0.043289    -0.036240
202209                   -0.0955             -0.0871  ...    -0.050056    -0.091324
202210                    0.0883              0.1486  ...    -0.014968     0.077403
202211                   -0.0076              0.0462  ...     0.040789     0.052365
202212                   -0.0457             -0.0499  ...    -0.018566    -0.057116

[5 rows x 6 columns]
Indices constructed with column names:
Index(['date_for_plt', 'Size_Lo30_nom_ret_ind', 'Value_Hi30_nom_ret_ind',
       'CPI_nom_ret_ind', 'T30_nom_ret_ind', 'B10_nom_ret_ind',
       'VWD_nom_ret_ind'],
      dtype='object')
############# Updated: defined asset basket #################
timeseries_basket['data_df_mean'] = 
T30_real_ret           0.000229
B10_real_ret           0.001637
VWD_real_ret           0.006759
Size_Lo30_real_ret     0.009939
Value_Hi30_real_ret    0.010052
dtype: float64


timeseries_basket['data_df_stdev'] = 
T30_real_ret           0.005227
B10_real_ret           0.019258
VWD_real_ret           0.053610
Size_Lo30_real_ret     0.082598
Value_Hi30_real_ret    0.072063
dtype: float64


timeseries_basket['data_df_corr'] = 
                     T30_real_ret  ...  Value_Hi30_real_ret
T30_real_ret             1.000000  ...             0.018239
B10_real_ret             0.351722  ...             0.031301
VWD_real_ret             0.068448  ...             0.909335
Size_Lo30_real_ret       0.014412  ...             0.908542
Value_Hi30_real_ret      0.018239  ...             1.000000

[5 rows x 5 columns]


timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names', 'data_df', 'data_df_mean', 'data_df_stdev', 'data_df_corr'])
############# End: updated: defined asset basket #################
-----------------------------------------------
Dates to be REMOVED due to missing values (should be at *start* only due to trading signals):
Int64Index([], dtype='int64')
-----------------------------------------------
Dates from available data for bootstrapping:
Start: 192607
End: 202212
-----------------------------------------------
Bootstrap block size: 6
-----------------------------------------------
Dates USED bootstrapping:
Start: 199201
End: 202212
-----------------------------------------------
0.0% of bootstrap sample done.
5.0% of bootstrap sample done.
10.0% of bootstrap sample done.
15.0% of bootstrap sample done.
20.0% of bootstrap sample done.
25.0% of bootstrap sample done.
30.0% of bootstrap sample done.
35.0% of bootstrap sample done.
40.0% of bootstrap sample done.
45.0% of bootstrap sample done.
50.0% of bootstrap sample done.
55.00000000000001% of bootstrap sample done.
60.0% of bootstrap sample done.
65.0% of bootstrap sample done.
70.0% of bootstrap sample done.
75.0% of bootstrap sample done.
80.0% of bootstrap sample done.
85.0% of bootstrap sample done.
90.0% of bootstrap sample done.
95.0% of bootstrap sample done.
Withdrawal NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       1       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      13  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      13  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       1              none   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 13)     True          13  
2     (13, 13)     True          13  
3      (13, 1)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
Allocation NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       5       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      13  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      13  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       5              none   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 13)     True          13  
2     (13, 13)     True          13  
3      (13, 5)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        5              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 5)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
{'methods': ['Adam'], 'output_progress': False, 'tol': 1e-06, 'itbound_scipy_algorithms': 1000, 'check_exit_criteria': False, 'nit_running_min': 0, 'itbound_SGD_algorithms': 10, 'nit_IterateAveragingStart': 9, 'batchsize': 10, 'SGD_learningrate': 50.0, 'Adagrad_epsilon': 1e-08, 'Adagrad_eta': 1.0, 'Adadelta_ewma': 0.9, 'Adadelta_epsilon': 1e-08, 'RMSprop_ewma': 0.8, 'RMSprop_epsilon': 1e-08, 'RMSprop_eta': 0.1, 'Adam_ewma_1': 0.9, 'Adam_ewma_2': 0.998, 'Adam_eta': 0.0, 'Adam_epsilon': 1e-08, 'Adam_weight_decay': 0.0001, 'running_min_from_avg': False, 'running_min_from_sgd': True, 'lr_schedule': True}
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        5              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 5)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -9.5840,   7.2799],
        [ -3.7726,  -8.3773],
        [ -8.8580,  -0.3678],
        [ -3.8428,  -9.1727],
        [  4.9372,  -2.4150],
        [ -1.0563,   2.1808],
        [-46.3124,  -5.8339],
        [ -1.0209,   2.1741],
        [  5.4558,  -5.3701],
        [ -2.7524,  -6.6290],
        [ -1.0525,   2.1944],
        [ -1.7452, -12.5067],
        [ -1.0264,   2.2059]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ 4.7589, -4.0763,  7.3729, -4.4842, -5.8713, -4.5225, -4.5343, -4.4287,
        -4.7595, -3.7624, -4.3221,  1.9945, -4.4851], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-7.6034e+00,  6.4735e+00, -7.4846e+00,  8.1473e+00,  2.4784e+00,
          2.2264e-02,  8.9384e+00,  7.3726e-02,  5.4109e+00,  3.6354e+00,
          2.0691e-01, -7.7634e-01,  2.1633e-01],
        [ 6.4952e-01,  5.2031e-01,  2.1734e+00,  5.1684e-01,  7.3468e-01,
          2.5148e-02,  1.5666e-01,  2.0629e-02,  1.5240e+00,  4.3284e-01,
          1.5364e-02,  1.6239e+00,  2.2387e-02],
        [-4.4917e+00,  3.8827e+00, -6.3358e+00,  4.7916e+00,  2.7579e+00,
         -4.8471e-02,  4.8265e+00, -3.8908e-02,  3.8603e+00,  1.8107e+00,
         -3.8324e-02, -1.9966e+00, -2.8261e-02],
        [-5.3307e+00,  4.5763e+00, -6.6770e+00,  5.8028e+00,  3.2780e+00,
         -2.9632e-02,  5.7155e+00, -6.7156e-02,  4.5895e+00,  1.9096e+00,
         -1.2147e-01, -1.7148e+00, -5.4711e-02],
        [ 6.3795e-01,  5.2141e-01,  2.0841e+00,  5.1657e-01,  7.3746e-01,
          2.4299e-02,  1.5724e-01,  2.0664e-02,  1.5524e+00,  4.3275e-01,
          1.6312e-02,  1.6343e+00,  2.0765e-02],
        [-7.0884e+00,  5.9316e+00, -7.3395e+00,  7.8851e+00,  2.9442e+00,
          4.6498e-02,  8.8968e+00, -1.6245e-03,  5.1881e+00,  3.4923e+00,
         -2.6342e-02, -1.2053e+00, -1.2477e-01],
        [-6.5862e+00,  5.1983e+00, -6.7789e+00,  6.2725e+00,  3.6933e+00,
         -8.5065e-02,  6.7907e+00, -1.4897e-01,  4.7840e+00,  2.6329e+00,
         -2.6348e-01, -1.5697e+00, -1.6763e-01],
        [ 6.2534e-01,  5.0897e-01,  2.1017e+00,  5.0456e-01,  6.7473e-01,
          2.3124e-02,  1.5402e-01,  1.9323e-02,  1.4381e+00,  4.2472e-01,
          1.5187e-02,  1.5995e+00,  2.0865e-02],
        [ 6.4141e-01,  5.2730e-01,  2.0050e+00,  5.2389e-01,  6.5576e-01,
          2.3860e-02,  1.5458e-01,  2.0083e-02,  1.4552e+00,  4.3654e-01,
          1.5576e-02,  1.5935e+00,  2.1738e-02],
        [-4.1387e-01, -5.1865e-01, -1.2635e+00, -5.2709e-01, -3.7577e-01,
         -1.7323e-02, -8.4833e-02, -1.9176e-02, -9.6494e-01, -4.2377e-01,
         -2.0373e-02, -1.2910e+00, -1.8310e-02],
        [-6.7298e+00,  5.3164e+00, -6.8971e+00,  6.7237e+00,  2.8250e+00,
         -9.1380e-02,  6.7407e+00, -5.4426e-02,  5.6344e+00,  2.5118e+00,
         -1.7980e-01, -1.2661e+00, -1.0110e-01],
        [-3.9790e-01, -5.0162e-01, -1.1953e+00, -5.1034e-01, -3.6427e-01,
         -1.3337e-02, -8.6868e-02, -1.4230e-02, -9.5385e-01, -4.0952e-01,
         -1.6685e-02, -1.2566e+00, -1.5046e-02],
        [-4.1639e-01, -5.2438e-01, -1.2686e+00, -5.3245e-01, -3.8211e-01,
         -1.6343e-02, -8.4430e-02, -1.8349e-02, -9.6538e-01, -4.2933e-01,
         -1.7326e-02, -1.2959e+00, -1.5681e-02]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.9509,  2.6569, -1.2951, -1.3617,  2.7264, -0.5712, -1.1587,  2.6167,
         2.8810, -2.1178, -1.4593, -2.0180, -2.1192], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-9.7925e+00,  3.6032e+00, -3.6573e+00, -5.2113e+00,  3.7722e+00,
         -7.5435e+00, -6.8939e+00,  3.0263e+00,  3.6120e+00, -4.4524e-03,
         -7.1813e+00, -9.8793e-03, -3.6616e-03]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[-7.9906, -3.7462],
        [-4.0821,  7.0359],
        [-6.4548,  6.8212],
        [-7.8139, -3.8281],
        [ 0.5307,  8.1313],
        [ 7.4963,  3.6803],
        [-8.3225, -4.0736],
        [-8.5933, -4.1902],
        [-9.7700,  5.6628],
        [-8.1436, -4.0249],
        [ 7.3353,  2.9835],
        [ 8.9464,  4.3617],
        [ 2.6008, -6.7574]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([-0.8651,  5.7545,  4.8442, -2.8286,  5.5581, -6.5896, -1.7512, -1.0981,
         3.2871, -2.1801, -1.4716,  1.4357, -5.2654], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[  5.4857,  -5.6565,  -6.1449,  -3.9554,  -3.5369,  10.0239,   1.5645,
           5.5648,  -5.6284,  -0.2274,   1.1069,   1.1915,   7.1633],
        [ -0.0818,  -1.2287,  -0.4379,   0.3339,  -2.0250,  -0.7429,   0.2460,
          -0.0206,  -0.0228,   0.3131,  -2.2615,  -3.0967,  -2.0944],
        [ -1.3361,   1.4990,   0.9989,  -0.6948,   0.6450,   7.2304,  -1.0544,
          -1.2941,   5.9230,  -0.9119,  -2.2941,  -3.8193,  -6.8180],
        [  3.7161, -11.6782,  -8.4011,   4.6046, -14.3205,   0.4700,   4.4949,
           5.4292,  -0.8503,   4.1931,  -1.6739,  -3.4030,   2.5430],
        [ -6.9363,  12.3512,  11.2176,  -3.7114,   8.2928,   2.3262,  -7.6005,
          -9.4274,   9.8270,  -6.2617,   2.6626,   4.1851,  -3.3569],
        [  4.2191,  -5.6646,  -2.7949,   6.9011, -14.4383,  -0.0776,   5.2742,
           4.2226,   0.2606,   6.1735, -10.5732, -15.0410,   0.0661],
        [ -1.2840,  -1.8359,  -2.4155,  -2.1767,  -0.8525,   5.0249,  -2.0224,
          -1.5626,  -0.5388,  -2.2113,   0.9529,   1.8329,   0.7705],
        [ -5.8872,   8.9858,   7.2719,  -2.9763,  10.4027,   0.6210,  -5.8938,
          -7.4733,   6.4885,  -4.5868,   3.2623,   5.0048,  -3.4576],
        [ -7.0819,   9.3335,  10.9167,  -1.2574,   4.3984, -13.7777,  -5.4539,
          -8.8242,   9.0183,  -3.9252,  -0.0749,   1.5237,  -5.0922],
        [ -5.6892,   7.6904,   5.7403,  -4.0632,  12.3306,   0.6314,  -6.1033,
          -7.1570,   4.3561,  -5.2604,   4.5846,   6.9007,  -2.6368],
        [ -0.5162,  -0.7000,  -0.3496,  -0.0850,  -1.1219,  -0.0286,  -0.2756,
          -0.4894,   0.0267,  -0.1787,  -1.3777,  -2.3816,  -1.7230],
        [  0.5087,   0.7692,   0.6264,   0.0707,   1.0690,   0.2327,   0.3491,
           0.5131,   0.4130,   0.2300,   1.7565,   1.9644,   1.9220],
        [  6.3477,  -3.9732,  -3.2863,   1.8936,  -2.7467,   9.9384,   4.8393,
           6.7439,   1.9663,   3.6303,   0.6626,   0.6225,   5.1440]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ 3.5985, -3.1539, -4.0053,  0.4792, -1.4963, -3.3434,  1.2981, -1.4179,
        -3.0846, -0.2363, -2.8067,  2.7484,  1.8199], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-8.1083e-01,  8.2853e-02, -8.4939e-01, -1.1318e+01,  1.3852e+00,
         -1.8953e-01,  1.3499e-01,  1.9781e+00,  1.5748e-01,  1.2666e+00,
          1.2121e-01, -4.8538e-01, -1.8246e-01],
        [ 1.1437e+00,  1.2510e-01,  1.4461e+00,  1.2285e+00, -6.8493e-01,
          1.0525e+01,  1.0808e+00, -2.4546e-01,  7.9058e-01,  1.1117e+00,
         -3.0647e-01,  7.8976e-01,  7.2912e-01],
        [ 3.5496e+00, -4.3311e-02,  3.9216e-01,  5.3089e+00, -3.2507e+00,
         -9.9916e+00, -1.1938e+00, -5.8839e+00, -7.6241e-01, -6.3009e+00,
          3.0056e-01,  2.4703e+00,  2.6022e+00],
        [ 2.4241e+00, -1.3359e+00,  1.8811e+00,  1.6877e+00, -2.9684e+00,
         -1.7722e+01,  1.0784e+00, -3.0797e+00,  1.6278e+00, -2.9824e+00,
          2.0193e-01,  1.8139e+00,  1.8563e+00],
        [ 7.9155e+00,  1.9887e+00,  6.7931e+00, -3.7949e+00, -5.7336e-01,
         -1.4046e+01,  5.1790e+00, -6.9465e-01, -1.5675e+00,  4.1178e-01,
         -1.4875e-02, -4.1016e-01,  1.8445e+00]], device='cuda:0'))])
loaded xi:  -0.0027312108
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.0, 0.5, 0.2, 0.15, 0.15]
W_T_mean: 1121.2086969284844
W_T_median: 913.5981449464056
W_T_pctile_5: -49.656047068172875
W_T_CVAR_5_pct: -195.50895930099082
-----------------------------------------------
new min fval from sgd:  -1637.4643686343302
min fval:  -1637.4643686343302
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 116.8361888179712
W_T_median: 95.92043757025424
W_T_pctile_5: 63.845487837496975
W_T_CVAR_5_pct: 52.27364711305145
Average q (qsum/M+1):  52.994034305695564
Optimal xi:  [-0.00273121]
Expected(across Rb) median(across samples) p_equity:  0.3419159308075905
obj fun:  tensor(-1637.4644, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
/home/marcchen/Documents/constrain_factor/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/constrain_factor/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: Paper_FactorInv_Factor2
Objective function: mean_cvar_single_level
Tracing param: 1.0
-----------------------------------------------

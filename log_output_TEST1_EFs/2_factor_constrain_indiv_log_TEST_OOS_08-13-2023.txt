/home/marcchen/Documents/constrain_factor/researchcode/exp_config_json_files/multi_portfolio_TEST1_EFs_OOS_test.json
Starting at: 
13-08-23_11:00

 numpy seed:  3  


 pytorch seed:  3  

Key parameters-------
paths: 256000
iterations: 10
batchsize: 10
remove neg:  False
w constaint activation:  yy_fix_jan29


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = Paper_FactorInv_Factor2
timeseries_basket['basket_desc'] = Factor2 portfolio for paper: Basic, size and value
timeseries_basket['basket_columns'] = 
['T30_real_ret', 'B10_real_ret', 'VWD_real_ret', 'Size_Lo30_real_ret', 'Value_Hi30_real_ret']
############# End: defined asset  basket #################
               Cash_nom_ret  Size_Lo30_nom_ret  ...  VWD_nom_ret  EWD_nom_ret
My identifier                                   ...                          
192601                  0.0                NaN  ...     0.000561     0.023174
192602                  0.0                NaN  ...    -0.033046    -0.053510
192603                  0.0                NaN  ...    -0.064002    -0.096824
192604                  0.0                NaN  ...     0.037029     0.032975
192605                  0.0                NaN  ...     0.012095     0.001035

[5 rows x 16 columns]
               Cash_nom_ret  Size_Lo30_nom_ret  ...  VWD_nom_ret  EWD_nom_ret
My identifier                                   ...                          
202208                  NaN            -0.0020  ...    -0.036240    -0.011556
202209                  NaN            -0.0955  ...    -0.091324    -0.099903
202210                  NaN             0.0883  ...     0.077403     0.049863
202211                  NaN            -0.0076  ...     0.052365     0.028123
202212                  NaN            -0.0457  ...    -0.057116    -0.047241

[5 rows x 16 columns]


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = Paper_FactorInv_Factor2
timeseries_basket['basket_desc'] = Factor2 portfolio for paper: Basic, size and value
timeseries_basket['basket_columns'] = 
['T30_nom_ret', 'B10_nom_ret', 'VWD_nom_ret', 'Size_Lo30_nom_ret', 'Value_Hi30_nom_ret']
############# End: defined asset  basket #################
               Size_Lo30_nom_ret  Value_Hi30_nom_ret  ...  B10_nom_ret  VWD_nom_ret
My identifier                                         ...                          
192607                    0.0014              0.0154  ...     0.005383     0.031411
192608                    0.0319              0.0561  ...     0.005363     0.028647
192609                   -0.0173             -0.0071  ...     0.005343     0.005787
192610                   -0.0294             -0.0355  ...     0.005323    -0.028996
192611                   -0.0038              0.0294  ...     0.005303     0.028554

[5 rows x 6 columns]
               Size_Lo30_nom_ret  Value_Hi30_nom_ret  ...  B10_nom_ret  VWD_nom_ret
My identifier                                         ...                          
202208                   -0.0020             -0.0164  ...    -0.043289    -0.036240
202209                   -0.0955             -0.0871  ...    -0.050056    -0.091324
202210                    0.0883              0.1486  ...    -0.014968     0.077403
202211                   -0.0076              0.0462  ...     0.040789     0.052365
202212                   -0.0457             -0.0499  ...    -0.018566    -0.057116

[5 rows x 6 columns]
Indices constructed with column names:
Index(['date_for_plt', 'Size_Lo30_nom_ret_ind', 'Value_Hi30_nom_ret_ind',
       'CPI_nom_ret_ind', 'T30_nom_ret_ind', 'B10_nom_ret_ind',
       'VWD_nom_ret_ind'],
      dtype='object')
############# Updated: defined asset basket #################
timeseries_basket['data_df_mean'] = 
T30_real_ret           0.000229
B10_real_ret           0.001637
VWD_real_ret           0.006759
Size_Lo30_real_ret     0.009939
Value_Hi30_real_ret    0.010052
dtype: float64


timeseries_basket['data_df_stdev'] = 
T30_real_ret           0.005227
B10_real_ret           0.019258
VWD_real_ret           0.053610
Size_Lo30_real_ret     0.082598
Value_Hi30_real_ret    0.072063
dtype: float64


timeseries_basket['data_df_corr'] = 
                     T30_real_ret  ...  Value_Hi30_real_ret
T30_real_ret             1.000000  ...             0.018239
B10_real_ret             0.351722  ...             0.031301
VWD_real_ret             0.068448  ...             0.909335
Size_Lo30_real_ret       0.014412  ...             0.908542
Value_Hi30_real_ret      0.018239  ...             1.000000

[5 rows x 5 columns]


timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names', 'data_df', 'data_df_mean', 'data_df_stdev', 'data_df_corr'])
############# End: updated: defined asset basket #################
-----------------------------------------------
Dates to be REMOVED due to missing values (should be at *start* only due to trading signals):
Int64Index([], dtype='int64')
-----------------------------------------------
Dates from available data for bootstrapping:
Start: 192607
End: 202212
-----------------------------------------------
Bootstrap block size: 18
-----------------------------------------------
Dates USED bootstrapping:
Start: 196307
End: 202212
-----------------------------------------------
0.0% of bootstrap sample done.
5.0% of bootstrap sample done.
10.0% of bootstrap sample done.
15.0% of bootstrap sample done.
20.0% of bootstrap sample done.
25.0% of bootstrap sample done.
30.0% of bootstrap sample done.
35.0% of bootstrap sample done.
40.0% of bootstrap sample done.
45.0% of bootstrap sample done.
50.0% of bootstrap sample done.
55.00000000000001% of bootstrap sample done.
60.0% of bootstrap sample done.
65.0% of bootstrap sample done.
70.0% of bootstrap sample done.
75.0% of bootstrap sample done.
80.0% of bootstrap sample done.
85.0% of bootstrap sample done.
90.0% of bootstrap sample done.
95.0% of bootstrap sample done.
Withdrawal NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       1       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      13  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      13  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       1              none   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 13)     True          13  
2     (13, 13)     True          13  
3      (13, 1)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
Allocation NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       5       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      13  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      13  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       5              none   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 13)     True          13  
2     (13, 13)     True          13  
3      (13, 5)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        5              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 5)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
{'methods': ['Adam'], 'output_progress': False, 'tol': 1e-06, 'itbound_scipy_algorithms': 1000, 'check_exit_criteria': False, 'nit_running_min': 0, 'itbound_SGD_algorithms': 10, 'nit_IterateAveragingStart': 9, 'batchsize': 10, 'SGD_learningrate': 50.0, 'Adagrad_epsilon': 1e-08, 'Adagrad_eta': 1.0, 'Adadelta_ewma': 0.9, 'Adadelta_epsilon': 1e-08, 'RMSprop_ewma': 0.8, 'RMSprop_epsilon': 1e-08, 'RMSprop_eta': 0.1, 'Adam_ewma_1': 0.9, 'Adam_ewma_2': 0.998, 'Adam_eta': 0.0, 'Adam_epsilon': 1e-08, 'Adam_weight_decay': 0.0001, 'running_min_from_avg': False, 'running_min_from_sgd': True, 'lr_schedule': True}
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        5              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 5)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-1.4597,  3.2625],
        [-0.3560,  1.2194],
        [-0.3560,  1.2194],
        [-0.3560,  1.2194],
        [-0.3560,  1.2194],
        [12.7338,  1.6196],
        [-0.3499,  1.2390],
        [-1.2706,  7.6130],
        [-0.3560,  1.2194],
        [ 9.5948,  0.8040],
        [-0.3553,  1.2217],
        [10.0875,  1.1012],
        [-0.6036,  7.5266]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ 2.3582, -0.7418, -0.7418, -0.7418, -0.7418, -7.4562, -0.7460, 10.9451,
        -0.7418, -7.1454, -0.7440, -6.9494, 11.0085], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ 4.2792e-03, -2.2436e-03, -2.2436e-03, -2.2436e-03, -2.2436e-03,
         -1.7373e-01, -1.7909e-03, -2.7790e-02, -2.2436e-03, -8.5478e-02,
         -2.1735e-03, -8.9012e-02, -5.8238e-02],
        [-2.2470e-01, -6.2390e-02, -6.2390e-02, -6.2390e-02, -6.2390e-02,
         -4.0864e+00,  1.9790e-02, -3.9552e+00, -6.2390e-02, -1.3823e+00,
         -2.5244e-02, -1.3947e+00, -4.0799e+00],
        [ 4.2791e-03, -2.2437e-03, -2.2437e-03, -2.2437e-03, -2.2437e-03,
         -1.7374e-01, -1.7909e-03, -2.7791e-02, -2.2437e-03, -8.5481e-02,
         -2.1736e-03, -8.9016e-02, -5.8242e-02],
        [ 7.0344e-01,  2.7685e-01,  2.7685e-01,  2.7685e-01,  2.7685e-01,
          3.0395e-01,  2.4323e-01,  1.9913e+00,  2.7685e-01,  2.0024e-01,
          2.7120e-01,  1.6256e-01,  1.8469e+00],
        [ 4.2792e-03, -2.2436e-03, -2.2436e-03, -2.2436e-03, -2.2436e-03,
         -1.7373e-01, -1.7909e-03, -2.7790e-02, -2.2436e-03, -8.5478e-02,
         -2.1735e-03, -8.9012e-02, -5.8238e-02],
        [ 5.3863e-01, -6.8714e-02, -6.8714e-02, -6.8713e-02, -6.8714e-02,
          6.1585e+00,  6.6109e-03,  6.6320e+00, -6.8713e-02,  2.4574e+00,
         -3.1630e-02,  2.4337e+00,  6.5764e+00],
        [ 4.2792e-03, -2.2436e-03, -2.2436e-03, -2.2436e-03, -2.2436e-03,
         -1.7373e-01, -1.7909e-03, -2.7790e-02, -2.2436e-03, -8.5478e-02,
         -2.1735e-03, -8.9012e-02, -5.8238e-02],
        [ 4.2792e-03, -2.2436e-03, -2.2436e-03, -2.2436e-03, -2.2436e-03,
         -1.7373e-01, -1.7909e-03, -2.7790e-02, -2.2436e-03, -8.5478e-02,
         -2.1736e-03, -8.9012e-02, -5.8238e-02],
        [ 4.2792e-03, -2.2436e-03, -2.2436e-03, -2.2436e-03, -2.2436e-03,
         -1.7373e-01, -1.7909e-03, -2.7790e-02, -2.2436e-03, -8.5478e-02,
         -2.1736e-03, -8.9012e-02, -5.8238e-02],
        [ 4.2792e-03, -2.2436e-03, -2.2436e-03, -2.2436e-03, -2.2436e-03,
         -1.7373e-01, -1.7909e-03, -2.7790e-02, -2.2436e-03, -8.5478e-02,
         -2.1735e-03, -8.9012e-02, -5.8238e-02],
        [-3.3321e-01,  6.5519e-03,  6.5517e-03,  6.5526e-03,  6.5519e-03,
         -5.4764e+00,  4.6396e-02, -5.7181e+00,  6.5520e-03, -2.0994e+00,
          3.1393e-02, -2.0956e+00, -5.7795e+00],
        [ 4.2792e-03, -2.2436e-03, -2.2436e-03, -2.2436e-03, -2.2436e-03,
         -1.7373e-01, -1.7909e-03, -2.7790e-02, -2.2436e-03, -8.5478e-02,
         -2.1735e-03, -8.9012e-02, -5.8238e-02],
        [ 4.2792e-03, -2.2436e-03, -2.2436e-03, -2.2436e-03, -2.2436e-03,
         -1.7373e-01, -1.7909e-03, -2.7790e-02, -2.2436e-03, -8.5478e-02,
         -2.1735e-03, -8.9012e-02, -5.8238e-02]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.6710,  3.6008, -0.6710, -2.4764, -0.6710, -5.9962, -0.6710, -0.6710,
        -0.6710, -0.6710,  5.1983, -0.6710, -0.6710], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 7.8654e-03, -5.3701e+00,  7.8658e-03,  2.8330e+00,  7.8655e-03,
          1.1939e+01,  7.8655e-03,  7.8654e-03,  7.8654e-03,  7.8655e-03,
         -8.6780e+00,  7.8654e-03,  7.8655e-03]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -1.1290,   2.2354],
        [  9.9578,  -0.2012],
        [ -9.2052,  -2.3352],
        [ -7.0765,  -5.4092],
        [  9.1141,   1.4405],
        [ -2.9863,  -8.3056],
        [  8.8256,  -0.4319],
        [-13.3526,  -7.7232],
        [  8.4474,  -0.5845],
        [ -4.7547,  -7.2172],
        [ -7.3572,   5.6033],
        [ -3.9218,   8.7993],
        [ -3.9879,  -7.2170]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([-2.0335, -9.7274, -0.3503, -2.9623, -2.4352, -5.7432, -8.6229, -6.8084,
        -8.0845, -6.0544,  5.5830,  7.7284, -7.3971], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 7.5467e-03, -4.4422e-01,  6.5127e-02,  2.6291e-02, -1.6036e+00,
         -5.8891e-01, -5.2200e-01,  1.0746e-01, -6.1075e-01, -3.2098e-02,
         -3.7434e-01, -5.8369e-01,  9.8300e-02],
        [ 3.1961e-01,  5.1040e+00, -2.7372e+00, -2.0388e+00,  6.3792e+00,
         -4.1245e+00,  3.5451e+00, -4.2381e+00,  3.1308e+00, -3.6596e+00,
          5.3024e+00,  1.0497e+01, -2.6777e+00],
        [ 7.5468e-03, -4.4422e-01,  6.5127e-02,  2.6291e-02, -1.6036e+00,
         -5.8891e-01, -5.2200e-01,  1.0746e-01, -6.1075e-01, -3.2098e-02,
         -3.7434e-01, -5.8369e-01,  9.8300e-02],
        [ 2.1164e-01,  4.9299e+00,  5.2987e+00, -2.0819e+00,  4.1222e+00,
         -4.0632e+00,  3.3278e+00,  1.6897e-01,  3.0269e+00, -3.5214e+00,
          3.8367e+00,  2.3122e+00, -2.2311e+00],
        [ 2.6406e-02,  1.9239e+00, -3.1235e-01, -5.1968e-01,  2.1328e+00,
          5.6777e-01,  2.0834e+00, -1.5420e+00,  2.1744e+00, -8.1908e-01,
          1.3811e+00,  1.1207e+00, -1.3606e+00],
        [ 7.4358e-03, -4.3888e-01,  6.2620e-02,  2.3147e-02, -1.6031e+00,
         -5.8790e-01, -5.1565e-01,  9.9726e-02, -6.0358e-01, -3.6817e-02,
         -3.7323e-01, -5.7987e-01,  9.1547e-02],
        [ 2.1068e-01,  5.9890e+00, -1.3896e+00,  1.0300e+00,  2.4980e+00,
          4.7783e+00,  5.5445e+00, -3.7709e+00,  5.5781e+00,  1.1631e-01,
         -2.3171e+00, -3.7621e+00, -5.6633e+00],
        [ 1.6957e+00, -1.2258e-01,  2.1276e+00,  2.2077e-01, -4.7749e+00,
         -2.0187e+00, -8.6316e-01,  3.9724e+00, -1.1398e+00, -1.8733e-01,
          2.1761e+00,  1.4296e+00,  2.7197e+00],
        [-2.4693e-01,  4.0556e+00, -2.5084e+00,  6.1702e-01,  1.5856e-01,
         -1.3050e+00,  4.8247e+00, -2.2546e+00,  5.1231e+00,  1.2432e+00,
         -4.0753e+00, -4.4670e+00,  1.9708e+00],
        [-1.2973e-01, -3.9569e-01,  5.4164e+00, -2.1065e-01, -8.2201e+00,
         -2.3439e+00, -1.2509e+00,  7.2642e+00, -1.6475e+00,  1.0710e+00,
         -4.4928e+00, -3.1289e+00,  3.4475e+00],
        [ 3.3464e-02, -2.7973e+00, -1.1532e+00,  8.3467e-01, -9.4756e-01,
         -3.8722e-01, -2.7950e+00,  2.7091e+00, -2.8292e+00,  1.7928e+00,
         -2.3524e+00, -8.3484e-01,  2.6360e+00],
        [ 9.7518e-01,  7.4936e+00, -4.0896e-01, -8.8524e-01, -3.0205e+00,
         -2.7676e+00,  5.0123e+00, -2.6903e+00,  4.3130e+00, -5.1447e-01,
          1.4774e+00, -1.5497e+00,  1.4762e-01],
        [-2.0422e-01,  2.2351e+00, -1.1835e+00,  3.9131e+00, -3.9204e+00,
          4.8356e+00,  1.8979e+00, -3.9875e+00,  1.6485e+00,  4.6392e+00,
         -5.5804e+00, -8.8920e+00,  2.7096e+00]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-1.6784,  2.0250, -1.6784, -1.3038,  2.5627, -1.6775,  0.1498, -1.3590,
        -1.6633, -4.9876, -2.7829, -4.0145,  0.5822], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ 3.2296e-01,  2.6579e+00,  3.2296e-01,  2.5039e+00,  9.9966e-01,
          4.0333e-01, -2.7102e+00,  3.8170e+00, -5.1736e+00,  5.1634e+00,
          6.6638e+00, -2.2581e-01, -1.0729e+01],
        [-1.2045e-01,  4.5025e+00, -1.2045e-01,  6.6008e-01, -1.2905e+00,
         -2.3253e-02, -4.4787e-03, -2.4414e+00, -9.1472e-02,  2.1038e+00,
         -4.2766e+00,  1.4616e+00, -5.8404e-01],
        [-9.2158e-02, -4.6798e+00, -9.2157e-02, -5.3503e-01,  2.0339e+00,
          3.7147e-03,  1.6739e+00, -3.3252e-01,  1.5723e+00, -8.3855e+00,
         -1.6644e+00, -1.1490e+00,  2.3498e+00],
        [-8.6392e-02, -5.2595e+00, -8.6392e-02, -2.8715e+00,  2.6091e+00,
         -8.5086e-02,  5.9591e+00, -2.9978e+00,  1.4042e+00, -9.6820e+00,
         -3.5163e+00,  2.3107e+00,  5.0575e+00],
        [-7.7170e-01, -2.8727e+00, -7.7170e-01, -1.3994e+00,  2.9643e+00,
         -7.7092e-01,  1.1722e+01, -5.2625e+00,  1.5335e+00, -7.2514e+00,
         -6.3452e+00,  1.9064e+00,  5.5718e+00]], device='cuda:0'))])
loaded xi:  -351.60715
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.0, 0.5, 0.2, 0.15, 0.15]
W_T_mean: 1000.3278755462585
W_T_median: 733.6113376673641
W_T_pctile_5: -190.02603165425342
W_T_CVAR_5_pct: -322.7571246767781
-----------------------------------------------
new min fval from sgd:  -1784.5576611567744
min fval:  -1784.5576611567744
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 39.98494847907505
W_T_median: 45.99740984428009
W_T_pctile_5: -338.5231885976089
W_T_CVAR_5_pct: -390.9490852703379
Average q (qsum/M+1):  58.19933294480847
Optimal xi:  [-351.60715]
Expected(across Rb) median(across samples) p_equity:  0.16377384444834509
obj fun:  tensor(-1784.5577, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
/home/marcchen/Documents/constrain_factor/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/constrain_factor/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: Paper_FactorInv_Factor2
Objective function: mean_cvar_single_level
Tracing param: 0.05
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        5              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 5)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -0.9214,  -1.5943],
        [  0.8022,   5.8627],
        [-14.2608,   5.0825],
        [  0.8640,   6.1070],
        [  0.7475,   5.7130],
        [  0.6678,   5.4693],
        [ -2.7090,  -4.7644],
        [ -2.7820,  -5.1715],
        [ -2.4079,  -4.3967],
        [  0.9314,   6.3407],
        [ -3.8231,  -5.6715],
        [  0.5968,   5.2933],
        [ -2.8102,  -5.0001]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-4.0638,  3.8138,  4.4039,  4.2819,  3.5294,  3.0198, -4.6942, -4.7580,
        -4.7594,  4.6569, -4.8500,  2.7167, -4.7523], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-0.0106, -0.0582, -0.0224, -0.0789, -0.0479, -0.0332, -0.0959, -0.1284,
         -0.0667, -0.0958, -0.1359, -0.0278, -0.1099],
        [-0.1747,  2.4699,  8.9758,  3.0808,  2.2388,  1.7361, -1.7044, -2.4510,
         -1.2933,  3.5352, -3.0655,  1.5773, -1.8695],
        [-0.0106, -0.0582, -0.0224, -0.0789, -0.0479, -0.0332, -0.0959, -0.1284,
         -0.0667, -0.0958, -0.1359, -0.0278, -0.1099],
        [-0.0652,  2.1052,  7.8803,  2.6104,  1.8669,  1.4274, -1.3771, -2.0878,
         -1.0084,  3.0029, -2.7722,  1.2345, -1.7061],
        [-0.0106, -0.0582, -0.0224, -0.0789, -0.0479, -0.0332, -0.0959, -0.1284,
         -0.0667, -0.0958, -0.1359, -0.0278, -0.1099],
        [-0.0106, -0.0582, -0.0224, -0.0789, -0.0479, -0.0332, -0.0959, -0.1284,
         -0.0667, -0.0958, -0.1359, -0.0278, -0.1099],
        [-0.0106, -0.0582, -0.0224, -0.0789, -0.0479, -0.0332, -0.0959, -0.1284,
         -0.0667, -0.0958, -0.1359, -0.0278, -0.1099],
        [ 0.0919, -1.5762, -3.4632, -2.0822, -1.2951, -0.9219,  1.5344,  1.7313,
          1.2387, -2.5681,  2.7799, -0.7518,  1.6976],
        [-0.1227,  2.2585,  8.3687,  2.8203,  2.0021,  1.5321, -1.5069, -2.1328,
         -1.1225,  3.2506, -2.7449,  1.3601, -1.7534],
        [-0.0106, -0.0582, -0.0224, -0.0789, -0.0479, -0.0332, -0.0959, -0.1284,
         -0.0667, -0.0958, -0.1359, -0.0278, -0.1099],
        [ 0.0153, -1.0601, -2.5014, -1.4681, -0.8555, -0.5782,  1.1256,  1.3982,
          0.8615, -1.8636,  2.1469, -0.4586,  1.2623],
        [-0.0106, -0.0582, -0.0224, -0.0789, -0.0479, -0.0332, -0.0959, -0.1284,
         -0.0667, -0.0958, -0.1359, -0.0278, -0.1099],
        [ 0.5685, -3.1084, -6.3155, -3.8515, -2.6626, -2.0236,  2.4258,  2.7590,
          2.0938, -4.5225,  3.8663, -1.7568,  2.6387]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.5387, -0.9358, -0.5387, -0.8204, -0.5387, -0.5387, -0.5387, -1.1480,
        -1.0357, -0.5387, -1.0600, -0.5387, -0.8583], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-0.0217,  8.2007, -0.0217,  6.7293, -0.0217, -0.0217, -0.0217, -4.4658,
          7.3636, -0.0217, -3.0646, -0.0217, -9.2003]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[-13.5176,   3.4650],
        [ -0.2529,   4.1713],
        [-11.6996,  -5.3564],
        [-12.2829,  -5.6871],
        [ -9.5907,   0.6988],
        [ -1.5667,   0.7141],
        [-12.2844,  -5.5930],
        [-11.2152,   3.2412],
        [  7.6067,  -1.5256],
        [  6.6461,  -1.7005],
        [-11.8935,  -5.4630],
        [ -7.6431,  -8.2227],
        [  0.9144,  -7.3686]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ 3.7712, -5.2630, -4.4382, -4.6665,  8.6270, -2.4438, -4.3672,  4.7635,
        -8.2738, -8.0849, -4.5084, -6.2644, -6.7467], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-3.7797e+00,  3.8233e-01,  3.7710e-01,  4.9127e-01,  4.2058e+00,
         -1.8293e-01, -5.3113e-02, -3.9395e+00,  3.3507e+00,  2.7498e+00,
          4.5366e-01,  2.5370e+00,  7.4430e-01],
        [-3.3482e-03,  6.4244e-02,  9.6604e-01,  1.2215e+00, -1.2945e+01,
         -8.3449e-02,  2.0160e-01, -5.9297e-03,  4.9309e+00,  3.6538e+00,
          1.1400e+00, -8.8598e-01, -1.1208e+00],
        [-1.3884e+00, -2.0482e-02,  5.5513e+00,  6.2881e+00, -7.1239e+00,
         -4.6920e-01,  7.7667e+00, -3.5432e+00, -9.1497e+00, -8.0132e+00,
          5.6087e+00,  4.9587e+00,  3.7453e+00],
        [-5.4946e-02, -2.6427e-03, -2.4055e-02, -2.5872e-02, -1.7280e+00,
         -1.5405e-02, -3.5266e-02, -8.6526e-02, -2.8911e-01, -1.7607e-01,
         -2.4543e-02, -2.6750e-01, -6.6667e-01],
        [-2.3751e-01, -1.4308e+00,  1.2138e+00,  1.7783e+00,  5.8588e+00,
         -1.6535e-01,  9.2264e-01, -1.0050e-01, -3.9141e+00, -4.0810e+00,
          1.4206e+00, -4.2985e+00, -5.2204e+00],
        [-9.6068e-02,  3.1103e-01, -9.7185e-02, -1.0045e-01, -1.6744e+00,
         -7.0254e-03, -1.1940e-01, -1.0522e-01, -3.4784e-01, -2.0301e-01,
         -9.8196e-02, -3.0089e-01, -7.5165e-01],
        [-6.5754e+00,  3.5873e+00, -1.3521e-01, -2.3714e-01, -5.7709e+00,
         -5.4098e-01, -9.6948e-02, -6.6980e+00,  1.1709e+01,  8.1666e+00,
         -1.8993e-01,  7.5929e+00,  1.3055e+01],
        [-7.1066e+00, -1.2672e-02,  7.5641e+00,  8.3696e+00, -1.0404e+00,
         -1.2575e-01,  9.4910e+00, -1.4253e+01, -3.5974e+00, -2.0179e+00,
          7.7579e+00,  5.8995e+00,  3.2659e+00],
        [ 1.2109e-01,  2.5115e+00, -9.6673e-01, -9.6479e-01, -7.8738e-01,
          2.7809e-01, -1.1264e+00,  1.0245e+00, -4.4533e-01, -2.8929e-01,
         -9.6748e-01, -1.9928e+00, -1.2026e+00],
        [-5.4948e-02, -2.6403e-03, -2.4057e-02, -2.5874e-02, -1.7280e+00,
         -1.5404e-02, -3.5269e-02, -8.6528e-02, -2.8911e-01, -1.7607e-01,
         -2.4545e-02, -2.6751e-01, -6.6667e-01],
        [-1.0599e+01,  4.2814e-01, -6.0665e-01, -7.8414e-01, -4.3081e+00,
          1.4336e-01,  1.0796e-01, -4.0897e+00,  1.3379e+00, -1.2894e-02,
         -7.2199e-01,  2.0918e+01,  1.0155e+01],
        [-1.2402e-02,  2.5954e+00, -1.1032e+00, -1.1007e+00, -5.9016e-01,
          3.1643e-01, -1.2892e+00,  1.0557e+00, -4.2306e-01, -2.7122e-01,
         -1.1039e+00, -2.2698e+00, -1.2087e+00],
        [-5.4954e-02, -2.6339e-03, -2.4062e-02, -2.5879e-02, -1.7280e+00,
         -1.5403e-02, -3.5275e-02, -8.6531e-02, -2.8911e-01, -1.7606e-01,
         -2.4550e-02, -2.6751e-01, -6.6668e-01]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-1.1306, -2.9405, -8.7911, -2.4957, -0.9357, -2.4592,  3.7194, -8.3933,
        -1.6859, -2.4957, -3.0232, -1.5351, -2.4957], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ -0.1984,  -5.8715,  10.9930,  -0.0755,   3.8476,  -0.1864,  -1.3366,
           5.4926,  -0.5063,  -0.0755,  -6.9337,  -0.5635,  -0.0755],
        [  3.3988,   8.4003,  -0.2607,   0.0578,  -2.4763,   0.1032,   1.2350,
          -3.8966,   0.0835,   0.0578,   0.7269,   0.0980,   0.0578],
        [ -3.8641,  -2.8818,  -9.7390,   0.0997,  -0.4434,   0.1976,   0.9071,
           6.2570,   1.0699,   0.0997,   6.2080,   1.1676,   0.0997],
        [ -3.8552,  10.3276, -13.7901,   0.0886,  -2.8207,   0.0600,   6.2346,
          -1.9127,  -0.0947,   0.0886,   7.0312,  -0.1022,   0.0886],
        [ -2.3490,   0.2028,   0.1382,   0.1805,  -0.6648,   0.4272,  12.5348,
           0.1748,   3.3917,   0.1805,   1.9571,   3.8528,   0.1806]],
       device='cuda:0'))])
loaded xi:  -34.984634
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.0, 0.5, 0.2, 0.15, 0.15]
W_T_mean: 1000.3278755462585
W_T_median: 733.6113376673641
W_T_pctile_5: -190.02603165425342
W_T_CVAR_5_pct: -322.7571246767781
-----------------------------------------------
new min fval from sgd:  -1746.1478637552034
min fval:  -1746.1478637552034
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 103.30223881217134
W_T_median: 51.996910840633795
W_T_pctile_5: -34.96454967907493
W_T_CVAR_5_pct: -119.71384276200966
Average q (qsum/M+1):  57.099703881048384
Optimal xi:  [-34.984634]
Expected(across Rb) median(across samples) p_equity:  0.21293860160124797
obj fun:  tensor(-1746.1479, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/constrain_factor/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:268: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
/home/marcchen/Documents/constrain_factor/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/constrain_factor/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: Paper_FactorInv_Factor2
Objective function: mean_cvar_single_level
Tracing param: 0.2
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        5              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 5)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -6.9129,  -5.5756],
        [  6.9423,  -0.1279],
        [ -2.7023,   6.1489],
        [ -2.6881,   6.1270],
        [ -0.7182,   1.3694],
        [ -2.0942,   4.8914],
        [ -2.6637,   6.0119],
        [ -0.7182,   1.3694],
        [  7.2637,  -0.1346],
        [  7.6517,  -0.1171],
        [ -0.7177,   1.3691],
        [  8.2513,   0.5804],
        [-10.2430,  -8.7138]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-4.2193, -7.3598,  5.3272,  5.2753, -1.6118,  1.8168,  5.0811, -1.6118,
        -7.3937, -7.4698, -1.6117, -7.4841, -3.3853], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-3.3278e-02, -9.9191e-02, -1.3258e-01, -1.2925e-01, -9.9666e-03,
         -9.1774e-03, -1.1822e-01, -9.9666e-03, -1.2894e-01, -1.6235e-01,
         -9.9682e-03, -1.5369e-01, -1.0693e-01],
        [-3.3278e-02, -9.9192e-02, -1.3258e-01, -1.2925e-01, -9.9667e-03,
         -9.1775e-03, -1.1822e-01, -9.9667e-03, -1.2894e-01, -1.6236e-01,
         -9.9683e-03, -1.5369e-01, -1.0693e-01],
        [-3.3278e-02, -9.9191e-02, -1.3258e-01, -1.2925e-01, -9.9666e-03,
         -9.1774e-03, -1.1822e-01, -9.9666e-03, -1.2894e-01, -1.6235e-01,
         -9.9682e-03, -1.5369e-01, -1.0693e-01],
        [ 1.6173e+00,  3.2321e-01, -3.3286e+00, -3.1816e+00, -6.8405e-02,
         -2.7828e-01, -2.9744e+00, -6.8404e-02,  5.0966e-01,  8.8364e-01,
         -6.8791e-02,  1.3245e+00,  2.3700e+00],
        [-2.1144e+00,  1.2892e+00, -1.5148e+00, -1.4776e+00, -8.1134e-04,
         -2.3420e-01, -1.3908e+00, -8.1099e-04,  1.6003e+00,  2.0141e+00,
         -8.2251e-04,  1.6942e+00, -8.0240e+00],
        [ 4.7532e+00,  2.0108e+00, -5.2247e+00, -4.9953e+00, -1.4880e-03,
         -6.9636e-01, -4.5089e+00, -1.4904e-03,  2.2067e+00,  2.7988e+00,
          1.3072e-04,  3.5448e+00,  3.8718e+00],
        [ 4.7411e+00,  2.2908e+00, -5.4346e+00, -5.1729e+00,  1.3541e-02,
         -7.3113e-01, -4.8255e+00,  1.3534e-02,  2.5663e+00,  3.2196e+00,
          1.6513e-02,  3.9994e+00,  4.1110e+00],
        [-3.3277e-02, -9.9751e-02, -1.3309e-01, -1.2975e-01, -1.0011e-02,
         -9.2152e-03, -1.1871e-01, -1.0011e-02, -1.2959e-01, -1.6309e-01,
         -1.0013e-02, -1.5439e-01, -1.0718e-01],
        [-5.1224e+00, -2.4476e+00,  5.5280e+00,  5.2221e+00,  3.1160e-02,
          1.1239e+00,  5.0637e+00,  3.1175e-02, -2.8312e+00, -3.3376e+00,
          2.9865e-02, -4.4902e+00, -4.0941e+00],
        [ 3.6366e+00,  6.2728e-01, -4.7170e+00, -4.5498e+00,  1.7884e-02,
         -5.6402e-01, -4.1774e+00,  1.7883e-02,  8.2788e-01,  1.2462e+00,
          1.8472e-02,  1.6394e+00,  3.6394e+00],
        [ 5.8899e-02, -1.0555e-01, -1.1830e+00, -1.1445e+00, -8.2920e-02,
         -1.0873e-01, -1.0392e+00, -8.2920e-02, -9.8416e-02, -6.7950e-02,
         -8.3012e-02, -7.1886e-02,  1.6781e-01],
        [-3.3278e-02, -9.9191e-02, -1.3258e-01, -1.2925e-01, -9.9666e-03,
         -9.1774e-03, -1.1822e-01, -9.9666e-03, -1.2894e-01, -1.6235e-01,
         -9.9682e-03, -1.5369e-01, -1.0693e-01],
        [-6.0473e+00, -2.7952e+00,  6.0076e+00,  5.7977e+00,  2.4430e-02,
          1.4193e+00,  5.6013e+00,  2.4411e-02, -3.3050e+00, -3.6080e+00,
          2.9249e-02, -4.7735e+00, -4.3872e+00]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.0894, -1.0894, -1.0894, -0.6252,  3.1448, -0.0434,  0.3398, -1.0994,
        -0.4799, -0.2699, -1.5554, -1.0894, -0.3954], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 7.1618e-03,  7.1620e-03,  7.1618e-03, -2.7460e+00,  4.8866e+00,
         -5.8856e+00, -6.6030e+00,  7.2883e-03,  6.8556e+00, -4.6016e+00,
         -1.0635e+00,  7.1618e-03,  8.7391e+00]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[  6.2054,   2.2075],
        [ -3.5841,   9.6302],
        [ -5.4254, -10.1925],
        [ -1.5645,   0.5875],
        [ -1.5712,   0.5851],
        [ 11.4366,  -0.3531],
        [  8.9493,   9.3587],
        [-12.2547,   4.9888],
        [  1.7511,   4.3508],
        [-10.7398,  -5.3793],
        [ 11.6358,   4.9495],
        [  6.9609,  -6.0148],
        [ -1.5721,   0.5849]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([-7.4902,  9.4850, -8.4611, -2.3789, -2.3702, -9.5837,  6.5757,  5.5331,
        -6.5913, -2.3382, -1.4083, -6.4915, -2.3686], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-7.6907e-02, -7.5930e+00,  5.6670e+00, -1.7500e-01, -1.7484e-01,
         -6.2683e+00, -1.0717e+01, -4.7850e-01,  1.2080e-03,  5.0798e+00,
         -5.6883e+00,  1.0131e+00, -1.7473e-01],
        [-6.6406e-01,  2.8331e-01, -3.4407e-02,  8.9284e-02,  8.9346e-02,
         -1.4912e+00, -2.0455e+00,  2.3188e+00, -4.1079e-01,  1.8613e+00,
         -1.1245e+00, -1.9662e+00,  8.9625e-02],
        [-2.8254e+00,  7.4215e+00, -1.0421e+01,  1.9782e-01,  2.0916e-01,
         -1.3945e+01,  2.8416e+00,  8.2484e+00, -3.2488e+00,  1.0915e+00,
         -1.3317e-01, -6.5653e+00,  2.0864e-01],
        [ 5.4700e-01,  3.3111e-01, -1.0061e+00,  1.3517e-01,  1.3560e-01,
          2.3255e-01, -7.8290e-01,  1.6862e+00,  7.8397e-01, -1.2921e+00,
         -2.6590e-01, -2.6086e+00,  1.3452e-01],
        [ 4.6589e-01, -1.1178e+01,  5.6960e+00, -9.7619e-02, -1.0238e-01,
          4.5457e+00, -7.0550e+00, -5.7470e+00, -2.0705e-02,  6.0796e+00,
         -2.3872e+00,  4.9258e+00, -1.0414e-01],
        [ 4.3332e+00, -5.3812e+00,  9.2572e+00, -7.8220e-02, -7.9752e-02,
          1.3098e+01, -3.9035e+00, -8.4554e+00,  1.8662e+00,  2.7731e+00,
         -3.4259e+00,  6.4812e+00, -8.0078e-02],
        [-5.6848e-01,  2.0924e-01, -1.4934e-01,  9.2208e-02,  9.2795e-02,
         -1.1327e+00, -1.7449e+00,  1.8000e+00, -4.6369e-01,  1.3176e+00,
         -1.0022e+00, -1.8861e+00,  9.3040e-02],
        [ 6.7443e-01,  4.2684e+00, -2.8831e+00,  1.3882e-01,  1.4046e-01,
          3.8522e+00, -1.3628e+00,  1.7259e+00,  5.5657e-02,  2.4067e+00,
         -2.6520e-01, -1.1519e+00,  1.4223e-01],
        [-1.1391e-01, -5.9082e-01, -6.2726e-01, -4.3607e-03, -4.5164e-03,
         -5.6398e-01, -1.3291e+00, -9.6560e-02, -1.3871e-01, -2.9010e-01,
         -8.0819e-01, -1.4162e+00, -4.5321e-03],
        [-2.4575e+00, -9.8241e-01, -5.6782e+00,  1.1868e-01,  1.3305e-01,
         -5.3697e+00,  1.9832e+00,  8.0376e+00, -1.3422e+00,  1.3424e+00,
         -2.4953e+00, -1.3951e+00,  1.3240e-01],
        [-9.9390e-02, -6.6623e+00,  5.9398e+00,  4.9121e-01,  4.9433e-01,
         -1.1030e+01, -1.0579e+01,  1.9127e+00,  1.5565e-03,  4.1146e+00,
         -4.3908e+00, -2.4749e-01,  4.9535e-01],
        [-6.9014e-01,  2.8237e-01, -2.2954e-02,  8.8226e-02,  8.8288e-02,
         -1.5246e+00, -2.0578e+00,  2.3292e+00, -4.3918e-01,  1.8139e+00,
         -1.1096e+00, -1.8938e+00,  8.8564e-02],
        [ 2.6582e+00, -3.6078e+00,  7.1081e+00, -1.5593e-02, -2.1058e-02,
          5.9805e+00, -4.8014e+00, -7.3405e+00,  4.7119e-01,  2.7404e+00,
         -3.8724e+00,  6.4743e+00, -2.1100e-02]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-1.6238, -1.6321, -5.4538, -1.5946,  1.1030,  1.7483, -1.5910,  1.1959,
        -1.7281, -1.1401, -2.0444, -1.6024,  1.1806], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-2.6571e+00,  7.8199e-01,  1.7762e+00,  7.3247e-02,  3.9138e+00,
         -8.3079e-01,  7.2786e-01,  9.0185e-01,  2.2740e-01,  5.9552e-01,
         -4.9489e+00,  7.6466e-01, -2.7476e+00],
        [ 2.5057e+00, -7.5097e-01, -2.0821e-01, -5.3214e-02, -2.6589e+00,
          1.5382e+00, -6.9515e-01,  4.4606e-01, -1.9326e-01, -1.2644e-01,
          4.9559e+00, -7.3238e-01,  2.7043e+00],
        [-3.8685e-02, -2.3722e-02, -1.5952e+00, -5.2407e-02, -1.8141e+00,
         -2.3921e+00, -3.4706e-02, -6.4457e+00, -3.2477e-02, -3.3368e-01,
         -1.2507e-03, -2.6123e-02, -2.2696e+00],
        [ 1.7163e+00, -3.4329e-01, -1.2399e+01,  9.3239e-01, -1.8099e+00,
          2.0410e+00, -2.6452e-01, -8.2488e-01, -1.0410e-01,  6.6554e+00,
          8.5563e+00, -3.6002e-01,  1.9873e-01],
        [ 6.3048e-01, -3.6344e+00, -9.1845e+00,  3.2742e+00,  2.0413e+00,
          6.1336e+00, -2.2209e+00,  8.4466e+00, -4.6288e-02, -1.0354e-01,
          2.6766e-01, -3.6075e+00,  2.1789e+00]], device='cuda:0'))])
loaded xi:  0.00097515713
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.0, 0.5, 0.2, 0.15, 0.15]
W_T_mean: 1000.3278755462585
W_T_median: 733.6113376673641
W_T_pctile_5: -190.02603165425342
W_T_CVAR_5_pct: -322.7571246767781
-----------------------------------------------
new min fval from sgd:  -1703.439185522839
min fval:  -1703.439185522839
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 101.00042774795111
W_T_median: 49.78689900166227
W_T_pctile_5: 0.001166090366849204
W_T_CVAR_5_pct: -61.439844535229874
Average q (qsum/M+1):  55.940614761844756
Optimal xi:  [0.00097516]
Expected(across Rb) median(across samples) p_equity:  0.22725065651660165
obj fun:  tensor(-1703.4392, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/constrain_factor/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:268: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
/home/marcchen/Documents/constrain_factor/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/constrain_factor/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: Paper_FactorInv_Factor2
Objective function: mean_cvar_single_level
Tracing param: 0.5
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        5              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 5)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-19.2010,   8.8941],
        [ -1.1616,   0.5743],
        [ -1.1597,   0.5748],
        [ -1.1577,   0.5754],
        [ -1.1585,   0.5752],
        [ -1.1578,   0.5754],
        [ -5.8459,  -8.6554],
        [ 10.5575,  -0.2619],
        [ 10.6012,  -1.1028],
        [ -6.8086,   8.1425],
        [ -1.1594,   0.5751],
        [ -1.1584,   0.5753],
        [ -1.1580,   0.5753]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([  8.3978,  -2.7932,  -2.7925,  -2.7930,  -2.7933,  -2.7935,  -4.2312,
        -10.1800, -10.0707,   7.4403,  -2.7946,  -2.7941,  -2.7934],
       device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ 5.4204e-01,  8.3361e-02,  8.3256e-02,  8.3045e-02,  8.3086e-02,
          8.3013e-02, -1.0115e-01,  3.8863e-01,  5.0295e-01,  1.6767e+00,
          8.3057e-02,  8.3011e-02,  8.3034e-02],
        [-9.5282e-02, -1.1151e-02, -1.1163e-02, -1.1166e-02, -1.1160e-02,
         -1.1161e-02, -1.0855e-01, -1.5672e-01, -1.6606e-01, -7.0344e-01,
         -1.1146e-02, -1.1153e-02, -1.1161e-02],
        [-7.5221e+00,  6.2216e-02,  6.1504e-02,  6.5443e-02,  6.5902e-02,
          6.7372e-02,  1.8094e+01,  8.1252e+00,  6.9384e+00, -4.2298e+00,
          7.0226e-02,  6.9325e-02,  6.6908e-02],
        [-9.5282e-02, -1.1151e-02, -1.1163e-02, -1.1166e-02, -1.1160e-02,
         -1.1161e-02, -1.0855e-01, -1.5672e-01, -1.6606e-01, -7.0344e-01,
         -1.1146e-02, -1.1153e-02, -1.1161e-02],
        [-9.1658e+00,  2.1394e-02,  1.6289e-02,  7.5557e-03,  9.5136e-03,
          6.5203e-03,  1.8232e+01,  6.0558e+00,  7.1338e+00, -4.0712e+00,
          9.1865e-03,  6.9017e-03,  7.3557e-03],
        [-9.5282e-02, -1.1151e-02, -1.1163e-02, -1.1166e-02, -1.1160e-02,
         -1.1161e-02, -1.0855e-01, -1.5672e-01, -1.6606e-01, -7.0344e-01,
         -1.1146e-02, -1.1153e-02, -1.1161e-02],
        [-9.5282e-02, -1.1151e-02, -1.1163e-02, -1.1166e-02, -1.1160e-02,
         -1.1161e-02, -1.0855e-01, -1.5672e-01, -1.6606e-01, -7.0344e-01,
         -1.1146e-02, -1.1153e-02, -1.1161e-02],
        [-9.5282e-02, -1.1151e-02, -1.1163e-02, -1.1166e-02, -1.1160e-02,
         -1.1161e-02, -1.0855e-01, -1.5672e-01, -1.6606e-01, -7.0344e-01,
         -1.1146e-02, -1.1153e-02, -1.1161e-02],
        [-9.5282e-02, -1.1151e-02, -1.1163e-02, -1.1166e-02, -1.1160e-02,
         -1.1161e-02, -1.0855e-01, -1.5672e-01, -1.6606e-01, -7.0344e-01,
         -1.1146e-02, -1.1153e-02, -1.1161e-02],
        [-9.5282e-02, -1.1151e-02, -1.1163e-02, -1.1166e-02, -1.1160e-02,
         -1.1161e-02, -1.0855e-01, -1.5672e-01, -1.6606e-01, -7.0344e-01,
         -1.1146e-02, -1.1153e-02, -1.1161e-02],
        [-8.1081e+00, -7.0500e-02, -6.5133e-02, -6.1419e-02, -6.3677e-02,
         -6.2530e-02,  1.7942e+01,  8.7360e+00,  7.8395e+00, -4.7533e+00,
         -6.7970e-02, -6.4947e-02, -6.2793e-02],
        [-9.5282e-02, -1.1151e-02, -1.1163e-02, -1.1166e-02, -1.1160e-02,
         -1.1161e-02, -1.0855e-01, -1.5672e-01, -1.6606e-01, -7.0344e-01,
         -1.1146e-02, -1.1153e-02, -1.1161e-02],
        [-5.2019e+00,  2.9834e-01,  2.9866e-01,  2.9911e-01,  2.9898e-01,
          2.9913e-01,  1.1758e+01,  2.8283e+00,  2.6221e+00, -4.0749e+00,
          2.9890e-01,  2.9906e-01,  2.9909e-01]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([ 4.3868, -1.6059, -0.9413, -1.6059, -1.0647, -1.6059, -1.6059, -1.6059,
        -1.6059, -1.6059, -1.3230, -1.6059, -1.6457], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 1.2981e+01,  1.2623e-02, -1.0597e+01,  1.2623e-02, -1.0303e+01,
          1.2623e-02,  1.2623e-02,  1.2623e-02,  1.2623e-02,  1.2623e-02,
         -1.0107e+01,  1.2623e-02, -4.7178e+00]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -6.8981,  -7.9649],
        [-10.9503,   6.5660],
        [ -1.8814,   0.1924],
        [-11.8131,  -4.8737],
        [  4.1311,   8.9081],
        [ 12.4619,   6.2340],
        [-11.1937,   0.2291],
        [ -1.0297,  13.7987],
        [ -1.8814,   0.1927],
        [  6.2985,   8.7234],
        [  1.5562,   9.6525],
        [ 11.3925,   4.4920],
        [-12.1812,  -0.1090]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([-6.1847,  5.5629, -3.7034, -3.2978, -7.9624,  2.9958,  8.3330,  6.6302,
        -3.7044,  2.6487,  6.2144, -0.6567,  9.9923], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-1.9546e+00, -2.5927e-01,  1.2440e-01, -7.7089e-01, -1.6169e-01,
          1.9287e+00, -2.6426e+00, -1.3133e+01,  1.2459e-01,  3.2064e+00,
          1.3232e+00,  2.6703e-01, -6.1990e+00],
        [ 5.7482e-02,  2.8332e+00, -2.4149e-01,  2.2683e-02,  6.3432e+00,
         -1.7663e+00, -1.1378e+01,  1.8372e+00, -2.4149e-01, -2.7482e-01,
          1.6546e+00, -1.7156e+00, -1.4493e+01],
        [-1.5705e+01,  8.5627e+00,  1.7504e-01, -1.8245e+00, -3.4437e+00,
         -4.8747e+00,  4.2497e+00,  8.4923e+00,  1.7496e-01,  1.8658e+00,
         -1.3945e+00, -3.9132e+00,  5.3923e+00],
        [-2.3983e+00, -1.3750e+01,  1.8326e-01, -3.0140e+00,  3.6535e+00,
          5.4045e+00, -4.2681e+00, -1.0690e+01,  1.8262e-01,  1.2769e+00,
          6.8748e+00,  2.9334e+00, -8.0795e+00],
        [-2.5300e-01, -5.9313e-01,  6.8050e-03, -8.3695e-02, -1.3481e-01,
         -1.8726e+00, -5.9762e-01, -2.8057e-01,  6.8429e-03, -1.1632e+00,
         -8.6191e-01, -1.9899e+00, -8.2710e-01],
        [-2.5303e-01, -5.9329e-01,  6.8086e-03, -8.3941e-02, -1.3514e-01,
         -1.8726e+00, -5.9815e-01, -2.7942e-01,  6.8464e-03, -1.1625e+00,
         -8.6146e-01, -1.9897e+00, -8.2773e-01],
        [-2.5266e-01, -5.9572e-01,  6.8198e-03, -8.7278e-02, -1.4048e-01,
         -1.8723e+00, -6.0665e-01, -2.6186e-01,  6.8571e-03, -1.1521e+00,
         -8.5434e-01, -1.9862e+00, -8.3775e-01],
        [-2.7205e-01, -6.0582e-01,  8.1218e-03, -1.0733e-01, -1.6508e-01,
         -1.8679e+00, -6.5034e-01, -1.5885e-01,  8.1541e-03, -1.0841e+00,
         -8.2225e-01, -1.9486e+00, -8.8637e-01],
        [-3.6862e+00,  3.0295e+00, -1.6090e-01, -4.5702e+00,  3.8485e-05,
          9.4414e+00, -3.6149e+00,  7.3836e-02, -1.6069e-01,  4.1823e-01,
          2.7291e+00,  2.8268e+00, -1.3360e+00],
        [ 3.3685e+00, -4.4660e-01, -1.2750e-01,  4.7870e+00, -1.2035e-03,
         -1.1253e+01,  4.2450e+00, -6.9133e+00, -1.2845e-01, -1.1255e+01,
         -1.5008e+01, -5.9594e+00,  5.6190e+00],
        [ 4.6716e+00, -9.6638e+00,  2.6870e-01,  9.3119e+00,  4.1322e-03,
         -7.1652e+00,  1.1206e+00, -2.1356e+01,  2.6997e-01, -3.2723e+00,
         -6.5481e+00, -4.0466e+00,  4.0470e+00],
        [-1.3765e+00, -1.2187e+01, -7.6873e-03,  3.8040e-01,  2.2691e+00,
          3.9446e-01, -1.3470e+00, -2.3680e+00, -7.6696e-03,  3.1427e+00,
          9.8105e+00, -1.3591e+00, -5.5141e+00],
        [ 3.6637e-01,  4.3879e-01,  5.2748e-01,  2.0317e+00,  9.2198e-03,
         -1.5847e+00,  7.5107e-01, -3.2943e+00,  5.2678e-01, -2.8752e+00,
         -5.7165e-01, -2.8248e+00,  6.4352e-01]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([  0.3862,  -2.4238, -10.3032,   2.7196,  -1.9168,  -1.9169,  -1.9168,
         -1.9408,   8.5897,  -2.2269,   3.3610,  -2.3266,  -1.0903],
       device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ 1.1000e+00, -1.0857e-01,  1.4673e+00, -1.6669e-01,  5.5109e-01,
          5.5057e-01,  5.4300e-01,  4.9721e-01,  1.6029e+00, -3.0176e+00,
         -1.4634e+01,  5.4741e-01,  1.5294e+00],
        [ 1.3754e-01,  1.1647e+00, -2.1128e-01,  1.3751e+00, -6.1155e-01,
         -6.1140e-01, -6.0938e-01, -5.8715e-01,  1.2712e+00, -1.8266e+00,
         -3.0872e-02,  1.0355e+00, -8.8206e-01],
        [-2.1030e+00, -5.0101e-02, -2.8225e+00, -2.8128e+00,  2.5894e-01,
          2.5912e-01,  2.6232e-01,  2.6933e-01, -5.4392e+00,  7.1206e+00,
          5.6263e+00, -4.1053e-01, -9.9450e-02],
        [-8.5912e-01,  1.2201e+00, -7.6673e+00,  1.0562e+00, -1.0571e+00,
         -1.0568e+00, -1.0534e+00, -1.0078e+00, -7.4609e-01,  1.6258e+01,
          8.9904e+00,  4.8649e-01, -1.7048e+00],
        [ 3.2684e-04,  6.5766e-05,  2.3863e-03,  4.7762e-04,  6.1573e-02,
          6.2129e-02,  7.0301e-02,  1.1758e-01,  1.9040e+01, -3.9017e+00,
         -3.0945e+00, -3.3614e-03, -2.0512e+00]], device='cuda:0'))])
loaded xi:  261.8972
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.0, 0.5, 0.2, 0.15, 0.15]
W_T_mean: 1000.3278755462585
W_T_median: 733.6113376673641
W_T_pctile_5: -190.02603165425342
W_T_CVAR_5_pct: -322.7571246767781
-----------------------------------------------
new min fval from sgd:  -1771.3936566599016
min fval:  -1771.3936566599016
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 579.2954691938255
W_T_median: 451.1023769937814
W_T_pctile_5: 262.29737722501153
W_T_CVAR_5_pct: 162.70504997591775
Average q (qsum/M+1):  51.894468245967744
Optimal xi:  [261.8972]
Expected(across Rb) median(across samples) p_equity:  0.2810744245847066
obj fun:  tensor(-1771.3937, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/constrain_factor/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:268: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
/home/marcchen/Documents/constrain_factor/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/constrain_factor/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: Paper_FactorInv_Factor2
Objective function: mean_cvar_single_level
Tracing param: 1.0
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        5              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 5)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-23.5094,   8.0489],
        [ -1.2747,   0.2578],
        [ -1.2747,   0.2578],
        [ -1.2747,   0.2578],
        [ -1.2747,   0.2578],
        [ -1.2747,   0.2578],
        [ -4.0538, -10.4452],
        [ 14.0512,  -0.8609],
        [ 14.1068,  -0.8871],
        [-10.3960,  10.3269],
        [ -1.2747,   0.2578],
        [ -1.2747,   0.2578],
        [ -1.2747,   0.2578]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([  7.4893,  -2.9942,  -2.9942,  -2.9942,  -2.9942,  -2.9942,  -4.9093,
        -12.6374, -12.6481,   8.6837,  -2.9942,  -2.9942,  -2.9942],
       device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ 5.3498e-01,  1.0296e-01,  1.0296e-01,  1.0296e-01,  1.0296e-01,
          1.0296e-01,  2.1883e-02,  4.6557e-01,  4.7328e-01,  1.5558e+00,
          1.0296e-01,  1.0296e-01,  1.0296e-01],
        [-5.7293e-02, -1.3968e-02, -1.3968e-02, -1.3968e-02, -1.3968e-02,
         -1.3968e-02, -1.2288e-01, -1.1978e-01, -1.2423e-01, -6.4107e-01,
         -1.3969e-02, -1.3969e-02, -1.3968e-02],
        [-7.0564e+00,  1.1007e-01,  1.1007e-01,  1.1008e-01,  1.1008e-01,
          1.1008e-01,  2.0498e+01,  7.8040e+00,  7.1049e+00, -4.7754e+00,
          1.1008e-01,  1.1008e-01,  1.1008e-01],
        [-5.7292e-02, -1.3968e-02, -1.3968e-02, -1.3968e-02, -1.3968e-02,
         -1.3968e-02, -1.2288e-01, -1.1978e-01, -1.2423e-01, -6.4107e-01,
         -1.3969e-02, -1.3969e-02, -1.3968e-02],
        [-6.6544e+00, -6.4806e-02, -6.4807e-02, -6.4811e-02, -6.4811e-02,
         -6.4812e-02,  1.9507e+01,  7.9182e+00,  8.8845e+00, -6.3789e+00,
         -6.4814e-02, -6.4813e-02, -6.4811e-02],
        [-5.7292e-02, -1.3968e-02, -1.3968e-02, -1.3968e-02, -1.3968e-02,
         -1.3968e-02, -1.2288e-01, -1.1978e-01, -1.2423e-01, -6.4107e-01,
         -1.3969e-02, -1.3968e-02, -1.3968e-02],
        [-5.7293e-02, -1.3968e-02, -1.3968e-02, -1.3968e-02, -1.3968e-02,
         -1.3968e-02, -1.2288e-01, -1.1978e-01, -1.2423e-01, -6.4107e-01,
         -1.3969e-02, -1.3968e-02, -1.3968e-02],
        [-5.7293e-02, -1.3968e-02, -1.3968e-02, -1.3968e-02, -1.3968e-02,
         -1.3968e-02, -1.2288e-01, -1.1978e-01, -1.2423e-01, -6.4107e-01,
         -1.3969e-02, -1.3969e-02, -1.3968e-02],
        [-5.7292e-02, -1.3968e-02, -1.3968e-02, -1.3968e-02, -1.3968e-02,
         -1.3968e-02, -1.2288e-01, -1.1978e-01, -1.2423e-01, -6.4107e-01,
         -1.3968e-02, -1.3969e-02, -1.3968e-02],
        [-5.7293e-02, -1.3968e-02, -1.3968e-02, -1.3968e-02, -1.3968e-02,
         -1.3968e-02, -1.2288e-01, -1.1978e-01, -1.2423e-01, -6.4107e-01,
         -1.3969e-02, -1.3968e-02, -1.3968e-02],
        [-5.7995e+00, -3.8167e-03, -3.8157e-03, -3.8195e-03, -3.8195e-03,
         -3.8213e-03,  1.9650e+01,  1.0701e+01,  1.0308e+01, -6.9556e+00,
         -3.8241e-03, -3.8234e-03, -3.8209e-03],
        [-5.7293e-02, -1.3968e-02, -1.3968e-02, -1.3968e-02, -1.3968e-02,
         -1.3968e-02, -1.2288e-01, -1.1978e-01, -1.2423e-01, -6.4107e-01,
         -1.3969e-02, -1.3969e-02, -1.3968e-02],
        [-5.7292e-02, -1.3968e-02, -1.3968e-02, -1.3968e-02, -1.3968e-02,
         -1.3968e-02, -1.2288e-01, -1.1978e-01, -1.2423e-01, -6.4107e-01,
         -1.3969e-02, -1.3968e-02, -1.3968e-02]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([ 4.5777, -1.8803, -0.7269, -1.8803, -1.8836, -1.8803, -1.8803, -1.8803,
        -1.8803, -1.8803, -2.1935, -1.8803, -1.8803], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 13.3111,   0.0466, -11.2773,   0.0466, -10.8368,   0.0466,   0.0466,
           0.0466,   0.0466,   0.0466, -12.9859,   0.0466,   0.0466]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[-1.1243e+01, -1.2032e+01],
        [-1.2912e+01,  7.3524e+00],
        [-1.9772e+00,  6.8682e-01],
        [-1.4697e+01, -7.3322e+00],
        [ 3.1209e+00,  1.2514e+01],
        [ 1.6151e+01,  7.0802e+00],
        [-1.5300e+01, -6.8209e-01],
        [-7.5849e+00,  1.4807e+01],
        [-1.7954e+00,  6.8443e-01],
        [ 5.9682e+00,  1.0453e+01],
        [-1.5286e+00,  1.3350e+01],
        [ 1.6216e+01,  5.9495e+00],
        [-1.5702e+01, -7.5932e-03]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([-7.5186,  5.0226, -3.9297, -5.6039, -7.0568,  2.1852,  9.8822,  7.6548,
        -4.0947,  5.5251,  7.6400, -1.9395, 13.4441], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-3.4635e+00, -1.3475e+00,  1.6768e-01, -5.6915e-01, -3.6756e+00,
          1.5926e+00, -3.0172e+00, -1.5954e+00,  3.1344e-02,  1.0799e+00,
         -2.1623e+00,  3.4982e-01, -3.4321e+00],
        [ 1.4054e-01, -7.2965e+00, -5.1161e-01, -2.7952e-02,  7.9321e+00,
         -2.6258e+00, -7.6187e-01,  3.8991e+00, -5.9651e-01, -1.1111e+00,
          3.5253e-01, -2.4503e+00, -4.7903e+00],
        [-2.0577e+01,  4.4353e+00, -7.5328e-02,  1.2954e+00,  1.5613e+00,
         -4.2754e+00,  6.0701e+00,  9.1368e+00,  3.9018e-02, -6.9035e-02,
         -2.9963e+00, -2.8513e+00,  9.6744e+00],
        [-3.1320e+00, -1.1252e+01, -2.7264e-01, -3.1555e+00,  1.3868e+00,
          5.7717e+00, -5.7149e+00, -1.0075e+01, -7.2456e-02, -6.1744e+00,
          9.3889e+00,  6.0094e+00, -9.0941e+00],
        [-2.8115e-01,  2.7592e-01, -2.3598e-02,  4.1689e-01, -7.0703e-01,
         -1.8522e+00, -4.8244e-02, -7.2895e-02, -2.9536e-02, -1.3089e+00,
         -1.0509e+00, -1.3081e+00, -1.2269e+00],
        [ 1.3108e+00,  2.6722e-01, -4.5741e-02,  1.8338e-01, -5.9861e-01,
         -2.6373e+00, -1.0145e+00,  2.8076e-01, -4.6005e-02, -9.4576e-01,
         -3.3252e-01, -1.8041e+00, -1.2438e+00],
        [-1.8490e-01,  3.7887e-01, -1.9425e-02,  5.0514e-01, -7.9546e-01,
         -1.8936e+00, -1.6310e-01, -4.6946e-02, -2.5833e-02, -1.2958e+00,
         -1.0133e+00, -1.3686e+00, -1.2655e+00],
        [-1.8651e-01,  3.4141e-01, -2.2625e-02,  4.9161e-01, -7.6849e-01,
         -1.8839e+00, -1.8786e-01, -6.1455e-02, -2.8651e-02, -1.3012e+00,
         -1.0315e+00, -1.3624e+00, -1.2858e+00],
        [-4.9360e+00,  9.4629e+00,  8.4550e-01, -7.0800e+00, -1.2044e-05,
          2.1154e+00, -4.4544e+00,  1.8161e-01,  7.0257e-01,  4.3915e+00,
          1.0599e+00, -2.3701e+00, -8.1986e-01],
        [ 6.6800e+00,  5.6386e+00, -1.0820e-01,  3.3986e+00, -1.2228e-03,
         -1.1534e+01,  3.8410e+00,  2.5195e+00, -2.1339e-01, -2.0799e+01,
         -1.3647e+01, -7.0864e+00,  6.6965e+00],
        [ 2.6217e+00, -3.5021e+00,  1.9006e-01,  1.1428e+01,  1.4604e-03,
         -7.9143e+00,  1.2605e+00, -1.9293e+01,  2.4032e-01, -4.2716e+00,
         -1.3890e+01, -2.3483e+00,  3.5328e+00],
        [-2.5080e-01,  3.2664e-01, -2.0980e-02,  4.5187e-01, -7.4845e-01,
         -1.8664e+00, -7.5304e-02, -6.0659e-02, -2.7249e-02, -1.3091e+00,
         -1.0322e+00, -1.3266e+00, -1.2333e+00],
        [-3.0359e+00, -1.8802e+00,  8.5473e-02,  5.1556e+00,  1.7830e-03,
         -3.1732e+00,  1.5161e+00, -7.6610e+00,  1.0796e-01, -6.5351e-01,
         -7.0441e-01, -4.1448e+00,  9.9480e-01]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([  0.0842,  -3.2044, -11.5738,   2.2573,  -2.3343,  -2.7002,  -2.2275,
         -2.2345,  13.4704,  -6.8962,   3.3937,  -2.2957,  -1.1723],
       device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ 1.0915e+00,  5.2563e-01,  1.8862e+00,  2.1003e-01,  1.1638e+00,
          1.2654e+00,  1.1893e+00,  1.1780e+00,  1.4988e+00, -1.7940e+00,
         -1.7031e+01,  1.1770e+00,  7.5763e+00],
        [ 1.5857e-01,  4.4831e-01, -2.2045e-01,  9.7593e-01, -5.7984e-01,
         -1.2091e+00, -6.2623e-01, -6.2179e-01,  1.8117e+00, -2.4711e+00,
         -9.4077e-01, -5.9949e-01, -1.8708e+00],
        [-8.2577e-01,  3.3042e-02, -5.2291e+00,  9.0543e-01, -6.2706e-02,
          1.1590e+00, -4.3012e-03, -5.5602e-04, -6.2400e+00,  8.0816e+00,
          6.8798e+00, -4.7969e-02, -2.9211e+00],
        [-1.1202e+00,  1.7421e+00, -6.2995e+00,  7.0258e-01, -6.4531e-01,
         -7.6992e-01, -7.1057e-01, -6.9726e-01, -2.8785e-01,  1.9884e+00,
          9.9417e+00, -6.7474e-01,  3.6963e+00],
        [ 4.8235e-03,  2.7656e-03, -4.3449e-05, -1.1472e-05,  1.9136e-01,
          4.6464e-01,  2.5939e-01,  2.5844e-01,  1.9502e+01, -2.3865e+00,
         -2.2717e+00,  2.1331e-01, -6.0578e+00]], device='cuda:0'))])
loaded xi:  321.69473
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.0, 0.5, 0.2, 0.15, 0.15]
W_T_mean: 1000.3278755462585
W_T_median: 733.6113376673641
W_T_pctile_5: -190.02603165425342
W_T_CVAR_5_pct: -322.7571246767781
-----------------------------------------------
new min fval from sgd:  -1868.5164755744167
min fval:  -1868.5164755744167
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 640.8645533779641
W_T_median: 508.2407263107124
W_T_pctile_5: 320.6813129001107
W_T_CVAR_5_pct: 209.90309269705986
Average q (qsum/M+1):  50.124169134324596
Optimal xi:  [321.69473]
Expected(across Rb) median(across samples) p_equity:  0.27911374246080717
obj fun:  tensor(-1868.5165, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/constrain_factor/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:268: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
/home/marcchen/Documents/constrain_factor/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/constrain_factor/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: Paper_FactorInv_Factor2
Objective function: mean_cvar_single_level
Tracing param: 1.5
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        5              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 5)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-22.8786,   5.5658],
        [ -1.1088,   0.3523],
        [ -1.1088,   0.3523],
        [ -1.1088,   0.3523],
        [ -1.1088,   0.3523],
        [ -1.1088,   0.3523],
        [ -1.1464, -12.0524],
        [ 14.8048,  -1.0572],
        [ 14.8425,  -1.0768],
        [-11.0281,   8.5953],
        [ -1.1088,   0.3523],
        [ -1.1088,   0.3523],
        [ -1.1088,   0.3523]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([  5.5720,  -3.2298,  -3.2298,  -3.2298,  -3.2298,  -3.2298,  -5.3376,
        -12.5235, -12.5156,   7.1652,  -3.2298,  -3.2298,  -3.2298],
       device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ 0.6324, -0.0245, -0.0245, -0.0245, -0.0245, -0.0245,  0.2273,  0.2678,
          0.2709,  1.4120, -0.0245, -0.0245, -0.0245],
        [-0.2904, -0.0269, -0.0269, -0.0269, -0.0269, -0.0269, -0.2886, -0.2666,
         -0.2725, -0.8376, -0.0269, -0.0269, -0.0269],
        [-6.4459,  0.2754,  0.2754,  0.2754,  0.2754,  0.2754, 21.7308,  8.2166,
          7.3436, -5.1508,  0.2755,  0.2754,  0.2754],
        [-0.2904, -0.0269, -0.0269, -0.0269, -0.0269, -0.0269, -0.2886, -0.2666,
         -0.2725, -0.8376, -0.0269, -0.0269, -0.0269],
        [-5.1907, -0.1518, -0.1518, -0.1518, -0.1518, -0.1518, 20.2070,  8.9973,
          9.9113, -6.9163, -0.1518, -0.1518, -0.1518],
        [-0.2904, -0.0269, -0.0269, -0.0269, -0.0269, -0.0269, -0.2886, -0.2666,
         -0.2725, -0.8376, -0.0269, -0.0269, -0.0269],
        [-0.2904, -0.0269, -0.0269, -0.0269, -0.0269, -0.0269, -0.2886, -0.2666,
         -0.2725, -0.8376, -0.0269, -0.0269, -0.0269],
        [-0.2904, -0.0269, -0.0269, -0.0269, -0.0269, -0.0269, -0.2886, -0.2666,
         -0.2725, -0.8376, -0.0269, -0.0269, -0.0269],
        [-0.2904, -0.0269, -0.0269, -0.0269, -0.0269, -0.0269, -0.2886, -0.2666,
         -0.2725, -0.8376, -0.0269, -0.0269, -0.0269],
        [-0.2904, -0.0269, -0.0269, -0.0269, -0.0269, -0.0269, -0.2886, -0.2666,
         -0.2725, -0.8376, -0.0269, -0.0269, -0.0269],
        [-4.5260, -0.0437, -0.0437, -0.0437, -0.0437, -0.0437, 20.5726, 11.5472,
         11.0013, -7.5483, -0.0437, -0.0437, -0.0437],
        [-0.2904, -0.0269, -0.0269, -0.0269, -0.0269, -0.0269, -0.2886, -0.2666,
         -0.2725, -0.8376, -0.0269, -0.0269, -0.0269],
        [-0.2904, -0.0269, -0.0269, -0.0269, -0.0269, -0.0269, -0.2886, -0.2666,
         -0.2725, -0.8376, -0.0269, -0.0269, -0.0269]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([ 4.6835, -1.9957, -1.0858, -1.9957, -2.9884, -1.9957, -1.9957, -1.9957,
        -1.9957, -1.9957, -3.2458, -1.9957, -1.9957], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 13.1258,  -0.0908, -11.3504,  -0.0908, -10.5086,  -0.0908,  -0.0908,
          -0.0908,  -0.0908,  -0.0908, -13.4109,  -0.0908,  -0.0908]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[-10.6689, -11.5810],
        [-13.7878,  12.0204],
        [ -2.7004,   3.6442],
        [-14.3815,  -7.2571],
        [  6.4094,  14.8318],
        [ 16.2995,   7.2268],
        [-14.3981,  -0.3101],
        [  4.7426,  15.2086],
        [ -1.7383,   2.9051],
        [  8.9935,   9.8983],
        [  1.0318,  18.5409],
        [ 17.7805,   5.5677],
        [-15.4730,  -0.0539]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([-6.4964,  7.6899, -3.9000, -5.5525, -6.8624,  2.3943, 11.1484,  7.9654,
        -3.3602,  5.1201,  7.7239, -2.8968, 13.4447], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-2.3460e+00, -1.9539e+00, -9.0714e-01,  7.2211e-02, -1.9170e+00,
          3.7402e-01, -5.1164e+00, -1.6170e+00, -6.2691e-02,  1.6442e+00,
         -1.1981e+00, -1.1676e+00, -8.2698e+00],
        [-1.2354e+00, -7.9161e-02,  1.5656e+00,  1.6239e-03,  1.4795e+00,
         -3.2227e+00,  1.3043e+00,  6.8405e-01,  1.5141e+00, -6.3936e-01,
         -7.7628e-01, -2.5684e+00,  1.0502e+00],
        [-2.9420e+01,  1.6217e+01,  1.1668e+00,  3.9055e-02, -6.9894e+00,
         -3.7063e+00,  4.5962e+00,  5.8968e+00,  1.0692e+00,  1.8634e+00,
         -5.4520e+00, -3.3093e+00,  6.7117e+00],
        [ 2.3163e+00, -2.2157e-01, -2.7249e-01, -1.2471e+00, -1.4452e-01,
          8.2424e-01, -3.3712e+00, -5.2259e-01, -2.6686e-01, -5.3946e+00,
         -4.7359e-01, -2.1216e-01, -1.1560e+01],
        [ 3.0710e-01,  1.6475e-01,  2.8189e-01, -3.3454e-01,  4.6999e-01,
         -2.1027e+00, -7.9671e-01, -1.0300e+00,  2.9007e-01, -1.4943e+00,
          3.0092e-01, -1.2768e+00, -1.4178e+00],
        [-9.9073e-01,  4.7035e-01, -1.9890e+00, -2.3171e-01,  3.7382e+00,
         -5.8245e-01, -7.5942e-01, -1.5993e+00,  2.2475e-01, -1.4589e+00,
          1.7855e-01, -2.5772e+00, -1.0927e+00],
        [-4.0511e+00, -2.1805e+00,  8.7402e-02, -7.1702e-01,  7.2991e-02,
         -1.7725e+00,  1.3604e+00,  1.6390e+00,  1.9658e-01, -2.4154e-01,
         -5.0288e+00, -4.4264e+00,  1.3211e-01],
        [-2.5122e+00,  2.1072e-01, -2.0775e+00, -2.1249e+00,  3.2934e+00,
         -7.1121e-01, -9.5137e-01, -4.5604e+00, -1.5585e+00,  4.8077e-01,
          1.5895e+00, -5.3824e-01,  1.3623e+00],
        [-4.4939e+00,  8.6623e+00,  2.6208e-01, -5.6520e+00, -7.5727e-06,
          5.3546e+00, -6.3029e+00,  1.5508e+00,  6.6131e-01,  1.5538e+01,
          6.2379e-02,  9.6790e-01,  8.5355e-01],
        [ 7.4486e+00,  1.5939e+00, -1.7322e-01,  6.4905e+00,  4.1252e-05,
         -1.1579e+01,  5.1576e+00, -1.8697e+01, -3.1444e-01, -1.6585e+01,
         -3.0479e+00, -8.7528e+00,  5.1712e+00],
        [ 1.9372e+00, -6.7880e+00, -9.0766e-02,  1.0151e+01, -7.7689e-04,
         -6.4139e+00,  5.5024e-02, -1.1579e+01, -5.8842e-01, -9.7301e-01,
         -1.8505e+01, -3.2092e+00,  2.9517e+00],
        [-3.2724e+00, -5.3388e-01, -9.0881e-03, -1.6594e+00,  5.2938e-02,
         -2.6572e+00,  6.2138e-01, -6.5564e-01, -4.0504e-02, -8.1741e-01,
         -2.9884e+00, -4.0453e+00,  2.0283e-01],
        [ 7.5556e-01,  6.0849e-01,  1.4767e-01,  2.8595e-01,  7.3656e-01,
         -1.9127e+00, -3.8168e-02,  1.7867e-02,  2.8104e-01, -8.9838e-01,
          5.1063e-01, -1.6271e+00, -1.5719e+00]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -0.9378,  -3.0498, -12.1849,  -0.8466,  -2.4052,  -2.7052,  -2.1314,
         -1.7798,  12.2911,  -4.6018,   4.5893,  -2.3877,  -2.3439],
       device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ 1.4018e-01,  3.7375e+00,  1.5586e+00,  7.1812e-01,  1.2369e+00,
          1.6419e+00,  6.1117e+00,  6.4016e-01,  1.7516e+00, -5.6926e-01,
         -1.7211e+01,  4.9012e+00,  1.4900e+00],
        [ 3.5300e-01, -1.8007e+00,  2.2016e-02, -3.6335e-01, -5.9958e-01,
         -8.8487e-01, -4.7629e-01,  8.5106e-01,  1.8004e+00, -2.3290e+00,
         -1.6257e+00, -4.7070e-01, -8.5186e-01],
        [-3.7892e-01, -1.3902e+00, -2.5135e+00,  1.6977e+00, -2.5768e-01,
         -1.3202e+00, -4.1823e+00, -1.8242e+00, -7.0553e+00,  8.0302e+00,
          7.6446e+00, -2.8817e+00, -3.7612e-01],
        [-6.5712e+00, -4.8689e-01, -5.7408e+00,  3.7045e+00,  2.5689e-01,
          2.3193e+00,  3.9753e+00,  4.5143e+00, -7.1316e-01,  1.3207e+00,
          1.1270e+01,  2.8658e+00, -2.5292e-01],
        [-3.2825e-04, -1.0875e+00,  9.9186e-08,  8.3818e-04,  1.6044e-01,
          2.6653e-02, -1.1181e-01,  2.1528e-02,  2.4339e+01, -5.5094e+00,
         -5.2603e+00, -5.1989e-02, -1.9075e-01]], device='cuda:0'))])
loaded xi:  370.86798
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.0, 0.5, 0.2, 0.15, 0.15]
W_T_mean: 1000.3278755462585
W_T_median: 733.6113376673641
W_T_pctile_5: -190.02603165425342
W_T_CVAR_5_pct: -322.7571246767781
-----------------------------------------------
new min fval from sgd:  -2223.7891242234373
min fval:  -2223.7891242234373
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 663.6701203858149
W_T_median: 531.5665663002169
W_T_pctile_5: 369.90045016525943
W_T_CVAR_5_pct: 247.86015962873148
Average q (qsum/M+1):  47.756694178427416
Optimal xi:  [370.86798]
Expected(across Rb) median(across samples) p_equity:  0.26158061089615026
obj fun:  tensor(-2223.7891, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/constrain_factor/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:268: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
/home/marcchen/Documents/constrain_factor/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/constrain_factor/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: Paper_FactorInv_Factor2
Objective function: mean_cvar_single_level
Tracing param: 3.0
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        5              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 5)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-23.3864,   5.5968],
        [ -1.1716,   0.2895],
        [ -1.1716,   0.2895],
        [ -1.1716,   0.2895],
        [ -1.1716,   0.2895],
        [ -1.1716,   0.2895],
        [ -0.2186, -12.7347],
        [ 14.8048,  -0.9603],
        [ 14.8753,  -0.9864],
        [-12.0001,   8.1444],
        [ -1.1716,   0.2895],
        [ -1.1716,   0.2895],
        [ -1.1716,   0.2895]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([  5.2205,  -3.4097,  -3.4097,  -3.4097,  -3.4097,  -3.4097,  -5.5237,
        -12.3431, -12.3099,   6.4891,  -3.4097,  -3.4097,  -3.4097],
       device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ 6.3860e-01,  3.1048e-02,  3.1048e-02,  3.1048e-02,  3.1048e-02,
          3.1048e-02,  2.5522e-01,  3.1368e-01,  3.3396e-01,  1.2174e+00,
          3.1048e-02,  3.1048e-02,  3.1048e-02],
        [-1.3748e-01, -1.4311e-02, -1.4311e-02, -1.4311e-02, -1.4311e-02,
         -1.4311e-02, -2.3567e-01, -1.8777e-01, -2.0183e-01, -7.1662e-01,
         -1.4311e-02, -1.4311e-02, -1.4311e-02],
        [-6.6016e+00,  1.7968e-01,  1.7968e-01,  1.7968e-01,  1.7968e-01,
          1.7968e-01,  2.1958e+01,  7.4228e+00,  6.6961e+00, -5.1485e+00,
          1.7968e-01,  1.7968e-01,  1.7968e-01],
        [-1.3748e-01, -1.4311e-02, -1.4311e-02, -1.4311e-02, -1.4311e-02,
         -1.4311e-02, -2.3567e-01, -1.8777e-01, -2.0183e-01, -7.1662e-01,
         -1.4311e-02, -1.4311e-02, -1.4311e-02],
        [-5.0609e+00, -1.4157e-01, -1.4157e-01, -1.4158e-01, -1.4158e-01,
         -1.4158e-01,  2.0613e+01,  8.7951e+00,  9.8082e+00, -7.1069e+00,
         -1.4158e-01, -1.4158e-01, -1.4158e-01],
        [-1.3748e-01, -1.4311e-02, -1.4311e-02, -1.4311e-02, -1.4311e-02,
         -1.4311e-02, -2.3567e-01, -1.8777e-01, -2.0183e-01, -7.1662e-01,
         -1.4311e-02, -1.4311e-02, -1.4311e-02],
        [-1.3748e-01, -1.4311e-02, -1.4311e-02, -1.4311e-02, -1.4311e-02,
         -1.4311e-02, -2.3567e-01, -1.8777e-01, -2.0183e-01, -7.1662e-01,
         -1.4311e-02, -1.4311e-02, -1.4311e-02],
        [-1.3748e-01, -1.4311e-02, -1.4311e-02, -1.4311e-02, -1.4311e-02,
         -1.4311e-02, -2.3567e-01, -1.8777e-01, -2.0183e-01, -7.1662e-01,
         -1.4311e-02, -1.4311e-02, -1.4311e-02],
        [-1.3748e-01, -1.4311e-02, -1.4311e-02, -1.4311e-02, -1.4311e-02,
         -1.4311e-02, -2.3567e-01, -1.8777e-01, -2.0183e-01, -7.1662e-01,
         -1.4311e-02, -1.4311e-02, -1.4311e-02],
        [-1.3748e-01, -1.4311e-02, -1.4311e-02, -1.4311e-02, -1.4311e-02,
         -1.4311e-02, -2.3567e-01, -1.8777e-01, -2.0183e-01, -7.1662e-01,
         -1.4311e-02, -1.4311e-02, -1.4311e-02],
        [-4.1148e+00, -7.6840e-02, -7.6840e-02, -7.6840e-02, -7.6840e-02,
         -7.6841e-02,  2.0945e+01,  1.1365e+01,  1.0967e+01, -8.0292e+00,
         -7.6842e-02, -7.6842e-02, -7.6841e-02],
        [-1.3748e-01, -1.4311e-02, -1.4311e-02, -1.4311e-02, -1.4311e-02,
         -1.4311e-02, -2.3567e-01, -1.8777e-01, -2.0183e-01, -7.1662e-01,
         -1.4311e-02, -1.4311e-02, -1.4311e-02],
        [-1.3748e-01, -1.4311e-02, -1.4311e-02, -1.4311e-02, -1.4311e-02,
         -1.4311e-02, -2.3566e-01, -1.8777e-01, -2.0183e-01, -7.1661e-01,
         -1.4311e-02, -1.4311e-02, -1.4311e-02]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([ 5.2510, -2.3180, -0.9704, -2.3180, -3.2182, -2.3180, -2.3180, -2.3180,
        -2.3180, -2.3180, -3.4594, -2.3180, -2.3180], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 12.8116,   0.0140, -11.3648,   0.0140, -10.6900,   0.0140,   0.0140,
           0.0140,   0.0140,   0.0140, -13.8141,   0.0140,   0.0140]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[-11.7046, -11.5253],
        [-15.6724,  10.5881],
        [ -2.6378,   0.1630],
        [-16.2609,  -7.7898],
        [  5.7817,  12.0858],
        [ 17.0657,   7.4759],
        [-12.1996,   1.3303],
        [ -4.5638,  16.6531],
        [ -2.7681,   0.2525],
        [  1.5408,  11.1876],
        [ -0.4603,  12.8548],
        [ 17.5983,   5.1625],
        [-14.5730,  -0.4271]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([-5.8099,  7.2788, -4.4051, -4.4533, -9.0927,  2.3748, 12.3650,  7.6902,
        -4.2784,  7.1992,  4.6498, -3.4254, 12.2607], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-2.5509e-01, -5.1194e-01, -2.1126e-02, -9.4732e-02, -8.6002e-02,
         -2.0601e+00, -1.6971e+00, -3.9414e-02, -2.1302e-02, -1.0885e+00,
         -1.1487e-01, -1.5725e+00, -1.3974e+00],
        [-5.7360e+00,  6.2929e-01,  2.0002e-01, -2.2916e-01, -2.8558e+00,
         -9.8187e-01, -1.0370e+00, -6.6982e-02,  2.6508e-01,  1.2069e+00,
          6.1942e-01, -1.7175e-01, -2.2503e+00],
        [-3.4662e+01,  1.7651e+01,  6.1042e-02,  3.2925e+00, -9.8850e+00,
         -3.4357e+00,  3.5272e+00, -4.6741e+00,  1.1586e-01,  6.3417e+00,
         -1.7931e-01, -2.2508e+00,  6.8009e+00],
        [-1.1125e+01,  1.8257e+00,  7.5992e-02, -1.4339e-02,  7.6716e-01,
          1.9844e+00, -6.6043e+00, -5.3494e-01,  8.9573e-02, -1.7714e+00,
         -5.0944e-01,  7.2458e-01, -9.8052e+00],
        [-2.4122e-01,  7.4549e-01, -7.2034e-02,  9.4750e-01, -7.9433e-01,
         -2.3286e+00, -5.9931e-01,  1.5637e+00, -2.1145e-01,  9.8400e-01,
          8.1108e-01, -1.2725e+00, -2.3136e+00],
        [-3.3331e+00,  5.3455e-01, -6.6547e-03, -5.0778e-02, -1.9224e+00,
         -1.7113e+00, -1.7197e+00, -7.6258e-01, -3.3881e-03,  6.1840e-01,
         -4.1881e-02, -9.8494e-01, -2.9264e+00],
        [-3.5977e+00,  5.2835e-01, -3.8230e-03, -7.8051e-02, -2.1857e+00,
         -1.6771e+00, -1.7429e+00, -6.6859e-01,  5.0422e-04,  6.7488e-01,
          5.6116e-03, -9.5053e-01, -2.7458e+00],
        [-5.9446e-01,  2.2947e+00,  1.3654e-01, -3.7991e-01, -1.3217e+00,
         -3.1109e+00, -2.7122e-01,  7.8126e-01,  8.5196e-02,  4.4107e-01,
         -9.0586e-01, -4.6490e+00,  6.0865e-01],
        [-3.3310e+00,  9.8997e+00,  2.1933e+00, -8.6812e+00, -4.3067e-06,
          1.0222e+01, -4.7705e+00,  1.2305e-01,  2.4697e+00,  2.2438e+01,
          3.6807e-01, -2.1428e-01,  1.9732e+00],
        [ 8.2174e+00,  3.4064e+00, -1.5429e-01,  1.3083e+01, -5.0365e-04,
         -1.3505e+01,  3.4975e+00, -5.6593e+00, -1.8108e-01, -2.1744e+01,
         -8.4148e+00, -6.7472e+00,  4.2304e+00],
        [ 2.1552e+00, -4.3704e+00, -4.1682e-03,  1.1919e+01, -3.2529e-03,
         -6.4903e+00,  9.8009e-01, -2.6158e+01,  5.6474e-03, -5.2135e+00,
         -1.4013e+01, -2.4566e+00,  1.4742e+00],
        [-1.3059e+00,  8.0375e-01, -1.0379e-01, -2.4246e-01, -3.2294e-01,
         -2.6110e+00, -9.0309e-01, -1.6309e+00, -1.0521e-01, -1.2710e+00,
         -1.3842e+00, -1.4253e+00,  2.8911e-01],
        [-7.1543e+00,  5.1710e-01,  1.0486e-01,  3.3318e-01, -2.0763e-01,
         -1.7690e+00,  1.3359e+00, -5.6265e+00,  1.7683e-01,  1.3466e+00,
         -1.2775e+00, -4.8812e+00,  2.9284e-01]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -2.5048,  -1.6909, -11.1764,  -0.4762,  -3.1610,  -2.3565,  -2.2766,
         -2.7110,  12.2027,  -4.8199,   4.5830,  -2.8437,  -2.1778],
       device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ 3.4467e-01, -6.8774e-01,  1.2843e+00, -4.3610e-01,  2.2612e-01,
         -8.2526e-01, -8.5774e-01,  2.5603e+00,  1.8908e+00, -1.7532e+00,
         -1.2901e+01,  2.0360e+00,  4.0122e+00],
        [-2.2596e-01,  6.5653e-01,  1.1951e-01,  1.5442e+00, -3.4362e-01,
          7.5742e-01,  7.9667e-01, -1.1056e+00,  1.6452e+00, -2.2847e+00,
         -1.8121e+00, -9.6626e-01, -1.5080e+00],
        [-3.1463e-01, -6.6696e-01, -4.1023e+00, -8.3025e-01, -1.0058e+00,
         -7.8605e-02, -9.3414e-02, -5.5378e-01, -7.1368e+00,  8.2504e+00,
          7.3283e+00, -4.3239e-01, -1.5102e+00],
        [ 1.7612e-01, -3.3544e+00, -6.2624e+00, -4.1181e+00, -3.1150e+00,
         -1.9928e+00, -2.1262e+00, -2.6537e+00, -7.7557e-01,  2.4632e+00,
          1.0222e+01,  2.0903e+00,  4.3669e+00],
        [-6.6368e-02, -4.2774e-03,  1.5098e-08,  1.0594e-07, -2.0003e-02,
         -2.3157e-03, -2.4867e-03,  2.5097e-01,  2.5511e+01, -6.2573e+00,
         -5.9105e+00,  4.0240e-03,  4.0209e-02]], device='cuda:0'))])
loaded xi:  387.86282
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.0, 0.5, 0.2, 0.15, 0.15]
W_T_mean: 1000.3278755462585
W_T_median: 733.6113376673641
W_T_pctile_5: -190.02603165425342
W_T_CVAR_5_pct: -322.7571246767781
-----------------------------------------------
new min fval from sgd:  -2743.9290752379593
min fval:  -2743.9290752379593
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 671.9778170206621
W_T_median: 545.7204888338449
W_T_pctile_5: 387.1445863186348
W_T_CVAR_5_pct: 260.8350905942568
Average q (qsum/M+1):  46.449242376512096
Optimal xi:  [387.86282]
Expected(across Rb) median(across samples) p_equity:  0.23943645084897677
obj fun:  tensor(-2743.9291, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/constrain_factor/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:268: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
/home/marcchen/Documents/constrain_factor/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/constrain_factor/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: Paper_FactorInv_Factor2
Objective function: mean_cvar_single_level
Tracing param: 5.0
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        5              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 5)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-14.7327,  13.0090],
        [ -0.6056,   0.5566],
        [ -0.6056,   0.5566],
        [ -0.6056,   0.5566],
        [ -0.6056,   0.5566],
        [ -0.6056,   0.5566],
        [  2.3645, -12.2769],
        [ 15.7212,  -1.2953],
        [ 15.7703,  -1.4349],
        [ -7.4609,  14.5847],
        [ -0.6056,   0.5566],
        [ -0.6056,   0.5566],
        [ -0.6056,   0.5566]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([  7.4039,  -3.5872,  -3.5872,  -3.5871,  -3.5872,  -3.5871,  -5.4880,
        -11.8573, -11.8477,   6.5074,  -3.5872,  -3.5872,  -3.5871],
       device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ 1.7189, -0.1198, -0.1198, -0.1198, -0.1198, -0.1198,  0.6718,  0.3993,
          0.4108,  1.6320, -0.1198, -0.1198, -0.1198],
        [-0.9950, -0.0653, -0.0653, -0.0653, -0.0653, -0.0653, -0.6585, -0.1338,
         -0.1446, -1.0869, -0.0653, -0.0653, -0.0653],
        [-8.9893,  0.4130,  0.4130,  0.4130,  0.4130,  0.4130, 18.7729, 12.1197,
         11.1947, -5.9992,  0.4130,  0.4130,  0.4130],
        [-0.9950, -0.0653, -0.0653, -0.0653, -0.0653, -0.0653, -0.6585, -0.1338,
         -0.1446, -1.0869, -0.0653, -0.0653, -0.0653],
        [-8.7432, -0.1276, -0.1276, -0.1276, -0.1276, -0.1276, 18.9537,  3.2541,
          3.4985, -8.0731, -0.1276, -0.1276, -0.1276],
        [-0.9950, -0.0653, -0.0653, -0.0653, -0.0653, -0.0653, -0.6585, -0.1338,
         -0.1446, -1.0869, -0.0653, -0.0653, -0.0653],
        [-0.9950, -0.0653, -0.0653, -0.0653, -0.0653, -0.0653, -0.6585, -0.1338,
         -0.1446, -1.0869, -0.0653, -0.0653, -0.0653],
        [-0.9950, -0.0653, -0.0653, -0.0653, -0.0653, -0.0653, -0.6585, -0.1338,
         -0.1446, -1.0869, -0.0653, -0.0653, -0.0653],
        [-0.9950, -0.0653, -0.0653, -0.0653, -0.0653, -0.0653, -0.6585, -0.1338,
         -0.1446, -1.0869, -0.0653, -0.0653, -0.0653],
        [-0.9950, -0.0653, -0.0653, -0.0653, -0.0653, -0.0653, -0.6585, -0.1338,
         -0.1446, -1.0869, -0.0653, -0.0653, -0.0653],
        [-7.6085, -0.1959, -0.1958, -0.1958, -0.1958, -0.1958, 17.8988, 15.6143,
         15.1346, -6.8063, -0.1958, -0.1958, -0.1958],
        [-0.9950, -0.0653, -0.0653, -0.0653, -0.0653, -0.0653, -0.6585, -0.1338,
         -0.1446, -1.0869, -0.0653, -0.0653, -0.0653],
        [-0.9950, -0.0653, -0.0653, -0.0653, -0.0653, -0.0653, -0.6585, -0.1338,
         -0.1446, -1.0869, -0.0653, -0.0653, -0.0653]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([ 3.9782, -2.1763,  1.8934, -2.1763, -2.1535, -2.1763, -2.1763, -2.1763,
        -2.1763, -2.1763, -2.7879, -2.1763, -2.1763], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 11.9861,  -0.1679, -11.2327,  -0.1679,  -9.6189,  -0.1679,  -0.1679,
          -0.1679,  -0.1679,  -0.1679, -14.6498,  -0.1679,  -0.1679]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[-10.9040, -11.4181],
        [-15.9873,   9.7508],
        [  1.2582,  10.5971],
        [-15.4874,  -8.0663],
        [  3.0086,   8.2371],
        [ 16.8240,   8.1077],
        [-14.5969,  -0.0357],
        [ -7.6841,  17.4233],
        [  1.2549,  10.5927],
        [  8.5324,  11.3673],
        [  1.9684,  14.3184],
        [ 16.6130,   5.3181],
        [-12.7742,   2.1736]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([-5.8052,  6.9686, -4.3960, -5.0496, -8.6176,  2.8716, 11.2915,  7.6783,
        -4.3964,  4.9245,  7.4954, -2.9440, 14.4793], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-2.2031e+01,  1.3075e+01, -3.8958e-01, -7.3413e+00, -1.0083e+00,
          3.3320e-01,  3.8788e+00,  1.9263e+01, -3.8906e-01,  3.9453e+00,
          2.0927e+00,  1.7670e-01, -4.4822e+00],
        [-1.3218e+00, -7.8235e-01, -4.8489e-01, -1.8808e-01, -7.0055e-01,
         -2.0219e+00, -1.8445e+00, -2.6419e-02, -4.8535e-01, -7.8992e-01,
          2.0760e-01, -1.4434e+00, -1.8112e+00],
        [-2.9738e+01,  1.8198e+01, -5.6395e+00, -2.6653e+00, -8.0809e+00,
         -4.5248e+00,  4.6179e+00, -6.0832e+00, -5.6359e+00,  4.8554e+00,
          5.5875e+00, -2.7580e+00,  5.4009e+00],
        [ 1.1283e+00, -3.3914e+00,  3.6687e-01,  2.1890e-01, -7.1206e-01,
         -8.4206e-01, -3.0314e+00,  2.2192e+00,  3.6531e-01, -7.4667e-01,
          1.0676e+00, -4.2393e-01, -1.5822e+00],
        [-4.5317e+00,  7.3963e-02, -3.1609e+00,  2.4773e-01, -9.1494e-01,
         -4.6216e-01, -6.2451e+00, -1.4963e+00, -3.1588e+00,  1.1643e+00,
         -1.4653e+00,  3.2863e-01, -2.9747e+00],
        [-7.1556e-01, -9.9303e-01, -2.9562e-01, -1.7466e-01, -6.9175e-01,
         -2.1019e+00, -1.9198e+00,  3.6748e-01, -2.9631e-01, -8.5637e-01,
          3.0805e-01, -1.3091e+00, -1.9803e+00],
        [ 1.4741e-01,  1.4308e+00, -1.0899e+00, -5.3869e-01, -1.3494e+00,
         -2.1773e+00,  1.0737e+00, -4.1320e-01, -1.0903e+00, -6.2150e-01,
          1.9367e+00, -4.2785e+00, -1.5300e+00],
        [-3.8815e-01, -2.2849e-01, -1.2808e-01, -2.8822e-01, -1.6064e-01,
         -2.3403e+00, -5.3678e-01, -1.8176e-01, -1.2822e-01, -1.3048e+00,
         -9.2384e-02, -9.3786e-01, -2.5635e+00],
        [-1.5639e+00,  1.7826e+01, -1.8926e-04, -8.8377e+00, -2.2401e-04,
          2.4813e+01, -4.9394e+00,  2.4464e-02, -1.9072e-04,  5.6836e+00,
          2.3089e+00,  2.3043e+00, -5.1563e-01],
        [ 7.0100e+00,  4.6724e-01,  4.3203e-02,  1.1346e+01,  8.8080e-03,
         -1.3420e+01,  3.5650e+00, -8.8839e+00,  4.3264e-02, -2.6801e+01,
         -1.7628e+01, -6.0163e+00,  4.6624e+00],
        [ 2.9906e+00, -4.3814e+00,  2.7511e-02,  1.2442e+01,  5.0712e-03,
         -7.9100e+00,  1.0207e+00, -2.8838e+01,  2.7509e-02, -2.4832e+00,
         -1.0510e+01, -2.7858e+00,  3.2197e+00],
        [ 2.5413e-01, -7.7074e-01, -2.1158e-01, -1.7862e-01, -5.3675e-01,
         -2.0641e+00, -1.6529e+00,  4.2597e-01, -2.1231e-01, -1.2225e+00,
          1.3577e-01, -1.0761e+00, -2.6573e+00],
        [-4.9655e+00,  3.1927e-01, -1.0880e-01,  5.8975e-01, -1.9099e-01,
         -1.3512e+00,  1.3234e+00, -8.1827e+00, -1.0915e-01,  7.4919e-01,
          2.9986e+00, -4.0225e+00, -3.1608e-01]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -2.0406,  -2.3661, -12.6875,  -1.8430,  -1.2653,  -2.6145,  -2.6116,
         -3.4797,  12.8242,  -4.2293,   3.3606,  -2.6643,  -3.0979],
       device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ 1.0050e+00,  8.9834e-01,  1.1399e+00,  2.0369e+00, -6.3716e-01,
          8.8759e-01,  4.4642e+00,  8.3844e-01,  1.5395e+00, -6.3035e-02,
         -2.3749e+01,  8.1937e-01,  2.8126e+00],
        [ 2.4638e-01, -6.3967e-01,  2.9889e-01, -1.6781e+00,  5.9767e-01,
         -5.6085e-01, -1.9366e+00, -5.4964e-01,  1.8319e+00, -2.7125e+00,
         -1.3739e+00, -7.3745e-01, -1.5568e+00],
        [-5.4431e+00, -1.2835e-01, -1.2443e-01,  7.3106e-01, -3.4120e-01,
          9.3940e-02, -1.4194e+00,  2.4572e-02, -6.8469e+00,  8.3745e+00,
          7.4347e+00, -6.7719e-03, -2.5735e+00],
        [-1.4826e+00, -7.1513e-01, -7.1959e+00,  1.0503e+00, -7.4467e+00,
         -2.0640e-01, -4.8634e-01,  3.7039e-01, -1.6348e-02,  6.1240e-01,
          1.3379e+01,  6.2269e-01, -2.4633e-01],
        [-1.4975e-08,  1.9453e-02,  1.9585e-09,  3.2942e-01, -8.7078e-03,
          4.9723e-02,  1.4538e-02,  4.3419e-02,  2.9072e+01, -6.7972e+00,
         -6.2666e+00,  2.0558e-01, -2.7105e-02]], device='cuda:0'))])
loaded xi:  400.6068
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.0, 0.5, 0.2, 0.15, 0.15]
W_T_mean: 1000.3278755462585
W_T_median: 733.6113376673641
W_T_pctile_5: -190.02603165425342
W_T_CVAR_5_pct: -322.7571246767781
-----------------------------------------------
new min fval from sgd:  -4078.5299935625703
min fval:  -4078.5299935625703
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 681.3623902604957
W_T_median: 557.5411295940398
W_T_pctile_5: 399.96443607500316
W_T_CVAR_5_pct: 268.3240116889803
Average q (qsum/M+1):  45.018212103074596
Optimal xi:  [400.6068]
Expected(across Rb) median(across samples) p_equity:  0.21718729386727015
obj fun:  tensor(-4078.5300, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/constrain_factor/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:268: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
/home/marcchen/Documents/constrain_factor/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/constrain_factor/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: Paper_FactorInv_Factor2
Objective function: mean_cvar_single_level
Tracing param: 10.0
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        5              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 5)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-16.9244,  12.3940],
        [ -1.0466,   0.5345],
        [ -1.0466,   0.5345],
        [ -1.0466,   0.5346],
        [ -1.0466,   0.5345],
        [ -1.0466,   0.5346],
        [  3.3596, -12.2144],
        [ 15.0859,  -0.0862],
        [ 15.2504,  -1.2293],
        [ -9.9573,  15.8238],
        [ -1.0466,   0.5346],
        [ -1.0466,   0.5346],
        [ -1.0466,   0.5346]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([  6.2609,  -4.2275,  -4.2275,  -4.2275,  -4.2275,  -4.2275,  -5.3035,
        -11.2389, -11.0298,   6.6743,  -4.2275,  -4.2275,  -4.2275],
       device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[  1.2956,   0.0683,   0.0683,   0.0683,   0.0683,   0.0683,   0.9799,
          -0.1244,  -0.1127,   2.3138,   0.0683,   0.0683,   0.0683],
        [ -0.7928,  -0.0177,  -0.0177,  -0.0177,  -0.0177,  -0.0177,  -0.8144,
          -0.0277,  -0.0761,  -1.2126,  -0.0177,  -0.0177,  -0.0177],
        [ -9.7978,   0.3557,   0.3557,   0.3557,   0.3557,   0.3557,  15.7028,
          12.4365,  11.3364,  -7.4752,   0.3557,   0.3557,   0.3557],
        [ -0.7928,  -0.0177,  -0.0177,  -0.0177,  -0.0177,  -0.0177,  -0.8144,
          -0.0277,  -0.0761,  -1.2126,  -0.0177,  -0.0177,  -0.0177],
        [-11.9276,  -0.1347,  -0.1347,  -0.1347,  -0.1347,  -0.1347,  17.2897,
           1.7283,   2.7259, -10.2461,  -0.1347,  -0.1347,  -0.1347],
        [ -0.7928,  -0.0177,  -0.0177,  -0.0177,  -0.0177,  -0.0177,  -0.8144,
          -0.0277,  -0.0761,  -1.2126,  -0.0177,  -0.0177,  -0.0177],
        [ -0.7928,  -0.0177,  -0.0177,  -0.0177,  -0.0177,  -0.0177,  -0.8144,
          -0.0277,  -0.0761,  -1.2126,  -0.0177,  -0.0177,  -0.0177],
        [ -0.7928,  -0.0177,  -0.0177,  -0.0177,  -0.0177,  -0.0177,  -0.8144,
          -0.0277,  -0.0761,  -1.2126,  -0.0177,  -0.0177,  -0.0177],
        [ -0.7928,  -0.0177,  -0.0177,  -0.0177,  -0.0177,  -0.0177,  -0.8144,
          -0.0277,  -0.0761,  -1.2126,  -0.0177,  -0.0177,  -0.0177],
        [ -0.7928,  -0.0177,  -0.0177,  -0.0177,  -0.0177,  -0.0177,  -0.8144,
          -0.0277,  -0.0761,  -1.2126,  -0.0177,  -0.0177,  -0.0177],
        [-10.3057,  -0.1151,  -0.1151,  -0.1151,  -0.1151,  -0.1151,  14.0435,
          15.1687,  14.6900,  -8.4255,  -0.1151,  -0.1151,  -0.1151],
        [ -0.7928,  -0.0177,  -0.0177,  -0.0177,  -0.0177,  -0.0177,  -0.8144,
          -0.0277,  -0.0761,  -1.2126,  -0.0177,  -0.0177,  -0.0177],
        [ -0.7926,  -0.0177,  -0.0177,  -0.0177,  -0.0177,  -0.0177,  -0.8142,
          -0.0276,  -0.0761,  -1.2128,  -0.0177,  -0.0177,  -0.0177]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([ 4.9455, -2.7540,  3.5813, -2.7540, -0.1718, -2.7540, -2.7540, -2.7540,
        -2.7540, -2.7540,  0.4240, -2.7540, -2.7542], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 1.1483e+01,  1.4634e-02, -1.0201e+01,  1.4634e-02, -9.9271e+00,
          1.4634e-02,  1.4634e-02,  1.4634e-02,  1.4633e-02,  1.4633e-02,
         -1.5739e+01,  1.4634e-02,  1.4621e-02]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -9.8753, -10.6674],
        [-17.6310,  10.9904],
        [ -2.6808,   0.7150],
        [-15.4903,  -7.5353],
        [ -2.3446,   4.6596],
        [ 17.1013,   8.0774],
        [-14.7977,   1.0660],
        [ -2.4312,  16.8698],
        [ -2.5141,   0.7484],
        [  9.4938,   9.6798],
        [  5.8644,  13.0776],
        [ 16.5916,   5.9080],
        [-13.9386,   0.9417]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -5.3586,   6.9875,  -6.5695,  -4.4714, -10.6208,   2.5333,  12.2364,
          9.4364,  -6.7067,   4.1269,   5.5570,  -1.7635,  13.1548],
       device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-6.8321e+00, -5.0099e-03, -9.1599e-02,  1.4466e+00, -2.0931e-02,
          7.1861e-01, -1.0237e+01, -1.7730e+01, -8.5292e-02,  2.9159e+00,
         -1.4378e+00, -9.0694e-01, -7.2489e+00],
        [-1.3450e+00, -1.4967e+00, -4.6622e-01, -6.6383e-01, -3.5613e+00,
         -1.2979e+00, -7.2752e-01,  2.9285e+00, -3.6271e-01,  8.5260e-01,
          1.2105e+00, -3.5466e+00, -5.7764e-01],
        [-2.5389e+01,  1.6950e+01,  6.1640e-01, -4.0448e-01, -1.9252e-02,
         -2.1801e+00,  2.8534e+00,  7.1152e+00,  5.8696e-01,  6.1527e+00,
          3.6018e+00,  8.6520e-01,  1.8618e+00],
        [ 5.8770e-01,  1.0799e-01,  1.1255e-02,  2.1918e+00,  6.0822e-02,
          1.1720e+00, -7.5923e-01, -1.9064e+00,  1.2001e-02, -2.3062e+00,
         -2.0125e+00, -7.5267e-01, -8.2819e+00],
        [-2.5484e+00, -6.6528e-01,  2.4731e-02, -4.0124e+00, -1.7000e+00,
         -1.5848e-01,  2.2509e+00, -1.3465e+00,  1.9892e-02,  6.3054e-01,
         -6.7184e-01, -6.0717e+00, -1.1491e+00],
        [-8.7202e-01, -2.8589e+00, -2.6226e-02, -3.2181e+00, -3.8595e+00,
         -1.2466e+00,  2.2251e-01,  3.7362e+00,  8.1681e-03,  1.2409e+00,
          3.6278e+00, -7.2884e+00, -1.4512e+00],
        [ 6.9482e-01, -9.3615e-01,  8.3746e-02,  2.9673e+00, -2.4007e+00,
         -1.5404e+00,  3.6359e-01,  1.8043e+00,  6.7133e-02, -3.8384e-02,
          1.3820e+00, -3.4278e+00, -1.0979e+00],
        [-9.1611e-01, -2.0685e-01, -5.2338e-02, -2.1774e-02,  4.9377e-02,
         -2.7026e+00, -9.4184e-01,  1.1760e-01, -4.7624e-02, -1.3950e+00,
         -8.6333e-01, -2.2693e+00, -1.8578e+00],
        [-3.3419e+00,  4.0967e+01,  1.6312e+00, -7.1163e+00,  3.1904e-03,
          4.2149e+01, -3.8909e+00,  4.4306e+00,  1.3944e+00,  4.8144e+01,
          1.2790e+01,  2.7448e-01, -1.3725e+00],
        [ 6.9597e+00, -5.6440e-01, -1.5291e-02,  1.2338e+01, -4.4368e-02,
         -1.3773e+01,  3.4978e+00, -1.7309e+01,  3.3392e-03, -2.0594e+01,
         -2.2884e+01, -7.8188e+00,  5.9329e+00],
        [ 3.1643e+00, -1.4983e+00,  2.5155e-01,  1.0199e+01,  3.8478e-03,
         -7.1470e+00,  7.6256e-01, -1.7676e+01,  2.6044e-01, -1.4003e+00,
         -5.7197e+00, -3.1397e+00,  3.1088e+00],
        [-6.6405e-01, -1.1619e-01, -5.6908e-02, -7.6954e-04,  3.6476e-02,
         -2.4904e+00, -7.4257e-01,  2.6584e-01, -5.1881e-02, -1.4457e+00,
         -8.4070e-01, -2.1549e+00, -1.9304e+00],
        [-2.6412e+01,  8.6863e+00, -2.3653e-01, -3.7118e-02, -1.6399e+01,
         -5.5322e+00,  8.4509e+00,  5.2678e+00, -2.6912e-01,  8.1570e-01,
          4.9447e+00, -3.2913e+00,  2.0098e+00]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-0.8308, -3.5484, -8.1964, -1.6248, -2.7685, -3.2759, -3.4188, -3.5997,
        12.2973, -4.3349,  3.8010, -4.0286, -7.8756], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ 5.4362e-01,  2.4178e+00,  1.0279e+00,  3.6200e+00,  5.7756e+00,
          1.1644e+00,  4.5827e+00,  1.1641e+00,  1.6197e+00, -3.9276e-02,
         -2.1689e+01,  1.1746e+00,  1.4012e+00],
        [ 7.0457e-01, -1.9487e+00,  2.7864e-01,  2.1033e-01, -1.9075e+00,
         -8.4426e-01, -3.1572e+00,  1.2300e-01,  1.9183e+00, -2.7681e+00,
         -1.3744e+00, -5.4207e-02,  4.9159e-01],
        [-6.1482e+00, -4.2632e-02, -5.2237e+00, -3.5689e+00, -4.9656e+00,
          4.8638e-01, -1.6186e-02, -3.8825e-01, -6.8301e+00,  8.2139e+00,
          7.3491e+00, -5.0715e-01, -5.2721e+00],
        [-3.0566e+00,  1.1307e+00, -1.1099e+00,  2.5570e+00,  1.3913e+00,
         -3.1613e+00,  1.7582e+00,  2.8227e-01, -1.8607e-01,  1.6351e+00,
          1.3476e+01,  4.5831e-01, -6.0854e+00],
        [ 5.4501e-05, -5.4581e-02,  4.0807e-08, -5.3704e-02, -7.8607e-02,
         -4.9417e-02, -9.8898e-01, -8.9523e-02,  3.7801e+01, -8.4873e+00,
         -7.7740e+00, -9.0355e-02, -2.5435e-05]], device='cuda:0'))])
loaded xi:  406.0969
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.0, 0.5, 0.2, 0.15, 0.15]
W_T_mean: 1000.3278755462585
W_T_median: 733.6113376673641
W_T_pctile_5: -190.02603165425342
W_T_CVAR_5_pct: -322.7571246767781
-----------------------------------------------
new min fval from sgd:  -14923.243540973215
min fval:  -14923.243540973215
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 675.7334583759219
W_T_median: 583.66728627171
W_T_pctile_5: 412.7634885969366
W_T_CVAR_5_pct: 272.201184848654
Average q (qsum/M+1):  43.38213126890121
Optimal xi:  [406.0969]
Expected(across Rb) median(across samples) p_equity:  0.15999128222465514
obj fun:  tensor(-14923.2435, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/constrain_factor/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:268: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
/home/marcchen/Documents/constrain_factor/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/constrain_factor/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: Paper_FactorInv_Factor2
Objective function: mean_cvar_single_level
Tracing param: 50.0
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        5              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 5)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ 0.0967, -0.1365],
        [ 0.0967, -0.1365],
        [ 0.0967, -0.1365],
        [ 0.0967, -0.1365],
        [ 0.0967, -0.1365],
        [ 0.0967, -0.1365],
        [ 0.0967, -0.1365],
        [ 0.0967, -0.1365],
        [ 0.0967, -0.1365],
        [ 0.0967, -0.1365],
        [ 0.0967, -0.1365],
        [ 0.0967, -0.1365],
        [ 0.0967, -0.1365]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([0.1772, 0.1772, 0.1772, 0.1772, 0.1772, 0.1772, 0.1772, 0.1772, 0.1772,
        0.1772, 0.1772, 0.1772, 0.1772], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801,
         0.1801, 0.1801, 0.1801, 0.1801],
        [0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801,
         0.1801, 0.1801, 0.1801, 0.1801],
        [0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801,
         0.1801, 0.1801, 0.1801, 0.1801],
        [0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801,
         0.1801, 0.1801, 0.1801, 0.1801],
        [0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801,
         0.1801, 0.1801, 0.1801, 0.1801],
        [0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801,
         0.1801, 0.1801, 0.1801, 0.1801],
        [0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801,
         0.1801, 0.1801, 0.1801, 0.1801],
        [0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801,
         0.1801, 0.1801, 0.1801, 0.1801],
        [0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801,
         0.1801, 0.1801, 0.1801, 0.1801],
        [0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801,
         0.1801, 0.1801, 0.1801, 0.1801],
        [0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801,
         0.1801, 0.1801, 0.1801, 0.1801],
        [0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801,
         0.1801, 0.1801, 0.1801, 0.1801],
        [0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801, 0.1801,
         0.1801, 0.1801, 0.1801, 0.1801]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([0.3099, 0.3099, 0.3099, 0.3099, 0.3099, 0.3099, 0.3099, 0.3099, 0.3099,
        0.3099, 0.3099, 0.3099, 0.3099], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-1.4267, -1.4267, -1.4267, -1.4267, -1.4267, -1.4267, -1.4267, -1.4267,
         -1.4267, -1.4267, -1.4267, -1.4267, -1.4267]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[-10.3447, -10.6447],
        [-12.9061,  10.2333],
        [ -0.8023,   2.0326],
        [-13.7475,  -7.4996],
        [ -1.1451,   4.1086],
        [ 16.3572,   7.6953],
        [-14.5870,   0.1210],
        [ -2.5120,  16.5535],
        [ -0.8048,   2.0421],
        [  6.9033,  10.4361],
        [  5.1698,  12.0911],
        [ 16.4805,   5.3507],
        [-11.5302,   1.8761]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([-5.2979,  6.5093, -3.1902, -5.4201, -4.8666,  2.6717, 11.8298,  8.9550,
        -3.2078,  4.9847,  4.9769, -2.3226, 13.5740], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-3.4273e+00, -4.9655e-01, -5.8064e-01,  9.3248e-02, -6.3895e-01,
          5.0706e-01, -3.4644e+00, -4.0938e+00, -5.9632e-01,  1.7530e+00,
          7.6008e-01, -3.9361e-01, -3.7239e+00],
        [-3.9752e-01, -1.2041e-01, -1.9821e-01,  1.9244e-01, -2.0358e-01,
         -1.5721e+00, -9.3866e-01, -9.9390e-03, -1.9834e-01, -7.3900e-01,
         -3.8449e-01, -1.2750e+00, -1.5032e+00],
        [-1.9173e+01,  1.0175e+01,  1.6024e-01, -1.6583e+00, -1.2906e-01,
         -3.5837e+00,  4.6464e+00,  4.5982e+00,  1.6016e-01,  4.4595e+00,
          1.9961e+00,  1.2931e+00,  4.1115e+00],
        [ 2.2043e+00,  2.8423e-01,  2.6494e-01, -1.8336e+00,  2.4225e-01,
          5.2219e-01, -1.5840e+00, -1.3659e-01,  2.6503e-01, -1.6004e+00,
         -7.9890e-01, -2.3480e-01, -5.5065e+00],
        [-1.6034e+01,  6.1415e+00, -9.8679e-01,  2.4434e+00, -8.2169e+00,
         -5.2367e+00,  8.7554e+00,  4.4820e+00, -1.0452e+00,  2.6013e+00,
          4.0475e+00, -1.2026e+00, -2.6550e+00],
        [ 3.4020e-01, -8.0784e-01, -4.9996e-01,  3.4644e+00, -4.8434e-01,
         -2.4601e+00,  2.6098e+00,  1.1376e+00, -5.0496e-01,  3.6859e-01,
          6.8706e-01, -3.0119e+00, -1.4673e+00],
        [-3.8140e-01, -1.2414e-01, -1.9555e-01,  1.7703e-01, -2.0139e-01,
         -1.5654e+00, -8.7005e-01,  1.3811e-03, -1.9570e-01, -7.1966e-01,
         -3.3259e-01, -1.3355e+00, -1.4828e+00],
        [-4.1445e+00, -4.7501e-01, -4.5397e-01, -1.1863e+00, -5.8246e-01,
         -1.1380e+00,  3.8095e+00,  1.5816e+00, -4.5218e-01, -2.4718e-03,
          6.6414e-01, -4.7840e+00, -9.6299e-01],
        [-2.8546e-01,  6.3117e+00,  6.7934e-01, -9.1076e+00,  2.0382e-02,
          4.8660e+00, -6.4988e+00,  4.1453e-01,  6.6347e-01,  3.0349e+00,
          6.0454e-01,  2.6123e+00,  1.1806e+00],
        [ 7.4024e+00, -1.0481e-02, -1.6852e-01,  7.4359e+00, -7.5258e-03,
         -1.2964e+01,  4.6884e+00, -7.1819e+00, -1.6390e-01, -1.6305e+01,
         -1.1496e+01, -6.2489e+00,  3.6214e+00],
        [ 2.6181e+00, -1.4455e+00, -3.6245e-02,  8.1704e+00,  3.3868e-02,
         -7.2736e+00,  1.6533e+00, -1.4104e+01, -4.2869e-02, -2.4981e+00,
         -4.6273e+00, -2.9118e+00,  2.7058e+00],
        [-3.9764e-01, -1.2035e-01, -1.9803e-01,  1.9229e-01, -2.0339e-01,
         -1.5721e+00, -9.3797e-01, -1.0136e-02, -1.9816e-01, -7.3911e-01,
         -3.8423e-01, -1.2747e+00, -1.5030e+00],
        [-3.9772e-01, -1.2033e-01, -1.9769e-01,  1.9205e-01, -2.0302e-01,
         -1.5720e+00, -9.3691e-01, -1.0440e-02, -1.9782e-01, -7.3904e-01,
         -3.8379e-01, -1.2743e+00, -1.5016e+00]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -0.5414,  -1.7282, -10.0946,  -1.4732,  -6.6779,  -3.0695,  -1.7594,
         -3.2352,  11.5008,  -4.5866,   3.7534,  -1.7287,  -1.7309],
       device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ 1.1729e+00,  1.6690e-01,  1.0478e+00, -3.2926e-01,  1.4549e+00,
          2.4821e+00,  1.5405e-01,  2.1770e+00,  1.7159e+00,  5.2912e-04,
         -1.5557e+01,  1.6655e-01,  1.6364e-01],
        [-5.2416e-01, -2.9419e-01,  2.7451e-01,  2.0830e-01,  6.8815e-01,
         -1.0955e+00, -2.8636e-01, -1.5536e-01,  1.8517e+00, -3.3637e+00,
         -1.6241e+00, -2.9397e-01, -2.9576e-01],
        [ 7.6276e-03,  2.5232e-01, -1.7861e+00,  3.5156e-01, -2.0232e-01,
          2.7983e-01,  2.0220e-01, -1.7011e+00, -7.1583e+00,  7.3545e+00,
          7.5770e+00,  2.5209e-01,  2.4941e-01],
        [-5.2193e+00, -3.3186e-02, -1.2835e+00,  2.8976e+00, -6.9711e+00,
          1.7085e+00, -1.1288e-03,  5.3300e-01, -2.6019e-01,  1.2670e+00,
          1.0090e+01, -3.2945e-02, -3.2510e-02],
        [ 1.1915e-02,  1.0832e-01, -2.7624e-05,  1.1996e-01, -1.6102e-04,
         -4.1576e+00,  1.0732e-01,  5.6510e-02,  1.8119e+01, -3.0735e+00,
         -2.8886e+00,  1.0830e-01,  1.0821e-01]], device='cuda:0'))])
loaded xi:  410.47116
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.0, 0.5, 0.2, 0.15, 0.15]
W_T_mean: 1000.3278755462585
W_T_median: 733.6113376673641
W_T_pctile_5: -190.02603165425342
W_T_CVAR_5_pct: -322.7571246767781
-----------------------------------------------
new min fval from sgd:  -273.7468925599783
min fval:  -273.7468925599783
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 1011.2946132165406
W_T_median: 891.2623428268923
W_T_pctile_5: 420.8283070702022
W_T_CVAR_5_pct: 274.513184516164
Average q (qsum/M+1):  35.0
Optimal xi:  [410.47116]
Expected(across Rb) median(across samples) p_equity:  0.16126614026725292
obj fun:  tensor(-273.7469, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/constrain_factor/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:268: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
/home/marcchen/Documents/constrain_factor/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/constrain_factor/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: Paper_FactorInv_Factor2
Objective function: mean_cvar_single_level
Tracing param: 999.0
-----------------------------------------------

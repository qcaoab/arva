



-------- Forwarded Message --------
Subject: 	Code outputs
Date: 	Sat, 18 Sep 2021 13:36:01 -0500
From: 	Pieter van Staden <pieter.vanstaden@gmail.com>
To: 	paforsyt <paforsyt@uwaterloo.ca>, Yuying Li <yuying@uwaterloo.ca>


Hi Peter/Yuying

I have attached the code results.

    Running the main code file "_MAINv08_ LiForsyth_Table7_simulated.py" with the selected output flags results in the outputs in the attached folder "Simulated."
        These are the results matching Table 7.

    Running the (second) main code file "_MAINv08_ LiForsyth_Table7_but_bootstrapped.py"  with the selected output flags results in the outputs in the attached folder "Bootstrapped."

    I have used slightly different output flags.


Couple of things about the results:

    A timestamp is added to filenames to avoid overwriting multiple runs, it does make the titles long but it works for me.

    "__output" sheet: This contains the main results summary.
        It gives all the setup info to recreate the results. Note that the "F_theta" field can be pasted back into the code if this result want to be re-used. The underlying data will have to be re-bootstrapped/simulated though - I don't save those datasets because it is kinda pointless if you have lots of paths anyway, and they take up a lot of space / time to backup.
        Sheet is self-explanatory, but note that e.g. the "Objective_training" and "Training_data" sections etc. changes depending on the code options, bootstrapping info, etc.
        It might be useful to compare the "__output" sheets for "Simulated" and "Bootstrapped" to see how the info changes.

    "_Heatmap_asset_#_XXX": XXX specifies the asset identifier, or "Ticker" in the code.
        These are figures are called "function heatmaps" in the code. I.e. plots the NN output node output as a function of the 2 features, irrespective of whether there's underlying data in the regions that is plotted.
        They look a bit more wonky than expected...why? I have (unnecessarily!) used 2 NN layers with 4 nodes in each to get these results, so of course there's a lot more scope for crazy. Also note that many of the strange things happen in regions where not much is underlying data happening.

    "_DataHeatmap_asset_#_XXX":
        Implements the NN on the training dataset.
        At every point in time and along every path, it gets the NN outputs.
        NN outputs are then bucketed according to the time/wealth grid (more generally, the features), and *averaged* in each bucket.
        The results are then displayed, with blank spots where no data is found. Note that this does not display the number in each bucket, so results can be a bit noisy in unlikely regions.

    "__HistoricalRolling_from_yyyymm": Only in Bootstrapped folder, since at least *some* market data must be read for this to be computed.
        Self explanatory, but note that there is a lot of info in this sheet, if you scroll through the tabs.
        First, it calculates W(T) for each specified starting month (W_T_rolling tab).
        Tab "W_paths__NNstrategy_rolling"  then gives the wealth paths over time starting on each date.
        Tabs "Selected_idx_XX" gives full info to recalculate the actual historical path for each starting date, including market data inflation-adjusted (if needed).
        Tabs "NN_weights_into_layer_XXX" give the NN weights matrices, for manual calculation and understanding what is going on, if needed. The actual historical path is nice for this.

    "_Pctiles_ALL": 
        Gives selected percentiles over time for proportion invested in each asset, and wealth percentiles over time.
        The actual percentiles are user-specified in the code.

    "_W_T_histogram_and_cdf": Self explanatory, but check tabs.
        For training/testing split, the Bootstrapped folder has the full example.
        "hist_percentage" gives the histogram in terms of % of obs in each bucket. Training, testing, NN strategy, benchmark strategy.
        "CDF" tab also gives results for Training, testing, NN strategy, benchmark strategy.

Thanks,
Pieter



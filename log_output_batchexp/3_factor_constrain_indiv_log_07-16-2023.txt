/home/marcchen/Documents/constrain_factor/researchcode/exp_config_json_files/multi_portfolio_TEST3_split_1991.json
Starting at: 
16-07-23_10:33

 numpy seed:  2  


 pytorch seed:  2  

Key parameters-------
paths: 10
iterations: 5
batchsize: 5
remove neg:  False
w constaint activation:  yy_fix_jan29


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = 3factor_mc
timeseries_basket['basket_desc'] = 3 factors : Basic, size, value, mom
timeseries_basket['basket_columns'] = 
['T30_real_ret', 'B10_real_ret', 'VWD_real_ret', 'Size_Lo30_real_ret', 'Value_Hi30_real_ret', 'Mom_Hi30_real_ret']
############# End: defined asset  basket #################
               Cash_nom_ret  Size_Lo30_nom_ret  ...  VWD_nom_ret  EWD_nom_ret
My identifier                                   ...                          
192601                  0.0                NaN  ...     0.000561     0.023174
192602                  0.0                NaN  ...    -0.033046    -0.053510
192603                  0.0                NaN  ...    -0.064002    -0.096824
192604                  0.0                NaN  ...     0.037029     0.032975
192605                  0.0                NaN  ...     0.012095     0.001035

[5 rows x 16 columns]
               Cash_nom_ret  Size_Lo30_nom_ret  ...  VWD_nom_ret  EWD_nom_ret
My identifier                                   ...                          
202208                  NaN            -0.0020  ...    -0.036240    -0.011556
202209                  NaN            -0.0955  ...    -0.091324    -0.099903
202210                  NaN             0.0883  ...     0.077403     0.049863
202211                  NaN            -0.0076  ...     0.052365     0.028123
202212                  NaN            -0.0457  ...    -0.057116    -0.047241

[5 rows x 16 columns]


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = 3factor_mc
timeseries_basket['basket_desc'] = 3 factors : Basic, size, value, mom
timeseries_basket['basket_columns'] = 
['T30_nom_ret', 'B10_nom_ret', 'VWD_nom_ret', 'Size_Lo30_nom_ret', 'Value_Hi30_nom_ret', 'Mom_Hi30_nom_ret']
############# End: defined asset  basket #################
               Size_Lo30_nom_ret  Value_Hi30_nom_ret  ...  B10_nom_ret  VWD_nom_ret
My identifier                                         ...                          
192607                    0.0014              0.0154  ...     0.005383     0.031411
192608                    0.0319              0.0561  ...     0.005363     0.028647
192609                   -0.0173             -0.0071  ...     0.005343     0.005787
192610                   -0.0294             -0.0355  ...     0.005323    -0.028996
192611                   -0.0038              0.0294  ...     0.005303     0.028554

[5 rows x 7 columns]
               Size_Lo30_nom_ret  Value_Hi30_nom_ret  ...  B10_nom_ret  VWD_nom_ret
My identifier                                         ...                          
202208                   -0.0020             -0.0164  ...    -0.043289    -0.036240
202209                   -0.0955             -0.0871  ...    -0.050056    -0.091324
202210                    0.0883              0.1486  ...    -0.014968     0.077403
202211                   -0.0076              0.0462  ...     0.040789     0.052365
202212                   -0.0457             -0.0499  ...    -0.018566    -0.057116

[5 rows x 7 columns]
Indices constructed with column names:
Index(['date_for_plt', 'Size_Lo30_nom_ret_ind', 'Value_Hi30_nom_ret_ind',
       'Mom_Hi30_nom_ret_ind', 'CPI_nom_ret_ind', 'T30_nom_ret_ind',
       'B10_nom_ret_ind', 'VWD_nom_ret_ind'],
      dtype='object')
############# Updated: defined asset basket #################
timeseries_basket['data_df_mean'] = 
T30_real_ret           0.000229
B10_real_ret           0.001637
VWD_real_ret           0.006759
Size_Lo30_real_ret     0.009939
Value_Hi30_real_ret    0.010052
Mom_Hi30_real_ret      0.011386
dtype: float64


timeseries_basket['data_df_stdev'] = 
T30_real_ret           0.005227
B10_real_ret           0.019258
VWD_real_ret           0.053610
Size_Lo30_real_ret     0.082598
Value_Hi30_real_ret    0.072063
Mom_Hi30_real_ret      0.061421
dtype: float64


timeseries_basket['data_df_corr'] = 
                     T30_real_ret  ...  Mom_Hi30_real_ret
T30_real_ret             1.000000  ...           0.055142
B10_real_ret             0.351722  ...           0.066570
VWD_real_ret             0.068448  ...           0.936115
Size_Lo30_real_ret       0.014412  ...           0.903222
Value_Hi30_real_ret      0.018239  ...           0.869469
Mom_Hi30_real_ret        0.055142  ...           1.000000

[6 rows x 6 columns]


timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names', 'data_df', 'data_df_mean', 'data_df_stdev', 'data_df_corr'])
############# End: updated: defined asset basket #################
-----------------------------------------------
Dates to be REMOVED due to missing values (should be at *start* only due to trading signals):
Int64Index([], dtype='int64')
-----------------------------------------------
Dates from available data for bootstrapping:
Start: 192607
End: 202212
-----------------------------------------------
Bootstrap block size: 6
-----------------------------------------------
Dates USED bootstrapping:
Start: 199201
End: 202212
-----------------------------------------------
Withdrawal NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       1       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      14  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      14  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       1              none   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 14)     True          14  
2     (14, 14)     True          14  
3      (14, 1)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
Allocation NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       6       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      14  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      14  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       6              none   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 14)     True          14  
2     (14, 14)     True          14  
3      (14, 6)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       14  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       14  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 14)      True          14  
0     (14, 14)      True          14  
0      (14, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       14  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       14  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        6              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 14)      True          14  
0     (14, 14)      True          14  
0      (14, 6)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
{'methods': ['Adam'], 'output_progress': False, 'tol': 1e-06, 'itbound_scipy_algorithms': 1000, 'check_exit_criteria': False, 'nit_running_min': 0, 'itbound_SGD_algorithms': 5, 'nit_IterateAveragingStart': 4, 'batchsize': 5, 'SGD_learningrate': 50.0, 'Adagrad_epsilon': 1e-08, 'Adagrad_eta': 1.0, 'Adadelta_ewma': 0.9, 'Adadelta_epsilon': 1e-08, 'RMSprop_ewma': 0.8, 'RMSprop_epsilon': 1e-08, 'RMSprop_eta': 0.1, 'Adam_ewma_1': 0.9, 'Adam_ewma_2': 0.998, 'Adam_eta': 0.0, 'Adam_epsilon': 1e-08, 'Adam_weight_decay': 0.0001, 'running_min_from_avg': False, 'running_min_from_sgd': True, 'lr_schedule': True}
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       14  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       14  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 14)      True          14  
0     (14, 14)      True          14  
0      (14, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       14  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       14  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        6              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 14)      True          14  
0     (14, 14)      True          14  
0      (14, 6)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.0, 0.6, 0.1, 0.1, 0.1, 0.1]
W_T_mean: 1874.4217292182743
W_T_median: 1670.8399761045953
W_T_pctile_5: 708.6798292632516
W_T_CVAR_5_pct: 520.2659587267345
-----------------------------------------------
new min fval from sgd:  -1048.7522424526724
min fval:  -1048.7522424526724
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.0558,  0.6108],
        [ 0.0616, -0.2594],
        [-0.1091, -0.6247],
        [-0.3399,  0.1077],
        [-0.6429, -0.5802],
        [ 0.1757,  0.2095],
        [-0.2871,  0.6670],
        [-0.2426, -0.4153],
        [ 0.1361,  0.3285],
        [-0.3623,  0.1755],
        [ 0.1904,  0.2970],
        [ 0.1145, -0.6793],
        [-0.6598,  0.5886],
        [ 0.3815,  0.6665]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ 0.3799,  0.1954, -0.1891,  0.2613,  0.3037, -0.4425, -0.0092, -0.6937,
         0.3253, -0.1077, -0.5185,  0.4156, -0.1796, -0.4811], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-0.0258, -0.1589,  0.0300,  0.0958,  0.0132,  0.0083, -0.0431,  0.1913,
          0.2183,  0.0043, -0.2234,  0.1256,  0.1045,  0.1249],
        [-0.0990,  0.1130,  0.2021,  0.1770, -0.2123,  0.0310, -0.2256, -0.2258,
         -0.1805,  0.1086,  0.1781, -0.1967, -0.0538,  0.0856],
        [ 0.1395,  0.1201,  0.1809,  0.1536, -0.1844,  0.1062,  0.0441, -0.2206,
          0.1728,  0.1627, -0.1769, -0.0109,  0.1329,  0.0702],
        [ 0.2560, -0.2084, -0.0275, -0.2620,  0.2666, -0.1441,  0.1344,  0.1625,
         -0.0767, -0.1630,  0.2203,  0.2648, -0.0327, -0.0318],
        [ 0.2306,  0.0228, -0.1526,  0.1510, -0.2532,  0.0487, -0.1927, -0.0096,
         -0.0922, -0.1150, -0.1080,  0.0699,  0.0724, -0.2193],
        [ 0.2579,  0.1710, -0.2107,  0.2537, -0.0464, -0.1705,  0.1168,  0.0558,
         -0.1091,  0.0910,  0.0940,  0.1087, -0.1675, -0.2324],
        [-0.0378, -0.2507,  0.0557, -0.2601, -0.0478,  0.2073, -0.1795, -0.0640,
          0.1103, -0.2021, -0.2531, -0.1019,  0.0581,  0.0696],
        [-0.1561, -0.0666, -0.0617, -0.2559,  0.0064, -0.0267, -0.2151, -0.1376,
          0.1964,  0.1005, -0.2255,  0.0996, -0.2652, -0.1565],
        [ 0.0412, -0.0280, -0.1740,  0.0440,  0.0570,  0.1999, -0.0565,  0.2465,
          0.1673, -0.1069,  0.2020, -0.1382,  0.0530,  0.0966],
        [ 0.0101,  0.0887,  0.1204, -0.2418,  0.1494,  0.0948, -0.1303,  0.2107,
          0.0604, -0.1873,  0.2441,  0.1129,  0.1797,  0.0442],
        [ 0.0748,  0.0498,  0.2424,  0.2334,  0.0941,  0.0007, -0.1834,  0.1437,
         -0.1386,  0.0196,  0.1615, -0.1005, -0.0220, -0.1812],
        [-0.0803, -0.2159, -0.0549,  0.2398, -0.2184, -0.1405, -0.2127, -0.1129,
          0.1671,  0.1631,  0.2634,  0.1005,  0.2303, -0.1241],
        [-0.1205, -0.2437, -0.2665,  0.0600, -0.0496, -0.1977, -0.0418, -0.2402,
          0.1467,  0.1738, -0.0316, -0.0108,  0.0189,  0.0270],
        [ 0.0143, -0.1194, -0.0631,  0.1038, -0.0351,  0.1261, -0.0857,  0.2468,
          0.1816, -0.1725, -0.2327,  0.1249, -0.2246,  0.2609]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.2397,  0.1560, -0.0124,  0.0645,  0.2233,  0.2255, -0.0644, -0.1200,
         0.0736, -0.0206, -0.2125, -0.2642, -0.1866,  0.1931], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 0.0099,  0.0298, -0.1450, -0.1248,  0.0756,  0.2084, -0.1405, -0.1755,
          0.0640, -0.0013, -0.0832, -0.2653,  0.2366, -0.0733]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 0.2717, -0.5732],
        [-0.5804,  0.4755],
        [-0.5432,  0.0227],
        [ 0.1188,  0.1173],
        [-0.5556,  0.4015],
        [-0.0561,  0.2434],
        [ 0.5311, -0.5175],
        [ 0.0797,  0.2787],
        [-0.2670,  0.4611],
        [ 0.5762, -0.3859],
        [-0.1250,  0.2518],
        [-0.3654, -0.7052],
        [ 0.6850, -0.0891],
        [ 0.4994,  0.3181]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([-0.0619, -0.4190,  0.1904, -0.3653,  0.2197, -0.5882, -0.0997, -0.2220,
        -0.5204, -0.5827, -0.2685, -0.2334,  0.3380,  0.3448], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-0.1593, -0.0965,  0.2255, -0.2214, -0.0622,  0.0970, -0.2479, -0.2516,
          0.1292, -0.1328,  0.2252,  0.1784,  0.2168, -0.1948],
        [-0.0937,  0.1470, -0.2152,  0.0153,  0.1892,  0.0733,  0.1314, -0.1218,
          0.0167, -0.1781,  0.0874, -0.0030,  0.1721, -0.0689],
        [-0.1472,  0.2208,  0.2150,  0.1337, -0.1723, -0.1549, -0.0581, -0.2228,
          0.0777,  0.1815,  0.2213, -0.0895, -0.1930, -0.2300],
        [-0.0024,  0.2408, -0.0502,  0.2210, -0.0470, -0.1979,  0.0625, -0.0959,
         -0.1091,  0.2655, -0.1699, -0.2407,  0.2460, -0.0203],
        [-0.0414, -0.1270, -0.1199, -0.1724, -0.0075, -0.1079,  0.2659, -0.0316,
          0.0631, -0.1600,  0.0112, -0.0614,  0.0009, -0.1449],
        [-0.0693, -0.0035,  0.1587, -0.0482,  0.1897,  0.2395, -0.2117, -0.0028,
         -0.0882,  0.2121, -0.1413,  0.0474, -0.2295, -0.2514],
        [ 0.2096, -0.2630,  0.0583,  0.0803,  0.0062, -0.1658, -0.1352, -0.2058,
         -0.1645, -0.0642,  0.1756, -0.1047,  0.0097, -0.0809],
        [ 0.0256,  0.2536,  0.0093, -0.1789, -0.2305, -0.1235,  0.2329, -0.1211,
         -0.2557, -0.0454,  0.0158,  0.2544,  0.0518,  0.0262],
        [-0.2205, -0.0849, -0.0336, -0.0065,  0.0761,  0.1219,  0.0082,  0.0328,
          0.0554,  0.2415, -0.0245,  0.2145, -0.2513,  0.0996],
        [-0.0990, -0.2157,  0.0517,  0.1191, -0.1342, -0.1153,  0.1153,  0.1187,
         -0.2010,  0.0042, -0.0255,  0.2019,  0.1759, -0.1467],
        [-0.0723, -0.0225, -0.2648,  0.0098,  0.2069,  0.2476,  0.0451,  0.0946,
          0.0317,  0.0856,  0.0541,  0.1574,  0.1810,  0.1090],
        [-0.2605, -0.2429,  0.0574, -0.1581, -0.1049, -0.1400, -0.0416,  0.2337,
         -0.0763,  0.0260, -0.1573, -0.2328, -0.1617, -0.2146],
        [-0.1897, -0.0366,  0.1267,  0.0589,  0.2217,  0.2326,  0.1535,  0.0839,
         -0.1333,  0.1923,  0.1118, -0.2530,  0.1962, -0.2186],
        [ 0.1355,  0.2222,  0.1136, -0.2356,  0.0679,  0.0484,  0.0667, -0.0120,
         -0.2339, -0.1220, -0.0488,  0.0421,  0.2571, -0.0675]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-0.0869,  0.0645, -0.2333,  0.1373, -0.1333, -0.1856, -0.2382,  0.2201,
         0.2553,  0.1223, -0.0663,  0.2236, -0.0434, -0.1053], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-0.0710,  0.2440, -0.2096, -0.2582,  0.1165,  0.2129, -0.2249, -0.1724,
         -0.0360,  0.0878,  0.1810, -0.1339, -0.1296,  0.0551],
        [ 0.1970, -0.0115, -0.0462, -0.0671,  0.2519, -0.1855, -0.2139,  0.2379,
          0.0286, -0.1382, -0.2569, -0.0399,  0.0159, -0.0240],
        [ 0.0318,  0.1774,  0.2663,  0.0476, -0.1109, -0.0693, -0.2169, -0.0265,
          0.1856,  0.1474, -0.2032,  0.2051, -0.0393, -0.0645],
        [ 0.1933,  0.0955, -0.1308, -0.2515, -0.1945,  0.2226, -0.1378,  0.1326,
         -0.0934,  0.2037,  0.1920,  0.1137, -0.0985,  0.1171],
        [ 0.1579, -0.1173, -0.0757,  0.1663,  0.2529, -0.1428,  0.0761,  0.1669,
          0.2089,  0.0478,  0.2314, -0.2359, -0.2535,  0.0294],
        [-0.0311,  0.1303,  0.0585,  0.0185, -0.1555, -0.0315,  0.0265,  0.0540,
         -0.1024,  0.1569, -0.0800,  0.2665,  0.0248,  0.2353]],
       device='cuda:0'))])
xi:  [100.]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 1470.549764086163
W_T_median: 1365.9107401029455
W_T_pctile_5: -24.085622309260724
W_T_CVAR_5_pct: -41.14997037219776
Average q (qsum/M+1):  46.37126307333669
Optimal xi:  [100.]
Expected(across Rb) median(across samples) p_equity:  0.21714938456813496
obj fun:  tensor(-1048.7522, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
/home/marcchen/Documents/constrain_factor/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/constrain_factor/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: 3factor_mc
Objective function: mean_cvar_single_level
Tracing param: 1.0
-----------------------------------------------

Starting at: 
01-07-23_15:49

 numpy seed:  3  


 pytorch seed:  3  

Key parameters-------
paths: 256000
iterations: 10
batchsize: 1000
remove neg:  False
w constaint activation:  yy_fix_jan29


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = Paper_FactorInv_Factor2
timeseries_basket['basket_desc'] = Factor2 portfolio for paper: Basic, size and value
timeseries_basket['basket_columns'] = 
['T30_real_ret', 'B10_real_ret', 'VWD_real_ret', 'Size_Lo30_real_ret', 'Value_Hi30_real_ret']
############# End: defined asset  basket #################
               Cash_nom_ret  Size_Lo30_nom_ret  ...  VWD_nom_ret  EWD_nom_ret
My identifier                                   ...                          
192601                  0.0                NaN  ...     0.000561     0.023174
192602                  0.0                NaN  ...    -0.033046    -0.053510
192603                  0.0                NaN  ...    -0.064002    -0.096824
192604                  0.0                NaN  ...     0.037029     0.032975
192605                  0.0                NaN  ...     0.012095     0.001035

[5 rows x 16 columns]
               Cash_nom_ret  Size_Lo30_nom_ret  ...  VWD_nom_ret  EWD_nom_ret
My identifier                                   ...                          
202208                  NaN            -0.0020  ...    -0.036240    -0.011556
202209                  NaN            -0.0955  ...    -0.091324    -0.099903
202210                  NaN             0.0883  ...     0.077403     0.049863
202211                  NaN            -0.0076  ...     0.052365     0.028123
202212                  NaN            -0.0457  ...    -0.057116    -0.047241

[5 rows x 16 columns]


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = Paper_FactorInv_Factor2
timeseries_basket['basket_desc'] = Factor2 portfolio for paper: Basic, size and value
timeseries_basket['basket_columns'] = 
['T30_nom_ret', 'B10_nom_ret', 'VWD_nom_ret', 'Size_Lo30_nom_ret', 'Value_Hi30_nom_ret']
############# End: defined asset  basket #################
               Size_Lo30_nom_ret  Value_Hi30_nom_ret  ...  B10_nom_ret  VWD_nom_ret
My identifier                                         ...                          
192607                    0.0014              0.0154  ...     0.005383     0.031411
192608                    0.0319              0.0561  ...     0.005363     0.028647
192609                   -0.0173             -0.0071  ...     0.005343     0.005787
192610                   -0.0294             -0.0355  ...     0.005323    -0.028996
192611                   -0.0038              0.0294  ...     0.005303     0.028554

[5 rows x 6 columns]
               Size_Lo30_nom_ret  Value_Hi30_nom_ret  ...  B10_nom_ret  VWD_nom_ret
My identifier                                         ...                          
202208                   -0.0020             -0.0164  ...    -0.043289    -0.036240
202209                   -0.0955             -0.0871  ...    -0.050056    -0.091324
202210                    0.0883              0.1486  ...    -0.014968     0.077403
202211                   -0.0076              0.0462  ...     0.040789     0.052365
202212                   -0.0457             -0.0499  ...    -0.018566    -0.057116

[5 rows x 6 columns]
Indices constructed with column names:
Index(['date_for_plt', 'Size_Lo30_nom_ret_ind', 'Value_Hi30_nom_ret_ind',
       'CPI_nom_ret_ind', 'T30_nom_ret_ind', 'B10_nom_ret_ind',
       'VWD_nom_ret_ind'],
      dtype='object')
############# Updated: defined asset basket #################
timeseries_basket['data_df_mean'] = 
T30_real_ret           0.000229
B10_real_ret           0.001637
VWD_real_ret           0.006759
Size_Lo30_real_ret     0.009939
Value_Hi30_real_ret    0.010052
dtype: float64


timeseries_basket['data_df_stdev'] = 
T30_real_ret           0.005227
B10_real_ret           0.019258
VWD_real_ret           0.053610
Size_Lo30_real_ret     0.082598
Value_Hi30_real_ret    0.072063
dtype: float64


timeseries_basket['data_df_corr'] = 
                     T30_real_ret  ...  Value_Hi30_real_ret
T30_real_ret             1.000000  ...             0.018239
B10_real_ret             0.351722  ...             0.031301
VWD_real_ret             0.068448  ...             0.909335
Size_Lo30_real_ret       0.014412  ...             0.908542
Value_Hi30_real_ret      0.018239  ...             1.000000

[5 rows x 5 columns]


timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names', 'data_df', 'data_df_mean', 'data_df_stdev', 'data_df_corr'])
############# End: updated: defined asset basket #################
-----------------------------------------------
Dates to be REMOVED due to missing values (should be at *start* only due to trading signals):
Int64Index([], dtype='int64')
-----------------------------------------------
Dates from available data for bootstrapping:
Start: 192607
End: 202212
-----------------------------------------------
Bootstrap block size: 12
-----------------------------------------------
Dates USED bootstrapping:
Start: 192607
End: 202212
-----------------------------------------------
0.0% of bootstrap sample done.
5.0% of bootstrap sample done.
10.0% of bootstrap sample done.
15.0% of bootstrap sample done.
20.0% of bootstrap sample done.
25.0% of bootstrap sample done.
30.0% of bootstrap sample done.
35.0% of bootstrap sample done.
40.0% of bootstrap sample done.
45.0% of bootstrap sample done.
50.0% of bootstrap sample done.
55.00000000000001% of bootstrap sample done.
60.0% of bootstrap sample done.
65.0% of bootstrap sample done.
70.0% of bootstrap sample done.
75.0% of bootstrap sample done.
80.0% of bootstrap sample done.
85.0% of bootstrap sample done.
90.0% of bootstrap sample done.
95.0% of bootstrap sample done.
Withdrawal NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       1       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      13  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      13  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       1              none   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 13)     True          13  
2     (13, 13)     True          13  
3      (13, 1)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
Allocation NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       5       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      13  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      13  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       5           softmax   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 13)     True          13  
2     (13, 13)     True          13  
3      (13, 5)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        5           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 5)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
{'methods': ['Adam'], 'output_progress': False, 'tol': 1e-06, 'itbound_scipy_algorithms': 1000, 'check_exit_criteria': False, 'nit_running_min': 0, 'itbound_SGD_algorithms': 10, 'nit_IterateAveragingStart': 9, 'batchsize': 1000, 'SGD_learningrate': 50.0, 'Adagrad_epsilon': 1e-08, 'Adagrad_eta': 1.0, 'Adadelta_ewma': 0.9, 'Adadelta_epsilon': 1e-08, 'RMSprop_ewma': 0.8, 'RMSprop_epsilon': 1e-08, 'RMSprop_eta': 0.1, 'Adam_ewma_1': 0.9, 'Adam_ewma_2': 0.998, 'Adam_eta': 0.0, 'Adam_epsilon': 1e-08, 'Adam_weight_decay': 0.0001, 'running_min_from_avg': False, 'running_min_from_sgd': True, 'lr_schedule': True}
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        5           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 5)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -5.8366,   5.9125],
        [  5.9228,   0.6488],
        [ -5.6428,   5.7937],
        [ -7.1329, -11.3471],
        [  4.9682,  -3.5152],
        [ -3.8891,   4.0060],
        [  5.2235,   8.7253],
        [ -4.0303,   4.1630],
        [ -4.0752,   2.4494],
        [  5.9573,   1.8931],
        [ -1.2384,   1.0756],
        [-22.8147,  -4.7972],
        [ -1.2981,   1.1851]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ 3.1153, -5.8221,  3.0890, -3.5980, -6.1235, -1.0569, -6.6763,  2.7845,
         3.0021, -5.7627, -3.1169, -3.8700, -3.1335], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-4.9757e+00,  2.6947e+00, -4.7138e+00,  1.0052e+01,  1.7188e+00,
         -1.1916e+00,  5.7512e+00, -3.2776e+00, -3.3847e+00,  3.3194e+00,
         -5.0769e-02,  8.1701e+00, -2.7333e-02],
        [ 2.9078e-01,  6.6071e-01,  3.2531e-01,  1.7554e-01,  1.0581e+00,
          2.7834e-02,  4.0790e-02,  9.3799e-01,  1.7700e+00,  5.5118e-01,
          4.5516e-02,  1.9594e-02,  4.0299e-02],
        [-4.5653e+00,  2.7315e+00, -4.2103e+00,  9.4752e+00,  1.8964e+00,
         -7.5082e-01,  5.9666e+00, -3.2324e+00, -3.1403e+00,  3.5387e+00,
         -2.7516e-02,  7.6797e+00, -7.0749e-02],
        [-4.9278e+00,  3.1699e+00, -4.6303e+00,  1.0431e+01,  2.5205e+00,
         -6.4985e-01,  6.1129e+00, -3.3151e+00, -3.3852e+00,  3.5809e+00,
         -4.5430e-02,  8.2512e+00, -1.3255e-01],
        [-9.1156e-02, -3.0810e-01, -1.0195e-01, -1.2639e-01, -4.2359e-01,
         -9.6431e-03,  6.2318e-02, -2.9703e-01, -6.4605e-01, -2.5525e-01,
         -1.8505e-02, -6.2350e-03, -1.7314e-02],
        [-6.5676e+00,  2.4096e+00, -6.5096e+00,  1.2127e+01,  3.0552e+00,
         -3.6295e-01,  4.7450e+00, -3.2806e+00, -3.3280e+00,  3.4993e+00,
         -1.5587e-02,  9.0376e+00,  2.5200e-02],
        [-5.7271e+00,  3.1565e+00, -5.2549e+00,  1.1459e+01,  3.0218e+00,
         -6.5976e-01,  5.7164e+00, -3.5304e+00, -3.5323e+00,  3.8600e+00,
          8.7479e-02,  9.4347e+00,  5.7739e-02],
        [ 2.8752e-01,  6.6184e-01,  3.2203e-01,  1.6987e-01,  1.0133e+00,
          2.7585e-02,  4.5583e-02,  8.9785e-01,  1.6715e+00,  5.3392e-01,
          4.3827e-02,  2.0977e-02,  3.8861e-02],
        [ 2.8742e-01,  6.1886e-01,  3.1913e-01,  1.7289e-01,  1.0073e+00,
          2.7371e-02,  3.8813e-02,  8.8460e-01,  1.6232e+00,  5.1457e-01,
          4.3915e-02,  2.2091e-02,  3.8959e-02],
        [-9.7417e-02, -3.4626e-01, -1.0757e-01, -2.4441e-01, -4.5517e-01,
         -1.0108e-02, -7.3377e-02, -2.7731e-01, -4.9626e-01, -2.9224e-01,
         -1.8228e-02, -8.9192e-03, -1.6977e-02],
        [-5.0175e+00,  2.6619e+00, -4.5582e+00,  9.6019e+00,  2.0016e+00,
         -7.1676e-01,  5.1592e+00, -2.9489e+00, -3.1920e+00,  3.2355e+00,
         -1.7452e-02,  8.1687e+00,  4.5385e-02],
        [-3.4595e+00,  1.9905e+00, -3.2818e+00,  7.1538e+00,  8.9195e-01,
         -5.0466e-01,  4.3946e+00, -2.3343e+00, -2.5924e+00,  2.4758e+00,
          3.6595e-03,  4.4755e+00,  2.1169e-02],
        [-9.0762e-02, -3.5323e-01, -1.0175e-01, -2.1620e-01, -4.5471e-01,
         -9.9034e-03, -6.0816e-02, -2.9063e-01, -5.0746e-01, -2.9637e-01,
         -1.8202e-02, -1.4092e-03, -1.7294e-02]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.9564,  4.2571, -1.2230, -1.3104, -2.0409, -1.2751, -1.3535,  4.0241,
         4.3066, -2.0241, -1.1828, -1.4343, -1.9557], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-6.8368,  6.4521, -5.8133, -7.5282,  0.0792, -9.6174, -9.4799,  4.7253,
          6.0337,  0.0808, -6.2618, -3.4011,  0.0563]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[-6.7588, -2.0145],
        [ 1.1544,  8.3466],
        [ 5.7716,  3.3275],
        [-6.0613,  7.4961],
        [11.2560,  5.6951],
        [ 8.3766,  3.4555],
        [ 2.7329,  7.1558],
        [ 1.9172,  8.6166],
        [ 0.0707,  8.7370],
        [-8.2081, -0.1347],
        [ 9.3049,  3.8284],
        [ 1.6863,  8.2797],
        [-4.6709, -0.1448]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ 2.7325,  3.2437, -4.8855,  3.2104,  2.9051,  1.5483,  4.7236,  4.7675,
         3.0568,  6.7811,  1.8083,  4.3257,  3.0706], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-1.3036e+00,  2.1720e+00, -4.4039e+00,  6.1463e+00, -4.9072e+00,
         -1.5560e+00,  1.3899e+00,  1.5447e+00,  2.1150e+00,  6.7940e+00,
         -2.7622e+00,  1.2526e+00,  1.4933e+00],
        [-1.9613e+00, -9.4823e-01, -7.2045e-01, -4.6147e-01, -7.1251e-01,
         -7.8853e-01, -9.3787e-03, -3.7042e-01, -1.6068e+00, -1.9260e+00,
         -8.1762e-01, -4.9014e-01, -1.0989e+00],
        [-1.2151e+00, -9.5228e-01, -6.4554e-01, -1.7763e-01, -1.3004e+00,
         -1.0350e+00,  9.7835e-02, -1.8722e-01, -1.4326e+00, -1.7036e+00,
         -1.1508e+00, -3.3901e-01, -9.9848e-01],
        [-1.5542e+00, -9.0492e-01, -5.2197e-01, -5.2459e-02, -1.5424e+00,
         -1.1408e+00, -5.9196e-02, -1.9252e-01, -1.2599e+00, -1.0991e+00,
         -1.1839e+00, -3.5193e-01, -8.9822e-01],
        [ 4.9830e+00, -4.0958e+00, -7.1671e-02, -3.5456e+00, -4.2519e+00,
         -2.5033e+00, -2.3813e+00, -5.3866e+00, -5.6008e+00,  4.1304e+00,
         -3.5678e+00, -5.8337e+00,  7.4061e-01],
        [-4.1780e+00, -1.1210e+00, -8.4540e-01, -8.9962e-02, -6.9020e-01,
          1.0686e-01, -2.1742e-01, -1.1203e+00, -1.2553e+00, -2.7770e+00,
          3.2023e-01, -1.4446e+00, -2.0141e+00],
        [-1.8810e-01,  7.7317e-02, -9.8644e-02,  4.1872e-01,  1.9996e+00,
          1.6818e+00,  1.1084e+00,  8.0983e-01, -1.3495e-01,  7.9155e-01,
          1.7726e+00,  6.6577e-01,  7.9219e-01],
        [-5.5554e+00, -1.7578e+00, -1.0340e+00,  3.5016e-02, -4.1568e-01,
          3.7396e-01, -3.1316e-01, -9.8173e-01, -1.7898e+00, -2.8173e+00,
          9.4879e-01, -1.5653e+00, -1.5126e+00],
        [-2.8056e-01,  7.1207e-01,  1.0663e-01,  4.4372e+00, -7.6455e+00,
         -5.5832e+00, -2.5688e+00, -2.1072e+00,  1.5030e+00,  5.7951e+00,
         -5.8804e+00, -1.7571e+00,  4.0862e+00],
        [-6.4910e+00, -4.1477e-01, -2.7976e-01, -5.3368e+00,  5.5489e-01,
         -1.1458e-01,  6.6448e-01, -4.4278e-01, -2.8760e+00, -3.8282e+00,
          8.5344e-01,  7.1425e-01, -1.7707e+00],
        [-2.3840e+00, -8.1354e-01, -4.7018e-01,  1.1851e-01, -7.8195e-01,
         -1.0158e+00, -1.0567e+00, -1.0727e+00, -5.2184e-01, -2.2699e+00,
         -1.1248e+00, -1.0484e+00, -1.4171e+00],
        [ 5.1397e+00, -7.1712e+00, -4.4743e-02,  3.5894e-01, -1.0194e+01,
         -3.8110e+00, -1.7990e+01, -1.4095e+01, -3.7411e+00,  6.3889e+00,
         -5.0564e+00, -1.5002e+01,  3.8074e+00],
        [-2.0457e-01, -7.6148e+00, -7.0037e-02,  3.5030e+00, -7.8337e+00,
         -3.6454e+00, -1.6017e+01, -1.3347e+01, -4.1991e+00,  1.4654e+01,
         -4.1150e+00, -1.4023e+01,  2.3548e+00]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-4.2677, -1.8289, -1.4900, -1.5883,  2.7988, -1.8775,  0.6872, -1.7433,
        -0.9126, -2.3814, -2.0275,  3.5343, -1.6883], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ 4.1746e-01, -3.0342e-01, -2.8821e-01, -2.3076e-01, -6.0569e-01,
         -4.8350e-02, -9.7026e+00, -2.4277e-02, -6.3824e-02, -9.3292e-01,
         -2.0246e-01, -1.5353e-01, -9.0299e-02],
        [ 1.3471e+00,  1.1991e+00,  8.5942e-01,  8.7632e-01, -4.3126e+00,
          1.8991e+00,  1.2323e+00,  2.1384e+00,  4.2687e+00,  1.4454e+00,
          6.3738e-01,  4.7931e+00,  8.0609e+00],
        [-4.0723e-01, -1.4961e-02, -2.7359e-02, -1.5444e-02, -1.6304e-01,
         -1.2915e-02, -1.0300e+01, -3.2389e-02, -2.5487e-03, -9.1534e-02,
         -2.3744e-02, -1.4632e-02, -5.3679e-03],
        [-5.5694e-01, -2.8139e-01, -3.8260e-01, -2.2748e-01, -5.0164e-01,
         -4.3124e-02, -1.0117e+01, -9.1445e-02, -1.5925e-01, -7.2323e-01,
         -3.2552e-01, -4.1378e-01, -1.0625e-01],
        [ 1.8502e-01,  2.6878e-02,  3.3592e-02,  1.9537e-01,  6.5113e+00,
         -1.2073e+00,  9.2307e-01, -2.0860e+00, -3.2830e+00, -1.5804e-01,
          1.4044e-01, -3.5950e+00, -6.8330e+00]], device='cuda:0'))])
loaded xi:  247.95322
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.2 0.2 0.2 0.2 0.2]
W_T_mean: 1015.179765260436
W_T_median: 691.9330736883467
W_T_pctile_5: -313.9027784303334
W_T_CVAR_5_pct: -448.26017499351263
-----------------------------------------------
new min fval from sgd:  -1760.1002931338
min fval:  -1760.1002931338
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -5.8366,   5.9125],
        [  5.9228,   0.6488],
        [ -5.6428,   5.7937],
        [ -7.1329, -11.3471],
        [  4.9682,  -3.5152],
        [ -3.8891,   4.0060],
        [  5.2235,   8.7253],
        [ -4.0303,   4.1630],
        [ -4.0752,   2.4494],
        [  5.9573,   1.8931],
        [ -1.2384,   1.0756],
        [-22.8147,  -4.7972],
        [ -1.2981,   1.1851]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ 3.1153, -5.8221,  3.0890, -3.5980, -6.1235, -1.0569, -6.6763,  2.7845,
         3.0021, -5.7627, -3.1169, -3.8700, -3.1335], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-4.9757e+00,  2.6947e+00, -4.7138e+00,  1.0052e+01,  1.7188e+00,
         -1.1916e+00,  5.7512e+00, -3.2776e+00, -3.3847e+00,  3.3194e+00,
         -5.0769e-02,  8.1701e+00, -2.7333e-02],
        [ 2.9078e-01,  6.6071e-01,  3.2531e-01,  1.7554e-01,  1.0581e+00,
          2.7834e-02,  4.0790e-02,  9.3799e-01,  1.7700e+00,  5.5118e-01,
          4.5516e-02,  1.9594e-02,  4.0299e-02],
        [-4.5653e+00,  2.7315e+00, -4.2103e+00,  9.4752e+00,  1.8964e+00,
         -7.5082e-01,  5.9666e+00, -3.2324e+00, -3.1403e+00,  3.5387e+00,
         -2.7516e-02,  7.6797e+00, -7.0749e-02],
        [-4.9278e+00,  3.1699e+00, -4.6303e+00,  1.0431e+01,  2.5205e+00,
         -6.4985e-01,  6.1129e+00, -3.3151e+00, -3.3852e+00,  3.5809e+00,
         -4.5430e-02,  8.2512e+00, -1.3255e-01],
        [-9.1156e-02, -3.0810e-01, -1.0195e-01, -1.2639e-01, -4.2359e-01,
         -9.6431e-03,  6.2318e-02, -2.9703e-01, -6.4605e-01, -2.5525e-01,
         -1.8505e-02, -6.2350e-03, -1.7314e-02],
        [-6.5676e+00,  2.4096e+00, -6.5096e+00,  1.2127e+01,  3.0552e+00,
         -3.6295e-01,  4.7450e+00, -3.2806e+00, -3.3280e+00,  3.4993e+00,
         -1.5587e-02,  9.0376e+00,  2.5200e-02],
        [-5.7271e+00,  3.1565e+00, -5.2549e+00,  1.1459e+01,  3.0218e+00,
         -6.5976e-01,  5.7164e+00, -3.5304e+00, -3.5323e+00,  3.8600e+00,
          8.7479e-02,  9.4347e+00,  5.7739e-02],
        [ 2.8752e-01,  6.6184e-01,  3.2203e-01,  1.6987e-01,  1.0133e+00,
          2.7585e-02,  4.5583e-02,  8.9785e-01,  1.6715e+00,  5.3392e-01,
          4.3827e-02,  2.0977e-02,  3.8861e-02],
        [ 2.8742e-01,  6.1886e-01,  3.1913e-01,  1.7289e-01,  1.0073e+00,
          2.7371e-02,  3.8813e-02,  8.8460e-01,  1.6232e+00,  5.1457e-01,
          4.3915e-02,  2.2091e-02,  3.8959e-02],
        [-9.7417e-02, -3.4626e-01, -1.0757e-01, -2.4441e-01, -4.5517e-01,
         -1.0108e-02, -7.3377e-02, -2.7731e-01, -4.9626e-01, -2.9224e-01,
         -1.8228e-02, -8.9192e-03, -1.6977e-02],
        [-5.0175e+00,  2.6619e+00, -4.5582e+00,  9.6019e+00,  2.0016e+00,
         -7.1676e-01,  5.1592e+00, -2.9489e+00, -3.1920e+00,  3.2355e+00,
         -1.7452e-02,  8.1687e+00,  4.5385e-02],
        [-3.4595e+00,  1.9905e+00, -3.2818e+00,  7.1538e+00,  8.9195e-01,
         -5.0466e-01,  4.3946e+00, -2.3343e+00, -2.5924e+00,  2.4758e+00,
          3.6595e-03,  4.4755e+00,  2.1169e-02],
        [-9.0762e-02, -3.5323e-01, -1.0175e-01, -2.1620e-01, -4.5471e-01,
         -9.9034e-03, -6.0816e-02, -2.9063e-01, -5.0746e-01, -2.9637e-01,
         -1.8202e-02, -1.4092e-03, -1.7294e-02]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.9564,  4.2571, -1.2230, -1.3104, -2.0409, -1.2751, -1.3535,  4.0241,
         4.3066, -2.0241, -1.1828, -1.4343, -1.9557], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-6.8368,  6.4521, -5.8133, -7.5282,  0.0792, -9.6174, -9.4799,  4.7253,
          6.0337,  0.0808, -6.2618, -3.4011,  0.0563]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[-6.7588, -2.0145],
        [ 1.1544,  8.3466],
        [ 5.7716,  3.3275],
        [-6.0613,  7.4961],
        [11.2560,  5.6951],
        [ 8.3766,  3.4555],
        [ 2.7329,  7.1558],
        [ 1.9172,  8.6166],
        [ 0.0707,  8.7370],
        [-8.2081, -0.1347],
        [ 9.3049,  3.8284],
        [ 1.6863,  8.2797],
        [-4.6709, -0.1448]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ 2.7325,  3.2437, -4.8855,  3.2104,  2.9051,  1.5483,  4.7236,  4.7675,
         3.0568,  6.7811,  1.8083,  4.3257,  3.0706], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-1.3036e+00,  2.1720e+00, -4.4039e+00,  6.1463e+00, -4.9072e+00,
         -1.5560e+00,  1.3899e+00,  1.5447e+00,  2.1150e+00,  6.7940e+00,
         -2.7622e+00,  1.2526e+00,  1.4933e+00],
        [-1.9613e+00, -9.4823e-01, -7.2045e-01, -4.6147e-01, -7.1251e-01,
         -7.8853e-01, -9.3787e-03, -3.7042e-01, -1.6068e+00, -1.9260e+00,
         -8.1762e-01, -4.9014e-01, -1.0989e+00],
        [-1.2151e+00, -9.5228e-01, -6.4554e-01, -1.7763e-01, -1.3004e+00,
         -1.0350e+00,  9.7835e-02, -1.8722e-01, -1.4326e+00, -1.7036e+00,
         -1.1508e+00, -3.3901e-01, -9.9848e-01],
        [-1.5542e+00, -9.0492e-01, -5.2197e-01, -5.2459e-02, -1.5424e+00,
         -1.1408e+00, -5.9196e-02, -1.9252e-01, -1.2599e+00, -1.0991e+00,
         -1.1839e+00, -3.5193e-01, -8.9822e-01],
        [ 4.9830e+00, -4.0958e+00, -7.1671e-02, -3.5456e+00, -4.2519e+00,
         -2.5033e+00, -2.3813e+00, -5.3866e+00, -5.6008e+00,  4.1304e+00,
         -3.5678e+00, -5.8337e+00,  7.4061e-01],
        [-4.1780e+00, -1.1210e+00, -8.4540e-01, -8.9962e-02, -6.9020e-01,
          1.0686e-01, -2.1742e-01, -1.1203e+00, -1.2553e+00, -2.7770e+00,
          3.2023e-01, -1.4446e+00, -2.0141e+00],
        [-1.8810e-01,  7.7317e-02, -9.8644e-02,  4.1872e-01,  1.9996e+00,
          1.6818e+00,  1.1084e+00,  8.0983e-01, -1.3495e-01,  7.9155e-01,
          1.7726e+00,  6.6577e-01,  7.9219e-01],
        [-5.5554e+00, -1.7578e+00, -1.0340e+00,  3.5016e-02, -4.1568e-01,
          3.7396e-01, -3.1316e-01, -9.8173e-01, -1.7898e+00, -2.8173e+00,
          9.4879e-01, -1.5653e+00, -1.5126e+00],
        [-2.8056e-01,  7.1207e-01,  1.0663e-01,  4.4372e+00, -7.6455e+00,
         -5.5832e+00, -2.5688e+00, -2.1072e+00,  1.5030e+00,  5.7951e+00,
         -5.8804e+00, -1.7571e+00,  4.0862e+00],
        [-6.4910e+00, -4.1477e-01, -2.7976e-01, -5.3368e+00,  5.5489e-01,
         -1.1458e-01,  6.6448e-01, -4.4278e-01, -2.8760e+00, -3.8282e+00,
          8.5344e-01,  7.1425e-01, -1.7707e+00],
        [-2.3840e+00, -8.1354e-01, -4.7018e-01,  1.1851e-01, -7.8195e-01,
         -1.0158e+00, -1.0567e+00, -1.0727e+00, -5.2184e-01, -2.2699e+00,
         -1.1248e+00, -1.0484e+00, -1.4171e+00],
        [ 5.1397e+00, -7.1712e+00, -4.4743e-02,  3.5894e-01, -1.0194e+01,
         -3.8110e+00, -1.7990e+01, -1.4095e+01, -3.7411e+00,  6.3889e+00,
         -5.0564e+00, -1.5002e+01,  3.8074e+00],
        [-2.0457e-01, -7.6148e+00, -7.0037e-02,  3.5030e+00, -7.8337e+00,
         -3.6454e+00, -1.6017e+01, -1.3347e+01, -4.1991e+00,  1.4654e+01,
         -4.1150e+00, -1.4023e+01,  2.3548e+00]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-4.2677, -1.8289, -1.4900, -1.5883,  2.7988, -1.8775,  0.6872, -1.7433,
        -0.9126, -2.3814, -2.0275,  3.5343, -1.6883], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ 4.1746e-01, -3.0342e-01, -2.8821e-01, -2.3076e-01, -6.0569e-01,
         -4.8350e-02, -9.7026e+00, -2.4277e-02, -6.3824e-02, -9.3292e-01,
         -2.0246e-01, -1.5353e-01, -9.0299e-02],
        [ 1.3471e+00,  1.1991e+00,  8.5942e-01,  8.7632e-01, -4.3126e+00,
          1.8991e+00,  1.2323e+00,  2.1384e+00,  4.2687e+00,  1.4454e+00,
          6.3738e-01,  4.7931e+00,  8.0609e+00],
        [-4.0723e-01, -1.4961e-02, -2.7359e-02, -1.5444e-02, -1.6304e-01,
         -1.2915e-02, -1.0300e+01, -3.2389e-02, -2.5487e-03, -9.1534e-02,
         -2.3744e-02, -1.4632e-02, -5.3679e-03],
        [-5.5694e-01, -2.8139e-01, -3.8260e-01, -2.2748e-01, -5.0164e-01,
         -4.3124e-02, -1.0117e+01, -9.1445e-02, -1.5925e-01, -7.2323e-01,
         -3.2552e-01, -4.1378e-01, -1.0625e-01],
        [ 1.8502e-01,  2.6878e-02,  3.3592e-02,  1.9537e-01,  6.5113e+00,
         -1.2073e+00,  9.2307e-01, -2.0860e+00, -3.2830e+00, -1.5804e-01,
          1.4044e-01, -3.5950e+00, -6.8330e+00]], device='cuda:0'))])
xi:  [247.95322]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 1038.342550928442
W_T_median: 724.6693506322435
W_T_pctile_5: 248.5253959355401
W_T_CVAR_5_pct: 121.07427174790601
Average q (qsum/M+1):  52.87230263986895
Optimal xi:  [247.95322]
Expected(across Rb) median(across samples) p_equity:  0.7087055573860804
obj fun:  tensor(-1760.1003, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
/home/marcchen/Documents/constrain_factor/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/constrain_factor/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: Paper_FactorInv_Factor2
Objective function: mean_cvar_single_level
Tracing param: 1.0
-----------------------------------------------

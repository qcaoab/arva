

############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = basic_ForsythLi
timeseries_basket['basket_desc'] = CRSP data: T30 and VWD
timeseries_basket['basket_columns'] = 
['T30_real_ret', 'VWD_real_ret']
############# End: defined asset  basket #################
-----------------------------------------------
No need to read market data.
-----------------------------------------------
3.3333333333333335% of MC simulations done.
6.666666666666667% of MC simulations done.
10.0% of MC simulations done.
13.333333333333334% of MC simulations done.
16.666666666666664% of MC simulations done.
20.0% of MC simulations done.
23.333333333333332% of MC simulations done.
26.666666666666668% of MC simulations done.
30.0% of MC simulations done.
33.33333333333333% of MC simulations done.
36.666666666666664% of MC simulations done.
40.0% of MC simulations done.
43.333333333333336% of MC simulations done.
46.666666666666664% of MC simulations done.
50.0% of MC simulations done.
53.333333333333336% of MC simulations done.
56.666666666666664% of MC simulations done.
60.0% of MC simulations done.
63.33333333333333% of MC simulations done.
66.66666666666666% of MC simulations done.
70.0% of MC simulations done.
73.33333333333333% of MC simulations done.
76.66666666666667% of MC simulations done.
80.0% of MC simulations done.
83.33333333333334% of MC simulations done.
86.66666666666667% of MC simulations done.
90.0% of MC simulations done.
93.33333333333333% of MC simulations done.
96.66666666666667% of MC simulations done.
100.0% of MC simulations done.
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/ma3chen/Documents/marc_branch2/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/ma3chen/Documents/marc_branch2/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/ma3chen/Documents/marc_branch2/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/ma3chen/Documents/marc_branch2/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       2       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/ma3chen/Documents/marc_branch2/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/ma3chen/Documents/marc_branch2/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/ma3chen/Documents/marc_branch2/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/ma3chen/Documents/marc_branch2/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer       4  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer       4  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       2           softmax   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1       (2, 4)     True           4  
2       (4, 4)     True           4  
3       (4, 2)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
W_T_mean: 4391.235309751479
W_T_median: 3573.634487562291
W_T_pctile_5: 1361.0305135931208
W_T_CVAR_5_pct: 1085.6901986903551
-----------------------------------------------
Running Adam.
2.0% of gradient descent iterations done. Method = Adam
objective value function right now is: -4290615.817153506
gradient value of function right now is: [ 2.43957129e+02  5.01118869e-01  2.43934418e+02  2.44031308e+02
 -2.43957129e+02 -5.01118869e-01 -2.43934418e+02 -2.44031308e+02
  6.78808001e-01  5.61510354e-01  6.05015962e-01  5.52911022e-01
  5.06642526e-01  4.33895632e-01  4.59784112e-01  4.28293628e-01
  9.92811573e-01  7.94053857e-01  8.66898746e-01  7.76950849e-01
  5.27884191e-01  4.16951944e-01  4.57618613e-01  4.07282389e-01
  1.32564359e-01 -3.15112025e-01  3.12967729e-01 -5.50030134e-01
  2.01508788e-01 -4.00412161e-01  1.82291502e-01 -3.21482160e-01
  7.43011467e-01  5.46850641e-01  1.09639323e+00  5.85609444e-01
  2.29683795e-01  5.29278580e-01  3.19546469e-01  3.09467543e-01]
supnorm grad right now is: 244.03130804700257
Weights right now are: 
[-2.42212139 -0.48963929 -1.75042605 -1.76336227  0.62300349  0.60836444
  2.37523831  1.68276956 -2.02898336 -2.02263001 -0.73616172 -1.4064786
  1.65993777  0.28426133  1.62207331  2.02445221 -1.16790157 -1.99643055
 -1.73997991 -1.41333075 -1.75219063 -1.50330473 -1.57010673 -1.93626821
 -2.26683746 -0.67344525 -1.73354911 -1.27660258 -0.94911843 -0.87461232
 -1.04596567 -1.4704107  -1.3657573   1.12796292 -1.26857283 -1.31341036
 -1.34103747 -0.71293902 -1.28203803 -1.19062465]
Traceback (most recent call last):
  File "_MAINv08_ LiForsyth_Table7_simulated.py", line 688, in <module>
    fun_RUN__wrapper.RUN__wrapper_TWO_stage_optimization(
  File "/home/ma3chen/Documents/marc_branch2/researchcode/fun_RUN__wrapper.py", line 48, in RUN__wrapper_TWO_stage_optimization
    RUN__wrapper_training_testing_NN(
  File "/home/ma3chen/Documents/marc_branch2/researchcode/fun_RUN__wrapper.py", line 185, in RUN__wrapper_training_testing_NN
    params_TRAIN, res_BEST, _, res_ALL_dataframe = fun_train_NN.train_NN( theta0 = theta0,
  File "/home/ma3chen/Documents/marc_branch2/researchcode/fun_train_NN.py", line 195, in train_NN
    res_Adam = run_Gradient_Descent(method="Adam",
  File "/home/ma3chen/Documents/marc_branch2/researchcode/fun_train_NN_SGD_algorithms.py", line 288, in run_Gradient_Descent
    (_, _, _, grad) = objfun(F_theta = theta,
  File "/home/ma3chen/Documents/marc_branch2/researchcode/fun_eval_objfun_NN_strategy.py", line 76, in eval_obj_NN_strategy
    params = fun_invest_NN_strategy.invest_NN_strategy(NN_theta= NN_theta,
  File "/home/ma3chen/Documents/marc_branch2/researchcode/fun_invest_NN_strategy.py", line 61, in invest_NN_strategy
    params = copy.deepcopy(params) #Create a copy
  File "/usr/lib/python3.8/copy.py", line 146, in deepcopy
    y = copier(x, memo)
  File "/usr/lib/python3.8/copy.py", line 230, in _deepcopy_dict
    y[deepcopy(key, memo)] = deepcopy(value, memo)
  File "/usr/lib/python3.8/copy.py", line 153, in deepcopy
    y = copier(memo)
KeyboardInterrupt

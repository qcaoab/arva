Starting at: 
10-07-23_16:38

 numpy seed:  3  


 pytorch seed:  3  

Key parameters-------
paths: 256000
iterations: 10
batchsize: 10
remove neg:  False
w constaint activation:  yy_fix_jan29


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = 5_Factor_plusEWD
timeseries_basket['basket_desc'] = 5_Factor_plusEWD
timeseries_basket['basket_columns'] = 
['Size_Lo30_real_ret', 'Value_Hi30_real_ret', 'Mom_Hi30_real_ret', 'Vol_Lo20_real_ret', 'Div_Hi30_real_ret', 'T30_real_ret', 'B10_real_ret', 'VWD_real_ret', 'EWD_real_ret']
############# End: defined asset  basket #################
               Cash_nom_ret  Size_Lo30_nom_ret  ...  VWD_nom_ret  EWD_nom_ret
My identifier                                   ...                          
192601                  0.0                NaN  ...     0.000561     0.023174
192602                  0.0                NaN  ...    -0.033046    -0.053510
192603                  0.0                NaN  ...    -0.064002    -0.096824
192604                  0.0                NaN  ...     0.037029     0.032975
192605                  0.0                NaN  ...     0.012095     0.001035

[5 rows x 16 columns]
               Cash_nom_ret  Size_Lo30_nom_ret  ...  VWD_nom_ret  EWD_nom_ret
My identifier                                   ...                          
202208                  NaN            -0.0020  ...    -0.036240    -0.011556
202209                  NaN            -0.0955  ...    -0.091324    -0.099903
202210                  NaN             0.0883  ...     0.077403     0.049863
202211                  NaN            -0.0076  ...     0.052365     0.028123
202212                  NaN            -0.0457  ...    -0.057116    -0.047241

[5 rows x 16 columns]


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = 5_Factor_plusEWD
timeseries_basket['basket_desc'] = 5_Factor_plusEWD
timeseries_basket['basket_columns'] = 
['Size_Lo30_nom_ret', 'Value_Hi30_nom_ret', 'Mom_Hi30_nom_ret', 'Vol_Lo20_nom_ret', 'Div_Hi30_nom_ret', 'T30_nom_ret', 'B10_nom_ret', 'VWD_nom_ret', 'EWD_nom_ret']
############# End: defined asset  basket #################
               Size_Lo30_nom_ret  Value_Hi30_nom_ret  ...  VWD_nom_ret  EWD_nom_ret
My identifier                                         ...                          
192607                    0.0014              0.0154  ...     0.031411     0.013051
192608                    0.0319              0.0561  ...     0.028647     0.031002
192609                   -0.0173             -0.0071  ...     0.005787    -0.006499
192610                   -0.0294             -0.0355  ...    -0.028996    -0.034630
192611                   -0.0038              0.0294  ...     0.028554     0.024776

[5 rows x 10 columns]
               Size_Lo30_nom_ret  Value_Hi30_nom_ret  ...  VWD_nom_ret  EWD_nom_ret
My identifier                                         ...                          
202208                   -0.0020             -0.0164  ...    -0.036240    -0.011556
202209                   -0.0955             -0.0871  ...    -0.091324    -0.099903
202210                    0.0883              0.1486  ...     0.077403     0.049863
202211                   -0.0076              0.0462  ...     0.052365     0.028123
202212                   -0.0457             -0.0499  ...    -0.057116    -0.047241

[5 rows x 10 columns]
Indices constructed with column names:
Index(['date_for_plt', 'Size_Lo30_nom_ret_ind', 'Value_Hi30_nom_ret_ind',
       'Mom_Hi30_nom_ret_ind', 'Vol_Lo20_nom_ret_ind', 'Div_Hi30_nom_ret_ind',
       'CPI_nom_ret_ind', 'T30_nom_ret_ind', 'B10_nom_ret_ind',
       'VWD_nom_ret_ind', 'EWD_nom_ret_ind'],
      dtype='object')
############# Updated: defined asset basket #################
timeseries_basket['data_df_mean'] = 
Size_Lo30_real_ret     0.009939
Value_Hi30_real_ret    0.010052
Mom_Hi30_real_ret      0.011386
Vol_Lo20_real_ret      0.003529
Div_Hi30_real_ret      0.007888
T30_real_ret           0.000229
B10_real_ret           0.001637
VWD_real_ret           0.006759
EWD_real_ret           0.009545
dtype: float64


timeseries_basket['data_df_stdev'] = 
Size_Lo30_real_ret     0.082598
Value_Hi30_real_ret    0.072063
Mom_Hi30_real_ret      0.061421
Vol_Lo20_real_ret      0.030737
Div_Hi30_real_ret      0.056728
T30_real_ret           0.005227
B10_real_ret           0.019258
VWD_real_ret           0.053610
EWD_real_ret           0.071360
dtype: float64


timeseries_basket['data_df_corr'] = 
                     Size_Lo30_real_ret  ...  EWD_real_ret
Size_Lo30_real_ret             1.000000  ...      0.977206
Value_Hi30_real_ret            0.908542  ...      0.919912
Mom_Hi30_real_ret              0.903222  ...      0.912002
Vol_Lo20_real_ret              0.360014  ...      0.382411
Div_Hi30_real_ret              0.816292  ...      0.849068
T30_real_ret                   0.014412  ...      0.029084
B10_real_ret                   0.012916  ...      0.024853
VWD_real_ret                   0.865290  ...      0.907369
EWD_real_ret                   0.977206  ...      1.000000

[9 rows x 9 columns]


timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names', 'data_df', 'data_df_mean', 'data_df_stdev', 'data_df_corr'])
############# End: updated: defined asset basket #################
-----------------------------------------------
Dates to be REMOVED due to missing values (should be at *start* only due to trading signals):
Int64Index([], dtype='int64')
-----------------------------------------------
Dates from available data for bootstrapping:
Start: 192607
End: 202212
-----------------------------------------------
Bootstrap block size: 18
-----------------------------------------------
Dates USED bootstrapping:
Start: 196307
End: 202212
-----------------------------------------------
0.0% of bootstrap sample done.
5.0% of bootstrap sample done.
10.0% of bootstrap sample done.
15.0% of bootstrap sample done.
20.0% of bootstrap sample done.
25.0% of bootstrap sample done.
30.0% of bootstrap sample done.
35.0% of bootstrap sample done.
40.0% of bootstrap sample done.
45.0% of bootstrap sample done.
50.0% of bootstrap sample done.
55.00000000000001% of bootstrap sample done.
60.0% of bootstrap sample done.
65.0% of bootstrap sample done.
70.0% of bootstrap sample done.
75.0% of bootstrap sample done.
80.0% of bootstrap sample done.
85.0% of bootstrap sample done.
90.0% of bootstrap sample done.
95.0% of bootstrap sample done.
Withdrawal NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       1       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      17  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      17  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       1              none   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 17)     True          17  
2     (17, 17)     True          17  
3      (17, 1)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
Allocation NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer      10       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      17  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      17  logistic_sigmoid   
3        obj.layers[3]        3  output_layer      10              none   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 17)     True          17  
2     (17, 17)     True          17  
3     (17, 10)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       17  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       17  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 17)      True          17  
0     (17, 17)      True          17  
0      (17, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       17  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       17  logistic_sigmoid   
0        obj.layers[3]         3  output_layer       10              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 17)      True          17  
0     (17, 17)      True          17  
0     (17, 10)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
{'methods': ['Adam'], 'output_progress': False, 'tol': 1e-06, 'itbound_scipy_algorithms': 1000, 'check_exit_criteria': False, 'nit_running_min': 1, 'itbound_SGD_algorithms': 10, 'nit_IterateAveragingStart': 9, 'batchsize': 10, 'SGD_learningrate': 50.0, 'Adagrad_epsilon': 1e-08, 'Adagrad_eta': 1.0, 'Adadelta_ewma': 0.9, 'Adadelta_epsilon': 1e-08, 'RMSprop_ewma': 0.8, 'RMSprop_epsilon': 1e-08, 'RMSprop_eta': 0.1, 'Adam_ewma_1': 0.9, 'Adam_ewma_2': 0.998, 'Adam_eta': 0.0, 'Adam_epsilon': 1e-08, 'Adam_weight_decay': 0.0001, 'running_min_from_avg': False, 'running_min_from_sgd': True, 'lr_schedule': True}
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       17  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       17  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 17)      True          17  
0     (17, 17)      True          17  
0      (17, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       17  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       17  logistic_sigmoid   
0        obj.layers[3]         3  output_layer       10              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 17)      True          17  
0     (17, 17)      True          17  
0     (17, 10)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -1.0175,   0.5057],
        [-23.4815,  -8.0318],
        [ -2.1666,  -8.2314],
        [ -1.1891,   0.5583],
        [ -0.1364,  -1.6215],
        [-10.5714,   6.5925],
        [ 11.7910,  -1.5939],
        [ -6.9862,  -9.2674],
        [ -4.9272,   7.3567],
        [ -6.1811,   8.7596],
        [ -5.7960,   8.6452],
        [ -0.2188,  -3.5013],
        [ -5.2464,  -8.5744],
        [ -5.1877,   8.6640],
        [ -5.9209,   8.7750],
        [ -1.1893,   0.5581],
        [ -1.1892,   0.5581]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-3.6536, -6.7314, -6.6039, -3.3832, -5.8652,  0.2798, -8.5850, -6.5817,
        -4.2849,  5.4577,  5.0786, -7.0418, -6.5829,  4.6242,  5.2978, -3.3829,
        -3.3830], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-3.9722e-03, -2.6197e-02, -1.9185e-01, -3.9729e-03, -2.9160e-03,
         -5.5379e-02, -1.4721e-01, -1.9036e-01, -8.4438e-02, -3.4176e-01,
         -3.0761e-01, -1.0201e-03, -1.5254e-01, -2.6725e-01, -3.2456e-01,
         -3.9723e-03, -3.9725e-03],
        [-3.9721e-03, -2.6197e-02, -1.9185e-01, -3.9729e-03, -2.9160e-03,
         -5.5379e-02, -1.4721e-01, -1.9036e-01, -8.4438e-02, -3.4176e-01,
         -3.0761e-01, -1.0201e-03, -1.5254e-01, -2.6725e-01, -3.2456e-01,
         -3.9723e-03, -3.9725e-03],
        [-5.5480e-02,  7.1826e+00,  2.5075e+00,  3.9545e-02, -1.0649e-02,
          1.4699e-01,  8.7054e-02,  3.3621e+00, -3.9622e-05, -5.9483e+00,
         -5.1087e+00,  4.1192e-02,  2.4165e+00, -3.8947e+00, -5.0777e+00,
          3.9415e-02,  3.9419e-02],
        [-1.2929e-02,  7.3569e+00,  1.0514e+00, -2.1625e-02, -7.9496e-02,
          4.2217e-01,  2.0301e+01,  1.5948e+00,  3.5088e+00, -4.6621e+00,
         -3.8996e+00, -9.3835e-02,  7.9404e-01, -2.4327e+00, -3.5571e+00,
         -2.1594e-02, -2.1545e-02],
        [ 1.4298e-01,  1.6521e+01,  6.6917e+00, -2.5031e-02,  7.2485e-01,
         -2.3832e+00,  7.5017e+00,  8.9824e+00, -6.0947e-03, -1.0570e+01,
         -9.6529e+00,  1.5077e+00,  6.8208e+00, -7.8781e+00, -9.9679e+00,
         -3.0060e-02, -3.0036e-02],
        [-3.9742e-03, -2.6182e-02, -1.9175e-01, -3.9747e-03, -2.9162e-03,
         -5.5373e-02, -1.4718e-01, -1.9026e-01, -8.4414e-02, -3.4164e-01,
         -3.0751e-01, -1.0200e-03, -1.5245e-01, -2.6717e-01, -3.2445e-01,
         -3.9741e-03, -3.9743e-03],
        [-2.3682e-02,  8.0254e+00,  1.3250e+00,  1.1336e-02, -6.0489e-02,
          5.7057e-01,  2.0699e+01,  2.1012e+00,  3.3942e+00, -4.4471e+00,
         -4.0241e+00, -8.2696e-02,  1.1933e+00, -2.5216e+00, -3.6698e+00,
          1.1403e-02,  1.1343e-02],
        [ 8.4864e-02,  5.9969e-02,  4.8949e-01,  8.8354e-02,  5.8058e-02,
         -3.2947e-02, -3.1784e+00,  3.6649e-01, -6.8408e-02,  1.3847e+00,
          1.1840e+00,  5.5560e-02,  3.1973e-01,  8.9515e-01,  1.2753e+00,
          8.8384e-02,  8.8381e-02],
        [-3.9731e-03, -2.6191e-02, -1.9181e-01, -3.9737e-03, -2.9161e-03,
         -5.5376e-02, -1.4720e-01, -1.9032e-01, -8.4428e-02, -3.4171e-01,
         -3.0757e-01, -1.0201e-03, -1.5250e-01, -2.6722e-01, -3.2451e-01,
         -3.9731e-03, -3.9733e-03],
        [-3.6695e-02,  8.2938e-02,  2.1517e+00, -2.3253e-03, -7.6867e-02,
          1.0415e-01, -1.2214e+01,  6.3227e+00, -1.1370e+00,  2.1121e+00,
          1.5469e+00, -1.1166e-01,  4.2679e+00,  6.8303e-01,  1.6216e+00,
         -1.6135e-03, -1.6957e-03],
        [-1.4007e-01,  9.3604e+00,  4.1720e+00,  3.0523e-02, -9.6679e-03,
         -2.0573e-01,  1.4853e+00,  5.0746e+00, -6.6466e-04, -7.1146e+00,
         -6.4685e+00,  1.9201e-01,  3.8675e+00, -5.0042e+00, -6.2629e+00,
          3.2204e-02,  3.0770e-02],
        [-2.6545e-02,  1.4277e+01,  6.1243e+00, -3.8814e-02,  4.1070e-01,
         -1.7162e+00,  6.5759e+00,  7.4328e+00, -4.4203e-03, -9.4726e+00,
         -8.5370e+00,  1.0742e+00,  5.7816e+00, -7.2590e+00, -8.6741e+00,
         -3.3607e-02, -3.2913e-02],
        [-4.1404e-02,  8.3214e+00,  2.8006e+00,  9.1913e-02,  6.0297e-03,
          1.8838e-01,  2.8314e-01,  3.7974e+00,  5.7450e-04, -5.8952e+00,
         -5.2955e+00,  7.6495e-02,  2.5944e+00, -3.9951e+00, -5.2092e+00,
          9.1978e-02,  9.1920e-02],
        [ 1.8838e-01, -3.7039e-02,  1.7242e+00,  2.1526e-01,  2.0262e-01,
          4.1406e-01, -1.4172e+01,  3.2972e+00, -8.5086e-01,  1.6341e+00,
          1.4332e+00,  1.8931e-01,  2.3065e+00,  1.1657e+00,  1.4748e+00,
          2.1557e-01,  2.1553e-01],
        [-3.9722e-03, -2.6197e-02, -1.9185e-01, -3.9729e-03, -2.9160e-03,
         -5.5379e-02, -1.4721e-01, -1.9036e-01, -8.4438e-02, -3.4176e-01,
         -3.0761e-01, -1.0201e-03, -1.5253e-01, -2.6725e-01, -3.2456e-01,
         -3.9723e-03, -3.9725e-03],
        [ 4.7373e-02,  8.8938e-02,  3.0762e-01,  4.7434e-02,  2.9977e-02,
         -3.8871e-02,  6.7026e-02,  2.8836e-01, -8.1008e-02,  6.8830e-01,
          6.0423e-01,  2.8654e-02,  2.4142e-01,  4.9400e-01,  6.2944e-01,
          4.7448e-02,  4.7447e-02],
        [-3.9722e-03, -2.6197e-02, -1.9185e-01, -3.9729e-03, -2.9160e-03,
         -5.5379e-02, -1.4721e-01, -1.9036e-01, -8.4438e-02, -3.4176e-01,
         -3.0761e-01, -1.0201e-03, -1.5254e-01, -2.6725e-01, -3.2456e-01,
         -3.9723e-03, -3.9725e-03]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.5064, -1.5064, -0.6347, -0.9464, -1.1164, -1.5071, -1.0497,  3.6701,
        -1.5067, -0.6659, -0.3442, -0.6932, -0.6493,  0.8851, -1.5064,  2.4703,
        -1.5064], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[  0.0465,   0.0465,  -5.5605, -10.1268, -20.4427,   0.0465, -10.9832,
           7.4262,   0.0465,  10.2727,  -8.2691, -16.5809,  -6.2245,   7.0327,
           0.0465,   1.2026,   0.0465]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -8.7937,  -9.2806],
        [  0.4904,  -9.4570],
        [-15.8671,  -5.8079],
        [  9.6026,  -0.6796],
        [ -1.6642,   0.4298],
        [-10.7710,  -2.5821],
        [ -7.9515,   3.8207],
        [-15.3283,  -5.4923],
        [-15.5311,  -5.6151],
        [-13.8147,   6.5131],
        [ -1.6456,   0.4370],
        [ -1.6681,   0.4319],
        [ -1.6446,   0.4371],
        [-12.0160,   0.0448],
        [ -1.6446,   0.4372],
        [ -4.8776,   9.5418],
        [-11.2358,   7.7095]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([-6.3294, -7.2349, -3.1391, -8.7053, -4.0556,  2.3500, -8.8325, -3.9435,
        -3.5805,  4.2986, -4.0743, -4.0565, -4.0761,  5.7875, -4.0764,  6.7510,
         5.5551], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 5.9630e+00,  8.8955e+00,  1.1246e+01, -7.4302e+00,  2.2205e-02,
          1.9143e+00, -1.1924e-03,  8.0093e+00,  9.6872e+00, -9.2700e+00,
          9.1876e-03,  2.0998e-02,  8.5420e-03, -2.7607e+00,  8.3494e-03,
         -1.9320e+01, -1.2315e+01],
        [ 8.2495e+00,  7.3986e+00,  1.2905e+01, -1.5155e+01, -2.2256e-02,
          1.6955e+00,  6.0102e-03,  9.0470e+00,  1.0941e+01, -9.8628e+00,
         -1.8520e-02, -2.1179e-02, -1.9179e-02, -3.2705e-01, -1.9307e-02,
         -1.9860e+01, -1.3199e+01],
        [ 1.8399e+00, -1.8359e+00,  1.0395e+00, -7.8262e-02, -4.1505e-03,
          2.9688e-01, -1.1483e+00,  7.1480e-01,  8.4952e-01, -6.1400e-01,
         -6.6515e-03, -4.4794e-03, -6.6886e-03, -5.9705e-01, -6.7024e-03,
         -7.1989e-01, -5.1831e-01],
        [ 1.7515e+00, -1.8410e+00,  9.6104e-01, -1.2493e-01, -1.3384e-02,
          2.4367e-01, -1.1209e+00,  6.4537e-01,  7.7632e-01, -6.1595e-01,
         -1.5629e-02, -1.3676e-02, -1.5657e-02, -6.1811e-01, -1.5667e-02,
         -7.3532e-01, -5.3776e-01],
        [-6.4310e-01, -2.3252e+00,  6.6694e-02, -6.4504e+00,  8.7076e-02,
          3.2024e-01, -2.1135e-03,  1.2512e-02,  3.3719e-02, -1.0046e+00,
          7.5453e-02,  8.6728e-02,  7.4899e-02, -6.4295e+00,  7.4760e-02,
          3.6264e-02, -1.1367e+01],
        [-5.0239e+00, -8.5900e+00,  1.4147e+00, -5.7167e+00,  4.7630e-02,
          3.2222e+00, -3.9898e+00,  2.2387e+00,  1.9462e+00,  1.4134e+00,
          5.2263e-02,  4.9122e-02,  5.2424e-02,  5.0131e+00,  5.2492e-02,
          2.1349e+00,  1.5127e+00],
        [ 1.7503e+00, -1.8415e+00,  9.5871e-01, -1.2547e-01, -1.3671e-02,
          2.4264e-01, -1.1205e+00,  6.4312e-01,  7.7400e-01, -6.1682e-01,
         -1.5909e-02, -1.3962e-02, -1.5936e-02, -6.1880e-01, -1.5946e-02,
         -7.3546e-01, -5.3835e-01],
        [ 1.7481e+00, -1.8424e+00,  9.5376e-01, -1.2632e-01, -1.4286e-02,
          2.4064e-01, -1.1198e+00,  6.3828e-01,  7.6903e-01, -6.1891e-01,
         -1.6509e-02, -1.4576e-02, -1.6535e-02, -6.2024e-01, -1.6545e-02,
         -7.3564e-01, -5.3961e-01],
        [-1.1641e+00, -3.8204e+00, -1.4247e-02,  1.6527e+00, -2.2487e-01,
         -9.8300e-01,  1.5293e+00, -5.1254e-03, -8.5129e-03, -6.1388e+00,
         -1.2651e-01, -2.2739e-01, -1.2108e-01, -1.2583e+01, -1.2002e-01,
          2.5785e+00, -1.6432e+00],
        [ 1.7369e+00, -1.8506e+00,  9.1176e-01, -1.2883e-01, -1.9413e-02,
          2.2664e-01, -1.1154e+00,  5.9648e-01,  7.2624e-01, -6.4069e-01,
         -2.1503e-02, -1.9695e-02, -2.1523e-02, -6.3211e-01, -2.1532e-02,
         -7.3494e-01, -5.4993e-01],
        [-8.5618e-01,  1.1703e+00,  6.4760e-01, -5.1396e+00,  1.7452e-02,
          9.5982e-01, -1.9407e-01, -2.7175e-01,  1.3151e-01, -9.0644e-01,
         -5.7943e-03,  1.7249e-02, -7.3210e-03, -1.7394e+00, -7.5785e-03,
         -5.9378e+00, -5.6079e-01],
        [-5.2519e+00, -5.7540e+00, -3.3908e+00, -1.7875e+00, -3.4977e-02,
          3.1821e+00, -2.1645e-02, -1.5427e+00, -2.3531e+00, -2.9475e+00,
         -3.7341e-02, -3.4979e-02, -3.7440e-02,  1.8290e+00, -3.7295e-02,
          2.1175e+00, -7.1308e+00],
        [ 1.7466e+00, -1.8431e+00,  9.5044e-01, -1.2696e-01, -1.4693e-02,
          2.3928e-01, -1.1193e+00,  6.3505e-01,  7.6570e-01, -6.2027e-01,
         -1.6905e-02, -1.4983e-02, -1.6931e-02, -6.2120e-01, -1.6941e-02,
         -7.3576e-01, -5.4045e-01],
        [ 1.7478e+00, -1.8426e+00,  9.5325e-01, -1.2645e-01, -1.4348e-02,
          2.4040e-01, -1.1197e+00,  6.3779e-01,  7.6852e-01, -6.1909e-01,
         -1.6569e-02, -1.4638e-02, -1.6595e-02, -6.2040e-01, -1.6606e-02,
         -7.3568e-01, -5.3973e-01],
        [ 1.7512e+00, -1.8412e+00,  9.6024e-01, -1.2502e-01, -1.3486e-02,
          2.4338e-01, -1.1208e+00,  6.4458e-01,  7.7551e-01, -6.1633e-01,
         -1.5729e-02, -1.3778e-02, -1.5757e-02, -6.1834e-01, -1.5767e-02,
         -7.3533e-01, -5.3797e-01],
        [ 2.8814e+00,  5.5491e+00,  8.5438e-01,  8.1951e+00,  3.7251e-02,
         -2.7765e+00,  8.2720e+00, -1.6301e+00, -4.7173e-01, -1.1846e+00,
          3.2106e-02,  3.8775e-02,  3.2037e-02, -4.6401e+00,  3.2072e-02,
         -3.5596e+00, -8.2730e-01],
        [ 1.7498e+00, -1.8417e+00,  9.5776e-01, -1.2563e-01, -1.3789e-02,
          2.4226e-01, -1.1203e+00,  6.4220e-01,  7.7305e-01, -6.1721e-01,
         -1.6024e-02, -1.4080e-02, -1.6050e-02, -6.1907e-01, -1.6061e-02,
         -7.3550e-01, -5.3859e-01]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-6.8916, -9.2784, -4.3117, -4.3435, -0.5732, -5.5256, -4.3438, -4.3442,
        -4.9989, -4.3452, -2.2117, -3.8785, -4.3445, -4.3443, -4.3435,  3.5319,
        -4.3439], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ -0.3795,  -0.4726,  -0.3747,  -0.3373,  -0.2053, -12.8179,  -0.3366,
          -0.3353,  -0.0527,  -0.3262,  -0.6129,  -3.0783,  -0.3344,  -0.3351,
          -0.3371, -17.4198,  -0.3364],
        [  1.8178,  -4.7025,   0.5591,   0.4959,   4.1445, -12.0065,   0.4957,
           0.4961,   1.4672,   0.5086,   0.5802,   0.0453,   0.4962,   0.4960,
           0.4960,   0.8743,   0.4958],
        [  1.5222,   5.0821,  -0.5450,  -0.5316,   1.7457,   3.8737,  -0.5308,
          -0.5289,   3.4438,  -0.5094,   2.3631,   2.0312,  -0.5277,  -0.5288,
          -0.5313,   2.2064,  -0.5305],
        [ -0.5903,  -0.7947,  -0.2536,  -0.2270,  -0.1985,  -9.9079,  -0.2266,
          -0.2256,  -0.0658,  -0.2194,  -0.4244,  -2.4957,  -0.2250,  -0.2255,
          -0.2269, -14.6533,  -0.2264],
        [-13.0803,   2.3374,   0.5917,   0.5378, -10.5012,   4.3037,   0.5369,
           0.5352, -10.1470,   0.5253,  -2.1398,   0.2101,   0.5340,   0.5350,
           0.5376,   0.2243,   0.5366],
        [ -4.3831, -10.3843,   1.3010,   1.2753,   0.9753,   6.4883,   1.2753,
           1.2755,   2.1429,   1.2802,   5.0231,  -2.9519,   1.2757,   1.2755,
           1.2754,   0.8204,   1.2753],
        [  4.2675,  10.9212,  -1.1116,  -1.0950,  -0.4951,   0.1517,  -1.0950,
          -1.0952,  -0.6094,  -1.0984,  -4.4563,   4.5805,  -1.0954,  -1.0952,
          -1.0950,   2.2920,  -1.0950],
        [ -0.2263,  -0.2495,  -0.3640,  -0.3284,  -0.1824, -13.6299,  -0.3278,
          -0.3265,  -0.0471,  -0.3179,  -0.6231,  -3.1421,  -0.3257,  -0.3264,
          -0.3282, -17.1423,  -0.3275],
        [ -0.2018,  -0.2205,  -0.3599,  -0.3255,  -0.1695, -13.7432,  -0.3249,
          -0.3237,  -0.0352,  -0.3155,  -0.6040,  -3.1828,  -0.3229,  -0.3236,
          -0.3254, -17.2093,  -0.3247],
        [ 12.6281,  13.4726,  -0.4924,  -0.4485,   0.4419,  -3.2901,  -0.4472,
          -0.4444,   1.0148,  -0.4200,  -0.2212,   4.6676,  -0.4425,  -0.4441,
          -0.4480,  13.1903,  -0.4466]], device='cuda:0'))])
loaded xi:  631.0828
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.05, 0.05, 0.05, 0.05, 0.05, 0, 0.5, 0.25, 0]
W_T_mean: 4973.847408880247
W_T_median: 3339.403432535962
W_T_pctile_5: 117.7485603653325
W_T_CVAR_5_pct: -219.39480690898858
-----------------------------------------------
new min fval from sgd:  -2059.6507644435515
min fval:  -2059.6507644435515
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 853.7670183079894
W_T_median: 817.4306907306604
W_T_pctile_5: 631.5692110268657
W_T_CVAR_5_pct: 428.972264579549
Average q (qsum/M+1):  52.604019657258064
Optimal xi:  [631.0828]
Expected(across Rb) median(across samples) p_equity:  0.033614637944035124
obj fun:  tensor(-2059.6508, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
/home/marcchen/Documents/constrain_factor/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
Traceback (most recent call last):
  File "/home/marcchen/Documents/constrain_factor/researchcode/bash_driver_factordecum.py", line 1036, in <module>
    fun_RUN__wrapper.RUN__wrapper_ONE_stage_optimization(
  File "/home/marcchen/Documents/constrain_factor/researchcode/fun_RUN__wrapper.py", line 129, in RUN__wrapper_ONE_stage_optimization
    RUN__wrapper_output(
  File "/home/marcchen/Documents/constrain_factor/researchcode/fun_RUN__wrapper.py", line 549, in RUN__wrapper_output
    fun_output_results_RollingHistorical.output_results_RollingHistorical(params_TRAIN = params_TRAIN,
  File "/home/marcchen/Documents/constrain_factor/researchcode/fun_output_results_RollingHistorical.py", line 31, in output_results_RollingHistorical
    df_summary_results = fun_output_results.output_results_NN(params_TRAIN= params_TRAIN,
  File "/home/marcchen/Documents/constrain_factor/researchcode/fun_output_results.py", line 268, in output_results_NN
    output_NN_setup.update({"n_layers_hidden": params_TRAIN["N_L"]})
KeyError: 'N_L'

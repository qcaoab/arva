Starting at: 
10-07-23_16:00

 numpy seed:  3  


 pytorch seed:  3  

Key parameters-------
paths: 256000
iterations: 10
batchsize: 10
remove neg:  False
w constaint activation:  yy_fix_jan29


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = Paper_FactorInv_Factor2
timeseries_basket['basket_desc'] = Factor2 portfolio for paper: Basic, size and value
timeseries_basket['basket_columns'] = 
['T30_real_ret', 'B10_real_ret', 'VWD_real_ret', 'Size_Lo30_real_ret', 'Value_Hi30_real_ret']
############# End: defined asset  basket #################
               Cash_nom_ret  Size_Lo30_nom_ret  ...  VWD_nom_ret  EWD_nom_ret
My identifier                                   ...                          
192601                  0.0                NaN  ...     0.000561     0.023174
192602                  0.0                NaN  ...    -0.033046    -0.053510
192603                  0.0                NaN  ...    -0.064002    -0.096824
192604                  0.0                NaN  ...     0.037029     0.032975
192605                  0.0                NaN  ...     0.012095     0.001035

[5 rows x 16 columns]
               Cash_nom_ret  Size_Lo30_nom_ret  ...  VWD_nom_ret  EWD_nom_ret
My identifier                                   ...                          
202208                  NaN            -0.0020  ...    -0.036240    -0.011556
202209                  NaN            -0.0955  ...    -0.091324    -0.099903
202210                  NaN             0.0883  ...     0.077403     0.049863
202211                  NaN            -0.0076  ...     0.052365     0.028123
202212                  NaN            -0.0457  ...    -0.057116    -0.047241

[5 rows x 16 columns]


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = Paper_FactorInv_Factor2
timeseries_basket['basket_desc'] = Factor2 portfolio for paper: Basic, size and value
timeseries_basket['basket_columns'] = 
['T30_nom_ret', 'B10_nom_ret', 'VWD_nom_ret', 'Size_Lo30_nom_ret', 'Value_Hi30_nom_ret']
############# End: defined asset  basket #################
               Size_Lo30_nom_ret  Value_Hi30_nom_ret  ...  B10_nom_ret  VWD_nom_ret
My identifier                                         ...                          
192607                    0.0014              0.0154  ...     0.005383     0.031411
192608                    0.0319              0.0561  ...     0.005363     0.028647
192609                   -0.0173             -0.0071  ...     0.005343     0.005787
192610                   -0.0294             -0.0355  ...     0.005323    -0.028996
192611                   -0.0038              0.0294  ...     0.005303     0.028554

[5 rows x 6 columns]
               Size_Lo30_nom_ret  Value_Hi30_nom_ret  ...  B10_nom_ret  VWD_nom_ret
My identifier                                         ...                          
202208                   -0.0020             -0.0164  ...    -0.043289    -0.036240
202209                   -0.0955             -0.0871  ...    -0.050056    -0.091324
202210                    0.0883              0.1486  ...    -0.014968     0.077403
202211                   -0.0076              0.0462  ...     0.040789     0.052365
202212                   -0.0457             -0.0499  ...    -0.018566    -0.057116

[5 rows x 6 columns]
Indices constructed with column names:
Index(['date_for_plt', 'Size_Lo30_nom_ret_ind', 'Value_Hi30_nom_ret_ind',
       'CPI_nom_ret_ind', 'T30_nom_ret_ind', 'B10_nom_ret_ind',
       'VWD_nom_ret_ind'],
      dtype='object')
############# Updated: defined asset basket #################
timeseries_basket['data_df_mean'] = 
T30_real_ret           0.000229
B10_real_ret           0.001637
VWD_real_ret           0.006759
Size_Lo30_real_ret     0.009939
Value_Hi30_real_ret    0.010052
dtype: float64


timeseries_basket['data_df_stdev'] = 
T30_real_ret           0.005227
B10_real_ret           0.019258
VWD_real_ret           0.053610
Size_Lo30_real_ret     0.082598
Value_Hi30_real_ret    0.072063
dtype: float64


timeseries_basket['data_df_corr'] = 
                     T30_real_ret  ...  Value_Hi30_real_ret
T30_real_ret             1.000000  ...             0.018239
B10_real_ret             0.351722  ...             0.031301
VWD_real_ret             0.068448  ...             0.909335
Size_Lo30_real_ret       0.014412  ...             0.908542
Value_Hi30_real_ret      0.018239  ...             1.000000

[5 rows x 5 columns]


timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names', 'data_df', 'data_df_mean', 'data_df_stdev', 'data_df_corr'])
############# End: updated: defined asset basket #################
-----------------------------------------------
Dates to be REMOVED due to missing values (should be at *start* only due to trading signals):
Int64Index([], dtype='int64')
-----------------------------------------------
Dates from available data for bootstrapping:
Start: 192607
End: 202212
-----------------------------------------------
Bootstrap block size: 18
-----------------------------------------------
Dates USED bootstrapping:
Start: 196307
End: 202212
-----------------------------------------------
0.0% of bootstrap sample done.
5.0% of bootstrap sample done.
10.0% of bootstrap sample done.
15.0% of bootstrap sample done.
20.0% of bootstrap sample done.
25.0% of bootstrap sample done.
30.0% of bootstrap sample done.
35.0% of bootstrap sample done.
40.0% of bootstrap sample done.
45.0% of bootstrap sample done.
50.0% of bootstrap sample done.
55.00000000000001% of bootstrap sample done.
60.0% of bootstrap sample done.
65.0% of bootstrap sample done.
70.0% of bootstrap sample done.
75.0% of bootstrap sample done.
80.0% of bootstrap sample done.
85.0% of bootstrap sample done.
90.0% of bootstrap sample done.
95.0% of bootstrap sample done.
Withdrawal NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       1       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      13  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      13  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       1              none   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 13)     True          13  
2     (13, 13)     True          13  
3      (13, 1)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
Allocation NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       6       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      13  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      13  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       6              none   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 13)     True          13  
2     (13, 13)     True          13  
3      (13, 6)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        6              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 6)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
{'methods': ['Adam'], 'output_progress': False, 'tol': 1e-06, 'itbound_scipy_algorithms': 1000, 'check_exit_criteria': False, 'nit_running_min': 0, 'itbound_SGD_algorithms': 10, 'nit_IterateAveragingStart': 9, 'batchsize': 10, 'SGD_learningrate': 50.0, 'Adagrad_epsilon': 1e-08, 'Adagrad_eta': 1.0, 'Adadelta_ewma': 0.9, 'Adadelta_epsilon': 1e-08, 'RMSprop_ewma': 0.8, 'RMSprop_epsilon': 1e-08, 'RMSprop_eta': 0.1, 'Adam_ewma_1': 0.9, 'Adam_ewma_2': 0.998, 'Adam_eta': 0.0, 'Adam_epsilon': 1e-08, 'Adam_weight_decay': 0.0001, 'running_min_from_avg': False, 'running_min_from_sgd': True, 'lr_schedule': True}
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        6              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 6)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -1.1430,   0.4187],
        [  9.8474,  -1.4135],
        [  5.8739,   5.7312],
        [ -5.2533, -12.2536],
        [  4.4188, -12.3838],
        [ 10.9617,  -1.4483],
        [ -1.1430,   0.4186],
        [-12.1894,   5.8254],
        [ -1.1430,   0.4186],
        [ -9.2960,   0.5429],
        [ -1.1430,   0.4186],
        [-11.3165,   5.4953],
        [ -1.1430,   0.4186]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -2.4911,  -9.4818, -10.5976,  -5.1050,  -6.0951,  -9.8251,  -2.4910,
          4.7691,  -2.4910,   8.3221,  -2.4911,   4.3782,  -2.4910],
       device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ -0.0216,  -0.1334,  -0.0473,  -0.0480,  -0.3324,  -0.2582,  -0.0216,
          -0.0455,  -0.0216,  -0.6726,  -0.0216,  -0.0459,  -0.0216],
        [ -0.0216,  -0.1334,  -0.0473,  -0.0480,  -0.3324,  -0.2582,  -0.0216,
          -0.0455,  -0.0216,  -0.6726,  -0.0216,  -0.0459,  -0.0216],
        [ -0.0216,  -0.1334,  -0.0473,  -0.0480,  -0.3324,  -0.2582,  -0.0216,
          -0.0455,  -0.0216,  -0.6726,  -0.0216,  -0.0459,  -0.0216],
        [  0.0686,   5.1347,   2.6892,  15.6503,   4.3791,   8.9944,   0.0688,
          -5.0278,   0.0688,  -4.9085,   0.0688,  -4.6381,   0.0688],
        [ -0.0216,  -0.1334,  -0.0473,  -0.0480,  -0.3324,  -0.2582,  -0.0216,
          -0.0455,  -0.0216,  -0.6726,  -0.0216,  -0.0459,  -0.0216],
        [ -0.0216,  -0.1334,  -0.0473,  -0.0480,  -0.3324,  -0.2582,  -0.0216,
          -0.0455,  -0.0216,  -0.6726,  -0.0216,  -0.0459,  -0.0216],
        [ -0.0216,  -0.1334,  -0.0473,  -0.0480,  -0.3324,  -0.2582,  -0.0216,
          -0.0455,  -0.0216,  -0.6726,  -0.0216,  -0.0459,  -0.0216],
        [ -0.0285,  -3.0812,  -1.5087,  -7.9316,  -3.4804,  -5.7506,  -0.0285,
           1.8440,  -0.0285,   2.5382,  -0.0285,   1.5682,  -0.0285],
        [  0.0276,   4.3378,   1.5391,  12.9976,   3.8072,   7.9629,   0.0276,
          -3.6651,   0.0276,  -4.6745,   0.0276,  -3.4414,   0.0276],
        [  0.0518,  -3.6036,  -2.2151, -11.3692,  -3.8019,  -7.0698,   0.0519,
           3.1653,   0.0519,   3.4426,   0.0519,   2.6845,   0.0519],
        [ -0.0216,  -0.1334,  -0.0473,  -0.0480,  -0.3324,  -0.2582,  -0.0216,
          -0.0455,  -0.0216,  -0.6726,  -0.0216,  -0.0459,  -0.0216],
        [ -0.0216,  -0.1334,  -0.0473,  -0.0480,  -0.3324,  -0.2582,  -0.0216,
          -0.0455,  -0.0216,  -0.6726,  -0.0216,  -0.0459,  -0.0216],
        [  0.1062,  -4.2628,  -2.6668, -13.5279,  -3.8751,  -7.4700,   0.1064,
           4.2427,   0.1064,   4.4168,   0.1063,   3.8919,   0.1064]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.1583, -1.1583, -1.1583, -3.3534, -1.1583, -1.1583, -1.1583,  0.3468,
        -3.2491,  1.4796, -1.1583, -1.1584,  2.1929], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 6.7624e-03,  6.7624e-03,  6.7623e-03, -9.8886e+00,  6.7623e-03,
          6.7623e-03,  6.7623e-03,  3.4295e+00, -6.5877e+00,  5.5420e+00,
          6.7624e-03,  6.7634e-03,  8.3139e+00]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 0.0606, -0.0045],
        [ 0.0606, -0.0045],
        [ 0.0606, -0.0045],
        [ 0.0606, -0.0045],
        [ 0.0606, -0.0045],
        [ 0.0606, -0.0045],
        [ 0.0606, -0.0045],
        [ 0.0606, -0.0045],
        [ 0.0606, -0.0045],
        [ 0.0606, -0.0045],
        [ 0.0606, -0.0045],
        [ 0.0606, -0.0045],
        [ 0.0606, -0.0045]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([0.3421, 0.3421, 0.3421, 0.3421, 0.3421, 0.3421, 0.3421, 0.3421, 0.3421,
        0.3421, 0.3421, 0.3421, 0.3421], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533,
         0.2533, 0.2533, 0.2533, 0.2533],
        [0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533,
         0.2533, 0.2533, 0.2533, 0.2533],
        [0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533,
         0.2533, 0.2533, 0.2533, 0.2533],
        [0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533,
         0.2533, 0.2533, 0.2533, 0.2533],
        [0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533,
         0.2533, 0.2533, 0.2533, 0.2533],
        [0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533,
         0.2533, 0.2533, 0.2533, 0.2533],
        [0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533,
         0.2533, 0.2533, 0.2533, 0.2533],
        [0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533,
         0.2533, 0.2533, 0.2533, 0.2533],
        [0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533,
         0.2533, 0.2533, 0.2533, 0.2533],
        [0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533,
         0.2533, 0.2533, 0.2533, 0.2533],
        [0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533,
         0.2533, 0.2533, 0.2533, 0.2533],
        [0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533,
         0.2533, 0.2533, 0.2533, 0.2533],
        [0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533, 0.2533,
         0.2533, 0.2533, 0.2533, 0.2533]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([0.4306, 0.4306, 0.4306, 0.4306, 0.4306, 0.4306, 0.4306, 0.4306, 0.4306,
        0.4306, 0.4306, 0.4306, 0.4306], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-0.1419, -0.1419, -0.1419, -0.1419, -0.1419, -0.1419, -0.1419, -0.1419,
         -0.1419, -0.1419, -0.1419, -0.1419, -0.1419],
        [-0.1119, -0.1119, -0.1119, -0.1119, -0.1119, -0.1119, -0.1119, -0.1119,
         -0.1119, -0.1119, -0.1119, -0.1119, -0.1119],
        [ 1.2553,  1.2553,  1.2553,  1.2553,  1.2553,  1.2553,  1.2553,  1.2553,
          1.2553,  1.2553,  1.2553,  1.2553,  1.2553],
        [-0.0075, -0.0075, -0.0075, -0.0075, -0.0075, -0.0075, -0.0075, -0.0075,
         -0.0075, -0.0075, -0.0075, -0.0075, -0.0075],
        [ 1.3882,  1.3882,  1.3882,  1.3882,  1.3882,  1.3882,  1.3882,  1.3882,
          1.3882,  1.3882,  1.3882,  1.3882,  1.3882],
        [ 1.1867,  1.1867,  1.1867,  1.1867,  1.1867,  1.1867,  1.1867,  1.1867,
          1.1867,  1.1867,  1.1867,  1.1867,  1.1867]], device='cuda:0'))])
loaded xi:  317.99582
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.0, 0.5, 0.2, 0.15, 0.15]
W_T_mean: 1000.3278755462585
W_T_median: 733.6113376673641
W_T_pctile_5: -190.02603165425342
W_T_CVAR_5_pct: -322.7571246767781
-----------------------------------------------
new min fval from sgd:  -1848.5461343920222
min fval:  -1848.5461343920222
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 1968.339387068473
W_T_median: 1349.7426285582792
W_T_pctile_5: 328.19457838544656
W_T_CVAR_5_pct: 199.0722819348477
Average q (qsum/M+1):  53.23718655493952
Optimal xi:  [317.99582]
Expected(across Rb) median(across samples) p_equity:  0.5000003019968668
obj fun:  tensor(-1848.5461, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
/home/marcchen/Documents/constrain_factor/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/constrain_factor/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: Paper_FactorInv_Factor2
Objective function: mean_cvar_single_level
Tracing param: 1.0
-----------------------------------------------

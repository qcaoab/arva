Starting at: 
10-07-23_15:53

 numpy seed:  3  


 pytorch seed:  3  

Key parameters-------
paths: 256000
iterations: 10
batchsize: 10
remove neg:  False
w constaint activation:  yy_fix_jan29


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = Paper_FactorInv_Factor2
timeseries_basket['basket_desc'] = Factor2 portfolio for paper: Basic, size and value
timeseries_basket['basket_columns'] = 
['T30_real_ret', 'B10_real_ret', 'VWD_real_ret', 'Size_Lo30_real_ret', 'Value_Hi30_real_ret']
############# End: defined asset  basket #################
               Cash_nom_ret  Size_Lo30_nom_ret  ...  VWD_nom_ret  EWD_nom_ret
My identifier                                   ...                          
192601                  0.0                NaN  ...     0.000561     0.023174
192602                  0.0                NaN  ...    -0.033046    -0.053510
192603                  0.0                NaN  ...    -0.064002    -0.096824
192604                  0.0                NaN  ...     0.037029     0.032975
192605                  0.0                NaN  ...     0.012095     0.001035

[5 rows x 16 columns]
               Cash_nom_ret  Size_Lo30_nom_ret  ...  VWD_nom_ret  EWD_nom_ret
My identifier                                   ...                          
202208                  NaN            -0.0020  ...    -0.036240    -0.011556
202209                  NaN            -0.0955  ...    -0.091324    -0.099903
202210                  NaN             0.0883  ...     0.077403     0.049863
202211                  NaN            -0.0076  ...     0.052365     0.028123
202212                  NaN            -0.0457  ...    -0.057116    -0.047241

[5 rows x 16 columns]


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = Paper_FactorInv_Factor2
timeseries_basket['basket_desc'] = Factor2 portfolio for paper: Basic, size and value
timeseries_basket['basket_columns'] = 
['T30_nom_ret', 'B10_nom_ret', 'VWD_nom_ret', 'Size_Lo30_nom_ret', 'Value_Hi30_nom_ret']
############# End: defined asset  basket #################
               Size_Lo30_nom_ret  Value_Hi30_nom_ret  ...  B10_nom_ret  VWD_nom_ret
My identifier                                         ...                          
192607                    0.0014              0.0154  ...     0.005383     0.031411
192608                    0.0319              0.0561  ...     0.005363     0.028647
192609                   -0.0173             -0.0071  ...     0.005343     0.005787
192610                   -0.0294             -0.0355  ...     0.005323    -0.028996
192611                   -0.0038              0.0294  ...     0.005303     0.028554

[5 rows x 6 columns]
               Size_Lo30_nom_ret  Value_Hi30_nom_ret  ...  B10_nom_ret  VWD_nom_ret
My identifier                                         ...                          
202208                   -0.0020             -0.0164  ...    -0.043289    -0.036240
202209                   -0.0955             -0.0871  ...    -0.050056    -0.091324
202210                    0.0883              0.1486  ...    -0.014968     0.077403
202211                   -0.0076              0.0462  ...     0.040789     0.052365
202212                   -0.0457             -0.0499  ...    -0.018566    -0.057116

[5 rows x 6 columns]
Indices constructed with column names:
Index(['date_for_plt', 'Size_Lo30_nom_ret_ind', 'Value_Hi30_nom_ret_ind',
       'CPI_nom_ret_ind', 'T30_nom_ret_ind', 'B10_nom_ret_ind',
       'VWD_nom_ret_ind'],
      dtype='object')
############# Updated: defined asset basket #################
timeseries_basket['data_df_mean'] = 
T30_real_ret           0.000229
B10_real_ret           0.001637
VWD_real_ret           0.006759
Size_Lo30_real_ret     0.009939
Value_Hi30_real_ret    0.010052
dtype: float64


timeseries_basket['data_df_stdev'] = 
T30_real_ret           0.005227
B10_real_ret           0.019258
VWD_real_ret           0.053610
Size_Lo30_real_ret     0.082598
Value_Hi30_real_ret    0.072063
dtype: float64


timeseries_basket['data_df_corr'] = 
                     T30_real_ret  ...  Value_Hi30_real_ret
T30_real_ret             1.000000  ...             0.018239
B10_real_ret             0.351722  ...             0.031301
VWD_real_ret             0.068448  ...             0.909335
Size_Lo30_real_ret       0.014412  ...             0.908542
Value_Hi30_real_ret      0.018239  ...             1.000000

[5 rows x 5 columns]


timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names', 'data_df', 'data_df_mean', 'data_df_stdev', 'data_df_corr'])
############# End: updated: defined asset basket #################
-----------------------------------------------
Dates to be REMOVED due to missing values (should be at *start* only due to trading signals):
Int64Index([], dtype='int64')
-----------------------------------------------
Dates from available data for bootstrapping:
Start: 192607
End: 202212
-----------------------------------------------
Bootstrap block size: 18
-----------------------------------------------
Dates USED bootstrapping:
Start: 196307
End: 202212
-----------------------------------------------
0.0% of bootstrap sample done.
5.0% of bootstrap sample done.
10.0% of bootstrap sample done.
15.0% of bootstrap sample done.
20.0% of bootstrap sample done.
25.0% of bootstrap sample done.
30.0% of bootstrap sample done.
35.0% of bootstrap sample done.
40.0% of bootstrap sample done.
45.0% of bootstrap sample done.
50.0% of bootstrap sample done.
55.00000000000001% of bootstrap sample done.
60.0% of bootstrap sample done.
65.0% of bootstrap sample done.
70.0% of bootstrap sample done.
75.0% of bootstrap sample done.
80.0% of bootstrap sample done.
85.0% of bootstrap sample done.
90.0% of bootstrap sample done.
95.0% of bootstrap sample done.
Withdrawal NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       1       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      13  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      13  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       1              none   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 13)     True          13  
2     (13, 13)     True          13  
3      (13, 1)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
Allocation NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       5       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/constrain_factor/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      13  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      13  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       5              none   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 13)     True          13  
2     (13, 13)     True          13  
3      (13, 5)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        5              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 5)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
{'methods': ['Adam'], 'output_progress': False, 'tol': 1e-06, 'itbound_scipy_algorithms': 1000, 'check_exit_criteria': False, 'nit_running_min': 0, 'itbound_SGD_algorithms': 10, 'nit_IterateAveragingStart': 9, 'batchsize': 10, 'SGD_learningrate': 50.0, 'Adagrad_epsilon': 1e-08, 'Adagrad_eta': 1.0, 'Adadelta_ewma': 0.9, 'Adadelta_epsilon': 1e-08, 'RMSprop_ewma': 0.8, 'RMSprop_epsilon': 1e-08, 'RMSprop_eta': 0.1, 'Adam_ewma_1': 0.9, 'Adam_ewma_2': 0.998, 'Adam_eta': 0.0, 'Adam_epsilon': 1e-08, 'Adam_weight_decay': 0.0001, 'running_min_from_avg': False, 'running_min_from_sgd': True, 'lr_schedule': True}
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       13  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       13  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        5              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 13)      True          13  
0     (13, 13)      True          13  
0      (13, 5)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -5.0730,   8.7411],
        [ -0.2333,  -0.3945],
        [-17.7250,   7.8703],
        [ -3.0065,  -9.9111],
        [ -0.9717,   0.3720],
        [-51.5905,  -0.1744],
        [ -0.9726,   0.3729],
        [ -8.3775,   2.4529],
        [ -7.9758,  -0.4910],
        [ -0.9724,   0.3726],
        [ -0.9734,   0.3737],
        [ 10.7370,  -0.8082],
        [ -0.9733,   0.3737]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ 5.4642, -4.1880,  5.8779, -5.4528, -2.5340, -0.4186, -2.5364,  3.8880,
         7.3791, -2.5358, -2.5385, -9.3870, -2.5383], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-5.5266e-01, -9.0605e-03, -1.0233e-01, -1.3400e-01, -1.6036e-02,
         -1.0680e-02, -1.6006e-02, -2.3386e-01, -8.0271e-01, -1.6013e-02,
         -1.5982e-02, -2.4840e-01, -1.5984e-02],
        [-5.5266e-01, -9.0605e-03, -1.0233e-01, -1.3400e-01, -1.6036e-02,
         -1.0680e-02, -1.6006e-02, -2.3386e-01, -8.0271e-01, -1.6013e-02,
         -1.5982e-02, -2.4840e-01, -1.5984e-02],
        [-4.2009e+00, -9.1341e-02, -4.5527e+00,  1.2478e+01,  1.9773e-01,
          5.9594e+00,  1.9526e-01, -1.8517e+00, -2.1598e+00,  1.9557e-01,
          1.9436e-01,  1.0394e+01,  1.9438e-01],
        [-4.4165e+00, -2.2645e-02, -5.1378e+00,  1.3964e+01,  5.5445e-02,
          6.2618e+00,  5.1119e-02, -2.0972e+00, -2.4492e+00,  5.2185e-02,
          4.7357e-02,  1.1762e+01,  4.7631e-02],
        [-5.5266e-01, -9.0605e-03, -1.0233e-01, -1.3400e-01, -1.6036e-02,
         -1.0680e-02, -1.6006e-02, -2.3386e-01, -8.0271e-01, -1.6013e-02,
         -1.5982e-02, -2.4840e-01, -1.5984e-02],
        [-4.9147e+00,  4.9423e-02, -5.6717e+00,  1.7742e+01, -1.9304e-02,
          5.6502e+00, -1.2150e-02, -1.3932e+00, -1.4336e+00, -1.3580e-02,
         -7.2776e-03,  1.0305e+01, -7.5917e-03],
        [-4.1883e+00,  2.6420e-01, -6.0282e+00,  1.5307e+01, -1.8235e-01,
          5.6546e+00, -1.8422e-01, -1.8554e+00, -2.8026e+00, -1.8391e-01,
         -1.8524e-01,  1.1065e+01, -1.8518e-01],
        [ 1.4627e+00,  6.5572e-03,  2.6512e-01,  2.7625e-01,  4.3771e-02,
         -1.4463e-01,  4.3770e-02,  4.6044e-01,  1.8139e+00,  4.3775e-02,
          4.3748e-02,  4.5434e-01,  4.3749e-02],
        [ 1.5609e+00,  9.5400e-03,  2.6412e-01,  2.8828e-01,  4.8340e-02,
         -1.4571e-01,  4.8349e-02,  4.7136e-01,  1.9841e+00,  4.8353e-02,
          4.8329e-02,  4.9644e-01,  4.8331e-02],
        [-5.5266e-01, -9.0605e-03, -1.0233e-01, -1.3400e-01, -1.6036e-02,
         -1.0680e-02, -1.6006e-02, -2.3386e-01, -8.0271e-01, -1.6013e-02,
         -1.5982e-02, -2.4840e-01, -1.5984e-02],
        [-5.5266e-01, -9.0605e-03, -1.0233e-01, -1.3400e-01, -1.6036e-02,
         -1.0680e-02, -1.6006e-02, -2.3386e-01, -8.0271e-01, -1.6013e-02,
         -1.5982e-02, -2.4840e-01, -1.5984e-02],
        [-5.5266e-01, -9.0605e-03, -1.0233e-01, -1.3400e-01, -1.6036e-02,
         -1.0680e-02, -1.6006e-02, -2.3386e-01, -8.0271e-01, -1.6013e-02,
         -1.5982e-02, -2.4840e-01, -1.5983e-02],
        [-5.5266e-01, -9.0605e-03, -1.0233e-01, -1.3400e-01, -1.6036e-02,
         -1.0680e-02, -1.6006e-02, -2.3386e-01, -8.0271e-01, -1.6013e-02,
         -1.5982e-02, -2.4840e-01, -1.5984e-02]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.1190, -1.1190, -1.3647, -1.5126, -1.1190, -0.8090, -1.3354,  2.6292,
         2.8653, -1.1190, -1.1190, -1.1190, -1.1190], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.0152,  -0.0152,  -6.6656,  -9.5962,  -0.0152, -10.4777,  -9.7998,
           5.2988,   8.6557,  -0.0152,  -0.0152,  -0.0152,  -0.0152]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -9.2825,  -0.3519],
        [ 10.8589,   9.5080],
        [ -1.5482,  11.5933],
        [  2.7935,   9.7285],
        [ -2.6562,   1.7620],
        [ -8.6900,   9.4681],
        [ 13.1743,   5.1769],
        [ 12.6044,   3.7761],
        [-14.5627,  -2.6889],
        [ -3.4115,  -9.7318],
        [ 11.1713,   0.0306],
        [ -1.3603,   0.6206],
        [-12.2970,   5.9842]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([  6.3345,   5.1447,   6.7820,   4.8869,  -4.8865,   5.6986,   2.0928,
         -2.3052,   4.2875,  -7.3046, -10.3331,  -3.6748,   4.3252],
       device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 1.8109e+00,  4.1941e+00,  1.1791e+01,  2.2004e+00,  1.1935e-01,
          9.1630e+00, -3.1398e+00, -2.7973e-01, -6.8111e+00, -7.0099e+00,
         -8.3942e+00,  1.2273e-01,  1.0490e+01],
        [-1.3004e+00, -1.1540e+00, -3.7009e-01, -7.4327e-01, -1.2419e-02,
         -1.8550e-01, -1.6912e+00, -1.1160e+00, -3.4923e-01, -8.7052e-01,
          1.9032e-01,  5.6626e-02, -1.1551e-01],
        [-6.6944e-02,  4.1561e+00,  1.2597e+01,  1.3699e+01,  3.9231e-02,
          2.4619e+00,  1.7476e+00,  1.1079e+00, -2.6249e+00, -5.5873e+00,
          9.3581e+00,  2.2759e-02,  1.8904e+00],
        [-1.2757e+00,  3.8315e+00,  4.0195e+00, -1.4235e+00, -3.4908e+00,
          9.5961e+00, -7.5237e-01,  9.6891e-01, -1.4466e+01, -4.2834e-01,
         -1.1653e+01, -2.9746e-01, -5.5338e+00],
        [ 2.1135e+00, -6.0312e-02, -2.1718e+00, -6.1685e-01,  4.1602e-02,
         -7.8157e+00, -2.6969e+00, -3.6974e+00,  4.3542e+00, -6.0976e+00,
          1.5397e-01,  2.1415e-01, -5.8381e+00],
        [ 5.3626e+00, -9.5649e+00, -1.6103e+01, -1.0946e+01, -5.2216e-02,
         -5.4719e+00, -5.7261e+00, -1.4747e+00,  4.2610e+00,  3.6210e+00,
         -9.6893e+00,  7.1035e-02, -1.1309e+00],
        [-3.0396e+00,  1.5472e+00, -5.9456e+00, -3.4773e+00,  1.6043e+00,
         -3.1067e+00,  3.8875e+00,  2.8299e+00,  1.3290e+00, -3.0498e+00,
          9.3300e+00, -4.1373e-02, -2.5647e+00],
        [ 4.0799e-01, -1.6264e+00,  2.8312e-01, -4.8612e-01, -6.0322e-01,
          1.4811e+00, -2.6337e+00, -1.2354e+00,  6.6969e-01,  1.6584e-01,
         -4.7738e-01, -2.4464e-01,  1.8759e+00],
        [-3.7701e+00,  1.7453e+01,  1.1177e+01,  9.2901e+00, -4.8831e-02,
          4.0961e+00,  7.7679e+00,  4.6677e+00, -5.0257e+00, -2.7456e+00,
          1.1619e+01, -2.8630e-02, -2.6502e-01],
        [-2.8307e+00, -9.7913e-02,  2.8281e-01, -5.8384e-02, -6.7716e-01,
         -1.5765e+00, -9.1634e-01, -1.2223e-01, -2.6151e+00, -9.9623e-01,
          1.3022e+00, -1.3608e-01, -2.2713e+00],
        [-1.2195e+00, -1.1837e+00, -3.3673e-01, -6.7181e-01,  9.4588e-03,
         -1.2407e-01, -1.6971e+00, -1.1314e+00, -3.8296e-01, -8.4054e-01,
          8.9953e-02,  5.3360e-02, -7.0888e-02],
        [-1.1467e+00, -1.2041e+00, -3.0338e-01, -5.8217e-01,  3.0736e-02,
         -7.5318e-02, -1.6991e+00, -1.1407e+00, -4.2960e-01, -8.0696e-01,
         -6.2897e-03,  4.7733e-02, -4.4424e-02],
        [-1.1710e+00, -1.1995e+00, -3.1575e-01, -6.1592e-01,  2.2711e-02,
         -9.1333e-02, -1.7011e+00, -1.1411e+00, -4.1155e-01, -8.1770e-01,
          3.1585e-02,  5.0162e-02, -5.1659e-02]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-3.0428, -1.9271, -2.3946, -2.3554, -1.2914,  2.7467,  3.0169, -2.1441,
        -1.1718, -1.4142, -1.9109, -1.8901, -1.8985], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-2.2029e-01, -1.2997e-01,  1.7215e+00,  1.2104e-01,  2.4730e+00,
         -8.2039e+00, -1.6139e+00,  1.4376e+00,  1.1976e+00, -1.0965e+00,
         -1.1565e-01, -1.0019e-01, -1.0620e-01],
        [ 5.7970e-01, -6.3152e-02, -1.2841e+00,  4.0704e-01, -2.0002e-01,
          5.3387e-01,  2.3113e+00, -8.1249e-01,  8.5264e-01,  9.6940e-01,
         -7.1297e-02, -7.3370e-02, -7.4676e-02],
        [-5.4724e-02,  3.4007e-01, -1.9885e+00, -3.6666e-01, -5.7860e-02,
          8.9615e+00,  1.5465e+00,  3.8517e-02, -7.6188e+00,  3.2276e-01,
          3.0781e-01,  2.6667e-01,  2.8294e-01],
        [ 4.2943e-01, -3.5547e-01, -1.5876e+00,  9.0524e-01, -2.0222e+00,
          1.1728e+01,  4.6064e+00, -1.7644e+00, -3.1209e+00, -1.1139e+00,
         -2.8466e-01, -2.1482e-01, -2.4176e-01],
        [-1.0699e+00, -4.2960e-02, -7.2838e-01,  1.2268e+00,  6.4988e-01,
          8.7597e+00,  1.7894e+01, -7.2758e-03,  4.1742e-01,  1.1375e+00,
         -5.1978e-02, -5.9923e-02, -5.7311e-02]], device='cuda:0'))])
loaded xi:  262.22217
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.0, 0.5, 0.2, 0.15, 0.15]
W_T_mean: 1000.3278755462585
W_T_median: 733.6113376673641
W_T_pctile_5: -190.02603165425342
W_T_CVAR_5_pct: -322.7571246767781
-----------------------------------------------
new min fval from sgd:  -1772.4566809088547
min fval:  -1772.4566809088547
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 414.11326148414213
W_T_median: 351.16780868731735
W_T_pctile_5: 262.2507207128005
W_T_CVAR_5_pct: 163.53663755039292
Average q (qsum/M+1):  51.90067808089718
Optimal xi:  [262.22217]
Expected(across Rb) median(across samples) p_equity:  0.2586350196351608
obj fun:  tensor(-1772.4567, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
bond graph is mislabeled!
/home/marcchen/Documents/constrain_factor/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/constrain_factor/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: Paper_FactorInv_Factor2
Objective function: mean_cvar_single_level
Tracing param: 1.0
-----------------------------------------------

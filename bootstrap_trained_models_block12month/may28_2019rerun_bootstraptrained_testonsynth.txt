Starting at: 
28-05-23_20:36

 numpy seed:  3  


 pytorch seed:  3  

Key parameters-------
paths: 256000
iterations: 10
batchsize: 1000
remove neg:  False
w constaint activation:  yy_fix_jan29


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = B10_and_VWD
timeseries_basket['basket_desc'] = CRSP data: B10 and VWD
timeseries_basket['basket_columns'] = 
['B10_real_ret', 'VWD_real_ret']
############# End: defined asset  basket #################
-----------------------------------------------
No need to read market data.
-----------------------------------------------
3.3333333333333335% of MC simulations done.
6.666666666666667% of MC simulations done.
10.0% of MC simulations done.
13.333333333333334% of MC simulations done.
16.666666666666664% of MC simulations done.
20.0% of MC simulations done.
23.333333333333332% of MC simulations done.
26.666666666666668% of MC simulations done.
30.0% of MC simulations done.
33.33333333333333% of MC simulations done.
36.666666666666664% of MC simulations done.
40.0% of MC simulations done.
43.333333333333336% of MC simulations done.
46.666666666666664% of MC simulations done.
50.0% of MC simulations done.
53.333333333333336% of MC simulations done.
56.666666666666664% of MC simulations done.
60.0% of MC simulations done.
63.33333333333333% of MC simulations done.
66.66666666666666% of MC simulations done.
70.0% of MC simulations done.
73.33333333333333% of MC simulations done.
76.66666666666667% of MC simulations done.
80.0% of MC simulations done.
83.33333333333334% of MC simulations done.
86.66666666666667% of MC simulations done.
90.0% of MC simulations done.
93.33333333333333% of MC simulations done.
96.66666666666667% of MC simulations done.
100.0% of MC simulations done.
Withdrawal NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       1       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      10  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      10  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       1              none   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 10)     True          10  
2     (10, 10)     True          10  
3      (10, 1)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
Allocation NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       2       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      10  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      10  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       2           softmax   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 10)     True          10  
2     (10, 10)     True          10  
3      (10, 2)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
{'methods': ['Adam'], 'output_progress': False, 'tol': 1e-06, 'itbound_scipy_algorithms': 1000, 'check_exit_criteria': False, 'nit_running_min': 1, 'itbound_SGD_algorithms': 10, 'nit_IterateAveragingStart': 9, 'batchsize': 1000, 'SGD_learningrate': 50.0, 'Adagrad_epsilon': 1e-08, 'Adagrad_eta': 1.0, 'Adadelta_ewma': 0.9, 'Adadelta_epsilon': 1e-08, 'RMSprop_ewma': 0.8, 'RMSprop_epsilon': 1e-08, 'RMSprop_eta': 0.1, 'Adam_ewma_1': 0.9, 'Adam_ewma_2': 0.998, 'Adam_eta': 0.0, 'Adam_epsilon': 1e-08, 'Adam_weight_decay': 0.0001, 'running_min_from_avg': False, 'running_min_from_sgd': True, 'lr_schedule': True}
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.3474,  1.2579],
        [-0.3474,  1.2579],
        [-6.6830,  6.1254],
        [15.4393,  0.8582],
        [-0.3474,  1.2579],
        [-0.3474,  1.2579],
        [-0.3474,  1.2579],
        [-0.3474,  1.2579],
        [-1.5786,  6.6278],
        [-0.3474,  1.2579]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -0.6536,  -0.6536,  12.2236, -11.0642,  -0.6536,  -0.6536,  -0.6536,
         -0.6536,  12.5625,  -0.6536], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-9.4877e-05, -9.4875e-05, -1.3058e-02, -2.3909e-01, -9.4877e-05,
         -9.4876e-05, -9.4875e-05, -9.4874e-05, -2.3693e-01, -9.4877e-05],
        [-9.4894e-05, -9.4888e-05, -1.3058e-02, -2.3909e-01, -9.4892e-05,
         -9.4891e-05, -9.4892e-05, -9.4889e-05, -2.3693e-01, -9.4891e-05],
        [ 7.5973e-02,  7.5973e-02, -7.1384e+00, -9.7633e+00,  7.5973e-02,
          7.5973e-02,  7.5973e-02,  7.5973e-02, -6.5581e+00,  7.5973e-02],
        [-9.4928e-05, -9.4924e-05, -1.3058e-02, -2.3909e-01, -9.4927e-05,
         -9.4925e-05, -9.4924e-05, -9.4922e-05, -2.3693e-01, -9.4926e-05],
        [-9.4897e-05, -9.4893e-05, -1.3058e-02, -2.3909e-01, -9.4897e-05,
         -9.4895e-05, -9.4897e-05, -9.4900e-05, -2.3693e-01, -9.4900e-05],
        [-9.4903e-05, -9.4898e-05, -1.3058e-02, -2.3909e-01, -9.4899e-05,
         -9.4899e-05, -9.4900e-05, -9.4899e-05, -2.3693e-01, -9.4901e-05],
        [ 7.0034e-02,  7.0034e-02,  3.8139e+00,  4.9882e+00,  7.0034e-02,
          7.0034e-02,  7.0034e-02,  7.0034e-02,  3.2205e+00,  7.0034e-02],
        [ 2.1991e-02,  2.1991e-02,  4.7943e+00,  6.3239e+00,  2.1991e-02,
          2.1991e-02,  2.1991e-02,  2.1991e-02,  4.1283e+00,  2.1991e-02],
        [-9.4867e-05, -9.4860e-05, -1.3058e-02, -2.3909e-01, -9.4866e-05,
         -9.4862e-05, -9.4863e-05, -9.4866e-05, -2.3693e-01, -9.4867e-05],
        [-9.4894e-05, -9.4892e-05, -1.3058e-02, -2.3909e-01, -9.4891e-05,
         -9.4892e-05, -9.4893e-05, -9.4894e-05, -2.3693e-01, -9.4892e-05]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.8064, -0.8064,  7.0780, -0.8064, -0.8064, -0.8064, -3.6824, -4.6053,
        -0.8064, -0.8064], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.0184,  -0.0184, -14.0509,  -0.0184,  -0.0184,  -0.0184,   6.2864,
           8.7099,  -0.0184,  -0.0184]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 12.8013,   0.2726],
        [-17.0914,  -2.7452],
        [  3.9886,  -5.1721],
        [ -9.3301,   0.7432],
        [ -0.9725,  -1.2263],
        [ -1.3974,   1.6523],
        [-13.5428,  -4.4592],
        [ -2.9652, -13.3428],
        [ -9.0578,  -9.5238],
        [ 12.1449,   5.9236]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([-12.1066,   2.8413,  -5.1978,   8.7348,  -6.0306,  -2.1272,   3.3555,
        -11.9310, -11.1376,   1.8702], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[  5.5028,   0.1157,  -1.9785,  -4.7738,   0.0326,   1.1464,  -2.1287,
          -1.5492,  -1.9505,  -0.1711],
        [ -0.5459,  -0.3619,  -0.9562,  -0.9107,  -0.3787,  -0.0592,  -0.4790,
          -0.5393,  -0.4574,  -1.5753],
        [  5.7371,  -3.5314,   0.5314, -13.6693,  -2.2891,  -0.2497,   0.0897,
           6.1471,  -3.8303,  -1.8257],
        [ -0.5439,  -0.3628,  -0.9559,  -0.9040,  -0.3798,  -0.0591,  -0.4805,
          -0.5374,  -0.4590,  -1.5845],
        [ -0.5464,  -0.3625,  -0.9569,  -0.9117,  -0.3794,  -0.0592,  -0.4797,
          -0.5399,  -0.4582,  -1.5788],
        [ -0.9805,   6.9598,  -2.1985,   4.6544,  -9.0169,  -0.1389,  -2.2101,
          -1.7060,   9.3560,  -9.2156],
        [ -6.9628,  -8.2133,  -1.7897,   1.1883,   0.7685,   0.4735,   3.5707,
          11.1716,  -7.3119, -10.2225],
        [ -3.1309,  -3.7659,   3.7128,  -0.4856,  -1.6133,  -0.1136,   3.3440,
           2.4888,  -5.0910,  -2.6464],
        [ -0.5446,  -0.3602,  -0.9545,  -0.9077,  -0.3770,  -0.0591,  -0.4771,
          -0.5375,  -0.4551,  -1.5665],
        [ -0.5512,   0.8376,  -2.6130,   5.4998,  -0.0543,   1.0065,   2.9428,
          -7.2141,  -0.6465,  -2.2327]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-2.4345, -2.0901, -3.4709, -2.0872, -2.0848, -8.2624, -3.5857, -1.2344,
        -2.1041, -2.7254], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-2.0012, -0.0298,  0.9509, -0.0306, -0.0297,  8.5064, -8.8255, -0.6242,
         -0.0298,  0.8278],
        [ 1.9552,  0.0297, -0.8479,  0.0289,  0.0297, -8.5105,  8.8162,  0.6437,
          0.0298, -0.9562]], device='cuda:0'))])
loaded xi:  -471.49716
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -1729.8923114168078
min fval:  -1729.8923114168078
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.3474,  1.2579],
        [-0.3474,  1.2579],
        [-6.6830,  6.1254],
        [15.4393,  0.8582],
        [-0.3474,  1.2579],
        [-0.3474,  1.2579],
        [-0.3474,  1.2579],
        [-0.3474,  1.2579],
        [-1.5786,  6.6278],
        [-0.3474,  1.2579]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -0.6536,  -0.6536,  12.2236, -11.0642,  -0.6536,  -0.6536,  -0.6536,
         -0.6536,  12.5625,  -0.6536], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-9.4877e-05, -9.4875e-05, -1.3058e-02, -2.3909e-01, -9.4877e-05,
         -9.4876e-05, -9.4875e-05, -9.4874e-05, -2.3693e-01, -9.4877e-05],
        [-9.4894e-05, -9.4888e-05, -1.3058e-02, -2.3909e-01, -9.4892e-05,
         -9.4891e-05, -9.4892e-05, -9.4889e-05, -2.3693e-01, -9.4891e-05],
        [ 7.5973e-02,  7.5973e-02, -7.1384e+00, -9.7633e+00,  7.5973e-02,
          7.5973e-02,  7.5973e-02,  7.5973e-02, -6.5581e+00,  7.5973e-02],
        [-9.4928e-05, -9.4924e-05, -1.3058e-02, -2.3909e-01, -9.4927e-05,
         -9.4925e-05, -9.4924e-05, -9.4922e-05, -2.3693e-01, -9.4926e-05],
        [-9.4897e-05, -9.4893e-05, -1.3058e-02, -2.3909e-01, -9.4897e-05,
         -9.4895e-05, -9.4897e-05, -9.4900e-05, -2.3693e-01, -9.4900e-05],
        [-9.4903e-05, -9.4898e-05, -1.3058e-02, -2.3909e-01, -9.4899e-05,
         -9.4899e-05, -9.4900e-05, -9.4899e-05, -2.3693e-01, -9.4901e-05],
        [ 7.0034e-02,  7.0034e-02,  3.8139e+00,  4.9882e+00,  7.0034e-02,
          7.0034e-02,  7.0034e-02,  7.0034e-02,  3.2205e+00,  7.0034e-02],
        [ 2.1991e-02,  2.1991e-02,  4.7943e+00,  6.3239e+00,  2.1991e-02,
          2.1991e-02,  2.1991e-02,  2.1991e-02,  4.1283e+00,  2.1991e-02],
        [-9.4867e-05, -9.4860e-05, -1.3058e-02, -2.3909e-01, -9.4866e-05,
         -9.4862e-05, -9.4863e-05, -9.4866e-05, -2.3693e-01, -9.4867e-05],
        [-9.4894e-05, -9.4892e-05, -1.3058e-02, -2.3909e-01, -9.4891e-05,
         -9.4892e-05, -9.4893e-05, -9.4894e-05, -2.3693e-01, -9.4892e-05]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.8064, -0.8064,  7.0780, -0.8064, -0.8064, -0.8064, -3.6824, -4.6053,
        -0.8064, -0.8064], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.0184,  -0.0184, -14.0509,  -0.0184,  -0.0184,  -0.0184,   6.2864,
           8.7099,  -0.0184,  -0.0184]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ 12.8013,   0.2726],
        [-17.0914,  -2.7452],
        [  3.9886,  -5.1721],
        [ -9.3301,   0.7432],
        [ -0.9725,  -1.2263],
        [ -1.3974,   1.6523],
        [-13.5428,  -4.4592],
        [ -2.9652, -13.3428],
        [ -9.0578,  -9.5238],
        [ 12.1449,   5.9236]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([-12.1066,   2.8413,  -5.1978,   8.7348,  -6.0306,  -2.1272,   3.3555,
        -11.9310, -11.1376,   1.8702], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[  5.5028,   0.1157,  -1.9785,  -4.7738,   0.0326,   1.1464,  -2.1287,
          -1.5492,  -1.9505,  -0.1711],
        [ -0.5459,  -0.3619,  -0.9562,  -0.9107,  -0.3787,  -0.0592,  -0.4790,
          -0.5393,  -0.4574,  -1.5753],
        [  5.7371,  -3.5314,   0.5314, -13.6693,  -2.2891,  -0.2497,   0.0897,
           6.1471,  -3.8303,  -1.8257],
        [ -0.5439,  -0.3628,  -0.9559,  -0.9040,  -0.3798,  -0.0591,  -0.4805,
          -0.5374,  -0.4590,  -1.5845],
        [ -0.5464,  -0.3625,  -0.9569,  -0.9117,  -0.3794,  -0.0592,  -0.4797,
          -0.5399,  -0.4582,  -1.5788],
        [ -0.9805,   6.9598,  -2.1985,   4.6544,  -9.0169,  -0.1389,  -2.2101,
          -1.7060,   9.3560,  -9.2156],
        [ -6.9628,  -8.2133,  -1.7897,   1.1883,   0.7685,   0.4735,   3.5707,
          11.1716,  -7.3119, -10.2225],
        [ -3.1309,  -3.7659,   3.7128,  -0.4856,  -1.6133,  -0.1136,   3.3440,
           2.4888,  -5.0910,  -2.6464],
        [ -0.5446,  -0.3602,  -0.9545,  -0.9077,  -0.3770,  -0.0591,  -0.4771,
          -0.5375,  -0.4551,  -1.5665],
        [ -0.5512,   0.8376,  -2.6130,   5.4998,  -0.0543,   1.0065,   2.9428,
          -7.2141,  -0.6465,  -2.2327]], device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-2.4345, -2.0901, -3.4709, -2.0872, -2.0848, -8.2624, -3.5857, -1.2344,
        -2.1041, -2.7254], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-2.0012, -0.0298,  0.9509, -0.0306, -0.0297,  8.5064, -8.8255, -0.6242,
         -0.0298,  0.8278],
        [ 1.9552,  0.0297, -0.8479,  0.0289,  0.0297, -8.5105,  8.8162,  0.6437,
          0.0298, -0.9562]], device='cuda:0'))])
xi:  [-471.49716]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 346.3989495161758
W_T_median: 119.47164562389376
W_T_pctile_5: -598.1153706567824
W_T_CVAR_5_pct: -711.7406266600406
Average q (qsum/M+1):  57.087418094758064
Optimal xi:  [-471.49716]
Expected(across Rb) median(across samples) p_equity:  0.3339704047422856
obj fun:  tensor(-1729.8923, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 0.05
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-4.1389, -5.7448],
        [-0.7451, -3.4182],
        [-0.4845,  1.4325],
        [-2.5350,  7.0884],
        [11.8999,  6.2490],
        [-0.7372,  5.9829],
        [ 4.6564, -6.4763],
        [-4.9572, -6.5716],
        [-0.4845,  1.4325],
        [-1.7318,  6.6181]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-6.4729, -5.2973, -0.9339,  8.9735, -2.0739,  6.9817, -8.5431, -6.8318,
        -0.9339,  8.1596], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-0.0622, -0.0362, -0.0289, -0.3085, -0.2219, -0.2079, -0.3733, -0.1152,
         -0.0289, -0.2671],
        [ 1.5907, -0.3350,  0.2002, -3.5446, -5.8260, -0.5012,  2.7092,  3.0097,
          0.2002, -2.0384],
        [-3.2589, -1.2849,  0.2155,  8.4183, -0.1561,  4.4849, -5.7409, -5.2620,
          0.2155,  6.6101],
        [ 1.2354,  1.1038, -0.4727, -4.7748,  7.5525, -4.3954, -3.1416,  1.3268,
         -0.4727, -5.0753],
        [ 1.6189, -0.3408,  0.1875, -3.6193, -5.9104, -0.5484,  2.6123,  3.0295,
          0.1875, -2.1022],
        [-0.0622, -0.0362, -0.0289, -0.3085, -0.2219, -0.2079, -0.3733, -0.1152,
         -0.0289, -0.2671],
        [-0.0622, -0.0362, -0.0289, -0.3085, -0.2219, -0.2079, -0.3733, -0.1152,
         -0.0289, -0.2671],
        [-0.0623, -0.0362, -0.0289, -0.3085, -0.2220, -0.2079, -0.3732, -0.1152,
         -0.0289, -0.2671],
        [-0.0622, -0.0362, -0.0289, -0.3085, -0.2219, -0.2079, -0.3733, -0.1152,
         -0.0289, -0.2671],
        [-0.0622, -0.0362, -0.0289, -0.3085, -0.2219, -0.2079, -0.3733, -0.1152,
         -0.0289, -0.2671]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.7078, -1.1484,  0.9332, -1.0368, -1.0950, -0.7078, -0.7078, -0.7078,
        -0.7078, -0.7078], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-0.2212, -6.3211, 13.0620,  6.8173, -6.3713, -0.2212, -0.2212, -0.2213,
         -0.2212, -0.2212]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -1.5989,   0.8687],
        [ -2.7529, -13.8673],
        [  4.3782,   5.9794],
        [ -9.3863,   1.3791],
        [-12.2348,   8.2553],
        [ 18.6650,   8.5850],
        [ -8.7245,  -4.6428],
        [ 10.0206,   9.2702],
        [  2.5232,   3.1474],
        [  7.9964,  -0.7601]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -2.4038, -17.8804,  -5.3593,   6.6038,   9.2241,   6.4365,   0.6380,
          6.8233,  -7.7196,  -9.8066], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-5.8702e-02, -8.3003e-01, -5.7804e-01,  1.8977e-02, -6.0687e-01,
         -6.2390e-01, -3.0642e+00, -6.4810e-01,  2.1141e-01, -1.6788e+00],
        [-1.3890e-01, -2.1189e+01, -4.5278e-03, -8.8238e-01, -1.5347e+01,
         -6.0744e+00,  8.1044e+00, -7.3833e+00, -3.2559e-03,  3.1557e-01],
        [-1.2440e-01,  6.4135e+00, -5.0554e+00,  1.5261e+01,  2.8000e+00,
         -3.6334e-01, -1.0752e+01,  2.5589e+00, -7.0721e+00,  3.5643e+00],
        [-8.9704e-02, -3.4414e+00,  8.4931e-01, -2.8169e+00,  8.2631e-01,
         -4.1110e-01, -4.1625e+00, -3.8300e-01, -3.2884e-02, -9.3970e-01],
        [-8.7037e-02, -1.0643e+00, -4.6677e-01, -2.7870e-01, -3.3677e-01,
         -7.1235e-01, -3.1092e+00, -5.7276e-01,  3.9947e-01, -1.7085e+00],
        [-8.1144e-02,  7.5663e+00, -3.1059e-03,  3.4187e+00, -2.2174e+00,
         -8.5945e+00,  1.4823e+00, -1.4111e+01,  1.1735e-03, -1.1257e+01],
        [-5.3817e-03, -2.7253e+00,  5.2269e+00, -8.5124e-02, -1.3083e+01,
         -1.7758e+00,  2.1333e+00,  4.6917e-01,  1.0647e-01, -4.8057e+00],
        [ 1.6026e-01,  4.4959e+00, -2.8814e-03,  1.0113e+01, -1.0024e+01,
         -1.7380e+01, -9.6405e-01, -4.4485e+00, -1.4902e-03, -1.0425e+01],
        [-7.3688e-02, -9.3428e-01, -5.3286e-01, -1.2554e-01, -4.6731e-01,
         -6.5982e-01, -3.0940e+00, -6.2080e-01,  2.9562e-01, -1.7068e+00],
        [-8.7069e-02, -1.0638e+00, -4.6597e-01, -2.8034e-01, -3.3568e-01,
         -7.1271e-01, -3.1082e+00, -5.7304e-01,  4.0018e-01, -1.7082e+00]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-2.1632,  3.5872, -3.5924, -2.0990, -2.1424, -2.2637,  0.0929, -2.6230,
        -2.1318, -2.1428], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ -1.0907,  -4.9399,   0.5027,  -1.5456,  -1.1316,  -6.2682,  -0.9943,
          15.5313,  -1.1168,  -1.1313],
        [  1.0909,   4.9355,  -0.5232,   1.5456,   1.1316,   6.3496,   1.0161,
         -15.5356,   1.1169,   1.1313]], device='cuda:0'))])
loaded xi:  -238.52834
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -1609.926850324337
min fval:  -1609.926850324337
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-4.1389, -5.7448],
        [-0.7451, -3.4182],
        [-0.4845,  1.4325],
        [-2.5350,  7.0884],
        [11.8999,  6.2490],
        [-0.7372,  5.9829],
        [ 4.6564, -6.4763],
        [-4.9572, -6.5716],
        [-0.4845,  1.4325],
        [-1.7318,  6.6181]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-6.4729, -5.2973, -0.9339,  8.9735, -2.0739,  6.9817, -8.5431, -6.8318,
        -0.9339,  8.1596], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-0.0622, -0.0362, -0.0289, -0.3085, -0.2219, -0.2079, -0.3733, -0.1152,
         -0.0289, -0.2671],
        [ 1.5907, -0.3350,  0.2002, -3.5446, -5.8260, -0.5012,  2.7092,  3.0097,
          0.2002, -2.0384],
        [-3.2589, -1.2849,  0.2155,  8.4183, -0.1561,  4.4849, -5.7409, -5.2620,
          0.2155,  6.6101],
        [ 1.2354,  1.1038, -0.4727, -4.7748,  7.5525, -4.3954, -3.1416,  1.3268,
         -0.4727, -5.0753],
        [ 1.6189, -0.3408,  0.1875, -3.6193, -5.9104, -0.5484,  2.6123,  3.0295,
          0.1875, -2.1022],
        [-0.0622, -0.0362, -0.0289, -0.3085, -0.2219, -0.2079, -0.3733, -0.1152,
         -0.0289, -0.2671],
        [-0.0622, -0.0362, -0.0289, -0.3085, -0.2219, -0.2079, -0.3733, -0.1152,
         -0.0289, -0.2671],
        [-0.0623, -0.0362, -0.0289, -0.3085, -0.2220, -0.2079, -0.3732, -0.1152,
         -0.0289, -0.2671],
        [-0.0622, -0.0362, -0.0289, -0.3085, -0.2219, -0.2079, -0.3733, -0.1152,
         -0.0289, -0.2671],
        [-0.0622, -0.0362, -0.0289, -0.3085, -0.2219, -0.2079, -0.3733, -0.1152,
         -0.0289, -0.2671]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.7078, -1.1484,  0.9332, -1.0368, -1.0950, -0.7078, -0.7078, -0.7078,
        -0.7078, -0.7078], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-0.2212, -6.3211, 13.0620,  6.8173, -6.3713, -0.2212, -0.2212, -0.2213,
         -0.2212, -0.2212]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -1.5989,   0.8687],
        [ -2.7529, -13.8673],
        [  4.3782,   5.9794],
        [ -9.3863,   1.3791],
        [-12.2348,   8.2553],
        [ 18.6650,   8.5850],
        [ -8.7245,  -4.6428],
        [ 10.0206,   9.2702],
        [  2.5232,   3.1474],
        [  7.9964,  -0.7601]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([ -2.4038, -17.8804,  -5.3593,   6.6038,   9.2241,   6.4365,   0.6380,
          6.8233,  -7.7196,  -9.8066], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-5.8702e-02, -8.3003e-01, -5.7804e-01,  1.8977e-02, -6.0687e-01,
         -6.2390e-01, -3.0642e+00, -6.4810e-01,  2.1141e-01, -1.6788e+00],
        [-1.3890e-01, -2.1189e+01, -4.5278e-03, -8.8238e-01, -1.5347e+01,
         -6.0744e+00,  8.1044e+00, -7.3833e+00, -3.2559e-03,  3.1557e-01],
        [-1.2440e-01,  6.4135e+00, -5.0554e+00,  1.5261e+01,  2.8000e+00,
         -3.6334e-01, -1.0752e+01,  2.5589e+00, -7.0721e+00,  3.5643e+00],
        [-8.9704e-02, -3.4414e+00,  8.4931e-01, -2.8169e+00,  8.2631e-01,
         -4.1110e-01, -4.1625e+00, -3.8300e-01, -3.2884e-02, -9.3970e-01],
        [-8.7037e-02, -1.0643e+00, -4.6677e-01, -2.7870e-01, -3.3677e-01,
         -7.1235e-01, -3.1092e+00, -5.7276e-01,  3.9947e-01, -1.7085e+00],
        [-8.1144e-02,  7.5663e+00, -3.1059e-03,  3.4187e+00, -2.2174e+00,
         -8.5945e+00,  1.4823e+00, -1.4111e+01,  1.1735e-03, -1.1257e+01],
        [-5.3817e-03, -2.7253e+00,  5.2269e+00, -8.5124e-02, -1.3083e+01,
         -1.7758e+00,  2.1333e+00,  4.6917e-01,  1.0647e-01, -4.8057e+00],
        [ 1.6026e-01,  4.4959e+00, -2.8814e-03,  1.0113e+01, -1.0024e+01,
         -1.7380e+01, -9.6405e-01, -4.4485e+00, -1.4902e-03, -1.0425e+01],
        [-7.3688e-02, -9.3428e-01, -5.3286e-01, -1.2554e-01, -4.6731e-01,
         -6.5982e-01, -3.0940e+00, -6.2080e-01,  2.9562e-01, -1.7068e+00],
        [-8.7069e-02, -1.0638e+00, -4.6597e-01, -2.8034e-01, -3.3568e-01,
         -7.1271e-01, -3.1082e+00, -5.7304e-01,  4.0018e-01, -1.7082e+00]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-2.1632,  3.5872, -3.5924, -2.0990, -2.1424, -2.2637,  0.0929, -2.6230,
        -2.1318, -2.1428], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ -1.0907,  -4.9399,   0.5027,  -1.5456,  -1.1316,  -6.2682,  -0.9943,
          15.5313,  -1.1168,  -1.1313],
        [  1.0909,   4.9355,  -0.5232,   1.5456,   1.1316,   6.3496,   1.0161,
         -15.5356,   1.1169,   1.1313]], device='cuda:0'))])
xi:  [-238.52834]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 437.70336159658774
W_T_median: 112.36360383042144
W_T_pctile_5: -388.3975217320878
W_T_CVAR_5_pct: -468.22205596586736
Average q (qsum/M+1):  56.371034683719756
Optimal xi:  [-238.52834]
Expected(across Rb) median(across samples) p_equity:  0.37303767502307894
obj fun:  tensor(-1609.9269, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 0.2
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.4561,  1.2588],
        [-0.4666,  1.2580],
        [-0.4666,  1.2580],
        [-5.0807,  9.4322],
        [11.2138,  6.1459],
        [-0.4666,  1.2580],
        [ 4.6680, -8.1230],
        [-9.2061, -9.3460],
        [-0.4666,  1.2580],
        [-4.7173,  8.7305]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-1.2775, -1.2834, -1.2834, 10.2981, -5.4001, -1.2834, -9.5057, -8.1704,
        -1.2834,  9.0262], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ 1.4308e-02,  1.4452e-02,  1.4452e-02, -1.3485e-01, -7.9806e-02,
          1.4452e-02, -5.2798e-01, -2.5189e-02,  1.4452e-02, -6.9739e-02],
        [-6.8767e-03, -2.2506e-02, -2.2505e-02, -6.6459e+00,  2.6381e+00,
         -2.2505e-02,  3.1106e+00,  6.6111e+00, -2.2506e-02, -4.4528e+00],
        [ 1.0495e-02, -1.5164e-02, -1.5164e-02,  8.4343e+00, -1.0516e+01,
         -1.5163e-02, -4.3239e+00, -7.4672e+00, -1.5164e-02,  5.5350e+00],
        [ 1.4308e-02,  1.4452e-02,  1.4452e-02, -1.3485e-01, -7.9806e-02,
          1.4452e-02, -5.2798e-01, -2.5189e-02,  1.4452e-02, -6.9739e-02],
        [-5.8258e-03, -3.8990e-02, -3.8990e-02, -7.0184e+00,  2.9884e+00,
         -3.8988e-02,  3.1813e+00,  6.9219e+00, -3.8990e-02, -4.7356e+00],
        [ 1.4308e-02,  1.4452e-02,  1.4452e-02, -1.3485e-01, -7.9806e-02,
          1.4452e-02, -5.2798e-01, -2.5189e-02,  1.4452e-02, -6.9739e-02],
        [ 1.4308e-02,  1.4452e-02,  1.4452e-02, -1.3485e-01, -7.9806e-02,
          1.4452e-02, -5.2798e-01, -2.5189e-02,  1.4452e-02, -6.9739e-02],
        [ 1.4308e-02,  1.4452e-02,  1.4452e-02, -1.3485e-01, -7.9806e-02,
          1.4452e-02, -5.2798e-01, -2.5189e-02,  1.4452e-02, -6.9739e-02],
        [ 1.4308e-02,  1.4452e-02,  1.4452e-02, -1.3485e-01, -7.9806e-02,
          1.4452e-02, -5.2798e-01, -2.5189e-02,  1.4452e-02, -6.9739e-02],
        [ 1.4308e-02,  1.4452e-02,  1.4452e-02, -1.3485e-01, -7.9806e-02,
          1.4452e-02, -5.2798e-01, -2.5189e-02,  1.4452e-02, -6.9739e-02]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.9292, -1.8017,  0.9726, -0.9292, -1.7933, -0.9292, -0.9292, -0.9292,
        -0.9292, -0.9292], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-0.0460, -7.3332, 13.2646, -0.0460, -7.9495, -0.0460, -0.0460, -0.0460,
         -0.0460, -0.0460]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -5.1316,   4.2374],
        [ -2.5040, -20.7618],
        [  5.2570,   8.6005],
        [-10.1108,   1.3759],
        [ -9.6698,  11.4549],
        [ 19.4939,  11.0472],
        [ -7.2101,  -5.9706],
        [ 11.9200,  11.4905],
        [ 11.3500,   1.9336],
        [ 13.3127,  -1.3114]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([  1.6498, -22.6363,  -0.0802,   7.0630,  11.7640,   8.9654,  -7.5415,
          8.4686, -12.1324, -14.9677], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 9.3877e-01,  1.2121e+00, -1.0750e+00,  5.1355e+00,  3.8858e+00,
         -4.2265e+00,  4.2813e-02, -2.0955e+00, -2.8352e-01, -3.8870e+00],
        [-1.2079e+00, -1.8066e+01, -3.3790e-01,  1.2187e+00, -9.6423e+00,
         -3.4054e+00,  3.0486e+00, -1.2330e+01, -6.1364e-02, -1.1727e+00],
        [ 5.6911e+00,  1.9335e+00, -3.4729e+00,  3.0292e+00,  5.5800e+00,
          1.0105e-01, -7.2720e+00,  3.0117e+00, -8.3774e+00,  5.1809e+00],
        [ 7.1021e-01, -3.9832e+00,  6.2533e+00, -9.3004e+00,  1.0965e+00,
         -2.4313e+00, -4.2082e+00, -2.2240e+00,  1.5422e+00,  5.5827e+00],
        [-1.1709e-01, -1.3803e+00, -2.5425e-01, -3.6823e-01, -2.3894e-01,
         -1.8313e+00, -6.0342e-01, -1.2471e+00, -7.1061e-02, -8.9691e-01],
        [ 4.7386e-01,  1.1272e+01,  4.2464e-02,  2.7264e+00, -5.4602e+00,
         -1.0311e+01, -5.5207e-01, -1.1984e+01, -1.2814e-01, -1.5573e+01],
        [-6.7320e-01, -1.1141e+01,  1.6208e+00,  3.3373e+00, -2.1205e+01,
          7.6113e-01,  7.7581e-01, -4.0823e+00, -1.0834e+00, -7.7412e+00],
        [-6.7278e-02,  5.7309e+00, -3.2482e-02,  8.8396e+00, -3.2181e+00,
         -2.3031e+01,  1.2770e+00, -3.4827e+00, -1.0264e-02, -7.1255e+00],
        [-4.9361e-01, -1.0023e+00, -4.0412e+00, -7.3526e+00, -1.6567e+00,
         -5.1277e-01, -2.1208e+00,  1.4167e+00,  2.9006e+00,  3.3896e-01],
        [-1.1709e-01, -1.3800e+00, -2.5422e-01, -3.6817e-01, -2.3894e-01,
         -1.8307e+00, -6.0313e-01, -1.2469e+00, -7.1054e-02, -8.9656e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-4.3412,  6.3875, -5.8879, -4.7981, -2.8360, -3.5999, -0.3309, -7.1492,
        -4.3717, -2.8371], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  3.1324, -10.2967,   0.4498,  -1.6771,   0.0632,  -7.3438,  -2.2141,
          11.9486,   3.3284,   0.0632],
        [ -3.1322,  10.2965,  -0.4696,   1.6771,  -0.0632,   7.3777,   2.2290,
         -11.9492,  -3.3284,  -0.0632]], device='cuda:0'))])
loaded xi:  -73.90644
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -1414.2991225902251
min fval:  -1414.2991225902251
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-0.4561,  1.2588],
        [-0.4666,  1.2580],
        [-0.4666,  1.2580],
        [-5.0807,  9.4322],
        [11.2138,  6.1459],
        [-0.4666,  1.2580],
        [ 4.6680, -8.1230],
        [-9.2061, -9.3460],
        [-0.4666,  1.2580],
        [-4.7173,  8.7305]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([-1.2775, -1.2834, -1.2834, 10.2981, -5.4001, -1.2834, -9.5057, -8.1704,
        -1.2834,  9.0262], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ 1.4308e-02,  1.4452e-02,  1.4452e-02, -1.3485e-01, -7.9806e-02,
          1.4452e-02, -5.2798e-01, -2.5189e-02,  1.4452e-02, -6.9739e-02],
        [-6.8767e-03, -2.2506e-02, -2.2505e-02, -6.6459e+00,  2.6381e+00,
         -2.2505e-02,  3.1106e+00,  6.6111e+00, -2.2506e-02, -4.4528e+00],
        [ 1.0495e-02, -1.5164e-02, -1.5164e-02,  8.4343e+00, -1.0516e+01,
         -1.5163e-02, -4.3239e+00, -7.4672e+00, -1.5164e-02,  5.5350e+00],
        [ 1.4308e-02,  1.4452e-02,  1.4452e-02, -1.3485e-01, -7.9806e-02,
          1.4452e-02, -5.2798e-01, -2.5189e-02,  1.4452e-02, -6.9739e-02],
        [-5.8258e-03, -3.8990e-02, -3.8990e-02, -7.0184e+00,  2.9884e+00,
         -3.8988e-02,  3.1813e+00,  6.9219e+00, -3.8990e-02, -4.7356e+00],
        [ 1.4308e-02,  1.4452e-02,  1.4452e-02, -1.3485e-01, -7.9806e-02,
          1.4452e-02, -5.2798e-01, -2.5189e-02,  1.4452e-02, -6.9739e-02],
        [ 1.4308e-02,  1.4452e-02,  1.4452e-02, -1.3485e-01, -7.9806e-02,
          1.4452e-02, -5.2798e-01, -2.5189e-02,  1.4452e-02, -6.9739e-02],
        [ 1.4308e-02,  1.4452e-02,  1.4452e-02, -1.3485e-01, -7.9806e-02,
          1.4452e-02, -5.2798e-01, -2.5189e-02,  1.4452e-02, -6.9739e-02],
        [ 1.4308e-02,  1.4452e-02,  1.4452e-02, -1.3485e-01, -7.9806e-02,
          1.4452e-02, -5.2798e-01, -2.5189e-02,  1.4452e-02, -6.9739e-02],
        [ 1.4308e-02,  1.4452e-02,  1.4452e-02, -1.3485e-01, -7.9806e-02,
          1.4452e-02, -5.2798e-01, -2.5189e-02,  1.4452e-02, -6.9739e-02]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-0.9292, -1.8017,  0.9726, -0.9292, -1.7933, -0.9292, -0.9292, -0.9292,
        -0.9292, -0.9292], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-0.0460, -7.3332, 13.2646, -0.0460, -7.9495, -0.0460, -0.0460, -0.0460,
         -0.0460, -0.0460]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -5.1316,   4.2374],
        [ -2.5040, -20.7618],
        [  5.2570,   8.6005],
        [-10.1108,   1.3759],
        [ -9.6698,  11.4549],
        [ 19.4939,  11.0472],
        [ -7.2101,  -5.9706],
        [ 11.9200,  11.4905],
        [ 11.3500,   1.9336],
        [ 13.3127,  -1.3114]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([  1.6498, -22.6363,  -0.0802,   7.0630,  11.7640,   8.9654,  -7.5415,
          8.4686, -12.1324, -14.9677], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 9.3877e-01,  1.2121e+00, -1.0750e+00,  5.1355e+00,  3.8858e+00,
         -4.2265e+00,  4.2813e-02, -2.0955e+00, -2.8352e-01, -3.8870e+00],
        [-1.2079e+00, -1.8066e+01, -3.3790e-01,  1.2187e+00, -9.6423e+00,
         -3.4054e+00,  3.0486e+00, -1.2330e+01, -6.1364e-02, -1.1727e+00],
        [ 5.6911e+00,  1.9335e+00, -3.4729e+00,  3.0292e+00,  5.5800e+00,
          1.0105e-01, -7.2720e+00,  3.0117e+00, -8.3774e+00,  5.1809e+00],
        [ 7.1021e-01, -3.9832e+00,  6.2533e+00, -9.3004e+00,  1.0965e+00,
         -2.4313e+00, -4.2082e+00, -2.2240e+00,  1.5422e+00,  5.5827e+00],
        [-1.1709e-01, -1.3803e+00, -2.5425e-01, -3.6823e-01, -2.3894e-01,
         -1.8313e+00, -6.0342e-01, -1.2471e+00, -7.1061e-02, -8.9691e-01],
        [ 4.7386e-01,  1.1272e+01,  4.2464e-02,  2.7264e+00, -5.4602e+00,
         -1.0311e+01, -5.5207e-01, -1.1984e+01, -1.2814e-01, -1.5573e+01],
        [-6.7320e-01, -1.1141e+01,  1.6208e+00,  3.3373e+00, -2.1205e+01,
          7.6113e-01,  7.7581e-01, -4.0823e+00, -1.0834e+00, -7.7412e+00],
        [-6.7278e-02,  5.7309e+00, -3.2482e-02,  8.8396e+00, -3.2181e+00,
         -2.3031e+01,  1.2770e+00, -3.4827e+00, -1.0264e-02, -7.1255e+00],
        [-4.9361e-01, -1.0023e+00, -4.0412e+00, -7.3526e+00, -1.6567e+00,
         -5.1277e-01, -2.1208e+00,  1.4167e+00,  2.9006e+00,  3.3896e-01],
        [-1.1709e-01, -1.3800e+00, -2.5422e-01, -3.6817e-01, -2.3894e-01,
         -1.8307e+00, -6.0313e-01, -1.2469e+00, -7.1054e-02, -8.9656e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([-4.3412,  6.3875, -5.8879, -4.7981, -2.8360, -3.5999, -0.3309, -7.1492,
        -4.3717, -2.8371], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  3.1324, -10.2967,   0.4498,  -1.6771,   0.0632,  -7.3438,  -2.2141,
          11.9486,   3.3284,   0.0632],
        [ -3.1322,  10.2965,  -0.4696,   1.6771,  -0.0632,   7.3777,   2.2290,
         -11.9492,  -3.3284,  -0.0632]], device='cuda:0'))])
xi:  [-73.90644]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 363.5560821161602
W_T_median: 118.1471747923335
W_T_pctile_5: -222.2939689014643
W_T_CVAR_5_pct: -288.1789402175638
Average q (qsum/M+1):  55.09237572454637
Optimal xi:  [-73.90644]
Expected(across Rb) median(across samples) p_equity:  0.31241517066955565
obj fun:  tensor(-1414.2991, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 0.5
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -1.3091,   0.8958],
        [ -1.3096,   0.8957],
        [ -1.3096,   0.8957],
        [ -9.6741,   7.5377],
        [ 12.7325,   1.8595],
        [ -1.3096,   0.8957],
        [ -1.3106,   0.8955],
        [ -4.3914, -11.8220],
        [ -1.3096,   0.8957],
        [-12.0946,   9.1290]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -2.1255,  -2.1258,  -2.1258,  10.4282, -11.6893,  -2.1258,  -2.1262,
        -10.7730,  -2.1258,   7.2934], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-1.0489e-02, -1.0484e-02, -1.0484e-02, -3.9572e-01, -7.6625e-02,
         -1.0484e-02, -1.0476e-02, -1.8188e-02, -1.0484e-02,  7.4689e-03],
        [ 2.2952e-02,  2.2542e-02,  2.2542e-02, -8.0022e+00,  8.1215e+00,
          2.2542e-02,  2.1836e-02,  1.0083e+01,  2.2542e-02, -2.9790e+00],
        [ 1.5494e-01,  1.5393e-01,  1.5393e-01,  9.7384e+00, -1.3401e+01,
          1.5393e-01,  1.5217e-01, -1.2093e+01,  1.5393e-01,  7.5585e+00],
        [-1.0489e-02, -1.0484e-02, -1.0484e-02, -3.9572e-01, -7.6625e-02,
         -1.0484e-02, -1.0476e-02, -1.8188e-02, -1.0484e-02,  7.4688e-03],
        [ 1.4645e-01,  1.4523e-01,  1.4523e-01, -8.5133e+00,  9.5541e+00,
          1.4523e-01,  1.4312e-01,  1.0843e+01,  1.4523e-01, -4.4412e+00],
        [-1.0489e-02, -1.0484e-02, -1.0484e-02, -3.9572e-01, -7.6625e-02,
         -1.0484e-02, -1.0476e-02, -1.8188e-02, -1.0484e-02,  7.4689e-03],
        [-1.0489e-02, -1.0484e-02, -1.0484e-02, -3.9572e-01, -7.6625e-02,
         -1.0484e-02, -1.0476e-02, -1.8188e-02, -1.0484e-02,  7.4688e-03],
        [-1.0489e-02, -1.0484e-02, -1.0484e-02, -3.9572e-01, -7.6625e-02,
         -1.0484e-02, -1.0476e-02, -1.8188e-02, -1.0484e-02,  7.4689e-03],
        [-1.0489e-02, -1.0484e-02, -1.0484e-02, -3.9572e-01, -7.6625e-02,
         -1.0484e-02, -1.0476e-02, -1.8188e-02, -1.0484e-02,  7.4689e-03],
        [-1.0489e-02, -1.0484e-02, -1.0484e-02, -3.9572e-01, -7.6625e-02,
         -1.0484e-02, -1.0476e-02, -1.8188e-02, -1.0484e-02,  7.4688e-03]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.4704,  0.6679, -1.6946, -1.4704,  0.9126, -1.4704, -1.4704, -1.4704,
        -1.4704, -1.4704], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 1.0008e-02, -9.0503e+00,  1.4648e+01,  1.0008e-02, -1.0938e+01,
          1.0008e-02,  1.0008e-02,  1.0008e-02,  1.0008e-02,  1.0008e-02]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -9.4718,   5.0497],
        [ -5.5034, -23.5645],
        [  1.4310,   5.3430],
        [-13.3469,   0.0619],
        [-16.9376,  14.4928],
        [ 19.7092,  12.2921],
        [ -2.1297,   0.1808],
        [ 15.5746,  13.1409],
        [ 14.4860,   2.7244],
        [ 16.7227,  -1.4261]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([  4.2440, -23.8773,  -0.1731,   5.3889,  15.5687,  10.3057,  -3.9254,
          9.5028, -15.3828, -17.3300], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 1.1576e+00, -4.0645e+00,  7.9912e-01,  6.0704e+00, -7.1930e+00,
         -4.8465e+00,  4.1308e-01, -2.2807e+00,  1.1561e-01,  1.2754e-01],
        [ 5.2515e-01, -1.1550e+01, -5.9567e-01,  4.3127e+00, -6.1019e+00,
         -2.6832e+00,  5.1100e-01, -7.9751e+00, -6.9172e-02, -6.6599e-01],
        [ 8.1417e+00, -3.8026e-01, -3.1753e+00,  1.9435e+00,  2.3783e+00,
          2.0905e+00, -3.8813e-02,  3.7356e+00, -8.3399e+00,  6.0062e-01],
        [-1.5265e+00, -1.8412e+00,  1.3218e+00, -1.4014e+00,  1.3896e+00,
         -1.7312e+00, -2.7656e-01, -1.0557e+00,  5.6152e-02, -1.1063e-01],
        [-1.3830e+00, -1.7246e+00,  1.0348e+00, -8.8994e-01,  1.1479e+00,
         -1.9637e+00, -2.4380e-02, -1.2926e+00, -4.5593e-02, -6.6229e-01],
        [ 2.6654e+00,  1.2911e+01, -1.3475e-01,  1.7879e+00, -4.1331e+00,
         -1.1374e+01,  2.9066e-01, -2.3583e+00, -6.8013e-02, -1.5331e+01],
        [ 6.3681e-01, -1.9129e+01,  2.4160e+00,  2.4604e+00, -1.6207e+01,
          5.1199e-01,  2.3774e-01, -4.7057e+00, -2.6115e+00, -1.7034e+01],
        [ 5.9766e-02,  9.3267e+00, -1.7661e-01,  9.0622e+00,  1.7523e-01,
         -2.8250e+01, -5.4324e-02, -5.3691e+00,  2.2862e-03, -6.1879e+00],
        [-7.6855e-01, -4.2916e+00,  2.5317e+00, -2.6517e+00, -6.4277e+00,
         -1.2435e+00,  3.2325e-02,  8.4997e-01,  2.2604e+00,  5.3791e+00],
        [-1.4467e+00, -1.7794e+00,  1.1494e+00, -1.0763e+00,  1.2448e+00,
         -1.8812e+00, -1.0016e-01, -1.2083e+00, -6.2964e-03, -4.7525e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -1.7483,   1.2469,  -5.8620,  -2.7054,  -2.9336,  -4.0084,   0.7780,
        -10.2660,  -5.7532,  -2.8414], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  4.0658,  -4.9398,   0.5819,  -0.7171,  -0.4688,  -6.1420,  -4.8171,
          12.8741,   3.5712,  -0.5647],
        [ -4.0633,   4.9398,  -0.6015,   0.7172,   0.4688,   6.1676,   4.8253,
         -12.8653,  -3.5712,   0.5647]], device='cuda:0'))])
loaded xi:  0.00108761
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -1156.6439078605604
min fval:  -1156.6439078605604
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -1.3091,   0.8958],
        [ -1.3096,   0.8957],
        [ -1.3096,   0.8957],
        [ -9.6741,   7.5377],
        [ 12.7325,   1.8595],
        [ -1.3096,   0.8957],
        [ -1.3106,   0.8955],
        [ -4.3914, -11.8220],
        [ -1.3096,   0.8957],
        [-12.0946,   9.1290]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -2.1255,  -2.1258,  -2.1258,  10.4282, -11.6893,  -2.1258,  -2.1262,
        -10.7730,  -2.1258,   7.2934], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-1.0489e-02, -1.0484e-02, -1.0484e-02, -3.9572e-01, -7.6625e-02,
         -1.0484e-02, -1.0476e-02, -1.8188e-02, -1.0484e-02,  7.4689e-03],
        [ 2.2952e-02,  2.2542e-02,  2.2542e-02, -8.0022e+00,  8.1215e+00,
          2.2542e-02,  2.1836e-02,  1.0083e+01,  2.2542e-02, -2.9790e+00],
        [ 1.5494e-01,  1.5393e-01,  1.5393e-01,  9.7384e+00, -1.3401e+01,
          1.5393e-01,  1.5217e-01, -1.2093e+01,  1.5393e-01,  7.5585e+00],
        [-1.0489e-02, -1.0484e-02, -1.0484e-02, -3.9572e-01, -7.6625e-02,
         -1.0484e-02, -1.0476e-02, -1.8188e-02, -1.0484e-02,  7.4688e-03],
        [ 1.4645e-01,  1.4523e-01,  1.4523e-01, -8.5133e+00,  9.5541e+00,
          1.4523e-01,  1.4312e-01,  1.0843e+01,  1.4523e-01, -4.4412e+00],
        [-1.0489e-02, -1.0484e-02, -1.0484e-02, -3.9572e-01, -7.6625e-02,
         -1.0484e-02, -1.0476e-02, -1.8188e-02, -1.0484e-02,  7.4689e-03],
        [-1.0489e-02, -1.0484e-02, -1.0484e-02, -3.9572e-01, -7.6625e-02,
         -1.0484e-02, -1.0476e-02, -1.8188e-02, -1.0484e-02,  7.4688e-03],
        [-1.0489e-02, -1.0484e-02, -1.0484e-02, -3.9572e-01, -7.6625e-02,
         -1.0484e-02, -1.0476e-02, -1.8188e-02, -1.0484e-02,  7.4689e-03],
        [-1.0489e-02, -1.0484e-02, -1.0484e-02, -3.9572e-01, -7.6625e-02,
         -1.0484e-02, -1.0476e-02, -1.8188e-02, -1.0484e-02,  7.4689e-03],
        [-1.0489e-02, -1.0484e-02, -1.0484e-02, -3.9572e-01, -7.6625e-02,
         -1.0484e-02, -1.0476e-02, -1.8188e-02, -1.0484e-02,  7.4688e-03]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.4704,  0.6679, -1.6946, -1.4704,  0.9126, -1.4704, -1.4704, -1.4704,
        -1.4704, -1.4704], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ 1.0008e-02, -9.0503e+00,  1.4648e+01,  1.0008e-02, -1.0938e+01,
          1.0008e-02,  1.0008e-02,  1.0008e-02,  1.0008e-02,  1.0008e-02]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[ -9.4718,   5.0497],
        [ -5.5034, -23.5645],
        [  1.4310,   5.3430],
        [-13.3469,   0.0619],
        [-16.9376,  14.4928],
        [ 19.7092,  12.2921],
        [ -2.1297,   0.1808],
        [ 15.5746,  13.1409],
        [ 14.4860,   2.7244],
        [ 16.7227,  -1.4261]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([  4.2440, -23.8773,  -0.1731,   5.3889,  15.5687,  10.3057,  -3.9254,
          9.5028, -15.3828, -17.3300], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[ 1.1576e+00, -4.0645e+00,  7.9912e-01,  6.0704e+00, -7.1930e+00,
         -4.8465e+00,  4.1308e-01, -2.2807e+00,  1.1561e-01,  1.2754e-01],
        [ 5.2515e-01, -1.1550e+01, -5.9567e-01,  4.3127e+00, -6.1019e+00,
         -2.6832e+00,  5.1100e-01, -7.9751e+00, -6.9172e-02, -6.6599e-01],
        [ 8.1417e+00, -3.8026e-01, -3.1753e+00,  1.9435e+00,  2.3783e+00,
          2.0905e+00, -3.8813e-02,  3.7356e+00, -8.3399e+00,  6.0062e-01],
        [-1.5265e+00, -1.8412e+00,  1.3218e+00, -1.4014e+00,  1.3896e+00,
         -1.7312e+00, -2.7656e-01, -1.0557e+00,  5.6152e-02, -1.1063e-01],
        [-1.3830e+00, -1.7246e+00,  1.0348e+00, -8.8994e-01,  1.1479e+00,
         -1.9637e+00, -2.4380e-02, -1.2926e+00, -4.5593e-02, -6.6229e-01],
        [ 2.6654e+00,  1.2911e+01, -1.3475e-01,  1.7879e+00, -4.1331e+00,
         -1.1374e+01,  2.9066e-01, -2.3583e+00, -6.8013e-02, -1.5331e+01],
        [ 6.3681e-01, -1.9129e+01,  2.4160e+00,  2.4604e+00, -1.6207e+01,
          5.1199e-01,  2.3774e-01, -4.7057e+00, -2.6115e+00, -1.7034e+01],
        [ 5.9766e-02,  9.3267e+00, -1.7661e-01,  9.0622e+00,  1.7523e-01,
         -2.8250e+01, -5.4324e-02, -5.3691e+00,  2.2862e-03, -6.1879e+00],
        [-7.6855e-01, -4.2916e+00,  2.5317e+00, -2.6517e+00, -6.4277e+00,
         -1.2435e+00,  3.2325e-02,  8.4997e-01,  2.2604e+00,  5.3791e+00],
        [-1.4467e+00, -1.7794e+00,  1.1494e+00, -1.0763e+00,  1.2448e+00,
         -1.8812e+00, -1.0016e-01, -1.2083e+00, -6.2964e-03, -4.7525e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -1.7483,   1.2469,  -5.8620,  -2.7054,  -2.9336,  -4.0084,   0.7780,
        -10.2660,  -5.7532,  -2.8414], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  4.0658,  -4.9398,   0.5819,  -0.7171,  -0.4688,  -6.1420,  -4.8171,
          12.8741,   3.5712,  -0.5647],
        [ -4.0633,   4.9398,  -0.6015,   0.7172,   0.4688,   6.1676,   4.8253,
         -12.8653,  -3.5712,   0.5647]], device='cuda:0'))])
xi:  [0.00108761]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 522.8357673908869
W_T_median: 225.6022401110096
W_T_pctile_5: -116.75411500171843
W_T_CVAR_5_pct: -169.79490498970816
Average q (qsum/M+1):  53.68143192414315
Optimal xi:  [0.00108761]
Expected(across Rb) median(across samples) p_equity:  0.31704471483826635
obj fun:  tensor(-1156.6439, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 1.0
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -1.6508,   0.7457],
        [ -1.6508,   0.7457],
        [ -1.6508,   0.7457],
        [-14.3970,   6.1378],
        [ 15.2685,   4.0596],
        [ -1.6508,   0.7457],
        [ -1.6508,   0.7457],
        [ -0.1330, -12.9843],
        [ -1.6508,   0.7457],
        [-13.2359,  10.8740]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -2.3750,  -2.3750,  -2.3750,  12.2624, -15.1507,  -2.3750,  -2.3750,
        -12.2149,  -2.3750,   4.4317], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-2.9039e-02, -2.9039e-02, -2.9039e-02, -4.6019e-01, -1.9890e-01,
         -2.9039e-02, -2.9039e-02, -4.4842e-02, -2.9039e-02,  4.0459e-03],
        [ 2.7446e-01,  2.7446e-01,  2.7446e-01, -7.8326e+00,  4.9082e+00,
          2.7446e-01,  2.7446e-01,  1.1331e+01,  2.7446e-01, -2.7300e-01],
        [ 2.5921e-01,  2.5922e-01,  2.5922e-01,  1.1742e+01, -1.1083e+01,
          2.5922e-01,  2.5922e-01, -1.4992e+01,  2.5922e-01,  3.9943e+00],
        [-2.9039e-02, -2.9039e-02, -2.9039e-02, -4.6019e-01, -1.9890e-01,
         -2.9039e-02, -2.9039e-02, -4.4842e-02, -2.9039e-02,  4.0459e-03],
        [ 3.8371e-01,  3.8371e-01,  3.8371e-01, -1.0074e+01,  8.5103e+00,
          3.8371e-01,  3.8371e-01,  1.3865e+01,  3.8371e-01, -2.8526e+00],
        [-2.9039e-02, -2.9039e-02, -2.9039e-02, -4.6019e-01, -1.9890e-01,
         -2.9039e-02, -2.9039e-02, -4.4842e-02, -2.9039e-02,  4.0459e-03],
        [-2.9039e-02, -2.9039e-02, -2.9039e-02, -4.6019e-01, -1.9890e-01,
         -2.9039e-02, -2.9039e-02, -4.4842e-02, -2.9039e-02,  4.0459e-03],
        [-2.9039e-02, -2.9039e-02, -2.9039e-02, -4.6019e-01, -1.9890e-01,
         -2.9039e-02, -2.9039e-02, -4.4842e-02, -2.9039e-02,  4.0459e-03],
        [-2.9039e-02, -2.9039e-02, -2.9039e-02, -4.6019e-01, -1.9890e-01,
         -2.9039e-02, -2.9039e-02, -4.4842e-02, -2.9039e-02,  4.0459e-03],
        [-2.9039e-02, -2.9039e-02, -2.9039e-02, -4.6019e-01, -1.9890e-01,
         -2.9039e-02, -2.9039e-02, -4.4842e-02, -2.9039e-02,  4.0459e-03]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.9150,  0.1570, -2.0682, -1.9150,  0.9426, -1.9150, -1.9150, -1.9150,
        -1.9150, -1.9150], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.0285,  -7.0881,  13.6456,  -0.0285, -11.4720,  -0.0285,  -0.0285,
          -0.0285,  -0.0285,  -0.0285]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[-13.5787,   4.8977],
        [ -7.1116, -23.5230],
        [  0.7786,   4.0616],
        [-13.2794,  -0.6098],
        [-21.5525,  15.7616],
        [ 20.1068,  13.2408],
        [ -2.0882,   0.1799],
        [ 20.6989,  15.0140],
        [ 14.3842,   3.8999],
        [ 19.1301,  -1.5046]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([  7.4289, -23.6507,  -0.5449,   4.3807,  18.4862,  11.2769,  -4.1346,
         10.1445, -17.1276, -19.1134], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-2.5508e-01, -1.3337e+00, -4.5373e-01, -4.3646e-01, -4.7494e-01,
         -2.3093e+00, -2.6612e-04, -1.7106e+00, -1.3855e-01, -6.3737e-01],
        [ 2.5404e+00, -1.4519e+01, -1.3369e+00,  3.5678e+00, -2.4435e+00,
         -5.1699e+00,  4.3364e-01, -4.5103e+00, -4.3017e-01, -1.0596e+00],
        [ 1.0295e+01, -9.4183e-01, -2.6663e+00,  1.2403e+00,  6.7114e-02,
          1.9582e+00, -2.0044e-02,  5.4866e+00, -8.9307e+00,  4.2486e-01],
        [-2.5522e-01, -1.3278e+00, -4.4919e-01, -4.3681e-01, -4.6847e-01,
         -2.2993e+00, -2.8528e-04, -1.7163e+00, -1.3610e-01, -6.5202e-01],
        [ 9.7372e-01, -2.3758e-01, -3.6205e-01,  3.2494e-01, -1.5278e+00,
         -3.1101e+00, -1.8564e-02, -1.5424e+00, -4.1850e-01,  5.4811e-01],
        [ 1.6347e+00,  1.3982e+01, -8.3744e-01,  2.0391e+00, -3.9359e+00,
         -1.2478e+01,  1.6739e-01, -1.0053e+00, -9.6723e-03, -1.4798e+01],
        [ 3.3990e+00, -2.3020e+01,  3.6021e+00,  1.9719e+00, -1.1665e+01,
         -5.7457e-01,  1.1881e-01, -3.1139e+00, -9.0325e-01, -1.3451e+01],
        [ 1.2681e+00,  1.2619e+01, -2.1575e-01,  8.4386e+00,  1.7402e+00,
         -2.7371e+01, -3.8878e-02, -1.3424e+00,  2.9660e-04, -5.6537e+00],
        [ 2.3705e+00, -3.9240e+00, -7.5741e-01,  4.9478e+00,  6.0408e-01,
         -9.1193e-01,  4.0271e-01, -6.1322e-01, -1.0610e+00,  6.7189e+00],
        [-2.5549e-01, -1.3337e+00, -4.5104e-01, -4.3708e-01, -4.7126e-01,
         -2.3051e+00, -2.8425e-04, -1.7159e+00, -1.3695e-01, -6.4701e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -3.1893,   3.1273,  -6.6235,  -3.1821,  -3.1881,  -4.4780,   0.0186,
        -14.2894,  -6.5468,  -3.1799], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  0.0819,  -2.4970,   0.4999,   0.0784,   1.1019,  -6.2183,  -5.6472,
          13.1054,   3.7407,   0.0796],
        [ -0.0819,   2.4970,  -0.5194,  -0.0784,  -1.1019,   6.2402,   5.6514,
         -13.1056,  -3.7407,  -0.0796]], device='cuda:0'))])
loaded xi:  0.00224177
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -941.2171286729904
min fval:  -941.2171286729904
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -1.6508,   0.7457],
        [ -1.6508,   0.7457],
        [ -1.6508,   0.7457],
        [-14.3970,   6.1378],
        [ 15.2685,   4.0596],
        [ -1.6508,   0.7457],
        [ -1.6508,   0.7457],
        [ -0.1330, -12.9843],
        [ -1.6508,   0.7457],
        [-13.2359,  10.8740]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -2.3750,  -2.3750,  -2.3750,  12.2624, -15.1507,  -2.3750,  -2.3750,
        -12.2149,  -2.3750,   4.4317], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-2.9039e-02, -2.9039e-02, -2.9039e-02, -4.6019e-01, -1.9890e-01,
         -2.9039e-02, -2.9039e-02, -4.4842e-02, -2.9039e-02,  4.0459e-03],
        [ 2.7446e-01,  2.7446e-01,  2.7446e-01, -7.8326e+00,  4.9082e+00,
          2.7446e-01,  2.7446e-01,  1.1331e+01,  2.7446e-01, -2.7300e-01],
        [ 2.5921e-01,  2.5922e-01,  2.5922e-01,  1.1742e+01, -1.1083e+01,
          2.5922e-01,  2.5922e-01, -1.4992e+01,  2.5922e-01,  3.9943e+00],
        [-2.9039e-02, -2.9039e-02, -2.9039e-02, -4.6019e-01, -1.9890e-01,
         -2.9039e-02, -2.9039e-02, -4.4842e-02, -2.9039e-02,  4.0459e-03],
        [ 3.8371e-01,  3.8371e-01,  3.8371e-01, -1.0074e+01,  8.5103e+00,
          3.8371e-01,  3.8371e-01,  1.3865e+01,  3.8371e-01, -2.8526e+00],
        [-2.9039e-02, -2.9039e-02, -2.9039e-02, -4.6019e-01, -1.9890e-01,
         -2.9039e-02, -2.9039e-02, -4.4842e-02, -2.9039e-02,  4.0459e-03],
        [-2.9039e-02, -2.9039e-02, -2.9039e-02, -4.6019e-01, -1.9890e-01,
         -2.9039e-02, -2.9039e-02, -4.4842e-02, -2.9039e-02,  4.0459e-03],
        [-2.9039e-02, -2.9039e-02, -2.9039e-02, -4.6019e-01, -1.9890e-01,
         -2.9039e-02, -2.9039e-02, -4.4842e-02, -2.9039e-02,  4.0459e-03],
        [-2.9039e-02, -2.9039e-02, -2.9039e-02, -4.6019e-01, -1.9890e-01,
         -2.9039e-02, -2.9039e-02, -4.4842e-02, -2.9039e-02,  4.0459e-03],
        [-2.9039e-02, -2.9039e-02, -2.9039e-02, -4.6019e-01, -1.9890e-01,
         -2.9039e-02, -2.9039e-02, -4.4842e-02, -2.9039e-02,  4.0459e-03]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-1.9150,  0.1570, -2.0682, -1.9150,  0.9426, -1.9150, -1.9150, -1.9150,
        -1.9150, -1.9150], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.0285,  -7.0881,  13.6456,  -0.0285, -11.4720,  -0.0285,  -0.0285,
          -0.0285,  -0.0285,  -0.0285]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[-13.5787,   4.8977],
        [ -7.1116, -23.5230],
        [  0.7786,   4.0616],
        [-13.2794,  -0.6098],
        [-21.5525,  15.7616],
        [ 20.1068,  13.2408],
        [ -2.0882,   0.1799],
        [ 20.6989,  15.0140],
        [ 14.3842,   3.8999],
        [ 19.1301,  -1.5046]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([  7.4289, -23.6507,  -0.5449,   4.3807,  18.4862,  11.2769,  -4.1346,
         10.1445, -17.1276, -19.1134], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-2.5508e-01, -1.3337e+00, -4.5373e-01, -4.3646e-01, -4.7494e-01,
         -2.3093e+00, -2.6612e-04, -1.7106e+00, -1.3855e-01, -6.3737e-01],
        [ 2.5404e+00, -1.4519e+01, -1.3369e+00,  3.5678e+00, -2.4435e+00,
         -5.1699e+00,  4.3364e-01, -4.5103e+00, -4.3017e-01, -1.0596e+00],
        [ 1.0295e+01, -9.4183e-01, -2.6663e+00,  1.2403e+00,  6.7114e-02,
          1.9582e+00, -2.0044e-02,  5.4866e+00, -8.9307e+00,  4.2486e-01],
        [-2.5522e-01, -1.3278e+00, -4.4919e-01, -4.3681e-01, -4.6847e-01,
         -2.2993e+00, -2.8528e-04, -1.7163e+00, -1.3610e-01, -6.5202e-01],
        [ 9.7372e-01, -2.3758e-01, -3.6205e-01,  3.2494e-01, -1.5278e+00,
         -3.1101e+00, -1.8564e-02, -1.5424e+00, -4.1850e-01,  5.4811e-01],
        [ 1.6347e+00,  1.3982e+01, -8.3744e-01,  2.0391e+00, -3.9359e+00,
         -1.2478e+01,  1.6739e-01, -1.0053e+00, -9.6723e-03, -1.4798e+01],
        [ 3.3990e+00, -2.3020e+01,  3.6021e+00,  1.9719e+00, -1.1665e+01,
         -5.7457e-01,  1.1881e-01, -3.1139e+00, -9.0325e-01, -1.3451e+01],
        [ 1.2681e+00,  1.2619e+01, -2.1575e-01,  8.4386e+00,  1.7402e+00,
         -2.7371e+01, -3.8878e-02, -1.3424e+00,  2.9660e-04, -5.6537e+00],
        [ 2.3705e+00, -3.9240e+00, -7.5741e-01,  4.9478e+00,  6.0408e-01,
         -9.1193e-01,  4.0271e-01, -6.1322e-01, -1.0610e+00,  6.7189e+00],
        [-2.5549e-01, -1.3337e+00, -4.5104e-01, -4.3708e-01, -4.7126e-01,
         -2.3051e+00, -2.8425e-04, -1.7159e+00, -1.3695e-01, -6.4701e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -3.1893,   3.1273,  -6.6235,  -3.1821,  -3.1881,  -4.4780,   0.0186,
        -14.2894,  -6.5468,  -3.1799], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[  0.0819,  -2.4970,   0.4999,   0.0784,   1.1019,  -6.2183,  -5.6472,
          13.1054,   3.7407,   0.0796],
        [ -0.0819,   2.4970,  -0.5194,  -0.0784,  -1.1019,   6.2402,   5.6514,
         -13.1056,  -3.7407,  -0.0796]], device='cuda:0'))])
xi:  [0.00224177]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 471.19133635687007
W_T_median: 197.5045503137313
W_T_pctile_5: -114.26106145919566
W_T_CVAR_5_pct: -159.1131201255447
Average q (qsum/M+1):  53.26756631174395
Optimal xi:  [0.00224177]
Expected(across Rb) median(across samples) p_equity:  0.26762551901241144
obj fun:  tensor(-941.2171, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 1.5
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -1.9086,   0.3596],
        [ -1.9086,   0.3596],
        [ -1.9086,   0.3596],
        [-17.8304,   5.8215],
        [ 17.4320,   3.7301],
        [ -1.9086,   0.3596],
        [ -1.9086,   0.3596],
        [  0.5875, -13.5374],
        [ -1.9086,   0.3596],
        [-13.8178,   9.7982]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -3.1065,  -3.1065,  -3.1065,  13.4341, -18.2715,  -3.1065,  -3.1065,
        -12.1911,  -3.1065,   1.8641], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-1.3709e-02, -1.3709e-02, -1.3709e-02, -3.1576e-01, -1.6622e-01,
         -1.3709e-02, -1.3709e-02,  9.6237e-02, -1.3709e-02,  4.4873e-02],
        [ 2.7424e-01,  2.7424e-01,  2.7424e-01, -5.5554e+00, -9.8540e-02,
          2.7424e-01,  2.7424e-01,  7.9406e+00,  2.7424e-01,  5.5595e-02],
        [ 1.2205e-01,  1.2205e-01,  1.2205e-01,  1.4903e+01, -1.3907e+01,
          1.2205e-01,  1.2205e-01, -1.7325e+01,  1.2205e-01,  5.1352e+00],
        [-1.3709e-02, -1.3709e-02, -1.3709e-02, -3.1576e-01, -1.6622e-01,
         -1.3709e-02, -1.3709e-02,  9.6237e-02, -1.3709e-02,  4.4873e-02],
        [ 2.7169e-01,  2.7169e-01,  2.7169e-01, -1.3123e+01,  1.2028e+01,
          2.7169e-01,  2.7169e-01,  1.6200e+01,  2.7169e-01, -3.4848e+00],
        [-1.3709e-02, -1.3709e-02, -1.3709e-02, -3.1576e-01, -1.6622e-01,
         -1.3709e-02, -1.3709e-02,  9.6237e-02, -1.3709e-02,  4.4873e-02],
        [-1.3709e-02, -1.3709e-02, -1.3709e-02, -3.1576e-01, -1.6622e-01,
         -1.3709e-02, -1.3709e-02,  9.6237e-02, -1.3709e-02,  4.4873e-02],
        [-1.3709e-02, -1.3709e-02, -1.3709e-02, -3.1576e-01, -1.6622e-01,
         -1.3709e-02, -1.3709e-02,  9.6237e-02, -1.3709e-02,  4.4873e-02],
        [-1.3709e-02, -1.3709e-02, -1.3709e-02, -3.1576e-01, -1.6622e-01,
         -1.3709e-02, -1.3709e-02,  9.6237e-02, -1.3709e-02,  4.4873e-02],
        [-1.3709e-02, -1.3709e-02, -1.3709e-02, -3.1576e-01, -1.6622e-01,
         -1.3709e-02, -1.3709e-02,  9.6237e-02, -1.3709e-02,  4.4873e-02]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-2.5504, -1.8498, -1.5137, -2.5504,  0.9331, -2.5504, -2.5504, -2.5504,
        -2.5504, -2.5504], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.0641,  -2.8514,  15.4511,  -0.0641, -16.3906,  -0.0641,  -0.0641,
          -0.0641,  -0.0641,  -0.0641]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[-15.6696,   5.4407],
        [-11.6833, -24.6010],
        [  1.4112,  12.4538],
        [-16.2211,  -1.4887],
        [-14.3019,  17.9545],
        [ 22.5684,  13.5088],
        [ -1.4107,   4.3569],
        [ 24.2849,  15.6152],
        [ 15.0029,   5.3840],
        [ 21.2302,  -1.6416]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([  9.1631, -24.2457,  -1.3037,   5.7503,  20.5349,  11.1454,  -3.8447,
          7.9769, -16.0344, -21.1760], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-4.4159e-01, -1.9215e-01, -3.1876e-01, -5.7598e-01, -2.0508e+00,
         -2.2963e+00, -8.5217e-02, -1.7195e+00, -3.6037e-01, -1.2091e-01],
        [ 4.3321e-01, -1.4154e+00,  2.6553e-02,  3.2581e-01, -2.1971e+00,
         -2.6777e+00, -5.4493e-01, -1.7246e+00, -6.0853e-01,  6.3077e-01],
        [ 1.0291e+01, -4.7859e+00, -1.6567e+00,  1.4012e+00, -3.5031e+00,
          3.3507e+00, -5.3610e-01,  7.4400e+00, -2.5250e+00,  5.7645e+00],
        [ 2.3345e+00, -1.5258e+00,  1.0657e+00,  1.4083e+00,  8.7326e-01,
         -1.4459e+00, -2.4807e+00,  3.3290e-01, -3.2388e+00,  2.0466e+00],
        [-4.4644e-01, -1.1839e+00, -3.1206e-01, -5.8979e-01, -1.0663e+00,
         -2.6979e+00, -2.3983e-01, -1.5447e+00, -2.9530e-01,  1.3006e-01],
        [ 3.3022e+00,  1.4012e+01,  2.3950e-03,  3.4522e+00, -9.0777e+00,
         -1.2138e+01,  4.5910e-02, -2.2621e+00, -2.0398e-03, -1.4613e+01],
        [ 7.6201e-02, -8.4241e+00, -1.3008e-01,  5.2915e+00, -5.9768e-01,
         -4.7886e+00,  7.1482e-01, -2.0550e-01,  9.7147e-01, -6.7587e+00],
        [ 8.5888e-01,  1.2435e+01,  7.9696e-04,  1.3025e+01,  1.3559e-01,
         -2.6149e+01,  1.1590e-02,  1.3188e-01,  4.3288e-05, -1.4071e+00],
        [ 1.9065e-01, -7.1043e+00, -3.4503e-01,  3.6836e+00, -5.4259e+00,
          7.6773e-01, -5.3848e-01, -1.7143e+00,  1.7914e+00,  3.3835e+00],
        [-6.3900e-01, -1.0715e+00, -3.6684e-01, -8.6239e-01, -7.8935e-01,
         -2.7782e+00, -2.4808e-01, -1.4882e+00, -3.0044e-01,  2.2242e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -3.0464,  -3.4802,  -5.9620,  -3.0972,  -3.9178,  -4.9179,  -2.1449,
        -19.6363,  -5.2338,  -3.8556], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ -0.5031,   0.8399,   0.2998,   1.1744,   0.3544,  -5.3889,  -4.2175,
          13.4851,   5.8281,   0.4049],
        [  0.5031,  -0.8398,  -0.3193,  -1.1743,  -0.3544,   5.4133,   4.2181,
         -13.4728,  -5.8280,  -0.4048]], device='cuda:0'))])
loaded xi:  0.00055982
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  -292.30976997688737
min fval:  -292.30976997688737
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -1.9086,   0.3596],
        [ -1.9086,   0.3596],
        [ -1.9086,   0.3596],
        [-17.8304,   5.8215],
        [ 17.4320,   3.7301],
        [ -1.9086,   0.3596],
        [ -1.9086,   0.3596],
        [  0.5875, -13.5374],
        [ -1.9086,   0.3596],
        [-13.8178,   9.7982]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -3.1065,  -3.1065,  -3.1065,  13.4341, -18.2715,  -3.1065,  -3.1065,
        -12.1911,  -3.1065,   1.8641], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-1.3709e-02, -1.3709e-02, -1.3709e-02, -3.1576e-01, -1.6622e-01,
         -1.3709e-02, -1.3709e-02,  9.6237e-02, -1.3709e-02,  4.4873e-02],
        [ 2.7424e-01,  2.7424e-01,  2.7424e-01, -5.5554e+00, -9.8540e-02,
          2.7424e-01,  2.7424e-01,  7.9406e+00,  2.7424e-01,  5.5595e-02],
        [ 1.2205e-01,  1.2205e-01,  1.2205e-01,  1.4903e+01, -1.3907e+01,
          1.2205e-01,  1.2205e-01, -1.7325e+01,  1.2205e-01,  5.1352e+00],
        [-1.3709e-02, -1.3709e-02, -1.3709e-02, -3.1576e-01, -1.6622e-01,
         -1.3709e-02, -1.3709e-02,  9.6237e-02, -1.3709e-02,  4.4873e-02],
        [ 2.7169e-01,  2.7169e-01,  2.7169e-01, -1.3123e+01,  1.2028e+01,
          2.7169e-01,  2.7169e-01,  1.6200e+01,  2.7169e-01, -3.4848e+00],
        [-1.3709e-02, -1.3709e-02, -1.3709e-02, -3.1576e-01, -1.6622e-01,
         -1.3709e-02, -1.3709e-02,  9.6237e-02, -1.3709e-02,  4.4873e-02],
        [-1.3709e-02, -1.3709e-02, -1.3709e-02, -3.1576e-01, -1.6622e-01,
         -1.3709e-02, -1.3709e-02,  9.6237e-02, -1.3709e-02,  4.4873e-02],
        [-1.3709e-02, -1.3709e-02, -1.3709e-02, -3.1576e-01, -1.6622e-01,
         -1.3709e-02, -1.3709e-02,  9.6237e-02, -1.3709e-02,  4.4873e-02],
        [-1.3709e-02, -1.3709e-02, -1.3709e-02, -3.1576e-01, -1.6622e-01,
         -1.3709e-02, -1.3709e-02,  9.6237e-02, -1.3709e-02,  4.4873e-02],
        [-1.3709e-02, -1.3709e-02, -1.3709e-02, -3.1576e-01, -1.6622e-01,
         -1.3709e-02, -1.3709e-02,  9.6237e-02, -1.3709e-02,  4.4873e-02]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-2.5504, -1.8498, -1.5137, -2.5504,  0.9331, -2.5504, -2.5504, -2.5504,
        -2.5504, -2.5504], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[ -0.0641,  -2.8514,  15.4511,  -0.0641, -16.3906,  -0.0641,  -0.0641,
          -0.0641,  -0.0641,  -0.0641]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[-15.6696,   5.4407],
        [-11.6833, -24.6010],
        [  1.4112,  12.4538],
        [-16.2211,  -1.4887],
        [-14.3019,  17.9545],
        [ 22.5684,  13.5088],
        [ -1.4107,   4.3569],
        [ 24.2849,  15.6152],
        [ 15.0029,   5.3840],
        [ 21.2302,  -1.6416]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([  9.1631, -24.2457,  -1.3037,   5.7503,  20.5349,  11.1454,  -3.8447,
          7.9769, -16.0344, -21.1760], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-4.4159e-01, -1.9215e-01, -3.1876e-01, -5.7598e-01, -2.0508e+00,
         -2.2963e+00, -8.5217e-02, -1.7195e+00, -3.6037e-01, -1.2091e-01],
        [ 4.3321e-01, -1.4154e+00,  2.6553e-02,  3.2581e-01, -2.1971e+00,
         -2.6777e+00, -5.4493e-01, -1.7246e+00, -6.0853e-01,  6.3077e-01],
        [ 1.0291e+01, -4.7859e+00, -1.6567e+00,  1.4012e+00, -3.5031e+00,
          3.3507e+00, -5.3610e-01,  7.4400e+00, -2.5250e+00,  5.7645e+00],
        [ 2.3345e+00, -1.5258e+00,  1.0657e+00,  1.4083e+00,  8.7326e-01,
         -1.4459e+00, -2.4807e+00,  3.3290e-01, -3.2388e+00,  2.0466e+00],
        [-4.4644e-01, -1.1839e+00, -3.1206e-01, -5.8979e-01, -1.0663e+00,
         -2.6979e+00, -2.3983e-01, -1.5447e+00, -2.9530e-01,  1.3006e-01],
        [ 3.3022e+00,  1.4012e+01,  2.3950e-03,  3.4522e+00, -9.0777e+00,
         -1.2138e+01,  4.5910e-02, -2.2621e+00, -2.0398e-03, -1.4613e+01],
        [ 7.6201e-02, -8.4241e+00, -1.3008e-01,  5.2915e+00, -5.9768e-01,
         -4.7886e+00,  7.1482e-01, -2.0550e-01,  9.7147e-01, -6.7587e+00],
        [ 8.5888e-01,  1.2435e+01,  7.9696e-04,  1.3025e+01,  1.3559e-01,
         -2.6149e+01,  1.1590e-02,  1.3188e-01,  4.3288e-05, -1.4071e+00],
        [ 1.9065e-01, -7.1043e+00, -3.4503e-01,  3.6836e+00, -5.4259e+00,
          7.6773e-01, -5.3848e-01, -1.7143e+00,  1.7914e+00,  3.3835e+00],
        [-6.3900e-01, -1.0715e+00, -3.6684e-01, -8.6239e-01, -7.8935e-01,
         -2.7782e+00, -2.4808e-01, -1.4882e+00, -3.0044e-01,  2.2242e-01]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -3.0464,  -3.4802,  -5.9620,  -3.0972,  -3.9178,  -4.9179,  -2.1449,
        -19.6363,  -5.2338,  -3.8556], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ -0.5031,   0.8399,   0.2998,   1.1744,   0.3544,  -5.3889,  -4.2175,
          13.4851,   5.8281,   0.4049],
        [  0.5031,  -0.8398,  -0.3193,  -1.1743,  -0.3544,   5.4133,   4.2181,
         -13.4728,  -5.8280,  -0.4048]], device='cuda:0'))])
xi:  [0.00055982]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 492.23283614935167
W_T_median: 244.3288654029694
W_T_pctile_5: -113.22624636256235
W_T_CVAR_5_pct: -152.21920823548854
Average q (qsum/M+1):  52.64241273941532
Optimal xi:  [0.00055982]
Expected(across Rb) median(across samples) p_equity:  0.3093353601793448
obj fun:  tensor(-292.3098, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 3.0
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -1.9119,   0.3362],
        [ -1.9119,   0.3362],
        [ -1.9119,   0.3362],
        [-20.2629,   6.1462],
        [ 19.2991,   3.8476],
        [ -1.9119,   0.3362],
        [ -1.9119,   0.3362],
        [  1.2506, -13.6858],
        [ -1.9119,   0.3362],
        [-13.4758,   7.1587]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -3.3717,  -3.3717,  -3.3717,  14.8232, -20.2864,  -3.3717,  -3.3717,
        -12.0346,  -3.3717,   0.4222], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-5.3671e-03, -5.3671e-03, -5.3671e-03, -3.9091e-01, -1.4834e-01,
         -5.3671e-03, -5.3671e-03, -2.7862e-02, -5.3671e-03,  1.5248e-03],
        [-5.3671e-03, -5.3671e-03, -5.3671e-03, -3.9091e-01, -1.4834e-01,
         -5.3671e-03, -5.3671e-03, -2.7862e-02, -5.3671e-03,  1.5248e-03],
        [ 1.4241e-01,  1.4241e-01,  1.4241e-01,  1.7466e+01, -1.6404e+01,
          1.4241e-01,  1.4241e-01, -1.9426e+01,  1.4241e-01,  4.5475e+00],
        [-5.3671e-03, -5.3671e-03, -5.3671e-03, -3.9091e-01, -1.4834e-01,
         -5.3671e-03, -5.3671e-03, -2.7862e-02, -5.3671e-03,  1.5248e-03],
        [ 4.5644e-02,  4.5646e-02,  4.5646e-02, -1.6300e+01,  1.4949e+01,
          4.5645e-02,  4.5645e-02,  1.8742e+01,  4.5648e-02, -4.5307e+00],
        [-5.3671e-03, -5.3671e-03, -5.3671e-03, -3.9091e-01, -1.4834e-01,
         -5.3671e-03, -5.3671e-03, -2.7862e-02, -5.3671e-03,  1.5248e-03],
        [-5.3671e-03, -5.3671e-03, -5.3671e-03, -3.9091e-01, -1.4834e-01,
         -5.3671e-03, -5.3671e-03, -2.7862e-02, -5.3671e-03,  1.5248e-03],
        [-5.3671e-03, -5.3671e-03, -5.3671e-03, -3.9091e-01, -1.4834e-01,
         -5.3671e-03, -5.3671e-03, -2.7862e-02, -5.3671e-03,  1.5248e-03],
        [-5.3671e-03, -5.3671e-03, -5.3671e-03, -3.9091e-01, -1.4834e-01,
         -5.3671e-03, -5.3671e-03, -2.7862e-02, -5.3671e-03,  1.5248e-03],
        [-5.3671e-03, -5.3671e-03, -5.3671e-03, -3.9091e-01, -1.4834e-01,
         -5.3671e-03, -5.3671e-03, -2.7862e-02, -5.3671e-03,  1.5248e-03]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-2.5393, -2.5393, -1.4779, -2.5393,  0.8714, -2.5393, -2.5393, -2.5393,
        -2.5393, -2.5393], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-1.2280e-03, -1.2281e-03,  1.6103e+01, -1.2281e-03, -2.0398e+01,
         -1.2280e-03, -1.2281e-03, -1.2280e-03, -1.2280e-03, -1.2281e-03]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[-20.5621,   5.8956],
        [-13.2412, -26.0433],
        [ -2.2831,   1.3972],
        [-18.5298,  -2.2281],
        [-16.3348,  19.2836],
        [ 22.3673,  13.7420],
        [ -2.2808,   1.3982],
        [ 27.2267,  16.1809],
        [ 14.3183,   9.1807],
        [ 22.9976,  -1.4409]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([  9.1786, -25.6178,  -3.7444,   5.2399,  22.4867,  10.6000,  -3.7454,
          6.2085, -15.7384, -22.9396], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-1.7434e+00,  1.7064e+00,  5.3626e-01,  1.7201e+00, -6.0364e+00,
         -1.3336e+00,  5.3503e-01, -2.5301e+00, -5.1235e-02, -1.1189e+00],
        [ 3.0013e-01, -1.2376e+00,  5.1113e-01, -6.1401e-01, -2.7944e-01,
         -3.0226e+00,  5.1120e-01, -1.4125e+00,  5.1314e-01, -5.3615e-01],
        [ 1.3162e+01, -4.7445e+00,  2.2341e-01,  3.2788e+00, -2.3720e+00,
          4.5725e+00,  2.2206e-01,  5.5781e+00, -2.5913e+00,  3.3100e+00],
        [ 9.3972e-01, -1.3141e-02,  4.1530e-01,  2.2681e+00, -2.0313e+00,
         -3.8904e+00,  4.1552e-01, -3.5509e+00,  4.9450e-01, -6.7013e-03],
        [ 3.0540e-01, -1.4909e+00,  5.9115e-01, -7.3178e-01, -3.9728e-01,
         -3.1291e+00,  5.9136e-01, -1.5468e+00,  5.3471e-01, -4.1179e-01],
        [ 2.4048e+00,  1.3474e+01,  6.4353e-03,  3.1897e+00, -7.6452e+00,
         -1.1624e+01,  5.6711e-03, -5.7442e+00,  6.2626e-07, -1.5260e+01],
        [ 9.7399e-01, -3.6545e-01,  3.9957e-01,  2.2049e+00, -2.3153e+00,
         -3.5481e+00,  3.9981e-01, -3.5080e+00,  4.6852e-01, -8.3875e-02],
        [ 2.2439e-01,  1.4952e+01,  2.9564e-01,  1.2339e+01,  2.2655e+00,
         -3.3715e+01,  2.9411e-01, -2.6963e-03, -6.4889e-07, -3.2878e-01],
        [ 1.2459e+00, -6.7230e+00,  2.2798e-01,  2.5908e+00, -6.5534e+00,
          8.7394e-01,  2.2917e-01, -2.6371e+00,  9.7180e-01,  3.7665e+00],
        [-1.6430e+00,  2.8407e-01, -1.3876e-01, -2.9161e-01, -1.2943e+00,
         -2.2688e+00, -1.3896e-01, -1.3751e+00, -2.7940e-01, -1.8568e+00]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -3.4558,  -4.2143,  -5.6077,  -3.0354,  -3.8923,  -5.2954,  -3.1903,
        -23.4818,  -5.1670,  -4.5114], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ -1.9288,   0.1154,   0.3772,   1.7023,   0.1589,  -5.3318,   1.6474,
          14.2616,   5.8097,  -0.6854],
        [  1.9291,  -0.1153,  -0.3966,  -1.7021,  -0.1588,   5.3598,  -1.6472,
         -14.2448,  -5.8097,   0.6856]], device='cuda:0'))])
loaded xi:  9.514345e-05
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  491.09770309406485
min fval:  491.09770309406485
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -1.9119,   0.3362],
        [ -1.9119,   0.3362],
        [ -1.9119,   0.3362],
        [-20.2629,   6.1462],
        [ 19.2991,   3.8476],
        [ -1.9119,   0.3362],
        [ -1.9119,   0.3362],
        [  1.2506, -13.6858],
        [ -1.9119,   0.3362],
        [-13.4758,   7.1587]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -3.3717,  -3.3717,  -3.3717,  14.8232, -20.2864,  -3.3717,  -3.3717,
        -12.0346,  -3.3717,   0.4222], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[-5.3671e-03, -5.3671e-03, -5.3671e-03, -3.9091e-01, -1.4834e-01,
         -5.3671e-03, -5.3671e-03, -2.7862e-02, -5.3671e-03,  1.5248e-03],
        [-5.3671e-03, -5.3671e-03, -5.3671e-03, -3.9091e-01, -1.4834e-01,
         -5.3671e-03, -5.3671e-03, -2.7862e-02, -5.3671e-03,  1.5248e-03],
        [ 1.4241e-01,  1.4241e-01,  1.4241e-01,  1.7466e+01, -1.6404e+01,
          1.4241e-01,  1.4241e-01, -1.9426e+01,  1.4241e-01,  4.5475e+00],
        [-5.3671e-03, -5.3671e-03, -5.3671e-03, -3.9091e-01, -1.4834e-01,
         -5.3671e-03, -5.3671e-03, -2.7862e-02, -5.3671e-03,  1.5248e-03],
        [ 4.5644e-02,  4.5646e-02,  4.5646e-02, -1.6300e+01,  1.4949e+01,
          4.5645e-02,  4.5645e-02,  1.8742e+01,  4.5648e-02, -4.5307e+00],
        [-5.3671e-03, -5.3671e-03, -5.3671e-03, -3.9091e-01, -1.4834e-01,
         -5.3671e-03, -5.3671e-03, -2.7862e-02, -5.3671e-03,  1.5248e-03],
        [-5.3671e-03, -5.3671e-03, -5.3671e-03, -3.9091e-01, -1.4834e-01,
         -5.3671e-03, -5.3671e-03, -2.7862e-02, -5.3671e-03,  1.5248e-03],
        [-5.3671e-03, -5.3671e-03, -5.3671e-03, -3.9091e-01, -1.4834e-01,
         -5.3671e-03, -5.3671e-03, -2.7862e-02, -5.3671e-03,  1.5248e-03],
        [-5.3671e-03, -5.3671e-03, -5.3671e-03, -3.9091e-01, -1.4834e-01,
         -5.3671e-03, -5.3671e-03, -2.7862e-02, -5.3671e-03,  1.5248e-03],
        [-5.3671e-03, -5.3671e-03, -5.3671e-03, -3.9091e-01, -1.4834e-01,
         -5.3671e-03, -5.3671e-03, -2.7862e-02, -5.3671e-03,  1.5248e-03]],
       device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-2.5393, -2.5393, -1.4779, -2.5393,  0.8714, -2.5393, -2.5393, -2.5393,
        -2.5393, -2.5393], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[-1.2280e-03, -1.2281e-03,  1.6103e+01, -1.2281e-03, -2.0398e+01,
         -1.2280e-03, -1.2281e-03, -1.2280e-03, -1.2280e-03, -1.2281e-03]],
       device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[-20.5621,   5.8956],
        [-13.2412, -26.0433],
        [ -2.2831,   1.3972],
        [-18.5298,  -2.2281],
        [-16.3348,  19.2836],
        [ 22.3673,  13.7420],
        [ -2.2808,   1.3982],
        [ 27.2267,  16.1809],
        [ 14.3183,   9.1807],
        [ 22.9976,  -1.4409]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([  9.1786, -25.6178,  -3.7444,   5.2399,  22.4867,  10.6000,  -3.7454,
          6.2085, -15.7384, -22.9396], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-1.7434e+00,  1.7064e+00,  5.3626e-01,  1.7201e+00, -6.0364e+00,
         -1.3336e+00,  5.3503e-01, -2.5301e+00, -5.1235e-02, -1.1189e+00],
        [ 3.0013e-01, -1.2376e+00,  5.1113e-01, -6.1401e-01, -2.7944e-01,
         -3.0226e+00,  5.1120e-01, -1.4125e+00,  5.1314e-01, -5.3615e-01],
        [ 1.3162e+01, -4.7445e+00,  2.2341e-01,  3.2788e+00, -2.3720e+00,
          4.5725e+00,  2.2206e-01,  5.5781e+00, -2.5913e+00,  3.3100e+00],
        [ 9.3972e-01, -1.3141e-02,  4.1530e-01,  2.2681e+00, -2.0313e+00,
         -3.8904e+00,  4.1552e-01, -3.5509e+00,  4.9450e-01, -6.7013e-03],
        [ 3.0540e-01, -1.4909e+00,  5.9115e-01, -7.3178e-01, -3.9728e-01,
         -3.1291e+00,  5.9136e-01, -1.5468e+00,  5.3471e-01, -4.1179e-01],
        [ 2.4048e+00,  1.3474e+01,  6.4353e-03,  3.1897e+00, -7.6452e+00,
         -1.1624e+01,  5.6711e-03, -5.7442e+00,  6.2626e-07, -1.5260e+01],
        [ 9.7399e-01, -3.6545e-01,  3.9957e-01,  2.2049e+00, -2.3153e+00,
         -3.5481e+00,  3.9981e-01, -3.5080e+00,  4.6852e-01, -8.3875e-02],
        [ 2.2439e-01,  1.4952e+01,  2.9564e-01,  1.2339e+01,  2.2655e+00,
         -3.3715e+01,  2.9411e-01, -2.6963e-03, -6.4889e-07, -3.2878e-01],
        [ 1.2459e+00, -6.7230e+00,  2.2798e-01,  2.5908e+00, -6.5534e+00,
          8.7394e-01,  2.2917e-01, -2.6371e+00,  9.7180e-01,  3.7665e+00],
        [-1.6430e+00,  2.8407e-01, -1.3876e-01, -2.9161e-01, -1.2943e+00,
         -2.2688e+00, -1.3896e-01, -1.3751e+00, -2.7940e-01, -1.8568e+00]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -3.4558,  -4.2143,  -5.6077,  -3.0354,  -3.8923,  -5.2954,  -3.1903,
        -23.4818,  -5.1670,  -4.5114], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[ -1.9288,   0.1154,   0.3772,   1.7023,   0.1589,  -5.3318,   1.6474,
          14.2616,   5.8097,  -0.6854],
        [  1.9291,  -0.1153,  -0.3966,  -1.7021,  -0.1588,   5.3598,  -1.6472,
         -14.2448,  -5.8097,   0.6856]], device='cuda:0'))])
xi:  [9.514345e-05]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 594.341381207778
W_T_median: 269.5274167975506
W_T_pctile_5: -107.83393431423781
W_T_CVAR_5_pct: -141.2654619064746
Average q (qsum/M+1):  52.217871881300404
Optimal xi:  [9.514345e-05]
Expected(across Rb) median(across samples) p_equity:  0.32000367989142736
obj fun:  tensor(491.0977, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 5.0
-----------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
pre-loaded NN:  OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -1.1761,   1.3207],
        [ -1.2422,   1.4039],
        [ -1.1434,   1.2949],
        [-24.7946,   9.9140],
        [ 26.9331,  -1.8546],
        [ -1.2336,   1.3964],
        [ -1.2436,   1.4043],
        [  4.2169, -16.0824],
        [ -1.2744,   1.4089],
        [ -9.4886,  14.6522]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -6.1979,  -6.4787,  -6.1260,  11.6616, -18.1734,  -6.4590,  -6.4726,
        -12.1762,  -6.4504,   5.4512], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ -0.0413,  -0.0493,  -0.0401,  -0.2151,   1.4842,  -0.0489,  -0.0486,
          -0.4400,  -0.0479,   6.0980],
        [ -0.0421,  -0.0499,  -0.0408,  -0.2164,   1.4743,  -0.0495,  -0.0491,
          -0.4475,  -0.0484,   6.1360],
        [ -0.7655,  -0.8455,  -0.7279,  15.8718, -25.6913,  -0.8731,  -0.7990,
         -20.4555,  -0.7253,   1.8630],
        [ -0.0413,  -0.0493,  -0.0401,  -0.2151,   1.4841,  -0.0489,  -0.0486,
          -0.4401,  -0.0479,   6.0983],
        [  0.9908,   1.1342,   0.9761, -15.9576,  26.8483,   1.1535,   1.0882,
          20.6183,   0.9732,  -0.1826],
        [ -0.0415,  -0.0495,  -0.0403,  -0.2154,   1.4814,  -0.0491,  -0.0487,
          -0.4422,  -0.0480,   6.1091],
        [ -0.0403,  -0.0484,  -0.0390,  -0.2136,   1.4959,  -0.0480,  -0.0477,
          -0.4305,  -0.0471,   6.0503],
        [ -0.0394,  -0.0477,  -0.0381,  -0.2129,   1.5034,  -0.0473,  -0.0470,
          -0.4240,  -0.0464,   6.0181],
        [ -0.0423,  -0.0500,  -0.0411,  -0.2170,   1.4704,  -0.0497,  -0.0493,
          -0.4503,  -0.0486,   6.1504],
        [ -0.0420,  -0.0498,  -0.0408,  -0.2164,   1.4748,  -0.0495,  -0.0491,
          -0.4471,  -0.0484,   6.1341]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-3.2917, -3.2944, -2.3229, -3.2917,  0.1709, -3.2925, -3.2889, -3.2873,
        -3.2955, -3.2943], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[  0.9686,   0.9788,  14.4614,   0.9687, -23.8365,   0.9716,   0.9557,
           0.9468,   0.9826,   0.9783]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[-16.8777,   7.1722],
        [ -9.3106, -27.3360],
        [ -4.6006,   3.0044],
        [-21.2571,  -4.0347],
        [ -8.6744,  23.9695],
        [ 24.0888,  14.3746],
        [ -5.3482,   6.1143],
        [ 27.1688,  19.3175],
        [ 16.4392,   6.7492],
        [ 24.4360,  -1.0678]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([  4.3363, -24.2025,  -8.0294,   4.0450,  20.9681,   9.9058, -10.0835,
          7.0196, -18.2884, -22.3788], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-3.2087e+00,  4.5061e+00,  1.1398e-01,  2.3592e+00, -5.7142e+00,
         -3.5246e+00, -2.8875e-03, -7.9729e+00, -8.9011e-03, -4.4139e+00],
        [-4.2416e+00, -1.0098e+01, -2.0418e+00,  8.7662e-01,  2.6211e+00,
         -2.9678e+00, -4.0785e+00,  1.1648e+00,  2.3801e+00, -2.2035e+01],
        [-2.9380e+00, -3.8501e+00, -2.2236e+00,  3.8510e+00,  1.1332e+01,
          5.0989e+00, -6.0386e+00,  3.5868e+00,  1.4822e+00,  3.9858e+00],
        [ 1.9584e-01, -1.8296e+00,  1.0354e-01, -1.2157e+00, -7.1702e-01,
         -3.1220e+00,  2.5286e-01, -1.6112e+00,  2.2316e-01, -1.4630e+00],
        [ 6.0366e+00, -1.2748e+01, -1.0649e+00,  1.4575e+00,  1.6304e+00,
         -3.2226e+00, -6.6255e+00,  3.5508e-01, -4.0334e+00,  3.3086e-02],
        [-2.0720e+00,  1.5084e+01, -4.6975e-02,  1.0722e+00, -3.8284e+00,
         -1.3844e+01, -2.8725e-03, -1.9745e+00, -1.1995e-02, -1.5515e+01],
        [ 4.7573e+00, -9.0339e+00, -9.8636e-01,  2.5345e+00,  2.7166e+00,
         -4.8500e+00, -4.9816e+00,  8.3749e-01, -3.8121e+00, -7.2082e-01],
        [-1.3913e+01,  1.6493e+01, -1.1555e-01,  1.1391e+01, -4.7782e+01,
         -8.6450e+01, -2.2463e-03, -1.0195e-01, -6.1001e-05, -1.0421e+01],
        [ 6.5249e+00, -1.0404e+01, -2.1080e+00,  1.8302e+00,  8.9251e-01,
         -2.8914e-01, -6.0551e+00, -2.6354e-01, -5.9170e+00,  9.6766e-01],
        [ 2.1259e-01, -1.8410e+00,  8.2956e-02, -1.2016e+00, -7.0360e-01,
         -3.0186e+00,  2.6630e-01, -1.7003e+00,  2.4070e-01, -1.4331e+00]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -2.4230,  -4.8441,  -7.4428,  -5.4283,  -4.6036,  -5.0067,  -5.7725,
        -25.1408,  -5.8900,  -5.4568], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-1.1636e+00,  7.4646e+00,  3.4816e-01,  3.1909e-02,  7.1205e+00,
         -9.9131e+00,  6.6084e+00,  2.9577e+01,  8.6086e+00,  2.1287e-02],
        [ 1.1634e+00, -7.4646e+00, -3.6759e-01, -3.1922e-02, -7.1205e+00,
          9.9377e+00, -6.6083e+00, -2.9558e+01, -8.6086e+00, -2.1290e-02]],
       device='cuda:0'))])
loaded xi:  213.66861
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1583.6866209228313
W_T_median: 1138.6857387434734
W_T_pctile_5: -127.4429131675796
W_T_CVAR_5_pct: -297.80727420155023
-----------------------------------------------
new min fval from sgd:  3567.3114676683704
min fval:  3567.3114676683704
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[ -1.1761,   1.3207],
        [ -1.2422,   1.4039],
        [ -1.1434,   1.2949],
        [-24.7946,   9.9140],
        [ 26.9331,  -1.8546],
        [ -1.2336,   1.3964],
        [ -1.2436,   1.4043],
        [  4.2169, -16.0824],
        [ -1.2744,   1.4089],
        [ -9.4886,  14.6522]], device='cuda:0')), ('0.model.hidden_layer_1.bias', tensor([ -6.1979,  -6.4787,  -6.1260,  11.6616, -18.1734,  -6.4590,  -6.4726,
        -12.1762,  -6.4504,   5.4512], device='cuda:0')), ('0.model.hidden_layer_2.weight', tensor([[ -0.0413,  -0.0493,  -0.0401,  -0.2151,   1.4842,  -0.0489,  -0.0486,
          -0.4400,  -0.0479,   6.0980],
        [ -0.0421,  -0.0499,  -0.0408,  -0.2164,   1.4743,  -0.0495,  -0.0491,
          -0.4475,  -0.0484,   6.1360],
        [ -0.7655,  -0.8455,  -0.7279,  15.8718, -25.6913,  -0.8731,  -0.7990,
         -20.4555,  -0.7253,   1.8630],
        [ -0.0413,  -0.0493,  -0.0401,  -0.2151,   1.4841,  -0.0489,  -0.0486,
          -0.4401,  -0.0479,   6.0983],
        [  0.9908,   1.1342,   0.9761, -15.9576,  26.8483,   1.1535,   1.0882,
          20.6183,   0.9732,  -0.1826],
        [ -0.0415,  -0.0495,  -0.0403,  -0.2154,   1.4814,  -0.0491,  -0.0487,
          -0.4422,  -0.0480,   6.1091],
        [ -0.0403,  -0.0484,  -0.0390,  -0.2136,   1.4959,  -0.0480,  -0.0477,
          -0.4305,  -0.0471,   6.0503],
        [ -0.0394,  -0.0477,  -0.0381,  -0.2129,   1.5034,  -0.0473,  -0.0470,
          -0.4240,  -0.0464,   6.0181],
        [ -0.0423,  -0.0500,  -0.0411,  -0.2170,   1.4704,  -0.0497,  -0.0493,
          -0.4503,  -0.0486,   6.1504],
        [ -0.0420,  -0.0498,  -0.0408,  -0.2164,   1.4748,  -0.0495,  -0.0491,
          -0.4471,  -0.0484,   6.1341]], device='cuda:0')), ('0.model.hidden_layer_2.bias', tensor([-3.2917, -3.2944, -2.3229, -3.2917,  0.1709, -3.2925, -3.2889, -3.2873,
        -3.2955, -3.2943], device='cuda:0')), ('0.model.output_layer_3.weight', tensor([[  0.9686,   0.9788,  14.4614,   0.9687, -23.8365,   0.9716,   0.9557,
           0.9468,   0.9826,   0.9783]], device='cuda:0')), ('1.model.hidden_layer_1.weight', tensor([[-16.8777,   7.1722],
        [ -9.3106, -27.3360],
        [ -4.6006,   3.0044],
        [-21.2571,  -4.0347],
        [ -8.6744,  23.9695],
        [ 24.0888,  14.3746],
        [ -5.3482,   6.1143],
        [ 27.1688,  19.3175],
        [ 16.4392,   6.7492],
        [ 24.4360,  -1.0678]], device='cuda:0')), ('1.model.hidden_layer_1.bias', tensor([  4.3363, -24.2025,  -8.0294,   4.0450,  20.9681,   9.9058, -10.0835,
          7.0196, -18.2884, -22.3788], device='cuda:0')), ('1.model.hidden_layer_2.weight', tensor([[-3.2087e+00,  4.5061e+00,  1.1398e-01,  2.3592e+00, -5.7142e+00,
         -3.5246e+00, -2.8875e-03, -7.9729e+00, -8.9011e-03, -4.4139e+00],
        [-4.2416e+00, -1.0098e+01, -2.0418e+00,  8.7662e-01,  2.6211e+00,
         -2.9678e+00, -4.0785e+00,  1.1648e+00,  2.3801e+00, -2.2035e+01],
        [-2.9380e+00, -3.8501e+00, -2.2236e+00,  3.8510e+00,  1.1332e+01,
          5.0989e+00, -6.0386e+00,  3.5868e+00,  1.4822e+00,  3.9858e+00],
        [ 1.9584e-01, -1.8296e+00,  1.0354e-01, -1.2157e+00, -7.1702e-01,
         -3.1220e+00,  2.5286e-01, -1.6112e+00,  2.2316e-01, -1.4630e+00],
        [ 6.0366e+00, -1.2748e+01, -1.0649e+00,  1.4575e+00,  1.6304e+00,
         -3.2226e+00, -6.6255e+00,  3.5508e-01, -4.0334e+00,  3.3086e-02],
        [-2.0720e+00,  1.5084e+01, -4.6975e-02,  1.0722e+00, -3.8284e+00,
         -1.3844e+01, -2.8725e-03, -1.9745e+00, -1.1995e-02, -1.5515e+01],
        [ 4.7573e+00, -9.0339e+00, -9.8636e-01,  2.5345e+00,  2.7166e+00,
         -4.8500e+00, -4.9816e+00,  8.3749e-01, -3.8121e+00, -7.2082e-01],
        [-1.3913e+01,  1.6493e+01, -1.1555e-01,  1.1391e+01, -4.7782e+01,
         -8.6450e+01, -2.2463e-03, -1.0195e-01, -6.1001e-05, -1.0421e+01],
        [ 6.5249e+00, -1.0404e+01, -2.1080e+00,  1.8302e+00,  8.9251e-01,
         -2.8914e-01, -6.0551e+00, -2.6354e-01, -5.9170e+00,  9.6766e-01],
        [ 2.1259e-01, -1.8410e+00,  8.2956e-02, -1.2016e+00, -7.0360e-01,
         -3.0186e+00,  2.6630e-01, -1.7003e+00,  2.4070e-01, -1.4331e+00]],
       device='cuda:0')), ('1.model.hidden_layer_2.bias', tensor([ -2.4230,  -4.8441,  -7.4428,  -5.4283,  -4.6036,  -5.0067,  -5.7725,
        -25.1408,  -5.8900,  -5.4568], device='cuda:0')), ('1.model.output_layer_3.weight', tensor([[-1.1636e+00,  7.4646e+00,  3.4816e-01,  3.1909e-02,  7.1205e+00,
         -9.9131e+00,  6.6084e+00,  2.9577e+01,  8.6086e+00,  2.1287e-02],
        [ 1.1634e+00, -7.4646e+00, -3.6759e-01, -3.1922e-02, -7.1205e+00,
          9.9377e+00, -6.6083e+00, -2.9558e+01, -8.6086e+00, -2.1290e-02]],
       device='cuda:0'))])
xi:  [213.66861]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 695.3760157770039
W_T_median: 534.9696045677525
W_T_pctile_5: 124.99813249621023
W_T_CVAR_5_pct: -13.336365891720426
Average q (qsum/M+1):  46.237970167590724
Optimal xi:  [213.66861]
Expected(across Rb) median(across samples) p_equity:  0.21792259197281966
obj fun:  tensor(3567.3115, device='cuda:0', dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_FunctionHeatmaps.py:262: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 50.0
-----------------------------------------------

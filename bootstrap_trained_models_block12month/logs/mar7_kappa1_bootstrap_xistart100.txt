Starting at: 
07-03-23_13:50

 numpy seed:  3  


 pytorch seed:  3  

Key parameters-------
paths: 256000
iterations: 30000
batchsize: 1000
remove neg:  False
w constaint activation:  yy_fix_jan29


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = B10_and_VWD
timeseries_basket['basket_desc'] = CRSP data: B10 and VWD
timeseries_basket['basket_columns'] = 
['B10_real_ret', 'VWD_real_ret']
############# End: defined asset  basket #################
               CPI  CPI_nom_ret  ...  VWD_real_ret  EWD_real_ret
date                             ...                            
192512  100.000000          NaN  ...           NaN           NaN
192601  100.000000     0.000000  ...      0.000561      0.023174
192602  100.000000     0.000000  ...     -0.033046     -0.053510
192603   99.441303    -0.005587  ...     -0.058743     -0.091750
192604  100.000000     0.005618  ...      0.031235      0.027204

[5 rows x 12 columns]
                CPI  CPI_nom_ret  ...  VWD_real_ret  EWD_real_ret
date                              ...                            
202008  1452.055956     0.003153  ...      0.065084      0.035618
202009  1454.078149     0.001393  ...     -0.036399     -0.028709
202010  1454.681696     0.000415  ...     -0.020584      0.000169
202011  1453.793232    -0.000611  ...      0.124393      0.175130
202012  1455.162018     0.000942  ...      0.044065      0.071843

[5 rows x 12 columns]


############# Defined asset basket #################
timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names'])
timeseries_basket['basket_type'] = asset
timeseries_basket['basket_id'] = B10_and_VWD
timeseries_basket['basket_desc'] = CRSP data: B10 and VWD
timeseries_basket['basket_columns'] = 
['B10_nom_ret', 'VWD_nom_ret']
############# End: defined asset  basket #################
        CPI_nom_ret  B10_nom_ret  VWD_nom_ret
date                                         
192601     0.000000     0.004350     0.000561
192602     0.000000     0.004338    -0.033046
192603    -0.005587     0.004327    -0.064002
192604     0.005618     0.004316     0.037029
192605    -0.005587     0.004304     0.012095
        CPI_nom_ret  B10_nom_ret  VWD_nom_ret
date                                         
202008     0.003153    -0.014709     0.068443
202009     0.001393     0.002560    -0.035057
202010     0.000415    -0.017311    -0.020178
202011    -0.000611     0.004016     0.123706
202012     0.000942    -0.004965     0.045048
Indices constructed with column names:
Index(['date_for_plt', 'CPI_nom_ret_ind', 'B10_nom_ret_ind',
       'VWD_nom_ret_ind'],
      dtype='object')
############# Updated: defined asset basket #################
timeseries_basket['data_df_mean'] = 
B10_real_ret    0.001986
VWD_real_ret    0.006974
dtype: float64


timeseries_basket['data_df_stdev'] = 
B10_real_ret    0.018939
VWD_real_ret    0.053569
dtype: float64


timeseries_basket['data_df_corr'] = 
              B10_real_ret  VWD_real_ret
B10_real_ret      1.000000      0.075353
VWD_real_ret      0.075353      1.000000


timeseries_basket.keys() = 
dict_keys(['basket_type', 'basket_id', 'basket_desc', 'basket_label', 'basket_columns', 'basket_timeseries_names', 'data_df', 'data_df_mean', 'data_df_stdev', 'data_df_corr'])
############# End: updated: defined asset basket #################
-----------------------------------------------
Dates to be REMOVED due to missing values (should be at *start* only due to trading signals):
Int64Index([], dtype='int64')
-----------------------------------------------
Dates from available data for bootstrapping:
Start: 192601
End: 202012
-----------------------------------------------
0.0% of bootstrap sample done.
5.0% of bootstrap sample done.
10.0% of bootstrap sample done.
15.0% of bootstrap sample done.
20.0% of bootstrap sample done.
25.0% of bootstrap sample done.
30.0% of bootstrap sample done.
35.0% of bootstrap sample done.
40.0% of bootstrap sample done.
45.0% of bootstrap sample done.
50.0% of bootstrap sample done.
55.00000000000001% of bootstrap sample done.
60.0% of bootstrap sample done.
65.0% of bootstrap sample done.
70.0% of bootstrap sample done.
75.0% of bootstrap sample done.
80.0% of bootstrap sample done.
85.0% of bootstrap sample done.
90.0% of bootstrap sample done.
95.0% of bootstrap sample done.
Withdrawal NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       1       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      10  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      10  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       1              none   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 10)     True          10  
2     (10, 10)     True          10  
3      (10, 1)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
Allocation NN:
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes activation x_l(weights)  \
0        obj.layers[0]        0   input_layer       2       None         None   
1        obj.layers[1]        1  hidden_layer    None       None         None   
2        obj.layers[2]        2  hidden_layer    None       None         None   
3        obj.layers[3]        3  output_layer       2       None         None   

  add_bias b_l(biases)  
0    False        None  
1    False        None  
2    False        None  
3    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Neural_Network object 'obj' has instance attribute obj.layers.
obj.layers is a list of 'Neural_Network_Layer' objects with following attributes:

/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
/home/marcchen/Documents/testing_pyt_decum/researchcode/class_Neural_Network.py:344: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  layers_info_df = layers_info_df.append(layer_dict, ignore_index=True)
  obj.layers[layer_id] layer_id   description n_nodes        activation  \
0        obj.layers[0]        0   input_layer       2              None   
1        obj.layers[1]        1  hidden_layer      10  logistic_sigmoid   
2        obj.layers[2]        2  hidden_layer      10  logistic_sigmoid   
3        obj.layers[3]        3  output_layer       2           softmax   

  x_l(weights) add_bias b_l(biases)  
0         None    False        None  
1      (2, 10)     True          10  
2     (10, 10)     True          10  
3      (10, 2)    False        None  

 Run 'update_layer' method of Neural_Network object to change layer attributes.
--------------------------------------------------------------------------------------------------
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
{'methods': ['Adam'], 'output_progress': False, 'tol': 1e-06, 'itbound_scipy_algorithms': 1000, 'check_exit_criteria': False, 'nit_running_min': 3000, 'itbound_SGD_algorithms': 30000, 'nit_IterateAveragingStart': 27000, 'batchsize': 1000, 'SGD_learningrate': 50.0, 'Adagrad_epsilon': 1e-08, 'Adagrad_eta': 1.0, 'Adadelta_ewma': 0.9, 'Adadelta_epsilon': 1e-08, 'RMSprop_ewma': 0.8, 'RMSprop_epsilon': 1e-08, 'RMSprop_eta': 0.1, 'Adam_ewma_1': 0.9, 'Adam_ewma_2': 0.998, 'Adam_eta': 0.05, 'Adam_epsilon': 1e-08, 'Adam_weight_decay': 0.0001, 'running_min_from_avg': False, 'running_min_from_sgd': True, 'lr_schedule': True}
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        1              none   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 1)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
  obj.layers[layer_id]  layer_id   description  n_nodes        activation  \
0        obj.layers[0]         0   input_layer        2              None   
0        obj.layers[1]         1  hidden_layer       10  logistic_sigmoid   
0        obj.layers[2]         2  hidden_layer       10  logistic_sigmoid   
0        obj.layers[3]         3  output_layer        2           softmax   

  x_l(weights)  add_bias b_l(biases)  
0         None     False        None  
0      (2, 10)      True          10  
0     (10, 10)      True          10  
0      (10, 2)     False        None  
Pytorch NN pbject created from original NN class. Change            original NN object to change structure.
-----------------------------------------------
Selected results: ConstProp_strategy on TRAINING dataset
constant withdrawal:  40.0
constant allocation:  [0.6 0.4]
W_T_mean: 1518.318040318632
W_T_median: 1157.8841391994329
W_T_pctile_5: -114.48374804507138
W_T_CVAR_5_pct: -279.1514474953861
-----------------------------------------------
2.0% of gradient descent iterations done. Method = Adam
new min fval:  -1277.2914008893315
Current xi:  [108.82149]
objective value function right now is: -1277.2914008893315
4.0% of gradient descent iterations done. Method = Adam
new min fval:  -1562.4758678425605
Current xi:  [95.880486]
objective value function right now is: -1562.4758678425605
6.0% of gradient descent iterations done. Method = Adam
new min fval:  -1569.1180806697687
Current xi:  [88.9755]
objective value function right now is: -1569.1180806697687
8.0% of gradient descent iterations done. Method = Adam
new min fval:  -1578.598049877806
Current xi:  [84.86188]
objective value function right now is: -1578.598049877806
10.0% of gradient descent iterations done. Method = Adam
Current xi:  [82.80826]
objective value function right now is: -1576.9592462524597
12.0% of gradient descent iterations done. Method = Adam
new min fval:  -1579.7960128164464
Current xi:  [81.99482]
objective value function right now is: -1579.7960128164464
14.000000000000002% of gradient descent iterations done. Method = Adam
new min fval:  -1580.226154335978
Current xi:  [81.32605]
objective value function right now is: -1580.226154335978
16.0% of gradient descent iterations done. Method = Adam
Current xi:  [80.18917]
objective value function right now is: -1579.2882908169813
18.0% of gradient descent iterations done. Method = Adam
Current xi:  [79.501724]
objective value function right now is: -1577.3942514776024
20.0% of gradient descent iterations done. Method = Adam
new min fval:  -1580.3820783518088
Current xi:  [79.299194]
objective value function right now is: -1580.3820783518088
22.0% of gradient descent iterations done. Method = Adam
Current xi:  [79.433586]
objective value function right now is: -1578.6440900448356
24.0% of gradient descent iterations done. Method = Adam
Current xi:  [79.55739]
objective value function right now is: -1580.2264860118344
26.0% of gradient descent iterations done. Method = Adam
Current xi:  [79.32093]
objective value function right now is: -1579.7776894085946
28.000000000000004% of gradient descent iterations done. Method = Adam
Current xi:  [79.04237]
objective value function right now is: -1580.028972919583
30.0% of gradient descent iterations done. Method = Adam
Current xi:  [79.32942]
objective value function right now is: -1574.0287867355726
32.0% of gradient descent iterations done. Method = Adam
Current xi:  [79.36541]
objective value function right now is: -1578.8624455381193
34.0% of gradient descent iterations done. Method = Adam
Current xi:  [78.74758]
objective value function right now is: -1578.1828255025532
36.0% of gradient descent iterations done. Method = Adam
Current xi:  [78.59387]
objective value function right now is: -1573.8568006979042
38.0% of gradient descent iterations done. Method = Adam
new min fval:  -1580.7161206847018
Current xi:  [78.24049]
objective value function right now is: -1580.7161206847018
40.0% of gradient descent iterations done. Method = Adam
new min fval:  -1583.1297395683782
Current xi:  [78.30108]
objective value function right now is: -1583.1297395683782
42.0% of gradient descent iterations done. Method = Adam
Current xi:  [78.1262]
objective value function right now is: -1582.7586819341175
44.0% of gradient descent iterations done. Method = Adam
Current xi:  [77.567894]
objective value function right now is: -1578.038882174462
46.0% of gradient descent iterations done. Method = Adam
Current xi:  [78.0485]
objective value function right now is: -1581.9088559589163
48.0% of gradient descent iterations done. Method = Adam
Current xi:  [78.541534]
objective value function right now is: -1582.6247933062589
50.0% of gradient descent iterations done. Method = Adam
Current xi:  [78.65378]
objective value function right now is: -1580.9131188417105
52.0% of gradient descent iterations done. Method = Adam
Current xi:  [78.768074]
objective value function right now is: -1579.9929333174368
54.0% of gradient descent iterations done. Method = Adam
new min fval:  -1583.2112261126788
Current xi:  [78.82804]
objective value function right now is: -1583.2112261126788
56.00000000000001% of gradient descent iterations done. Method = Adam
new min fval:  -1584.0241015298113
Current xi:  [78.91659]
objective value function right now is: -1584.0241015298113
57.99999999999999% of gradient descent iterations done. Method = Adam
Current xi:  [62.008945]
objective value function right now is: -1540.6550112159987
60.0% of gradient descent iterations done. Method = Adam
Current xi:  [56.81304]
objective value function right now is: -1551.142160314055
62.0% of gradient descent iterations done. Method = Adam
Current xi:  [51.985817]
objective value function right now is: -1550.6588147906632
64.0% of gradient descent iterations done. Method = Adam
Current xi:  [50.490643]
objective value function right now is: -1566.5903677329675
66.0% of gradient descent iterations done. Method = Adam
Current xi:  [50.961243]
objective value function right now is: -1568.7906611133174
68.0% of gradient descent iterations done. Method = Adam
Current xi:  [45.5752]
objective value function right now is: -1569.7418018397052
70.0% of gradient descent iterations done. Method = Adam
Current xi:  [46.605415]
objective value function right now is: -1560.1249669039998
72.0% of gradient descent iterations done. Method = Adam
Current xi:  [46.966324]
objective value function right now is: -1571.989514445881
74.0% of gradient descent iterations done. Method = Adam
Current xi:  [47.48205]
objective value function right now is: -1572.7891777658353
76.0% of gradient descent iterations done. Method = Adam
Current xi:  [47.982426]
objective value function right now is: -1573.1719178818162
78.0% of gradient descent iterations done. Method = Adam
Current xi:  [48.41377]
objective value function right now is: -1573.2765695329385
80.0% of gradient descent iterations done. Method = Adam
Current xi:  [48.905075]
objective value function right now is: -1573.5963882022738
82.0% of gradient descent iterations done. Method = Adam
Current xi:  [49.59105]
objective value function right now is: -1571.7642744148377
84.0% of gradient descent iterations done. Method = Adam
Current xi:  [50.100243]
objective value function right now is: -1572.7297279183658
86.0% of gradient descent iterations done. Method = Adam
Current xi:  [50.63695]
objective value function right now is: -1572.3381850813687
88.0% of gradient descent iterations done. Method = Adam
Current xi:  [51.027023]
objective value function right now is: -1573.4708665942724
90.0% of gradient descent iterations done. Method = Adam
Current xi:  [51.40288]
objective value function right now is: -1574.251476310192
92.0% of gradient descent iterations done. Method = Adam
Current xi:  [51.674377]
objective value function right now is: -1574.3049831290766
94.0% of gradient descent iterations done. Method = Adam
Current xi:  [52.065388]
objective value function right now is: -1573.8089882772747
96.0% of gradient descent iterations done. Method = Adam
Current xi:  [52.367733]
objective value function right now is: -1574.636448197056
98.0% of gradient descent iterations done. Method = Adam
Current xi:  [52.634304]
objective value function right now is: -1574.9284813073202
100.0% of gradient descent iterations done. Method = Adam
Current xi:  [52.724953]
objective value function right now is: -1575.1003177894827
min fval:  -1576.0752395786699
saved model: 
OrderedDict([('0.model.hidden_layer_1.weight', tensor([[-50.9297,  -5.9420],
        [ -1.7255,   1.3905],
        [  3.7139,  -7.8873],
        [ -7.4670,   0.2655],
        [  8.4435,  -3.0162],
        [  7.9581,  -1.6778],
        [  3.1246,  -6.9585],
        [  8.4106,  -1.7614],
        [ -1.5985,  -9.6379],
        [ -2.0548,  -8.0285]])), ('0.model.hidden_layer_1.bias', tensor([-6.2712, -4.1437, -7.6755,  6.2098, -7.2871, -7.4819, -7.1801, -7.6235,
        -8.8481,  4.0023])), ('0.model.hidden_layer_2.weight', tensor([[-7.5009e+00,  2.9710e-02, -8.6132e+00,  5.8686e+00, -7.1350e+00,
         -5.1520e+00, -5.9775e+00, -6.1079e+00, -1.0144e+01,  1.4545e+00],
        [-2.2658e-01, -1.3114e-02, -2.6116e-01, -1.2896e+00, -8.1760e-01,
         -8.2522e-01, -1.9060e-01, -9.0164e-01, -3.7311e-01, -1.3226e+00],
        [ 1.4941e-01,  1.3061e-01,  3.4243e-01,  1.6116e+00,  7.4953e-01,
          7.5921e-01,  2.7485e-01,  8.4538e-01,  3.8867e-01,  1.5197e+00],
        [ 5.1744e+00, -7.0773e-03,  6.8692e+00, -5.6608e+00,  2.5813e+00,
          4.4830e+00,  3.9490e+00,  5.5505e+00,  1.0545e+01, -2.3507e+00],
        [ 1.6504e-01,  1.6146e-01,  3.6303e-01,  1.7892e+00,  8.7581e-01,
          8.9393e-01,  2.8995e-01,  9.9763e-01,  4.1747e-01,  1.6463e+00],
        [-2.2658e-01, -1.3094e-02, -2.6116e-01, -1.2896e+00, -8.1759e-01,
         -8.2522e-01, -1.9060e-01, -9.0163e-01, -3.7310e-01, -1.3226e+00],
        [ 5.6345e+00,  3.6632e-03,  6.9509e+00, -5.8149e+00,  2.8071e+00,
          4.5795e+00,  4.1896e+00,  5.7371e+00,  1.0332e+01, -2.3794e+00],
        [-1.6654e-01, -4.5534e-02, -2.4374e-01, -1.3200e+00, -6.9691e-01,
         -7.5275e-01, -1.8873e-01, -8.3527e-01, -2.7800e-01, -1.1533e+00],
        [-2.2658e-01, -1.3092e-02, -2.6116e-01, -1.2896e+00, -8.1759e-01,
         -8.2522e-01, -1.9060e-01, -9.0163e-01, -3.7310e-01, -1.3226e+00],
        [ 7.1348e+00,  1.4043e-04,  8.6696e+00, -6.0253e+00,  4.7576e+00,
          6.6144e+00,  5.6130e+00,  8.3716e+00,  1.2163e+01, -2.5671e+00]])), ('0.model.hidden_layer_2.bias', tensor([ 3.9115, -2.2606,  2.9195, -4.6776,  3.3467, -2.2606, -4.5697, -2.1203,
        -2.2606, -5.2327])), ('0.model.output_layer_3.weight', tensor([[ 1.1572e+01,  2.9992e-05,  1.3625e+00, -5.3331e+00,  2.7921e+00,
          3.1545e-05, -5.5228e+00,  2.3086e-02,  3.1332e-05, -1.1389e+01]])), ('1.model.hidden_layer_1.weight', tensor([[ 9.3250,  1.8624],
        [ 1.4828, 11.8763],
        [-8.8804, -1.4306],
        [-1.3222,  5.9039],
        [-9.7003, -2.3791],
        [ 1.4315, 10.9659],
        [-9.3064, -2.2845],
        [-9.4249, -2.6613],
        [-7.8264, -2.0303],
        [10.0325,  2.0808]])), ('1.model.hidden_layer_1.bias', tensor([-5.6715,  0.1399,  3.5777,  7.8902, -0.8408, 10.4495, -0.9158, -2.5554,
        -2.5425, -1.7098])), ('1.model.hidden_layer_2.weight', tensor([[-3.7857e+00, -7.6265e-01, -1.2175e+00, -9.9848e-01,  8.2126e-02,
          1.1707e+00,  6.2102e-02,  7.1536e-01,  2.6350e-01, -2.3603e+00],
        [ 1.6546e+00, -7.7288e+00, -1.6173e+01, -3.3834e+00, -1.9251e+00,
          2.0549e+00, -2.0346e+00, -6.0004e-01, -8.1098e-01, -8.8455e-01],
        [-8.9200e-01, -1.7579e+00, -5.7711e+00, -2.9845e+00, -8.1152e-01,
          1.1909e-01, -8.0154e-01, -5.0823e-01, -4.0452e-01, -2.2386e+00],
        [-4.3154e+00, -1.0375e+00, -2.6168e-01, -1.4448e+00,  2.1023e-01,
          2.4403e+00,  2.9077e-01,  2.2374e+00,  1.7615e+00, -2.4911e+00],
        [-7.8690e-01, -2.3625e+00, -8.4962e+00, -3.4761e+00, -1.4453e+00,
          9.8360e-02, -1.4223e+00, -8.3024e-01, -6.9220e-01, -1.5169e+00],
        [-1.9955e+00, -2.4879e+00, -8.9177e-01, -6.4246e-01,  7.9730e-01,
          1.5856e+00,  8.3291e-01,  1.2564e+00,  1.1061e+00, -2.5417e+00],
        [-4.9526e+00, -2.3823e-01, -1.2195e+00, -1.2948e+00,  4.8790e-01,
          2.0114e+00,  4.7466e-01,  1.2986e+00,  7.5162e-01, -1.9830e+00],
        [-3.3573e+00, -3.7362e-02,  4.2474e+00, -4.5449e+00,  6.2896e+00,
         -2.9380e+01,  5.8144e+00,  5.3684e+00,  4.3663e+00, -4.7801e+00],
        [-5.0636e+00,  2.9411e-02,  2.5767e+00, -9.1340e+00,  4.9585e+00,
         -8.6763e+00,  4.7043e+00,  5.3597e+00,  4.3483e+00, -7.8079e+00],
        [ 5.5387e+00, -5.8388e-03, -9.0129e+00,  2.3398e+00, -2.3698e+00,
          3.2145e+01, -2.5487e+00,  4.5909e-01, -1.8235e+00,  1.4785e+00]])), ('1.model.hidden_layer_2.bias', tensor([-4.6124, -2.5821, -3.4484, -3.8514, -3.0332, -4.2928, -4.1645, -0.6284,
        -3.7622, -1.1467])), ('1.model.output_layer_3.weight', tensor([[  1.4086,   3.6613,   1.7299,   2.2806,   2.4271,   1.5500,   2.1151,
          -8.0988,  16.4122,   0.0895],
        [ -1.4862,  -3.6049,  -1.6576,  -2.2842,  -2.4529,  -1.5338,  -1.9840,
           8.1202, -16.2242,  -0.2425]]))])
xi:  [51.40288]
-----------------------------------------------
Selected results: NN-strategy-on-TRAINING dataset (temp implementation
W_T_mean: 815.3622534609776
W_T_median: 404.6610766635989
W_T_pctile_5: 79.25948289461105
W_T_CVAR_5_pct: -42.25858447036321
Average q (qsum/M+1):  52.43453093497984
Optimal xi:  [51.40288]
Observed VAR:  404.6610766635989
Expected(across Rb) median(across samples) p_equity:  0.393632627526919
obj fun:  tensor(-1576.0752, dtype=torch.float64)
-----------------------------------------------
Need to implement this
bond graph is mislabeled!
bond graph is mislabeled!
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_Plot_NN_control_DataHeatmaps.py:161: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format=save_Figures_format, bbox_inches="tight")
/home/marcchen/Documents/testing_pyt_decum/researchcode/fun_output_results_Pctiles.py:176: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.savefig(fig_filename, format = save_Figures_format, bbox_inches = "tight")
-----------------------------------------------
Just FINISHED: 
Asset basket ID: B10_and_VWD
Objective function: mean_cvar_single_level
Tracing param: 1.0
-----------------------------------------------